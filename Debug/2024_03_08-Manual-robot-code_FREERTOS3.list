
2024_03_08-Manual-robot-code_FREERTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013334  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002774  08013508  08013508  00014508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c7c  08015c7c  000170dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015c7c  08015c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c84  08015c84  000170dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015c84  08015c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c8c  08015c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08015c90  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008450  200000e0  08015d6c  000170e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008530  08015d6c  00017530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000170dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025052  00000000  00000000  0001710c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d1  00000000  00000000  0003c15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00040a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001614  00000000  00000000  00042688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc11  00000000  00000000  00043c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bfb  00000000  00000000  0006f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001088e2  00000000  00000000  000904a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008450  00000000  00000000  00198dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001a1220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080134ec 	.word	0x080134ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	080134ec 	.word	0x080134ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c10:	f000 b96a 	b.w	8000ee8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <Driver_Delay_ms>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
void Driver_Delay_ms(unsigned long xms)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f008 fc0d 	bl	8009714 <HAL_Delay>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <LCD_Reset>:
  for (int j = xus; j > 0; j--);
}


static void LCD_Reset(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <LCD_Reset+0x40>)
 8000f10:	f00a f950 	bl	800b1b4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f7ff ffe9 	bl	8000eec <Driver_Delay_ms>
    LCD_RST_0;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f20:	4808      	ldr	r0, [pc, #32]	@ (8000f44 <LCD_Reset+0x40>)
 8000f22:	f00a f947 	bl	800b1b4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000f26:	2032      	movs	r0, #50	@ 0x32
 8000f28:	f7ff ffe0 	bl	8000eec <Driver_Delay_ms>
    LCD_RST_1;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <LCD_Reset+0x40>)
 8000f34:	f00a f93e 	bl	800b1b4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000f38:	2032      	movs	r0, #50	@ 0x32
 8000f3a:	f7ff ffd7 	bl	8000eec <Driver_Delay_ms>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021400 	.word	0x40021400

08000f48 <LCD_SetBackLight>:

 void LCD_SetBackLight()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <LCD_SetBackLight+0x14>)
 8000f52:	f00a f92f 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	@ 0x80
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <LCD_WriteReg+0x3c>)
 8000f70:	f00a f920 	bl	800b1b4 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <LCD_WriteReg+0x40>)
 8000f7a:	f00a f91b 	bl	800b1b4 <HAL_GPIO_WritePin>
//    SPI4W_Write_Byte(Reg);
    HAL_SPI_Transmit(&hspi4, &Reg, 1U, 100U);
 8000f7e:	1df9      	adds	r1, r7, #7
 8000f80:	2364      	movs	r3, #100	@ 0x64
 8000f82:	2201      	movs	r2, #1
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <LCD_WriteReg+0x44>)
 8000f86:	f00b fb40 	bl	800c60a <HAL_SPI_Transmit>
    LCD_CS_1;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <LCD_WriteReg+0x40>)
 8000f90:	f00a f910 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	20000604 	.word	0x20000604

08000fa8 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <LCD_WriteData+0x3c>)
 8000fb8:	f00a f8fc 	bl	800b1b4 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <LCD_WriteData+0x40>)
 8000fc2:	f00a f8f7 	bl	800b1b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, &Data, 1U, 100U);
 8000fc6:	1df9      	adds	r1, r7, #7
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4807      	ldr	r0, [pc, #28]	@ (8000fec <LCD_WriteData+0x44>)
 8000fce:	f00b fb1c 	bl	800c60a <HAL_SPI_Transmit>
//    HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//    SPI4W_Write_Byte(Data >> 8);
//    SPI4W_Write_Byte(Data & 0XFF);
    LCD_CS_1;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <LCD_WriteData+0x40>)
 8000fd8:	f00a f8ec 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	20000604 	.word	0x20000604

08000ff0 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	4815      	ldr	r0, [pc, #84]	@ (8001058 <LCD_Write_AllData+0x68>)
 8001002:	f00a f8d7 	bl	800b1b4 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8001006:	2200      	movs	r2, #0
 8001008:	2110      	movs	r1, #16
 800100a:	4814      	ldr	r0, [pc, #80]	@ (800105c <LCD_Write_AllData+0x6c>)
 800100c:	f00a f8d2 	bl	800b1b4 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e012      	b.n	800103c <LCD_Write_AllData+0x4c>
//        HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);

    	uint8_t data[2];
    	data[0] = Data >> 8;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	723b      	strb	r3, [r7, #8]
    	data[1] = Data;
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	727b      	strb	r3, [r7, #9]

        HAL_SPI_Transmit(&hspi4, (uint8_t *)&data, 2, 1000);
 8001026:	f107 0108 	add.w	r1, r7, #8
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2202      	movs	r2, #2
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <LCD_Write_AllData+0x70>)
 8001032:	f00b faea 	bl	800c60a <HAL_SPI_Transmit>
    for(i = 0; i < DataLen; i++) {
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d3e8      	bcc.n	8001016 <LCD_Write_AllData+0x26>
//        HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 1000);
//        HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//        SPI4W_Write_Byte(Data >> 8);
//        SPI4W_Write_Byte(Data & 0XFF);
    }
    LCD_CS_1;
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <LCD_Write_AllData+0x6c>)
 800104a:	f00a f8b3 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021400 	.word	0x40021400
 800105c:	40021000 	.word	0x40021000
 8001060:	20000604 	.word	0x20000604

08001064 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8001068:	20f9      	movs	r0, #249	@ 0xf9
 800106a:	f7ff ff79 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ff9a 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x08);
 8001074:	2008      	movs	r0, #8
 8001076:	f7ff ff97 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 800107a:	20c0      	movs	r0, #192	@ 0xc0
 800107c:	f7ff ff70 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8001080:	2019      	movs	r0, #25
 8001082:	f7ff ff91 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8001086:	201a      	movs	r0, #26
 8001088:	f7ff ff8e 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 800108c:	20c1      	movs	r0, #193	@ 0xc1
 800108e:	f7ff ff67 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8001092:	2045      	movs	r0, #69	@ 0x45
 8001094:	f7ff ff88 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff85 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 800109e:	20c2      	movs	r0, #194	@ 0xc2
 80010a0:	f7ff ff5e 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x33);
 80010a4:	2033      	movs	r0, #51	@ 0x33
 80010a6:	f7ff ff7f 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 80010aa:	20c5      	movs	r0, #197	@ 0xc5
 80010ac:	f7ff ff58 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff79 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 80010b6:	2028      	movs	r0, #40	@ 0x28
 80010b8:	f7ff ff76 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 80010bc:	20b1      	movs	r0, #177	@ 0xb1
 80010be:	f7ff ff4f 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 80010c2:	20a0      	movs	r0, #160	@ 0xa0
 80010c4:	f7ff ff70 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x11);
 80010c8:	2011      	movs	r0, #17
 80010ca:	f7ff ff6d 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 80010ce:	20b4      	movs	r0, #180	@ 0xb4
 80010d0:	f7ff ff46 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff67 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 80010da:	20b6      	movs	r0, #182	@ 0xb6
 80010dc:	f7ff ff40 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x00);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff61 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 80010e6:	2042      	movs	r0, #66	@ 0x42
 80010e8:	f7ff ff5e 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x3B);
 80010ec:	203b      	movs	r0, #59	@ 0x3b
 80010ee:	f7ff ff5b 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 80010f2:	20b7      	movs	r0, #183	@ 0xb7
 80010f4:	f7ff ff34 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x07);
 80010f8:	2007      	movs	r0, #7
 80010fa:	f7ff ff55 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 80010fe:	20e0      	movs	r0, #224	@ 0xe0
 8001100:	f7ff ff2e 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8001104:	201f      	movs	r0, #31
 8001106:	f7ff ff4f 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x25);
 800110a:	2025      	movs	r0, #37	@ 0x25
 800110c:	f7ff ff4c 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x22);
 8001110:	2022      	movs	r0, #34	@ 0x22
 8001112:	f7ff ff49 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8001116:	200b      	movs	r0, #11
 8001118:	f7ff ff46 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x06);
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff ff43 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0A);
 8001122:	200a      	movs	r0, #10
 8001124:	f7ff ff40 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8001128:	204e      	movs	r0, #78	@ 0x4e
 800112a:	f7ff ff3d 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0xC6);
 800112e:	20c6      	movs	r0, #198	@ 0xc6
 8001130:	f7ff ff3a 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x39);
 8001134:	2039      	movs	r0, #57	@ 0x39
 8001136:	f7ff ff37 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff34 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ff31 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ff2e 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ff2b 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff ff28 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff ff25 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 800115e:	20e1      	movs	r0, #225	@ 0xe1
 8001160:	f7ff fefe 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8001164:	201f      	movs	r0, #31
 8001166:	f7ff ff1f 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800116a:	203f      	movs	r0, #63	@ 0x3f
 800116c:	f7ff ff1c 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8001170:	203f      	movs	r0, #63	@ 0x3f
 8001172:	f7ff ff19 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8001176:	200f      	movs	r0, #15
 8001178:	f7ff ff16 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800117c:	201f      	movs	r0, #31
 800117e:	f7ff ff13 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8001182:	200f      	movs	r0, #15
 8001184:	f7ff ff10 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x46);
 8001188:	2046      	movs	r0, #70	@ 0x46
 800118a:	f7ff ff0d 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x49);
 800118e:	2049      	movs	r0, #73	@ 0x49
 8001190:	f7ff ff0a 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x31);
 8001194:	2031      	movs	r0, #49	@ 0x31
 8001196:	f7ff ff07 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x05);
 800119a:	2005      	movs	r0, #5
 800119c:	f7ff ff04 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x09);
 80011a0:	2009      	movs	r0, #9
 80011a2:	f7ff ff01 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x03);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f7ff fefe 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x1C);
 80011ac:	201c      	movs	r0, #28
 80011ae:	f7ff fefb 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x1A);
 80011b2:	201a      	movs	r0, #26
 80011b4:	f7ff fef8 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fef5 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 80011be:	20f1      	movs	r0, #241	@ 0xf1
 80011c0:	f7ff fece 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x36);
 80011c4:	2036      	movs	r0, #54	@ 0x36
 80011c6:	f7ff feef 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x04);
 80011ca:	2004      	movs	r0, #4
 80011cc:	f7ff feec 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fee9 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x3C);
 80011d6:	203c      	movs	r0, #60	@ 0x3c
 80011d8:	f7ff fee6 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80011dc:	200f      	movs	r0, #15
 80011de:	f7ff fee3 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f7ff fee0 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0xA4);
 80011e8:	20a4      	movs	r0, #164	@ 0xa4
 80011ea:	f7ff fedd 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x02);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f7ff feda 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80011f4:	20f2      	movs	r0, #242	@ 0xf2
 80011f6:	f7ff feb3 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x18);
 80011fa:	2018      	movs	r0, #24
 80011fc:	f7ff fed4 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0xA3);
 8001200:	20a3      	movs	r0, #163	@ 0xa3
 8001202:	f7ff fed1 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x12);
 8001206:	2012      	movs	r0, #18
 8001208:	f7ff fece 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x02);
 800120c:	2002      	movs	r0, #2
 800120e:	f7ff fecb 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x32);
 8001212:	2032      	movs	r0, #50	@ 0x32
 8001214:	f7ff fec8 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x12);
 8001218:	2012      	movs	r0, #18
 800121a:	f7ff fec5 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0xFF);
 800121e:	20ff      	movs	r0, #255	@ 0xff
 8001220:	f7ff fec2 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x32);
 8001224:	2032      	movs	r0, #50	@ 0x32
 8001226:	f7ff febf 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff febc 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 8001230:	20f4      	movs	r0, #244	@ 0xf4
 8001232:	f7ff fe95 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x40);
 8001236:	2040      	movs	r0, #64	@ 0x40
 8001238:	f7ff feb6 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff feb3 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x08);
 8001242:	2008      	movs	r0, #8
 8001244:	f7ff feb0 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x91);
 8001248:	2091      	movs	r0, #145	@ 0x91
 800124a:	f7ff fead 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x04);
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff feaa 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8001254:	20f8      	movs	r0, #248	@ 0xf8
 8001256:	f7ff fe83 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x21);
 800125a:	2021      	movs	r0, #33	@ 0x21
 800125c:	f7ff fea4 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(0x04);
 8001260:	2004      	movs	r0, #4
 8001262:	f7ff fea1 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8001266:	203a      	movs	r0, #58	@ 0x3a
 8001268:	f7ff fe7a 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0x55);
 800126c:	2055      	movs	r0, #85	@ 0x55
 800126e:	f7ff fe9b 	bl	8000fa8 <LCD_WriteData>

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8001282:	2300      	movs	r3, #0
 8001284:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8001286:	2300      	movs	r3, #0
 8001288:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b07      	cmp	r3, #7
 800128e:	d83b      	bhi.n	8001308 <LCD_SetGramScanWay+0x90>
 8001290:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <LCD_SetGramScanWay+0x20>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012b9 	.word	0x080012b9
 800129c:	080012c3 	.word	0x080012c3
 80012a0:	080012cd 	.word	0x080012cd
 80012a4:	080012d7 	.word	0x080012d7
 80012a8:	080012e1 	.word	0x080012e1
 80012ac:	080012eb 	.word	0x080012eb
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	080012ff 	.word	0x080012ff
    case L2R_U2D:                       // Rotation=        0
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80012b8:	2308      	movs	r3, #8
 80012ba:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=1, GS=0
 80012bc:	2322      	movs	r3, #34	@ 0x22
 80012be:	81bb      	strh	r3, [r7, #12]
        break;
 80012c0:	e022      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80012c2:	2308      	movs	r3, #8
 80012c4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80012c6:	2362      	movs	r3, #98	@ 0x62
 80012c8:	81bb      	strh	r3, [r7, #12]
        break;
 80012ca:	e01d      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80012cc:	2308      	movs	r3, #8
 80012ce:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80012d0:	2302      	movs	r3, #2
 80012d2:	81bb      	strh	r3, [r7, #12]
        break;
 80012d4:	e018      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC                 // Rotation=        2
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80012d6:	2308      	movs	r3, #8
 80012d8:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=1
 80012da:	2342      	movs	r3, #66	@ 0x42
 80012dc:	81bb      	strh	r3, [r7, #12]
        break;
 80012de:	e013      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80012e0:	2328      	movs	r3, #40	@ 0x28
 80012e2:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80012e4:	2322      	movs	r3, #34	@ 0x22
 80012e6:	81bb      	strh	r3, [r7, #12]
        break;
 80012e8:	e00e      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6                 // Rotation=        1
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80012ea:	2328      	movs	r3, #40	@ 0x28
 80012ec:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=0
 80012ee:	2302      	movs	r3, #2
 80012f0:	81bb      	strh	r3, [r7, #12]
        break;
 80012f2:	e009      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA                 // Rotation=        3
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80012f4:	2328      	movs	r3, #40	@ 0x28
 80012f6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;          // DISPFUNCCTRL:    ISC='b0010, SM=0, SS=1, GS=1
 80012f8:	2362      	movs	r3, #98	@ 0x62
 80012fa:	81bb      	strh	r3, [r7, #12]
        break;
 80012fc:	e004      	b.n	8001308 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;    // MADCTL: BGR | MV
 80012fe:	2328      	movs	r3, #40	@ 0x28
 8001300:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8001302:	2342      	movs	r3, #66	@ 0x42
 8001304:	81bb      	strh	r3, [r7, #12]
        break;
 8001306:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <LCD_SetGramScanWay+0x100>)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <LCD_SetGramScanWay+0xae>
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <LCD_SetGramScanWay+0xae>
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d002      	beq.n	8001326 <LCD_SetGramScanWay+0xae>
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d108      	bne.n	8001338 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <LCD_SetGramScanWay+0x100>)
 8001328:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800132c:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <LCD_SetGramScanWay+0x100>)
 8001330:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001334:	805a      	strh	r2, [r3, #2]
 8001336:	e007      	b.n	8001348 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <LCD_SetGramScanWay+0x100>)
 800133a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800133e:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <LCD_SetGramScanWay+0x100>)
 8001342:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001346:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8001348:	20b6      	movs	r0, #182	@ 0xb6
 800134a:	f7ff fe09 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(0X00);
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fe2a 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe25 	bl	8000fa8 <LCD_WriteData>

    LCD_WriteReg(0x36);
 800135e:	2036      	movs	r0, #54	@ 0x36
 8001360:	f7ff fdfe 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe1d 	bl	8000fa8 <LCD_WriteData>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000fc 	.word	0x200000fc

0800137c <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 800138c:	f7ff fdba 	bl	8000f04 <LCD_Reset>
    
    if(LCD_BLval > 255)
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	2bff      	cmp	r3, #255	@ 0xff
 8001394:	d901      	bls.n	800139a <LCD_Init+0x1e>
        LCD_BLval = 255;
 8001396:	23ff      	movs	r3, #255	@ 0xff
 8001398:	80bb      	strh	r3, [r7, #4]
    LCD_SetBackLight(LCD_BLval);
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdd3 	bl	8000f48 <LCD_SetBackLight>
    
    //Set the initialization register
    LCD_InitReg();
 80013a2:	f7ff fe5f 	bl	8001064 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff65 	bl	8001278 <LCD_SetGramScanWay>
    Driver_Delay_ms(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fd9c 	bl	8000eec <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 80013b4:	2011      	movs	r0, #17
 80013b6:	f7ff fdd3 	bl	8000f60 <LCD_WriteReg>
    Driver_Delay_ms(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fd96 	bl	8000eec <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 80013c0:	2029      	movs	r0, #41	@ 0x29
 80013c2:	f7ff fdcd 	bl	8000f60 <LCD_WriteReg>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 80013ce:	b590      	push	{r4, r7, lr}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4604      	mov	r4, r0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4603      	mov	r3, r0
 80013e2:	80bb      	strh	r3, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 80013ec:	202a      	movs	r0, #42	@ 0x2a
 80013ee:	f7ff fdb7 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fdd4 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fdcf 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	3b01      	subs	r3, #1
 800140e:	121b      	asrs	r3, r3, #8
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdc8 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fdc1 	bl	8000fa8 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 8001426:	202b      	movs	r0, #43	@ 0x2b
 8001428:	f7ff fd9a 	bl	8000f60 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29b      	uxth	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fdb7 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdb2 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 8001444:	883b      	ldrh	r3, [r7, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fdab 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fda4 	bl	8000fa8 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8001460:	202c      	movs	r0, #44	@ 0x2c
 8001462:	f7ff fd7d 	bl	8000f60 <LCD_WriteReg>
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}

0800146e <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	460a      	mov	r2, r1
 8001478:	80fb      	strh	r3, [r7, #6]
 800147a:	4613      	mov	r3, r2
 800147c:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	88b9      	ldrh	r1, [r7, #4]
 8001484:	88f8      	ldrh	r0, [r7, #6]
 8001486:	f7ff ffa2 	bl	80013ce <LCD_SetWindow>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	460b      	mov	r3, r1
 800149e:	80bb      	strh	r3, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd9d 	bl	8000ff0 <LCD_Write_AllData>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	460b      	mov	r3, r1
 80014cc:	80bb      	strh	r3, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <LCD_SetPointlColor+0x48>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d810      	bhi.n	80014fe <LCD_SetPointlColor+0x3e>
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <LCD_SetPointlColor+0x48>)
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d80b      	bhi.n	80014fe <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 80014e6:	88ba      	ldrh	r2, [r7, #4]
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ffbe 	bl	800146e <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	2201      	movs	r2, #1
 80014f6:	2101      	movs	r1, #1
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ffca 	bl	8001492 <LCD_SetColor>
    }
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200000fc 	.word	0x200000fc

0800150c <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4623      	mov	r3, r4
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	4603      	mov	r3, r0
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	429a      	cmp	r2, r3
 8001530:	d915      	bls.n	800155e <LCD_SetArealColor+0x52>
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d911      	bls.n	800155e <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 800153a:	883b      	ldrh	r3, [r7, #0]
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	88b9      	ldrh	r1, [r7, #4]
 8001540:	88f8      	ldrh	r0, [r7, #6]
 8001542:	f7ff ff44 	bl	80013ce <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b299      	uxth	r1, r3
 800154e:	883a      	ldrh	r2, [r7, #0]
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b29a      	uxth	r2, r3
 8001556:	8b3b      	ldrh	r3, [r7, #24]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff9a 	bl	8001492 <LCD_SetColor>
    }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
	...

08001568 <LCD_Clear>:

void LCD_Clear(COLOR  Color)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af02      	add	r7, sp, #8
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <LCD_Clear+0x28>)
 8001574:	881a      	ldrh	r2, [r3, #0]
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <LCD_Clear+0x28>)
 8001578:	8859      	ldrh	r1, [r3, #2]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ffc2 	bl	800150c <LCD_SetArealColor>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000fc 	.word	0x200000fc

08001594 <GUI_Swop>:
/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	80fb      	strh	r3, [r7, #6]
 80015a0:	4613      	mov	r3, r2
 80015a2:	80bb      	strh	r3, [r7, #4]
  POINT Temp;
  Temp = Point1;
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	81fb      	strh	r3, [r7, #14]
  Point1 = Point2;
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	80fb      	strh	r3, [r7, #6]
  Point2 = Temp;
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	80bb      	strh	r3, [r7, #4]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <GUI_DrawPoint>:
  Color     :   Set color
  Dot_Pixel :   point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4623      	mov	r3, r4
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4603      	mov	r3, r0
 80015d0:	80bb      	strh	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	707b      	strb	r3, [r7, #1]
  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80015da:	4b3a      	ldr	r3, [pc, #232]	@ (80016c4 <GUI_DrawPoint+0x108>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	88fa      	ldrh	r2, [r7, #6]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d86a      	bhi.n	80016ba <GUI_DrawPoint+0xfe>
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <GUI_DrawPoint+0x108>)
 80015e6:	885b      	ldrh	r3, [r3, #2]
 80015e8:	88ba      	ldrh	r2, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d865      	bhi.n	80016ba <GUI_DrawPoint+0xfe>
//    DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
    return;
  }

  int16_t XDir_Num , YDir_Num;
  if (DOT_STYLE == DOT_STYLE_DFT) {
 80015ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d138      	bne.n	8001668 <GUI_DrawPoint+0xac>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	81fb      	strh	r3, [r7, #14]
 80015fa:	e02d      	b.n	8001658 <GUI_DrawPoint+0x9c>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	81bb      	strh	r3, [r7, #12]
 8001600:	e01d      	b.n	800163e <GUI_DrawPoint+0x82>
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel + 1, Ypoint + YDir_Num - Dot_Pixel + 1, Color);
 8001602:	89fa      	ldrh	r2, [r7, #14]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	4413      	add	r3, r2
 8001608:	b29a      	uxth	r2, r3
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	b29b      	uxth	r3, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b29b      	uxth	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b298      	uxth	r0, r3
 8001616:	89ba      	ldrh	r2, [r7, #12]
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	b29a      	uxth	r2, r3
 800161e:	787b      	ldrb	r3, [r7, #1]
 8001620:	b29b      	uxth	r3, r3
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	3301      	adds	r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff ff47 	bl	80014c0 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001632:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b29b      	uxth	r3, r3
 800163c:	81bb      	strh	r3, [r7, #12]
 800163e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001642:	787b      	ldrb	r3, [r7, #1]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	429a      	cmp	r2, r3
 800164a:	dbda      	blt.n	8001602 <GUI_DrawPoint+0x46>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800164c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001650:	b29b      	uxth	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	81fb      	strh	r3, [r7, #14]
 8001658:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	3b01      	subs	r3, #1
 8001662:	429a      	cmp	r2, r3
 8001664:	dbca      	blt.n	80015fc <GUI_DrawPoint+0x40>
 8001666:	e029      	b.n	80016bc <GUI_DrawPoint+0x100>
      }
    }
  } else {
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001668:	2300      	movs	r3, #0
 800166a:	81fb      	strh	r3, [r7, #14]
 800166c:	e01f      	b.n	80016ae <GUI_DrawPoint+0xf2>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800166e:	2300      	movs	r3, #0
 8001670:	81bb      	strh	r3, [r7, #12]
 8001672:	e011      	b.n	8001698 <GUI_DrawPoint+0xdc>
        //CAL! The following appears to have a bug that causes the Xpoint to be
        //CAL! shifted by -1 and the Ypoint to be shifted by -1. The net result
        //CAL! is that attempts to write to X=0 or Y=0 will cause an underflow,
        //CAL! leading to a Column/Page Address out of bounds.
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
 8001674:	89fa      	ldrh	r2, [r7, #14]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4413      	add	r3, r2
 800167a:	b298      	uxth	r0, r3
 800167c:	89ba      	ldrh	r2, [r7, #12]
 800167e:	88bb      	ldrh	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff ff1a 	bl	80014c0 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800168c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001690:	b29b      	uxth	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b29b      	uxth	r3, r3
 8001696:	81bb      	strh	r3, [r7, #12]
 8001698:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbe8      	blt.n	8001674 <GUI_DrawPoint+0xb8>
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbda      	blt.n	800166e <GUI_DrawPoint+0xb2>
 80016b8:	e000      	b.n	80016bc <GUI_DrawPoint+0x100>
    return;
 80016ba:	bf00      	nop
      }
    }
  }
}
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200000fc 	.word	0x200000fc

080016c8 <GUI_DrawLine>:
  Yend   ：End point y coordinate
  Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08d      	sub	sp, #52	@ 0x34
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	4603      	mov	r3, r0
 80016dc:	80bb      	strh	r3, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
 80016e2:	4613      	mov	r3, r2
 80016e4:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80016e6:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <GUI_DrawLine+0x178>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f200 809e 	bhi.w	800182e <GUI_DrawLine+0x166>
 80016f2:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <GUI_DrawLine+0x178>)
 80016f4:	885b      	ldrh	r3, [r3, #2]
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f200 8098 	bhi.w	800182e <GUI_DrawLine+0x166>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80016fe:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <GUI_DrawLine+0x178>)
 8001700:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	429a      	cmp	r2, r3
 8001706:	f200 8092 	bhi.w	800182e <GUI_DrawLine+0x166>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800170a:	4b4d      	ldr	r3, [pc, #308]	@ (8001840 <GUI_DrawLine+0x178>)
 800170c:	885b      	ldrh	r3, [r3, #2]
 800170e:	883a      	ldrh	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	f200 808c 	bhi.w	800182e <GUI_DrawLine+0x166>
//    DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	429a      	cmp	r2, r3
 800171c:	d905      	bls.n	800172a <GUI_DrawLine+0x62>
    GUI_Swop(Xstart, Xend);
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff35 	bl	8001594 <GUI_Swop>
  if (Ystart > Yend)
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	883b      	ldrh	r3, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d905      	bls.n	800173e <GUI_DrawLine+0x76>
    GUI_Swop(Ystart, Yend);
 8001732:	883a      	ldrh	r2, [r7, #0]
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff2b 	bl	8001594 <GUI_Swop>

  POINT Xpoint = Xstart;
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	84fb      	strh	r3, [r7, #38]	@ 0x26
  POINT Ypoint = Ystart;
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	bfb8      	it	lt
 8001750:	425b      	neglt	r3, r3
 8001752:	61bb      	str	r3, [r7, #24]
  int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001754:	883a      	ldrh	r2, [r7, #0]
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	bfb8      	it	lt
 800175e:	425b      	neglt	r3, r3
 8001760:	425b      	negs	r3, r3
 8001762:	617b      	str	r3, [r7, #20]

  // Increment direction, 1 is positive, -1 is counter;
  int XAddway = Xstart < Xend ? 1 : -1;
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	429a      	cmp	r2, r3
 800176a:	d201      	bcs.n	8001770 <GUI_DrawLine+0xa8>
 800176c:	2301      	movs	r3, #1
 800176e:	e001      	b.n	8001774 <GUI_DrawLine+0xac>
 8001770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001774:	613b      	str	r3, [r7, #16]
  int YAddway = Ystart < Yend ? 1 : -1;
 8001776:	88ba      	ldrh	r2, [r7, #4]
 8001778:	883b      	ldrh	r3, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d201      	bcs.n	8001782 <GUI_DrawLine+0xba>
 800177e:	2301      	movs	r3, #1
 8001780:	e001      	b.n	8001786 <GUI_DrawLine+0xbe>
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001786:	60fb      	str	r3, [r7, #12]

  //Cumulative error
  int Esp = dx + dy;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4413      	add	r3, r2
 800178e:	623b      	str	r3, [r7, #32]
  char Line_Style_Temp = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]

  for (;;) {
    Line_Style_Temp++;
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	3301      	adds	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
    //Painted dotted line, 2 point is really virtual
    if (Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 800179a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d117      	bne.n	80017d2 <GUI_DrawLine+0x10a>
 80017a2:	7ffa      	ldrb	r2, [r7, #31]
 80017a4:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <GUI_DrawLine+0x17c>)
 80017a6:	fba3 1302 	umull	r1, r3, r3, r2
 80017aa:	0859      	lsrs	r1, r3, #1
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10b      	bne.n	80017d2 <GUI_DrawLine+0x10a>
      //DEBUG("LINE_DOTTED\r\n");
      GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 80017ba:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80017be:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80017c0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80017c2:	2201      	movs	r2, #1
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f7ff fef8 	bl	80015bc <GUI_DrawPoint>
      Line_Style_Temp = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
 80017d0:	e008      	b.n	80017e4 <GUI_DrawLine+0x11c>
    } else {
      GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 80017d2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80017d6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80017d8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80017da:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80017dc:	2401      	movs	r4, #1
 80017de:	9400      	str	r4, [sp, #0]
 80017e0:	f7ff feec 	bl	80015bc <GUI_DrawPoint>
    }
    if (2 * Esp >= dy) {
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dc0c      	bgt.n	8001808 <GUI_DrawLine+0x140>
      if (Xpoint == Xend) break;
 80017ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d01d      	beq.n	8001832 <GUI_DrawLine+0x16a>
      Esp += dy;
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4413      	add	r3, r2
 80017fc:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	b29a      	uxth	r2, r3
 8001802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001804:	4413      	add	r3, r2
 8001806:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx) {
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbc0      	blt.n	8001794 <GUI_DrawLine+0xcc>
      if (Ypoint == Yend) break;
 8001812:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001814:	883b      	ldrh	r3, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d00d      	beq.n	8001836 <GUI_DrawLine+0x16e>
      Esp += dx;
 800181a:	6a3a      	ldr	r2, [r7, #32]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	b29a      	uxth	r2, r3
 8001826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001828:	4413      	add	r3, r2
 800182a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Line_Style_Temp++;
 800182c:	e7b2      	b.n	8001794 <GUI_DrawLine+0xcc>
    return;
 800182e:	bf00      	nop
 8001830:	e002      	b.n	8001838 <GUI_DrawLine+0x170>
      if (Xpoint == Xend) break;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <GUI_DrawLine+0x170>
      if (Ypoint == Yend) break;
 8001836:	bf00      	nop
    }
  }
}
 8001838:	372c      	adds	r7, #44	@ 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	200000fc 	.word	0x200000fc
 8001844:	aaaaaaab 	.word	0xaaaaaaab

08001848 <GUI_DrawRectangle>:
  Color  ：The color of the Rectangular segment
  Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af04      	add	r7, sp, #16
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8001866:	4b39      	ldr	r3, [pc, #228]	@ (800194c <GUI_DrawRectangle+0x104>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	429a      	cmp	r2, r3
 800186e:	d868      	bhi.n	8001942 <GUI_DrawRectangle+0xfa>
 8001870:	4b36      	ldr	r3, [pc, #216]	@ (800194c <GUI_DrawRectangle+0x104>)
 8001872:	885b      	ldrh	r3, [r3, #2]
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d863      	bhi.n	8001942 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <GUI_DrawRectangle+0x104>)
 800187c:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	429a      	cmp	r2, r3
 8001882:	d85e      	bhi.n	8001942 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8001884:	4b31      	ldr	r3, [pc, #196]	@ (800194c <GUI_DrawRectangle+0x104>)
 8001886:	885b      	ldrh	r3, [r3, #2]
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d859      	bhi.n	8001942 <GUI_DrawRectangle+0xfa>
//    DEBUG("Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	429a      	cmp	r2, r3
 8001894:	d905      	bls.n	80018a2 <GUI_DrawRectangle+0x5a>
    GUI_Swop(Xstart, Xend);
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe79 	bl	8001594 <GUI_Swop>
  if (Ystart > Yend)
 80018a2:	88ba      	ldrh	r2, [r7, #4]
 80018a4:	883b      	ldrh	r3, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d905      	bls.n	80018b6 <GUI_DrawRectangle+0x6e>
    GUI_Swop(Ystart, Yend);
 80018aa:	883a      	ldrh	r2, [r7, #0]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe6f 	bl	8001594 <GUI_Swop>

  if (Filled ) {
 80018b6:	7f3b      	ldrb	r3, [r7, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <GUI_DrawRectangle+0x88>
    POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
  #elif HIGH_Speed_Show
    LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 80018bc:	883c      	ldrh	r4, [r7, #0]
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	88b9      	ldrh	r1, [r7, #4]
 80018c2:	88f8      	ldrh	r0, [r7, #6]
 80018c4:	8b3b      	ldrh	r3, [r7, #24]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4623      	mov	r3, r4
 80018ca:	f7ff fe1f 	bl	800150c <LCD_SetArealColor>
 80018ce:	e039      	b.n	8001944 <GUI_DrawRectangle+0xfc>
  #endif
  } else {
    GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80018d0:	88bc      	ldrh	r4, [r7, #4]
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	88b9      	ldrh	r1, [r7, #4]
 80018d6:	88f8      	ldrh	r0, [r7, #6]
 80018d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	8b3b      	ldrh	r3, [r7, #24]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4623      	mov	r3, r4
 80018e8:	f7ff feee 	bl	80016c8 <GUI_DrawLine>
    GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 80018ec:	883c      	ldrh	r4, [r7, #0]
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	88b9      	ldrh	r1, [r7, #4]
 80018f2:	88f8      	ldrh	r0, [r7, #6]
 80018f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	2300      	movs	r3, #0
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	8b3b      	ldrh	r3, [r7, #24]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4623      	mov	r3, r4
 8001904:	f7ff fee0 	bl	80016c8 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001908:	88bc      	ldrh	r4, [r7, #4]
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	8839      	ldrh	r1, [r7, #0]
 800190e:	8878      	ldrh	r0, [r7, #2]
 8001910:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	8b3b      	ldrh	r3, [r7, #24]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4623      	mov	r3, r4
 8001920:	f7ff fed2 	bl	80016c8 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001924:	883c      	ldrh	r4, [r7, #0]
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	8839      	ldrh	r1, [r7, #0]
 800192a:	8878      	ldrh	r0, [r7, #2]
 800192c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	2300      	movs	r3, #0
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	8b3b      	ldrh	r3, [r7, #24]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4623      	mov	r3, r4
 800193c:	f7ff fec4 	bl	80016c8 <GUI_DrawLine>
 8001940:	e000      	b.n	8001944 <GUI_DrawRectangle+0xfc>
    return;
 8001942:	bf00      	nop
  }
}
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	bf00      	nop
 800194c:	200000fc 	.word	0x200000fc

08001950 <GUI_DrawCircle>:
  Color     : The color of the ：circle segment
  Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void GUI_DrawCircle(POINT X_Center, POINT Y_Center, LENGTH Radius,
                    COLOR Color, DRAW_FILL  Draw_Fill , DOT_PIXEL Dot_Pixel)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af02      	add	r7, sp, #8
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
  if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 800196e:	4b66      	ldr	r3, [pc, #408]	@ (8001b08 <GUI_DrawCircle+0x1b8>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	88fa      	ldrh	r2, [r7, #6]
 8001974:	429a      	cmp	r2, r3
 8001976:	f200 8171 	bhi.w	8001c5c <GUI_DrawCircle+0x30c>
 800197a:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <GUI_DrawCircle+0x1b8>)
 800197c:	885b      	ldrh	r3, [r3, #2]
 800197e:	88ba      	ldrh	r2, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	f080 816b 	bcs.w	8001c5c <GUI_DrawCircle+0x30c>
    return;
  }

  //Draw a circle from(0, R) as a starting point
  int16_t XCurrent, YCurrent;
  XCurrent = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	81fb      	strh	r3, [r7, #14]
  YCurrent = Radius;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	81bb      	strh	r3, [r7, #12]

  //Cumulative error,judge the next point of the logo
  int16_t Esp = 3 - (Radius << 1 );
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	b29b      	uxth	r3, r3
 8001994:	f1c3 0303 	rsb	r3, r3, #3
 8001998:	b29b      	uxth	r3, r3
 800199a:	817b      	strh	r3, [r7, #10]

  int16_t sCountY;
  if (Draw_Fill == DRAW_FULL) {
 800199c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 8153 	bne.w	8001c4c <GUI_DrawCircle+0x2fc>
    while (XCurrent <= YCurrent ) { //Realistic circles
 80019a6:	e0a6      	b.n	8001af6 <GUI_DrawCircle+0x1a6>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	813b      	strh	r3, [r7, #8]
 80019ac:	e075      	b.n	8001a9a <GUI_DrawCircle+0x14a>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//1
 80019ae:	89fa      	ldrh	r2, [r7, #14]
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4413      	add	r3, r2
 80019b4:	b298      	uxth	r0, r3
 80019b6:	893a      	ldrh	r2, [r7, #8]
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	b299      	uxth	r1, r3
 80019be:	883a      	ldrh	r2, [r7, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	f7ff fdf9 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//2
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b298      	uxth	r0, r3
 80019d2:	893a      	ldrh	r2, [r7, #8]
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	b299      	uxth	r1, r3
 80019da:	883a      	ldrh	r2, [r7, #0]
 80019dc:	2301      	movs	r3, #1
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	f7ff fdeb 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//3
 80019e6:	893b      	ldrh	r3, [r7, #8]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	b298      	uxth	r0, r3
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	b299      	uxth	r1, r3
 80019f6:	883a      	ldrh	r2, [r7, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	f7ff fddd 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//4
 8001a02:	893b      	ldrh	r3, [r7, #8]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b298      	uxth	r0, r3
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	b299      	uxth	r1, r3
 8001a12:	883a      	ldrh	r2, [r7, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f7ff fdcf 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//5
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b298      	uxth	r0, r3
 8001a26:	893b      	ldrh	r3, [r7, #8]
 8001a28:	88ba      	ldrh	r2, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b299      	uxth	r1, r3
 8001a2e:	883a      	ldrh	r2, [r7, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	f7ff fdc1 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//6
 8001a3a:	89fa      	ldrh	r2, [r7, #14]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b298      	uxth	r0, r3
 8001a42:	893b      	ldrh	r3, [r7, #8]
 8001a44:	88ba      	ldrh	r2, [r7, #4]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	883a      	ldrh	r2, [r7, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	f7ff fdb3 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//7
 8001a56:	893a      	ldrh	r2, [r7, #8]
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	88ba      	ldrh	r2, [r7, #4]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	b299      	uxth	r1, r3
 8001a66:	883a      	ldrh	r2, [r7, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f7ff fda5 	bl	80015bc <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );
 8001a72:	893a      	ldrh	r2, [r7, #8]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4413      	add	r3, r2
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	89fa      	ldrh	r2, [r7, #14]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b299      	uxth	r1, r3
 8001a82:	883a      	ldrh	r2, [r7, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f7ff fd97 	bl	80015bc <GUI_DrawPoint>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001a8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	813b      	strh	r3, [r7, #8]
 8001a9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dd83      	ble.n	80019ae <GUI_DrawCircle+0x5e>
      }
      if (Esp < 0 )
 8001aa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	da09      	bge.n	8001ac2 <GUI_DrawCircle+0x172>
        Esp += 4 * XCurrent + 6;
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3306      	adds	r3, #6
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	817b      	strh	r3, [r7, #10]
 8001ac0:	e013      	b.n	8001aea <GUI_DrawCircle+0x19a>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 8001ac2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ac6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	897b      	ldrh	r3, [r7, #10]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	330a      	adds	r3, #10
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001ade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 8001aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) { //Realistic circles
 8001af6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001afa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	f77f af52 	ble.w	80019a8 <GUI_DrawCircle+0x58>
 8001b04:	e0ab      	b.n	8001c5e <GUI_DrawCircle+0x30e>
 8001b06:	bf00      	nop
 8001b08:	200000fc 	.word	0x200000fc
    }
  } else { //Draw a hollow circle
    while (XCurrent <= YCurrent ) {
      GUI_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//1
 8001b0c:	89fa      	ldrh	r2, [r7, #14]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4413      	add	r3, r2
 8001b12:	b298      	uxth	r0, r3
 8001b14:	89ba      	ldrh	r2, [r7, #12]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b20:	883a      	ldrh	r2, [r7, #0]
 8001b22:	2401      	movs	r4, #1
 8001b24:	9400      	str	r4, [sp, #0]
 8001b26:	f7ff fd49 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//2
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	88fa      	ldrh	r2, [r7, #6]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b298      	uxth	r0, r3
 8001b32:	89ba      	ldrh	r2, [r7, #12]
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b3e:	883a      	ldrh	r2, [r7, #0]
 8001b40:	2401      	movs	r4, #1
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	f7ff fd3a 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//3
 8001b48:	89bb      	ldrh	r3, [r7, #12]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	89fa      	ldrh	r2, [r7, #14]
 8001b52:	88bb      	ldrh	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	b299      	uxth	r1, r3
 8001b58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b5c:	883a      	ldrh	r2, [r7, #0]
 8001b5e:	2401      	movs	r4, #1
 8001b60:	9400      	str	r4, [sp, #0]
 8001b62:	f7ff fd2b 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//4
 8001b66:	89bb      	ldrh	r3, [r7, #12]
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b298      	uxth	r0, r3
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	88ba      	ldrh	r2, [r7, #4]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b299      	uxth	r1, r3
 8001b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b7a:	883a      	ldrh	r2, [r7, #0]
 8001b7c:	2401      	movs	r4, #1
 8001b7e:	9400      	str	r4, [sp, #0]
 8001b80:	f7ff fd1c 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//5
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	89bb      	ldrh	r3, [r7, #12]
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	b299      	uxth	r1, r3
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b98:	883a      	ldrh	r2, [r7, #0]
 8001b9a:	2401      	movs	r4, #1
 8001b9c:	9400      	str	r4, [sp, #0]
 8001b9e:	f7ff fd0d 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//6
 8001ba2:	89fa      	ldrh	r2, [r7, #14]
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b298      	uxth	r0, r3
 8001baa:	89bb      	ldrh	r3, [r7, #12]
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bb6:	883a      	ldrh	r2, [r7, #0]
 8001bb8:	2401      	movs	r4, #1
 8001bba:	9400      	str	r4, [sp, #0]
 8001bbc:	f7ff fcfe 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//7
 8001bc0:	89ba      	ldrh	r2, [r7, #12]
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	88ba      	ldrh	r2, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bd4:	883a      	ldrh	r2, [r7, #0]
 8001bd6:	2401      	movs	r4, #1
 8001bd8:	9400      	str	r4, [sp, #0]
 8001bda:	f7ff fcef 	bl	80015bc <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//0
 8001bde:	89ba      	ldrh	r2, [r7, #12]
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4413      	add	r3, r2
 8001be4:	b298      	uxth	r0, r3
 8001be6:	89fa      	ldrh	r2, [r7, #14]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	2401      	movs	r4, #1
 8001bf6:	9400      	str	r4, [sp, #0]
 8001bf8:	f7ff fce0 	bl	80015bc <GUI_DrawPoint>

      if (Esp < 0 )
 8001bfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da09      	bge.n	8001c18 <GUI_DrawCircle+0x2c8>
        Esp += 4 * XCurrent + 6;
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3306      	adds	r3, #6
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	817b      	strh	r3, [r7, #10]
 8001c16:	e013      	b.n	8001c40 <GUI_DrawCircle+0x2f0>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 8001c18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	330a      	adds	r3, #10
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001c34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 8001c40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) {
 8001c4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f77f af59 	ble.w	8001b0c <GUI_DrawCircle+0x1bc>
 8001c5a:	e000      	b.n	8001c5e <GUI_DrawCircle+0x30e>
    return;
 8001c5c:	bf00      	nop
    }
  }
}
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <GUI_DisChar>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	81fb      	strh	r3, [r7, #14]
 8001c70:	460b      	mov	r3, r1
 8001c72:	81bb      	strh	r3, [r7, #12]
 8001c74:	4613      	mov	r3, r2
 8001c76:	72fb      	strb	r3, [r7, #11]
  POINT Page, Column;

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <GUI_DisChar+0x158>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	89fa      	ldrh	r2, [r7, #14]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	f200 8097 	bhi.w	8001db2 <GUI_DisChar+0x14e>
 8001c84:	4b4d      	ldr	r3, [pc, #308]	@ (8001dbc <GUI_DisChar+0x158>)
 8001c86:	885b      	ldrh	r3, [r3, #2]
 8001c88:	89ba      	ldrh	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	f200 8091 	bhi.w	8001db2 <GUI_DisChar+0x14e>
//    DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
    return;
  }

  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	3b20      	subs	r3, #32
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	88d2      	ldrh	r2, [r2, #6]
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	8892      	ldrh	r2, [r2, #4]
 8001ca0:	08d2      	lsrs	r2, r2, #3
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	8892      	ldrh	r2, [r2, #4]
 8001caa:	f002 0207 	and.w	r2, r2, #7
 8001cae:	b292      	uxth	r2, r2
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2201      	movne	r2, #1
 8001cb6:	2200      	moveq	r2, #0
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440a      	add	r2, r1
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
  const unsigned char *ptr = &Font->table[Char_Offset];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	4413      	add	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

  for (Page = 0; Page < Font->Height; Page ++ ) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83fb      	strh	r3, [r7, #30]
 8001cd0:	e069      	b.n	8001da6 <GUI_DisChar+0x142>
    for (Column = 0; Column < Font->Width; Column ++ ) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	83bb      	strh	r3, [r7, #28]
 8001cd6:	e054      	b.n	8001d82 <GUI_DisChar+0x11e>

      //To determine whether the font background color and screen background color is consistent
      if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001cd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d11a      	bne.n	8001d18 <GUI_DisChar+0xb4>
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8)))
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	8bbb      	ldrh	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	2280      	movs	r2, #128	@ 0x80
 8001cf0:	fa42 f303 	asr.w	r3, r2, r3
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d037      	beq.n	8001d6a <GUI_DisChar+0x106>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001cfa:	89fa      	ldrh	r2, [r7, #14]
 8001cfc:	8bbb      	ldrh	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	b298      	uxth	r0, r3
 8001d02:	89ba      	ldrh	r2, [r7, #12]
 8001d04:	8bfb      	ldrh	r3, [r7, #30]
 8001d06:	4413      	add	r3, r2
 8001d08:	b299      	uxth	r1, r3
 8001d0a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	f7ff fc53 	bl	80015bc <GUI_DrawPoint>
 8001d16:	e028      	b.n	8001d6a <GUI_DisChar+0x106>
      } else {
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8))) {
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	fa42 f303 	asr.w	r3, r2, r3
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <GUI_DisChar+0xea>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001d30:	89fa      	ldrh	r2, [r7, #14]
 8001d32:	8bbb      	ldrh	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	b298      	uxth	r0, r3
 8001d38:	89ba      	ldrh	r2, [r7, #12]
 8001d3a:	8bfb      	ldrh	r3, [r7, #30]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d42:	2301      	movs	r3, #1
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	f7ff fc38 	bl	80015bc <GUI_DrawPoint>
 8001d4c:	e00d      	b.n	8001d6a <GUI_DisChar+0x106>
        } else {
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001d4e:	89fa      	ldrh	r2, [r7, #14]
 8001d50:	8bbb      	ldrh	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	b298      	uxth	r0, r3
 8001d56:	89ba      	ldrh	r2, [r7, #12]
 8001d58:	8bfb      	ldrh	r3, [r7, #30]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001d60:	2301      	movs	r3, #1
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	f7ff fc29 	bl	80015bc <GUI_DrawPoint>
        }
      }
      //One pixel is 8 bits
      if (Column % 8 == 7)
 8001d6a:	8bbb      	ldrh	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d102      	bne.n	8001d7c <GUI_DisChar+0x118>
        ptr++;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
    for (Column = 0; Column < Font->Width; Column ++ ) {
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	83bb      	strh	r3, [r7, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	889b      	ldrh	r3, [r3, #4]
 8001d86:	8bba      	ldrh	r2, [r7, #28]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3a5      	bcc.n	8001cd8 <GUI_DisChar+0x74>
    }/* Write a line */
    if (Font->Width % 8 != 0)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <GUI_DisChar+0x13c>
      ptr++;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  for (Page = 0; Page < Font->Height; Page ++ ) {
 8001da0:	8bfb      	ldrh	r3, [r7, #30]
 8001da2:	3301      	adds	r3, #1
 8001da4:	83fb      	strh	r3, [r7, #30]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	88db      	ldrh	r3, [r3, #6]
 8001daa:	8bfa      	ldrh	r2, [r7, #30]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d390      	bcc.n	8001cd2 <GUI_DisChar+0x6e>
 8001db0:	e000      	b.n	8001db4 <GUI_DisChar+0x150>
    return;
 8001db2:	bf00      	nop
  }/* Write all */
}
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200000fc 	.word	0x200000fc

08001dc0 <GUI_DisString_EN>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	81fb      	strh	r3, [r7, #14]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	81bb      	strh	r3, [r7, #12]
  POINT Xpoint = Xstart;
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	82fb      	strh	r3, [r7, #22]
  POINT Ypoint = Ystart;
 8001dd6:	89bb      	ldrh	r3, [r7, #12]
 8001dd8:	82bb      	strh	r3, [r7, #20]

  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <GUI_DisString_EN+0xa0>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	89fa      	ldrh	r2, [r7, #14]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d838      	bhi.n	8001e56 <GUI_DisString_EN+0x96>
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <GUI_DisString_EN+0xa0>)
 8001de6:	885b      	ldrh	r3, [r3, #2]
 8001de8:	89ba      	ldrh	r2, [r7, #12]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d833      	bhi.n	8001e56 <GUI_DisString_EN+0x96>
//    DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
    return;
  }

  while (* pString != '\0') {
 8001dee:	e02d      	b.n	8001e4c <GUI_DisString_EN+0x8c>
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
    if ((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 8001df0:	8afb      	ldrh	r3, [r7, #22]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	8892      	ldrh	r2, [r2, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a19      	ldr	r2, [pc, #100]	@ (8001e60 <GUI_DisString_EN+0xa0>)
 8001dfa:	8812      	ldrh	r2, [r2, #0]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	dd06      	ble.n	8001e0e <GUI_DisString_EN+0x4e>
      Xpoint = Xstart;
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	82fb      	strh	r3, [r7, #22]
      Ypoint += Font->Height;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	88da      	ldrh	r2, [r3, #6]
 8001e08:	8abb      	ldrh	r3, [r7, #20]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	82bb      	strh	r3, [r7, #20]
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8001e0e:	8abb      	ldrh	r3, [r7, #20]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	88d2      	ldrh	r2, [r2, #6]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <GUI_DisString_EN+0xa0>)
 8001e18:	8852      	ldrh	r2, [r2, #2]
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	dd03      	ble.n	8001e26 <GUI_DisString_EN+0x66>
      Xpoint = Xstart;
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	82fb      	strh	r3, [r7, #22]
      Ypoint = Ystart;
 8001e22:	89bb      	ldrh	r3, [r7, #12]
 8001e24:	82bb      	strh	r3, [r7, #20]
    }
    GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	8ab9      	ldrh	r1, [r7, #20]
 8001e2c:	8af8      	ldrh	r0, [r7, #22]
 8001e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	8c3b      	ldrh	r3, [r7, #32]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f7ff ff14 	bl	8001c64 <GUI_DisChar>

    //The next character of the address
    pString ++;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	889a      	ldrh	r2, [r3, #4]
 8001e46:	8afb      	ldrh	r3, [r7, #22]
 8001e48:	4413      	add	r3, r2
 8001e4a:	82fb      	strh	r3, [r7, #22]
  while (* pString != '\0') {
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1cd      	bne.n	8001df0 <GUI_DisString_EN+0x30>
 8001e54:	e000      	b.n	8001e58 <GUI_DisString_EN+0x98>
    return;
 8001e56:	bf00      	nop
  }
}
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200000fc 	.word	0x200000fc

08001e64 <GUI_display>:
//}
//void GUI_joystick(void)
//{
//	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[2]+space, "Joystick holbogdoh", &Font16, LCD_BACKGROUND, WHITE);
//}
void GUI_display(void){
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af04      	add	r7, sp, #16
	GUI_DisString_EN(x_g[0], y_g[0], "SWITCH", &Font20, LCD_BACKGROUND, WHITE);
 8001e6a:	4b99      	ldr	r3, [pc, #612]	@ (80020d0 <GUI_display+0x26c>)
 8001e6c:	8818      	ldrh	r0, [r3, #0]
 8001e6e:	4b99      	ldr	r3, [pc, #612]	@ (80020d4 <GUI_display+0x270>)
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4b96      	ldr	r3, [pc, #600]	@ (80020d8 <GUI_display+0x274>)
 8001e7e:	4a97      	ldr	r2, [pc, #604]	@ (80020dc <GUI_display+0x278>)
 8001e80:	f7ff ff9e 	bl	8001dc0 <GUI_DisString_EN>

	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[0], "RELAY", &Font20, LCD_BACKGROUND, WHITE);
 8001e84:	4b92      	ldr	r3, [pc, #584]	@ (80020d0 <GUI_display+0x26c>)
 8001e86:	891b      	ldrh	r3, [r3, #8]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b91      	ldr	r3, [pc, #580]	@ (80020d0 <GUI_display+0x26c>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	4413      	add	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da00      	bge.n	8001e96 <GUI_display+0x32>
 8001e94:	3301      	adds	r3, #1
 8001e96:	105b      	asrs	r3, r3, #1
 8001e98:	b298      	uxth	r0, r3
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	@ (80020d4 <GUI_display+0x270>)
 8001e9c:	8819      	ldrh	r1, [r3, #0]
 8001e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4b8b      	ldr	r3, [pc, #556]	@ (80020d8 <GUI_display+0x274>)
 8001eaa:	4a8d      	ldr	r2, [pc, #564]	@ (80020e0 <GUI_display+0x27c>)
 8001eac:	f7ff ff88 	bl	8001dc0 <GUI_DisString_EN>
	GUI_DisString_EN(x_g[0], y_g[3], "ROBOT", &Font20, LCD_BACKGROUND, WHITE);
 8001eb0:	4b87      	ldr	r3, [pc, #540]	@ (80020d0 <GUI_display+0x26c>)
 8001eb2:	8818      	ldrh	r0, [r3, #0]
 8001eb4:	4b87      	ldr	r3, [pc, #540]	@ (80020d4 <GUI_display+0x270>)
 8001eb6:	88d9      	ldrh	r1, [r3, #6]
 8001eb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <GUI_display+0x274>)
 8001ec4:	4a87      	ldr	r2, [pc, #540]	@ (80020e4 <GUI_display+0x280>)
 8001ec6:	f7ff ff7b 	bl	8001dc0 <GUI_DisString_EN>
	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[2]+space, "Joystick", &Font16, LCD_BACKGROUND, WHITE);
 8001eca:	4b81      	ldr	r3, [pc, #516]	@ (80020d0 <GUI_display+0x26c>)
 8001ecc:	891b      	ldrh	r3, [r3, #8]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <GUI_display+0x26c>)
 8001ed2:	895b      	ldrh	r3, [r3, #10]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da00      	bge.n	8001edc <GUI_display+0x78>
 8001eda:	3301      	adds	r3, #1
 8001edc:	105b      	asrs	r3, r3, #1
 8001ede:	b298      	uxth	r0, r3
 8001ee0:	4b7c      	ldr	r3, [pc, #496]	@ (80020d4 <GUI_display+0x270>)
 8001ee2:	889a      	ldrh	r2, [r3, #4]
 8001ee4:	4b80      	ldr	r3, [pc, #512]	@ (80020e8 <GUI_display+0x284>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b299      	uxth	r1, r3
 8001eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <GUI_display+0x288>)
 8001efa:	4a7d      	ldr	r2, [pc, #500]	@ (80020f0 <GUI_display+0x28c>)
 8001efc:	f7ff ff60 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DrawRectangle(x_g[2], y_g[4], x_g[6], y_g[8]-space, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001f00:	4b73      	ldr	r3, [pc, #460]	@ (80020d0 <GUI_display+0x26c>)
 8001f02:	8898      	ldrh	r0, [r3, #4]
 8001f04:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <GUI_display+0x270>)
 8001f06:	8919      	ldrh	r1, [r3, #8]
 8001f08:	4b71      	ldr	r3, [pc, #452]	@ (80020d0 <GUI_display+0x26c>)
 8001f0a:	899c      	ldrh	r4, [r3, #12]
 8001f0c:	4b71      	ldr	r3, [pc, #452]	@ (80020d4 <GUI_display+0x270>)
 8001f0e:	8a1a      	ldrh	r2, [r3, #16]
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <GUI_display+0x284>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	9202      	str	r2, [sp, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	9201      	str	r2, [sp, #4]
 8001f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	4622      	mov	r2, r4
 8001f2a:	f7ff fc8d 	bl	8001848 <GUI_DrawRectangle>
		GUI_DisString_EN(x_g[2]+space, y_g[4]+space, "Wheel_1", &Font12, LCD_BACKGROUND, WHITE);
 8001f2e:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <GUI_display+0x26c>)
 8001f30:	889a      	ldrh	r2, [r3, #4]
 8001f32:	4b6d      	ldr	r3, [pc, #436]	@ (80020e8 <GUI_display+0x284>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	b298      	uxth	r0, r3
 8001f3c:	4b65      	ldr	r3, [pc, #404]	@ (80020d4 <GUI_display+0x270>)
 8001f3e:	891a      	ldrh	r2, [r3, #8]
 8001f40:	4b69      	ldr	r3, [pc, #420]	@ (80020e8 <GUI_display+0x284>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4b67      	ldr	r3, [pc, #412]	@ (80020f4 <GUI_display+0x290>)
 8001f56:	4a68      	ldr	r2, [pc, #416]	@ (80020f8 <GUI_display+0x294>)
 8001f58:	f7ff ff32 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[2]+space, y_g[8]-4*space, "Wheel_2", &Font12, LCD_BACKGROUND, WHITE);
 8001f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80020d0 <GUI_display+0x26c>)
 8001f5e:	889a      	ldrh	r2, [r3, #4]
 8001f60:	4b61      	ldr	r3, [pc, #388]	@ (80020e8 <GUI_display+0x284>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b298      	uxth	r0, r3
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80020d4 <GUI_display+0x270>)
 8001f6c:	8a1a      	ldrh	r2, [r3, #16]
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80020e8 <GUI_display+0x284>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4b5b      	ldr	r3, [pc, #364]	@ (80020f4 <GUI_display+0x290>)
 8001f88:	4a5c      	ldr	r2, [pc, #368]	@ (80020fc <GUI_display+0x298>)
 8001f8a:	f7ff ff19 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[5]+space, y_g[4]+space, "Wheel_3", &Font12, LCD_BACKGROUND, WHITE);
 8001f8e:	4b50      	ldr	r3, [pc, #320]	@ (80020d0 <GUI_display+0x26c>)
 8001f90:	895a      	ldrh	r2, [r3, #10]
 8001f92:	4b55      	ldr	r3, [pc, #340]	@ (80020e8 <GUI_display+0x284>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80020d4 <GUI_display+0x270>)
 8001f9e:	891a      	ldrh	r2, [r3, #8]
 8001fa0:	4b51      	ldr	r3, [pc, #324]	@ (80020e8 <GUI_display+0x284>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80020f4 <GUI_display+0x290>)
 8001fb6:	4a52      	ldr	r2, [pc, #328]	@ (8002100 <GUI_display+0x29c>)
 8001fb8:	f7ff ff02 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[5]+space, y_g[8]-4*space, "Wheel_4", &Font12, LCD_BACKGROUND, WHITE);
 8001fbc:	4b44      	ldr	r3, [pc, #272]	@ (80020d0 <GUI_display+0x26c>)
 8001fbe:	895a      	ldrh	r2, [r3, #10]
 8001fc0:	4b49      	ldr	r3, [pc, #292]	@ (80020e8 <GUI_display+0x284>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <GUI_display+0x270>)
 8001fcc:	8a1a      	ldrh	r2, [r3, #16]
 8001fce:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <GUI_display+0x284>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b299      	uxth	r1, r3
 8001fdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <GUI_display+0x290>)
 8001fe8:	4a46      	ldr	r2, [pc, #280]	@ (8002104 <GUI_display+0x2a0>)
 8001fea:	f7ff fee9 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[4], "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <GUI_display+0x26c>)
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <GUI_display+0x284>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b298      	uxth	r0, r3
 8001ffc:	4b35      	ldr	r3, [pc, #212]	@ (80020d4 <GUI_display+0x270>)
 8001ffe:	8919      	ldrh	r1, [r3, #8]
 8002000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2300      	movs	r3, #0
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <GUI_display+0x288>)
 800200c:	4a3e      	ldr	r2, [pc, #248]	@ (8002108 <GUI_display+0x2a4>)
 800200e:	f7ff fed7 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[4]+5*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8002012:	4b2f      	ldr	r3, [pc, #188]	@ (80020d0 <GUI_display+0x26c>)
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <GUI_display+0x284>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b298      	uxth	r0, r3
 8002020:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <GUI_display+0x270>)
 8002022:	891a      	ldrh	r2, [r3, #8]
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <GUI_display+0x284>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	0089      	lsls	r1, r1, #2
 800202e:	440b      	add	r3, r1
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b299      	uxth	r1, r3
 8002036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2300      	movs	r3, #0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4b2a      	ldr	r3, [pc, #168]	@ (80020ec <GUI_display+0x288>)
 8002042:	4a32      	ldr	r2, [pc, #200]	@ (800210c <GUI_display+0x2a8>)
 8002044:	f7ff febc 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[6]+space, y_g[4], "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8002048:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <GUI_display+0x26c>)
 800204a:	899a      	ldrh	r2, [r3, #12]
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <GUI_display+0x284>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4413      	add	r3, r2
 8002054:	b298      	uxth	r0, r3
 8002056:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <GUI_display+0x270>)
 8002058:	8919      	ldrh	r1, [r3, #8]
 800205a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <GUI_display+0x288>)
 8002066:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <GUI_display+0x2a4>)
 8002068:	f7ff feaa 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[6]+space, y_g[4]+5*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 800206c:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <GUI_display+0x26c>)
 800206e:	899a      	ldrh	r2, [r3, #12]
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <GUI_display+0x284>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b298      	uxth	r0, r3
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <GUI_display+0x270>)
 800207c:	891a      	ldrh	r2, [r3, #8]
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <GUI_display+0x284>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	0089      	lsls	r1, r1, #2
 8002088:	440b      	add	r3, r1
 800208a:	b29b      	uxth	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	b299      	uxth	r1, r3
 8002090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	2300      	movs	r3, #0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <GUI_display+0x288>)
 800209c:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <GUI_display+0x2a8>)
 800209e:	f7ff fe8f 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[0]+space, y_g[6]+2*space, "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <GUI_display+0x26c>)
 80020a4:	881a      	ldrh	r2, [r3, #0]
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <GUI_display+0x284>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	b298      	uxth	r0, r3
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <GUI_display+0x270>)
 80020b2:	899a      	ldrh	r2, [r3, #12]
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <GUI_display+0x284>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4413      	add	r3, r2
 80020c0:	b299      	uxth	r1, r3
 80020c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	e020      	b.n	8002110 <GUI_display+0x2ac>
 80020ce:	bf00      	nop
 80020d0:	2000002c 	.word	0x2000002c
 80020d4:	20000040 	.word	0x20000040
 80020d8:	20000010 	.word	0x20000010
 80020dc:	08013508 	.word	0x08013508
 80020e0:	08013510 	.word	0x08013510
 80020e4:	08013518 	.word	0x08013518
 80020e8:	20000058 	.word	0x20000058
 80020ec:	20000008 	.word	0x20000008
 80020f0:	08013520 	.word	0x08013520
 80020f4:	20000000 	.word	0x20000000
 80020f8:	0801352c 	.word	0x0801352c
 80020fc:	08013534 	.word	0x08013534
 8002100:	0801353c 	.word	0x0801353c
 8002104:	08013544 	.word	0x08013544
 8002108:	0801354c 	.word	0x0801354c
 800210c:	08013554 	.word	0x08013554
 8002110:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <GUI_display+0x360>)
 8002112:	4a2d      	ldr	r2, [pc, #180]	@ (80021c8 <GUI_display+0x364>)
 8002114:	f7ff fe54 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[6]+6*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8002118:	4b2c      	ldr	r3, [pc, #176]	@ (80021cc <GUI_display+0x368>)
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <GUI_display+0x36c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b298      	uxth	r0, r3
 8002126:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <GUI_display+0x370>)
 8002128:	899a      	ldrh	r2, [r3, #12]
 800212a:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <GUI_display+0x36c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	0049      	lsls	r1, r1, #1
 8002134:	440b      	add	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b299      	uxth	r1, r3
 800213e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <GUI_display+0x360>)
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <GUI_display+0x374>)
 800214c:	f7ff fe38 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[6]+space, y_g[6]+2*space, "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <GUI_display+0x368>)
 8002152:	899a      	ldrh	r2, [r3, #12]
 8002154:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <GUI_display+0x36c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b298      	uxth	r0, r3
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <GUI_display+0x370>)
 8002160:	899a      	ldrh	r2, [r3, #12]
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <GUI_display+0x36c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	4413      	add	r3, r2
 800216e:	b299      	uxth	r1, r3
 8002170:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <GUI_display+0x360>)
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <GUI_display+0x364>)
 800217e:	f7ff fe1f 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[6]+space, y_g[6]+6*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <GUI_display+0x368>)
 8002184:	899a      	ldrh	r2, [r3, #12]
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <GUI_display+0x36c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b298      	uxth	r0, r3
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <GUI_display+0x370>)
 8002192:	899a      	ldrh	r2, [r3, #12]
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <GUI_display+0x36c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	0049      	lsls	r1, r1, #1
 800219e:	440b      	add	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b299      	uxth	r1, r3
 80021a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2300      	movs	r3, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <GUI_display+0x360>)
 80021b4:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <GUI_display+0x374>)
 80021b6:	f7ff fe03 	bl	8001dc0 <GUI_DisString_EN>
}
 80021ba:	bf00      	nop
 80021bc:	3704      	adds	r7, #4
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008
 80021c8:	0801354c 	.word	0x0801354c
 80021cc:	2000002c 	.word	0x2000002c
 80021d0:	20000058 	.word	0x20000058
 80021d4:	20000040 	.word	0x20000040
 80021d8:	08013554 	.word	0x08013554

080021dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <vApplicationGetIdleTaskMemory+0x2c>)
 80021ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4a06      	ldr	r2, [pc, #24]	@ (800220c <vApplicationGetIdleTaskMemory+0x30>)
 80021f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021fa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	20000108 	.word	0x20000108
 800220c:	2000015c 	.word	0x2000015c

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b0b2      	sub	sp, #200	@ 0xc8
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002216:	f007 fa50 	bl	80096ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221a:	f000 f94f 	bl	80024bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221e:	f000 fe07 	bl	8002e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002222:	f000 fdb3 	bl	8002d8c <MX_DMA_Init>
  MX_TIM1_Init();
 8002226:	f000 fa9d 	bl	8002764 <MX_TIM1_Init>
  MX_TIM2_Init();
 800222a:	f000 faf5 	bl	8002818 <MX_TIM2_Init>
  MX_TIM4_Init();
 800222e:	f000 fbc3 	bl	80029b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002232:	f000 fc17 	bl	8002a64 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002236:	f000 fc7b 	bl	8002b30 <MX_TIM8_Init>
  MX_TIM12_Init();
 800223a:	f000 fcf7 	bl	8002c2c <MX_TIM12_Init>
  MX_USART3_UART_Init();
 800223e:	f000 fd75 	bl	8002d2c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002242:	f000 fa13 	bl	800266c <MX_SPI1_Init>
  MX_TIM3_Init();
 8002246:	f000 fb3b 	bl	80028c0 <MX_TIM3_Init>
  MX_SPI4_Init();
 800224a:	f000 fa4d 	bl	80026e8 <MX_SPI4_Init>
  MX_TIM10_Init();
 800224e:	f000 fcc9 	bl	8002be4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8002252:	f000 fd3b 	bl	8002ccc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002256:	f000 f99f 	bl	8002598 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800225a:	2100      	movs	r1, #0
 800225c:	4876      	ldr	r0, [pc, #472]	@ (8002438 <main+0x228>)
 800225e:	f00b f805 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002262:	2104      	movs	r1, #4
 8002264:	4874      	ldr	r0, [pc, #464]	@ (8002438 <main+0x228>)
 8002266:	f00b f801 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800226a:	2108      	movs	r1, #8
 800226c:	4872      	ldr	r0, [pc, #456]	@ (8002438 <main+0x228>)
 800226e:	f00a fffd 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002272:	210c      	movs	r1, #12
 8002274:	4870      	ldr	r0, [pc, #448]	@ (8002438 <main+0x228>)
 8002276:	f00a fff9 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800227a:	2104      	movs	r1, #4
 800227c:	486f      	ldr	r0, [pc, #444]	@ (800243c <main+0x22c>)
 800227e:	f00a fff5 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);   //BRUSHLESS
 8002282:	2108      	movs	r1, #8
 8002284:	486e      	ldr	r0, [pc, #440]	@ (8002440 <main+0x230>)
 8002286:	f00a fff1 	bl	800d26c <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800228a:	213c      	movs	r1, #60	@ 0x3c
 800228c:	486d      	ldr	r0, [pc, #436]	@ (8002444 <main+0x234>)
 800228e:	f00b f98d 	bl	800d5ac <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002292:	213c      	movs	r1, #60	@ 0x3c
 8002294:	486c      	ldr	r0, [pc, #432]	@ (8002448 <main+0x238>)
 8002296:	f00b f989 	bl	800d5ac <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800229a:	213c      	movs	r1, #60	@ 0x3c
 800229c:	486b      	ldr	r0, [pc, #428]	@ (800244c <main+0x23c>)
 800229e:	f00b f985 	bl	800d5ac <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022a2:	213c      	movs	r1, #60	@ 0x3c
 80022a4:	486a      	ldr	r0, [pc, #424]	@ (8002450 <main+0x240>)
 80022a6:	f00b f981 	bl	800d5ac <HAL_TIM_Encoder_Start>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	2108      	movs	r1, #8
 80022ae:	4869      	ldr	r0, [pc, #420]	@ (8002454 <main+0x244>)
 80022b0:	f008 ff80 	bl	800b1b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022ba:	4867      	ldr	r0, [pc, #412]	@ (8002458 <main+0x248>)
 80022bc:	f008 ff7a 	bl	800b1b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022c6:	4864      	ldr	r0, [pc, #400]	@ (8002458 <main+0x248>)
 80022c8:	f008 ff74 	bl	800b1b4 <HAL_GPIO_WritePin>
    TIM5->CCR3=zogs;
 80022cc:	4b63      	ldr	r3, [pc, #396]	@ (800245c <main+0x24c>)
 80022ce:	2208      	movs	r2, #8
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    M1_pid.KP=0.45777;
 80022d2:	4b63      	ldr	r3, [pc, #396]	@ (8002460 <main+0x250>)
 80022d4:	4a63      	ldr	r2, [pc, #396]	@ (8002464 <main+0x254>)
 80022d6:	601a      	str	r2, [r3, #0]
    M1_pid.KI=0.0;
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <main+0x250>)
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
    M1_pid.KD=0;
 80022e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002460 <main+0x250>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]

    M2_pid.KP=0.46314;
 80022e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <main+0x258>)
 80022ea:	4a60      	ldr	r2, [pc, #384]	@ (800246c <main+0x25c>)
 80022ec:	601a      	str	r2, [r3, #0]
    M2_pid.KI=0.0;
 80022ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <main+0x258>)
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
    M2_pid.KD=0.10;
 80022f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002468 <main+0x258>)
 80022f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002470 <main+0x260>)
 80022fa:	609a      	str	r2, [r3, #8]

    M3_pid.KP=0.41351;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <main+0x264>)
 80022fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002478 <main+0x268>)
 8002300:	601a      	str	r2, [r3, #0]
    M3_pid.KI=0.0;
 8002302:	4b5c      	ldr	r3, [pc, #368]	@ (8002474 <main+0x264>)
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
    M3_pid.KD=0.1;
 800230a:	4b5a      	ldr	r3, [pc, #360]	@ (8002474 <main+0x264>)
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <main+0x260>)
 800230e:	609a      	str	r2, [r3, #8]

    M4_pid.KP=0.47799;
 8002310:	4b5a      	ldr	r3, [pc, #360]	@ (800247c <main+0x26c>)
 8002312:	4a5b      	ldr	r2, [pc, #364]	@ (8002480 <main+0x270>)
 8002314:	601a      	str	r2, [r3, #0]
    M4_pid.KI=0.0;
 8002316:	4b59      	ldr	r3, [pc, #356]	@ (800247c <main+0x26c>)
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
    M4_pid.KD=0.10;
 800231e:	4b57      	ldr	r3, [pc, #348]	@ (800247c <main+0x26c>)
 8002320:	4a53      	ldr	r2, [pc, #332]	@ (8002470 <main+0x260>)
 8002322:	609a      	str	r2, [r3, #8]
    setup();
 8002324:	f005 fcb6 	bl	8007c94 <setup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Joystick_task, osPriorityNormal, 0, 256);
 8002328:	4b56      	ldr	r3, [pc, #344]	@ (8002484 <main+0x274>)
 800232a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800232e:	461d      	mov	r5, r3
 8002330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800233c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f00d face 	bl	800f8e4 <osThreadCreate>
 8002348:	4603      	mov	r3, r0
 800234a:	4a4f      	ldr	r2, [pc, #316]	@ (8002488 <main+0x278>)
 800234c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Ball_task, osPriorityNormal, 0, 512);
 800234e:	4b4f      	ldr	r3, [pc, #316]	@ (800248c <main+0x27c>)
 8002350:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002354:	461d      	mov	r5, r3
 8002356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800235e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002362:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00d fabb 	bl	800f8e4 <osThreadCreate>
 800236e:	4603      	mov	r3, r0
 8002370:	4a47      	ldr	r2, [pc, #284]	@ (8002490 <main+0x280>)
 8002372:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Seedling_task, osPriorityNormal, 0, 512);
 8002374:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <main+0x284>)
 8002376:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800237a:	461d      	mov	r5, r3
 800237c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8002388:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00d faa8 	bl	800f8e4 <osThreadCreate>
 8002394:	4603      	mov	r3, r0
 8002396:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <main+0x288>)
 8002398:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, Wheel_task, osPriorityNormal, 0, 1024);
 800239a:	4b40      	ldr	r3, [pc, #256]	@ (800249c <main+0x28c>)
 800239c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80023a0:	461d      	mov	r5, r3
 80023a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80023ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00d fa95 	bl	800f8e4 <osThreadCreate>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4a38      	ldr	r2, [pc, #224]	@ (80024a0 <main+0x290>)
 80023be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Encoder_task, osPriorityNormal, 0, 512);
 80023c0:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <main+0x294>)
 80023c2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80023c6:	461d      	mov	r5, r3
 80023c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80023d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f00d fa82 	bl	800f8e4 <osThreadCreate>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a31      	ldr	r2, [pc, #196]	@ (80024a8 <main+0x298>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, Display_task, osPriorityNormal, 0, 512);
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <main+0x29c>)
 80023e8:	f107 0420 	add.w	r4, r7, #32
 80023ec:	461d      	mov	r5, r3
 80023ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 80023fa:	f107 0320 	add.w	r3, r7, #32
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00d fa6f 	bl	800f8e4 <osThreadCreate>
 8002406:	4603      	mov	r3, r0
 8002408:	4a29      	ldr	r2, [pc, #164]	@ (80024b0 <main+0x2a0>)
 800240a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, Ros_Transmit, osPriorityNormal, 0, 512);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <main+0x2a4>)
 800240e:	1d3c      	adds	r4, r7, #4
 8002410:	461d      	mov	r5, r3
 8002412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800241a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f00d fa5e 	bl	800f8e4 <osThreadCreate>
 8002428:	4603      	mov	r3, r0
 800242a:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <main+0x2a8>)
 800242c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800242e:	f00d fa52 	bl	800f8d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <main+0x222>
 8002436:	bf00      	nop
 8002438:	200007c0 	.word	0x200007c0
 800243c:	2000093c 	.word	0x2000093c
 8002440:	20000858 	.word	0x20000858
 8002444:	20000728 	.word	0x20000728
 8002448:	20000774 	.word	0x20000774
 800244c:	200008a4 	.word	0x200008a4
 8002450:	2000080c 	.word	0x2000080c
 8002454:	40021400 	.word	0x40021400
 8002458:	40021000 	.word	0x40021000
 800245c:	40000c00 	.word	0x40000c00
 8002460:	20000d10 	.word	0x20000d10
 8002464:	3eea60d4 	.word	0x3eea60d4
 8002468:	20000d2c 	.word	0x20000d2c
 800246c:	3eed20b0 	.word	0x3eed20b0
 8002470:	3dcccccd 	.word	0x3dcccccd
 8002474:	20000d48 	.word	0x20000d48
 8002478:	3ed3b795 	.word	0x3ed3b795
 800247c:	20000d64 	.word	0x20000d64
 8002480:	3ef4bb1b 	.word	0x3ef4bb1b
 8002484:	08013568 	.word	0x08013568
 8002488:	20000c18 	.word	0x20000c18
 800248c:	08013590 	.word	0x08013590
 8002490:	20000c1c 	.word	0x20000c1c
 8002494:	080135b8 	.word	0x080135b8
 8002498:	20000c20 	.word	0x20000c20
 800249c:	080135e0 	.word	0x080135e0
 80024a0:	20000c24 	.word	0x20000c24
 80024a4:	08013608 	.word	0x08013608
 80024a8:	20000c28 	.word	0x20000c28
 80024ac:	08013630 	.word	0x08013630
 80024b0:	20000c2c 	.word	0x20000c2c
 80024b4:	08013658 	.word	0x08013658
 80024b8:	20000c30 	.word	0x20000c30

080024bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	@ 0x50
 80024c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	2230      	movs	r2, #48	@ 0x30
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f010 fb30 	bl	8012b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024e0:	f008 fe9c 	bl	800b21c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <SystemClock_Config+0xd4>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	4a29      	ldr	r2, [pc, #164]	@ (8002590 <SystemClock_Config+0xd4>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <SystemClock_Config+0xd4>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <SystemClock_Config+0xd8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a24      	ldr	r2, [pc, #144]	@ (8002594 <SystemClock_Config+0xd8>)
 8002502:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <SystemClock_Config+0xd8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002514:	2302      	movs	r3, #2
 8002516:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	2310      	movs	r3, #16
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002520:	2302      	movs	r3, #2
 8002522:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002524:	2300      	movs	r3, #0
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002528:	2308      	movs	r3, #8
 800252a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800252c:	23d8      	movs	r3, #216	@ 0xd8
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002530:	2302      	movs	r3, #2
 8002532:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002534:	2303      	movs	r3, #3
 8002536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	4618      	mov	r0, r3
 800253e:	f008 fecd 	bl	800b2dc <HAL_RCC_OscConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002548:	f003 f95c 	bl	8005804 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800254c:	f008 fe76 	bl	800b23c <HAL_PWREx_EnableOverDrive>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002556:	f003 f955 	bl	8005804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255a:	230f      	movs	r3, #15
 800255c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255e:	2302      	movs	r3, #2
 8002560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002566:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800256a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800256c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002570:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2107      	movs	r1, #7
 8002578:	4618      	mov	r0, r3
 800257a:	f009 f953 	bl	800b824 <HAL_RCC_ClockConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002584:	f003 f93e 	bl	8005804 <Error_Handler>
  }
}
 8002588:	bf00      	nop
 800258a:	3750      	adds	r7, #80	@ 0x50
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000

08002598 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025a0:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <MX_CAN1_Init+0xd0>)
 80025a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80025a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025a6:	2206      	movs	r2, #6
 80025a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80025b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80025bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80025c4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025ea:	481e      	ldr	r0, [pc, #120]	@ (8002664 <MX_CAN1_Init+0xcc>)
 80025ec:	f007 f8b6 	bl	800975c <HAL_CAN_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80025f6:	f003 f905 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 12;
 80025fe:	230c      	movs	r3, #12
 8002600:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdHigh = 0x200 << 5;
 8002606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800260a:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x200;
 800260c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002610:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
    sFilterConfig.SlaveStartFilterBank = 13;
 8002622:	230d      	movs	r3, #13
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8002626:	463b      	mov	r3, r7
 8002628:	4619      	mov	r1, r3
 800262a:	480e      	ldr	r0, [pc, #56]	@ (8002664 <MX_CAN1_Init+0xcc>)
 800262c:	f007 f992 	bl	8009954 <HAL_CAN_ConfigFilter>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_CAN1_Init+0xa2>
    	Error_Handler();
 8002636:	f003 f8e5 	bl	8005804 <Error_Handler>
    }
    if(HAL_CAN_Start(&hcan1) != HAL_OK){
 800263a:	480a      	ldr	r0, [pc, #40]	@ (8002664 <MX_CAN1_Init+0xcc>)
 800263c:	f007 fa6a 	bl	8009b14 <HAL_CAN_Start>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_CAN1_Init+0xb2>
    	Error_Handler();
 8002646:	f003 f8dd 	bl	8005804 <Error_Handler>
    }
    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800264a:	2102      	movs	r1, #2
 800264c:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_CAN1_Init+0xcc>)
 800264e:	f007 fcab 	bl	8009fa8 <HAL_CAN_ActivateNotification>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_CAN1_Init+0xc4>
    	Error_Handler();
 8002658:	f003 f8d4 	bl	8005804 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	@ 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000578 	.word	0x20000578
 8002668:	40006400 	.word	0x40006400

0800266c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <MX_SPI1_Init+0x74>)
 8002672:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <MX_SPI1_Init+0x78>)
 8002674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <MX_SPI1_Init+0x74>)
 8002678:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800267c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <MX_SPI1_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <MX_SPI1_Init+0x74>)
 8002686:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800268a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <MX_SPI1_Init+0x74>)
 800268e:	2202      	movs	r2, #2
 8002690:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <MX_SPI1_Init+0x74>)
 8002694:	2201      	movs	r2, #1
 8002696:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <MX_SPI1_Init+0x74>)
 800269a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800269e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026a2:	2238      	movs	r2, #56	@ 0x38
 80026a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026ba:	2207      	movs	r2, #7
 80026bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <MX_SPI1_Init+0x74>)
 80026cc:	f009 fef2 	bl	800c4b4 <HAL_SPI_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f003 f895 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200005a0 	.word	0x200005a0
 80026e4:	40013000 	.word	0x40013000

080026e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <MX_SPI4_Init+0x74>)
 80026ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <MX_SPI4_Init+0x78>)
 80026f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <MX_SPI4_Init+0x74>)
 80026f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <MX_SPI4_Init+0x74>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <MX_SPI4_Init+0x74>)
 8002702:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002706:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <MX_SPI4_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <MX_SPI4_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_SPI4_Init+0x74>)
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <MX_SPI4_Init+0x74>)
 800271e:	2208      	movs	r2, #8
 8002720:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_SPI4_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <MX_SPI4_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <MX_SPI4_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <MX_SPI4_Init+0x74>)
 8002736:	2207      	movs	r2, #7
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <MX_SPI4_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <MX_SPI4_Init+0x74>)
 8002742:	2208      	movs	r2, #8
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_SPI4_Init+0x74>)
 8002748:	f009 feb4 	bl	800c4b4 <HAL_SPI_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002752:	f003 f857 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000604 	.word	0x20000604
 8002760:	40013400 	.word	0x40013400

08002764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	@ 0x30
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f010 f9dc 	bl	8012b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <MX_TIM1_Init+0xac>)
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <MX_TIM1_Init+0xb0>)
 8002786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002788:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <MX_TIM1_Init+0xac>)
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <MX_TIM1_Init+0xac>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002794:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <MX_TIM1_Init+0xac>)
 8002796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800279a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <MX_TIM1_Init+0xac>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <MX_TIM1_Init+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <MX_TIM1_Init+0xac>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027ae:	2303      	movs	r3, #3
 80027b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80027b2:	2302      	movs	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027b6:	2301      	movs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80027c2:	2302      	movs	r3, #2
 80027c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027c6:	2301      	movs	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	480d      	ldr	r0, [pc, #52]	@ (8002810 <MX_TIM1_Init+0xac>)
 80027da:	f00a fe41 	bl	800d460 <HAL_TIM_Encoder_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80027e4:	f003 f80e 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_TIM1_Init+0xac>)
 80027fa:	f00b fce5 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002804:	f002 fffe 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	@ 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000728 	.word	0x20000728
 8002814:	40010000 	.word	0x40010000

08002818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2224      	movs	r2, #36	@ 0x24
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f010 f982 	bl	8012b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002836:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <MX_TIM2_Init+0xa4>)
 8002838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800283c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800283e:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <MX_TIM2_Init+0xa4>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <MX_TIM2_Init+0xa4>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <MX_TIM2_Init+0xa4>)
 800284c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <MX_TIM2_Init+0xa4>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <MX_TIM2_Init+0xa4>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800285e:	2303      	movs	r3, #3
 8002860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002862:	2302      	movs	r3, #2
 8002864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002866:	2301      	movs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002872:	2302      	movs	r3, #2
 8002874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4619      	mov	r1, r3
 8002888:	480c      	ldr	r0, [pc, #48]	@ (80028bc <MX_TIM2_Init+0xa4>)
 800288a:	f00a fde9 	bl	800d460 <HAL_TIM_Encoder_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002894:	f002 ffb6 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	@ (80028bc <MX_TIM2_Init+0xa4>)
 80028a6:	f00b fc8f 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80028b0:	f002 ffa8 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	3730      	adds	r7, #48	@ 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000774 	.word	0x20000774

080028c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d2:	463b      	mov	r3, r7
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028e4:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 80028e6:	4a33      	ldr	r2, [pc, #204]	@ (80029b4 <MX_TIM3_Init+0xf4>)
 80028e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 427;
 80028ea:	4b31      	ldr	r3, [pc, #196]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 80028ec:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80028f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b2f      	ldr	r3, [pc, #188]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 80028fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800290c:	4828      	ldr	r0, [pc, #160]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 800290e:	f00a fc55 	bl	800d1bc <HAL_TIM_PWM_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002918:	f002 ff74 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4821      	ldr	r0, [pc, #132]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 800292c:	f00b fc4c 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002936:	f002 ff65 	bl	8005804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293a:	2360      	movs	r3, #96	@ 0x60
 800293c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	4619      	mov	r1, r3
 8002950:	4817      	ldr	r0, [pc, #92]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 8002952:	f00a ffd9 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800295c:	f002 ff52 	bl	8005804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002960:	463b      	mov	r3, r7
 8002962:	2204      	movs	r2, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4812      	ldr	r0, [pc, #72]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 8002968:	f00a ffce 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002972:	f002 ff47 	bl	8005804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002976:	463b      	mov	r3, r7
 8002978:	2208      	movs	r2, #8
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 800297e:	f00a ffc3 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8002988:	f002 ff3c 	bl	8005804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	220c      	movs	r2, #12
 8002990:	4619      	mov	r1, r3
 8002992:	4807      	ldr	r0, [pc, #28]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 8002994:	f00a ffb8 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800299e:	f002 ff31 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029a2:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <MX_TIM3_Init+0xf0>)
 80029a4:	f006 fa82 	bl	8008eac <HAL_TIM_MspPostInit>

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	@ 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200007c0 	.word	0x200007c0
 80029b4:	40000400 	.word	0x40000400

080029b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	@ 0x30
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	2224      	movs	r2, #36	@ 0x24
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f010 f8b2 	bl	8012b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029cc:	463b      	mov	r3, r7
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d6:	4b21      	ldr	r3, [pc, #132]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029d8:	4a21      	ldr	r2, [pc, #132]	@ (8002a60 <MX_TIM4_Init+0xa8>)
 80029da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029dc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029fc:	2303      	movs	r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a00:	2302      	movs	r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a04:	2301      	movs	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a14:	2301      	movs	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	4619      	mov	r1, r3
 8002a26:	480d      	ldr	r0, [pc, #52]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 8002a28:	f00a fd1a 	bl	800d460 <HAL_TIM_Encoder_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a32:	f002 fee7 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	@ (8002a5c <MX_TIM4_Init+0xa4>)
 8002a44:	f00b fbc0 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a4e:	f002 fed9 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3730      	adds	r7, #48	@ 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000080c 	.word	0x2000080c
 8002a60:	40000800 	.word	0x40000800

08002a64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a76:	463b      	mov	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
 8002a84:	615a      	str	r2, [r3, #20]
 8002a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002a8a:	4a28      	ldr	r2, [pc, #160]	@ (8002b2c <MX_TIM5_Init+0xc8>)
 8002a8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 21600-1;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002a90:	f245 425f 	movw	r2, #21599	@ 0x545f
 8002a94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002a9e:	2263      	movs	r2, #99	@ 0x63
 8002aa0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002aae:	481e      	ldr	r0, [pc, #120]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002ab0:	f00a fb84 	bl	800d1bc <HAL_TIM_PWM_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002aba:	f002 fea3 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	4619      	mov	r1, r3
 8002acc:	4816      	ldr	r0, [pc, #88]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002ace:	f00b fb7b 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002ad8:	f002 fe94 	bl	8005804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002adc:	2360      	movs	r3, #96	@ 0x60
 8002ade:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aec:	463b      	mov	r3, r7
 8002aee:	2208      	movs	r2, #8
 8002af0:	4619      	mov	r1, r3
 8002af2:	480d      	ldr	r0, [pc, #52]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002af4:	f00a ff08 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002afe:	f002 fe81 	bl	8005804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b02:	463b      	mov	r3, r7
 8002b04:	220c      	movs	r2, #12
 8002b06:	4619      	mov	r1, r3
 8002b08:	4807      	ldr	r0, [pc, #28]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002b0a:	f00a fefd 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8002b14:	f002 fe76 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b18:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <MX_TIM5_Init+0xc4>)
 8002b1a:	f006 f9c7 	bl	8008eac <HAL_TIM_MspPostInit>

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	@ 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000858 	.word	0x20000858
 8002b2c:	40000c00 	.word	0x40000c00

08002b30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	@ 0x30
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2224      	movs	r2, #36	@ 0x24
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f00f fff6 	bl	8012b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b44:	463b      	mov	r3, r7
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b4e:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <MX_TIM8_Init+0xb0>)
 8002b52:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b54:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b66:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b92:	2301      	movs	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002ba6:	f00a fc5b 	bl	800d460 <HAL_TIM_Encoder_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002bb0:	f002 fe28 	bl	8005804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <MX_TIM8_Init+0xac>)
 8002bc6:	f00b faff 	bl	800e1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002bd0:	f002 fe18 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	@ 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200008a4 	.word	0x200008a4
 8002be0:	40010400 	.word	0x40010400

08002be4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	@ (8002c28 <MX_TIM10_Init+0x44>)
 8002bec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c00:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <MX_TIM10_Init+0x40>)
 8002c10:	f00a fa04 	bl	800d01c <HAL_TIM_Base_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002c1a:	f002 fdf3 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200008f0 	.word	0x200008f0
 8002c28:	40014400 	.word	0x40014400

08002c2c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
 8002c40:	615a      	str	r2, [r3, #20]
 8002c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c46:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <MX_TIM12_Init+0x9c>)
 8002c48:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1686;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c4c:	f240 6296 	movw	r2, #1686	@ 0x696
 8002c50:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 127;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c5a:	227f      	movs	r2, #127	@ 0x7f
 8002c5c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c64:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c6a:	4816      	ldr	r0, [pc, #88]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c6c:	f00a faa6 	bl	800d1bc <HAL_TIM_PWM_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002c76:	f002 fdc5 	bl	8005804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c7a:	2360      	movs	r3, #96	@ 0x60
 8002c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002c92:	f00a fe39 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002c9c:	f002 fdb2 	bl	8005804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4807      	ldr	r0, [pc, #28]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002ca8:	f00a fe2e 	bl	800d908 <HAL_TIM_PWM_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002cb2:	f002 fda7 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002cb6:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <MX_TIM12_Init+0x98>)
 8002cb8:	f006 f8f8 	bl	8008eac <HAL_TIM_MspPostInit>

}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	2000093c 	.word	0x2000093c
 8002cc8:	40001800 	.word	0x40001800

08002ccc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cd2:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <MX_USART2_UART_Init+0x5c>)
 8002cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cd8:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	@ (8002d24 <MX_USART2_UART_Init+0x58>)
 8002d10:	f00b fb06 	bl	800e320 <HAL_UART_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d1a:	f002 fd73 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000988 	.word	0x20000988
 8002d28:	40004400 	.word	0x40004400

08002d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <MX_USART3_UART_Init+0x5c>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d38:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_USART3_UART_Init+0x58>)
 8002d70:	f00b fad6 	bl	800e320 <HAL_UART_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002d7a:	f002 fd43 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000a10 	.word	0x20000a10
 8002d88:	40004800 	.word	0x40004800

08002d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d92:	4b26      	ldr	r3, [pc, #152]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a25      	ldr	r2, [pc, #148]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002db0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <MX_DMA_Init+0xa0>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	200c      	movs	r0, #12
 8002dc8:	f007 fbfc 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dcc:	200c      	movs	r0, #12
 8002dce:	f007 fc15 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	200e      	movs	r0, #14
 8002dd8:	f007 fbf4 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ddc:	200e      	movs	r0, #14
 8002dde:	f007 fc0d 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2105      	movs	r1, #5
 8002de6:	2010      	movs	r0, #16
 8002de8:	f007 fbec 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002dec:	2010      	movs	r0, #16
 8002dee:	f007 fc05 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2105      	movs	r1, #5
 8002df6:	2011      	movs	r0, #17
 8002df8:	f007 fbe4 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002dfc:	2011      	movs	r0, #17
 8002dfe:	f007 fbfd 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2105      	movs	r1, #5
 8002e06:	2038      	movs	r0, #56	@ 0x38
 8002e08:	f007 fbdc 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e0c:	2038      	movs	r0, #56	@ 0x38
 8002e0e:	f007 fbf5 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2105      	movs	r1, #5
 8002e16:	2039      	movs	r0, #57	@ 0x39
 8002e18:	f007 fbd4 	bl	800a5c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e1c:	2039      	movs	r0, #57	@ 0x39
 8002e1e:	f007 fbed 	bl	800a5fc <HAL_NVIC_EnableIRQ>

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08e      	sub	sp, #56	@ 0x38
 8002e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e46:	4b8f      	ldr	r3, [pc, #572]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	4a8e      	ldr	r2, [pc, #568]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e52:	4b8c      	ldr	r3, [pc, #560]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	4b89      	ldr	r3, [pc, #548]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a88      	ldr	r2, [pc, #544]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b86      	ldr	r3, [pc, #536]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e76:	4b83      	ldr	r3, [pc, #524]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a82      	ldr	r2, [pc, #520]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b80      	ldr	r3, [pc, #512]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a7c      	ldr	r2, [pc, #496]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	4b77      	ldr	r3, [pc, #476]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	4a76      	ldr	r2, [pc, #472]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb2:	4b74      	ldr	r3, [pc, #464]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebe:	4b71      	ldr	r3, [pc, #452]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a70      	ldr	r2, [pc, #448]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b6e      	ldr	r3, [pc, #440]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed6:	4b6b      	ldr	r3, [pc, #428]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a6a      	ldr	r2, [pc, #424]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b68      	ldr	r3, [pc, #416]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eee:	4b65      	ldr	r3, [pc, #404]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a64      	ldr	r2, [pc, #400]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	4b62      	ldr	r3, [pc, #392]	@ (8003084 <MX_GPIO_Init+0x254>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TFT_BL_Pin|TFT_CS_Pin|RELAY_1_Pin|MOTOR6_A_Pin
 8002f06:	2200      	movs	r2, #0
 8002f08:	f648 3198 	movw	r1, #35736	@ 0x8b98
 8002f0c:	485e      	ldr	r0, [pc, #376]	@ (8003088 <MX_GPIO_Init+0x258>)
 8002f0e:	f008 f951 	bl	800b1b4 <HAL_GPIO_WritePin>
                          |RELAY_5_Pin|RELAY_6_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|MOTOR5_B_Pin|MOTOR5_A_Pin|TFT_DC_Pin
 8002f12:	2200      	movs	r2, #0
 8002f14:	f244 51b8 	movw	r1, #17848	@ 0x45b8
 8002f18:	485c      	ldr	r0, [pc, #368]	@ (800308c <MX_GPIO_Init+0x25c>)
 8002f1a:	f008 f94b 	bl	800b1b4 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin|MOTOR6_B_Pin|RELAY_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR4_B_GPIO_Port, MOTOR4_B_Pin, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2110      	movs	r1, #16
 8002f22:	485b      	ldr	r0, [pc, #364]	@ (8003090 <MX_GPIO_Init+0x260>)
 8002f24:	f008 f946 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_USER_LED_Pin|MOTOR3_B_Pin|MOTOR3_A_Pin|MOTOR2_B_Pin
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f643 0187 	movw	r1, #14471	@ 0x3887
 8002f2e:	4859      	ldr	r0, [pc, #356]	@ (8003094 <MX_GPIO_Init+0x264>)
 8002f30:	f008 f940 	bl	800b1b4 <HAL_GPIO_WritePin>
                          |MOTOR2_A_Pin|MOTOR4_A_Pin|blue_user_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002f3a:	4857      	ldr	r0, [pc, #348]	@ (8003098 <MX_GPIO_Init+0x268>)
 8002f3c:	f008 f93a 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIPSELECT_Pin|MOTOR1_B_Pin|MOTOR1_A_Pin, GPIO_PIN_RESET);
 8002f40:	2200      	movs	r2, #0
 8002f42:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002f46:	4855      	ldr	r0, [pc, #340]	@ (800309c <MX_GPIO_Init+0x26c>)
 8002f48:	f008 f934 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_BL_Pin TFT_CS_Pin RELAY_1_Pin MOTOR6_A_Pin
                           RELAY_5_Pin RELAY_6_Pin PE15 */
  GPIO_InitStruct.Pin = TFT_BL_Pin|TFT_CS_Pin|RELAY_1_Pin|MOTOR6_A_Pin
 8002f4c:	f648 3398 	movw	r3, #35736	@ 0x8b98
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
                          |RELAY_5_Pin|RELAY_6_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	4848      	ldr	r0, [pc, #288]	@ (8003088 <MX_GPIO_Init+0x258>)
 8002f66:	f007 ff61 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4843      	ldr	r0, [pc, #268]	@ (8003090 <MX_GPIO_Init+0x260>)
 8002f82:	f007 ff53 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 MOTOR5_B_Pin MOTOR5_A_Pin TFT_DC_Pin
                           TFT_RST_Pin MOTOR6_B_Pin RELAY_4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR5_B_Pin|MOTOR5_A_Pin|TFT_DC_Pin
 8002f86:	f244 53b8 	movw	r3, #17848	@ 0x45b8
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |TFT_RST_Pin|MOTOR6_B_Pin|RELAY_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	483b      	ldr	r0, [pc, #236]	@ (800308c <MX_GPIO_Init+0x25c>)
 8002fa0:	f007 ff44 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_UP2_Pin Switch_BALL1_Pin Switch_DOWN2_Pin */
  GPIO_InitStruct.Pin = Switch_UP2_Pin|Switch_BALL1_Pin|Switch_DOWN2_Pin;
 8002fa4:	f640 0303 	movw	r3, #2051	@ 0x803
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4835      	ldr	r0, [pc, #212]	@ (8003090 <MX_GPIO_Init+0x260>)
 8002fba:	f007 ff37 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_BALL2_Pin */
  GPIO_InitStruct.Pin = Switch_BALL2_Pin;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Switch_BALL2_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4832      	ldr	r0, [pc, #200]	@ (800309c <MX_GPIO_Init+0x26c>)
 8002fd2:	f007 ff2b 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR4_B_Pin */
  GPIO_InitStruct.Pin = MOTOR4_B_Pin;
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MOTOR4_B_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4828      	ldr	r0, [pc, #160]	@ (8003090 <MX_GPIO_Init+0x260>)
 8002fee:	f007 ff1d 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_USER_LED_Pin MOTOR3_B_Pin MOTOR3_A_Pin MOTOR2_B_Pin
                           MOTOR2_A_Pin MOTOR4_A_Pin blue_user_led_Pin */
  GPIO_InitStruct.Pin = GREEN_USER_LED_Pin|MOTOR3_B_Pin|MOTOR3_A_Pin|MOTOR2_B_Pin
 8002ff2:	f643 0387 	movw	r3, #14471	@ 0x3887
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR2_A_Pin|MOTOR4_A_Pin|blue_user_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	4822      	ldr	r0, [pc, #136]	@ (8003094 <MX_GPIO_Init+0x264>)
 800300c:	f007 ff0e 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_2_Pin|RELAY_3_Pin;
 8003010:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	481b      	ldr	r0, [pc, #108]	@ (8003098 <MX_GPIO_Init+0x268>)
 800302a:	f007 feff 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_UP1_Pin */
  GPIO_InitStruct.Pin = Switch_UP1_Pin;
 800302e:	2304      	movs	r3, #4
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003032:	2300      	movs	r3, #0
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Switch_UP1_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303e:	4619      	mov	r1, r3
 8003040:	4817      	ldr	r0, [pc, #92]	@ (80030a0 <MX_GPIO_Init+0x270>)
 8003042:	f007 fef3 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIPSELECT_Pin MOTOR1_B_Pin MOTOR1_A_Pin */
  GPIO_InitStruct.Pin = SPI_CHIPSELECT_Pin|MOTOR1_B_Pin|MOTOR1_A_Pin;
 8003046:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	480f      	ldr	r0, [pc, #60]	@ (800309c <MX_GPIO_Init+0x26c>)
 8003060:	f007 fee4 	bl	800ae2c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_DOWN1_Pin PD3 */
  GPIO_InitStruct.Pin = Switch_DOWN1_Pin|GPIO_PIN_3;
 8003064:	230c      	movs	r3, #12
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003074:	4619      	mov	r1, r3
 8003076:	4808      	ldr	r0, [pc, #32]	@ (8003098 <MX_GPIO_Init+0x268>)
 8003078:	f007 fed8 	bl	800ae2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800307c:	bf00      	nop
 800307e:	3738      	adds	r7, #56	@ 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020400 	.word	0x40020400
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40020000 	.word	0x40020000
 80030a0:	40021800 	.word	0x40021800

080030a4 <motor_speed>:
        flag[3] = 1;
    } else {
        flag[3] = 0;
    }
}
void motor_speed(){
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
	int pos1=0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
	int pos2=0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
	int pos3=0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
	int pos4=0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	e022      	b.n	8003106 <motor_speed+0x62>
		pos1 += oldpos_1[i];
 80030c0:	4a29      	ldr	r2, [pc, #164]	@ (8003168 <motor_speed+0xc4>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030c8:	461a      	mov	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4413      	add	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
		pos2 += oldpos_2[i];
 80030d0:	4a26      	ldr	r2, [pc, #152]	@ (800316c <motor_speed+0xc8>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030d8:	461a      	mov	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
		pos3 += oldpos_3[i];
 80030e0:	4a23      	ldr	r2, [pc, #140]	@ (8003170 <motor_speed+0xcc>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
		pos4 += oldpos_4[i];
 80030f0:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <motor_speed+0xd0>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4413      	add	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b09      	cmp	r3, #9
 800310a:	ddd9      	ble.n	80030c0 <motor_speed+0x1c>
	}
	M1.en_speed = pos1/10;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <motor_speed+0xd4>)
 8003110:	fb82 1203 	smull	r1, r2, r2, r3
 8003114:	1092      	asrs	r2, r2, #2
 8003116:	17db      	asrs	r3, r3, #31
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	b21a      	sxth	r2, r3
 800311c:	4b17      	ldr	r3, [pc, #92]	@ (800317c <motor_speed+0xd8>)
 800311e:	809a      	strh	r2, [r3, #4]
	M2.en_speed = pos2/10;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <motor_speed+0xd4>)
 8003124:	fb82 1203 	smull	r1, r2, r2, r3
 8003128:	1092      	asrs	r2, r2, #2
 800312a:	17db      	asrs	r3, r3, #31
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b21a      	sxth	r2, r3
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <motor_speed+0xdc>)
 8003132:	809a      	strh	r2, [r3, #4]
	M3.en_speed = pos3/10;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a10      	ldr	r2, [pc, #64]	@ (8003178 <motor_speed+0xd4>)
 8003138:	fb82 1203 	smull	r1, r2, r2, r3
 800313c:	1092      	asrs	r2, r2, #2
 800313e:	17db      	asrs	r3, r3, #31
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	b21a      	sxth	r2, r3
 8003144:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <motor_speed+0xe0>)
 8003146:	809a      	strh	r2, [r3, #4]
	M4.en_speed = pos4/10;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4a0b      	ldr	r2, [pc, #44]	@ (8003178 <motor_speed+0xd4>)
 800314c:	fb82 1203 	smull	r1, r2, r2, r3
 8003150:	1092      	asrs	r2, r2, #2
 8003152:	17db      	asrs	r3, r3, #31
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b21a      	sxth	r2, r3
 8003158:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <motor_speed+0xe4>)
 800315a:	809a      	strh	r2, [r3, #4]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	20000c68 	.word	0x20000c68
 800316c:	20000c7c 	.word	0x20000c7c
 8003170:	20000c90 	.word	0x20000c90
 8003174:	20000ca4 	.word	0x20000ca4
 8003178:	66666667 	.word	0x66666667
 800317c:	20000d80 	.word	0x20000d80
 8003180:	20000d88 	.word	0x20000d88
 8003184:	20000d90 	.word	0x20000d90
 8003188:	20000d98 	.word	0x20000d98

0800318c <motor1>:
void motor1(){
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
	if(left_front>0){
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <motor1+0x7c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd10      	ble.n	80031ba <motor1+0x2e>
		HAL_GPIO_WritePin(motor1_a, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800319e:	481b      	ldr	r0, [pc, #108]	@ (800320c <motor1+0x80>)
 80031a0:	f008 f808 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 1);
 80031a4:	2201      	movs	r2, #1
 80031a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031aa:	4818      	ldr	r0, [pc, #96]	@ (800320c <motor1+0x80>)
 80031ac:	f008 f802 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 80031b0:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <motor1+0x84>)
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <motor1+0x88>)
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
	else{
		HAL_GPIO_WritePin(motor1_a, 0);
		HAL_GPIO_WritePin(motor1_b, 0);
		TIM3->CCR4=lf;
	}
}
 80031b8:	e024      	b.n	8003204 <motor1+0x78>
	else if(left_front<0){
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <motor1+0x7c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da10      	bge.n	80031e4 <motor1+0x58>
		HAL_GPIO_WritePin(motor1_a, 1);
 80031c2:	2201      	movs	r2, #1
 80031c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031c8:	4810      	ldr	r0, [pc, #64]	@ (800320c <motor1+0x80>)
 80031ca:	f007 fff3 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031d4:	480d      	ldr	r0, [pc, #52]	@ (800320c <motor1+0x80>)
 80031d6:	f007 ffed 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <motor1+0x84>)
 80031dc:	881a      	ldrh	r2, [r3, #0]
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <motor1+0x88>)
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80031e2:	e00f      	b.n	8003204 <motor1+0x78>
		HAL_GPIO_WritePin(motor1_a, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031ea:	4808      	ldr	r0, [pc, #32]	@ (800320c <motor1+0x80>)
 80031ec:	f007 ffe2 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031f6:	4805      	ldr	r0, [pc, #20]	@ (800320c <motor1+0x80>)
 80031f8:	f007 ffdc 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <motor1+0x84>)
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <motor1+0x88>)
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000cc8 	.word	0x20000cc8
 800320c:	40020000 	.word	0x40020000
 8003210:	20000c52 	.word	0x20000c52
 8003214:	40000400 	.word	0x40000400

08003218 <motor2>:

void motor2(){
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	if(left_back>0){
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <motor2+0x7c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	dd10      	ble.n	8003246 <motor2+0x2e>
		HAL_GPIO_WritePin(motor2_a, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800322a:	481b      	ldr	r0, [pc, #108]	@ (8003298 <motor2+0x80>)
 800322c:	f007 ffc2 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 1);
 8003230:	2201      	movs	r2, #1
 8003232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003236:	4818      	ldr	r0, [pc, #96]	@ (8003298 <motor2+0x80>)
 8003238:	f007 ffbc 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 800323c:	4b17      	ldr	r3, [pc, #92]	@ (800329c <motor2+0x84>)
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <motor2+0x88>)
 8003242:	63da      	str	r2, [r3, #60]	@ 0x3c
	else{
		HAL_GPIO_WritePin(motor2_a, 0);
		HAL_GPIO_WritePin(motor2_b, 0);
		TIM3->CCR3=lb;
	}
}
 8003244:	e024      	b.n	8003290 <motor2+0x78>
	else if(left_back<0){
 8003246:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <motor2+0x7c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da10      	bge.n	8003270 <motor2+0x58>
		HAL_GPIO_WritePin(motor2_a, 1);
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003254:	4810      	ldr	r0, [pc, #64]	@ (8003298 <motor2+0x80>)
 8003256:	f007 ffad 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003260:	480d      	ldr	r0, [pc, #52]	@ (8003298 <motor2+0x80>)
 8003262:	f007 ffa7 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <motor2+0x84>)
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <motor2+0x88>)
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800326e:	e00f      	b.n	8003290 <motor2+0x78>
		HAL_GPIO_WritePin(motor2_a, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003276:	4808      	ldr	r0, [pc, #32]	@ (8003298 <motor2+0x80>)
 8003278:	f007 ff9c 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003282:	4805      	ldr	r0, [pc, #20]	@ (8003298 <motor2+0x80>)
 8003284:	f007 ff96 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <motor2+0x84>)
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <motor2+0x88>)
 800328e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000ccc 	.word	0x20000ccc
 8003298:	40020400 	.word	0x40020400
 800329c:	20000c54 	.word	0x20000c54
 80032a0:	40000400 	.word	0x40000400

080032a4 <motor3>:

void motor3(){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	if(right_front>0){
 80032a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <motor3+0x70>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dd0e      	ble.n	80032ce <motor3+0x2a>
		HAL_GPIO_WritePin(motor3_a, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2104      	movs	r1, #4
 80032b4:	4818      	ldr	r0, [pc, #96]	@ (8003318 <motor3+0x74>)
 80032b6:	f007 ff7d 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 1);
 80032ba:	2201      	movs	r2, #1
 80032bc:	2102      	movs	r1, #2
 80032be:	4816      	ldr	r0, [pc, #88]	@ (8003318 <motor3+0x74>)
 80032c0:	f007 ff78 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <motor3+0x78>)
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <motor3+0x7c>)
 80032ca:	639a      	str	r2, [r3, #56]	@ 0x38
	else{
		HAL_GPIO_WritePin(motor3_a, 0);
		HAL_GPIO_WritePin(motor3_b, 0);
		TIM3->CCR2=rf;
	}
}
 80032cc:	e020      	b.n	8003310 <motor3+0x6c>
	else if(right_front<0){
 80032ce:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <motor3+0x70>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da0e      	bge.n	80032f4 <motor3+0x50>
		HAL_GPIO_WritePin(motor3_a, 1);
 80032d6:	2201      	movs	r2, #1
 80032d8:	2104      	movs	r1, #4
 80032da:	480f      	ldr	r0, [pc, #60]	@ (8003318 <motor3+0x74>)
 80032dc:	f007 ff6a 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2102      	movs	r1, #2
 80032e4:	480c      	ldr	r0, [pc, #48]	@ (8003318 <motor3+0x74>)
 80032e6:	f007 ff65 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <motor3+0x78>)
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <motor3+0x7c>)
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80032f2:	e00d      	b.n	8003310 <motor3+0x6c>
		HAL_GPIO_WritePin(motor3_a, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2104      	movs	r1, #4
 80032f8:	4807      	ldr	r0, [pc, #28]	@ (8003318 <motor3+0x74>)
 80032fa:	f007 ff5b 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2102      	movs	r1, #2
 8003302:	4805      	ldr	r0, [pc, #20]	@ (8003318 <motor3+0x74>)
 8003304:	f007 ff56 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <motor3+0x78>)
 800330a:	881a      	ldrh	r2, [r3, #0]
 800330c:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <motor3+0x7c>)
 800330e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000cd0 	.word	0x20000cd0
 8003318:	40020400 	.word	0x40020400
 800331c:	20000c56 	.word	0x20000c56
 8003320:	40000400 	.word	0x40000400

08003324 <motor4>:

void motor4(){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if(right_back>0){
 8003328:	4b1c      	ldr	r3, [pc, #112]	@ (800339c <motor4+0x78>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	dd0f      	ble.n	8003350 <motor4+0x2c>
		HAL_GPIO_WritePin(motor4_a, 1);
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003336:	481a      	ldr	r0, [pc, #104]	@ (80033a0 <motor4+0x7c>)
 8003338:	f007 ff3c 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2110      	movs	r1, #16
 8003340:	4818      	ldr	r0, [pc, #96]	@ (80033a4 <motor4+0x80>)
 8003342:	f007 ff37 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 8003346:	4b18      	ldr	r3, [pc, #96]	@ (80033a8 <motor4+0x84>)
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <motor4+0x88>)
 800334c:	635a      	str	r2, [r3, #52]	@ 0x34
	else{
		HAL_GPIO_WritePin(motor4_a, 0);
		HAL_GPIO_WritePin(motor4_b, 0);
		TIM3->CCR1=rb;
	}
}
 800334e:	e022      	b.n	8003396 <motor4+0x72>
	else if(right_back<0){
 8003350:	4b12      	ldr	r3, [pc, #72]	@ (800339c <motor4+0x78>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	da0f      	bge.n	8003378 <motor4+0x54>
		HAL_GPIO_WritePin(motor4_a, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800335e:	4810      	ldr	r0, [pc, #64]	@ (80033a0 <motor4+0x7c>)
 8003360:	f007 ff28 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 1);
 8003364:	2201      	movs	r2, #1
 8003366:	2110      	movs	r1, #16
 8003368:	480e      	ldr	r0, [pc, #56]	@ (80033a4 <motor4+0x80>)
 800336a:	f007 ff23 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <motor4+0x84>)
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	4b0e      	ldr	r3, [pc, #56]	@ (80033ac <motor4+0x88>)
 8003374:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003376:	e00e      	b.n	8003396 <motor4+0x72>
		HAL_GPIO_WritePin(motor4_a, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800337e:	4808      	ldr	r0, [pc, #32]	@ (80033a0 <motor4+0x7c>)
 8003380:	f007 ff18 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 8003384:	2200      	movs	r2, #0
 8003386:	2110      	movs	r1, #16
 8003388:	4806      	ldr	r0, [pc, #24]	@ (80033a4 <motor4+0x80>)
 800338a:	f007 ff13 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 800338e:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <motor4+0x84>)
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <motor4+0x88>)
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000cd4 	.word	0x20000cd4
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40020800 	.word	0x40020800
 80033a8:	20000c58 	.word	0x20000c58
 80033ac:	40000400 	.word	0x40000400

080033b0 <turn>:

/*************************************************************************************/

void turn(){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	if(r>0){
 80033b4:	4b52      	ldr	r3, [pc, #328]	@ (8003500 <turn+0x150>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	dd4d      	ble.n	8003458 <turn+0xa8>
		HAL_GPIO_WritePin(motor1_a, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033c2:	4850      	ldr	r0, [pc, #320]	@ (8003504 <turn+0x154>)
 80033c4:	f007 fef6 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 1);
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033ce:	484d      	ldr	r0, [pc, #308]	@ (8003504 <turn+0x154>)
 80033d0:	f007 fef0 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR4= abs(r);
 80033d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003500 <turn+0x150>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033e0:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <turn+0x158>)
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(motor2_a, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033ea:	4848      	ldr	r0, [pc, #288]	@ (800350c <turn+0x15c>)
 80033ec:	f007 fee2 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 1);
 80033f0:	2201      	movs	r2, #1
 80033f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033f6:	4845      	ldr	r0, [pc, #276]	@ (800350c <turn+0x15c>)
 80033f8:	f007 fedc 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR3= abs(r);
 80033fc:	4b40      	ldr	r3, [pc, #256]	@ (8003500 <turn+0x150>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003404:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003408:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <turn+0x158>)
 800340a:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(motor3_a, 1);
 800340c:	2201      	movs	r2, #1
 800340e:	2104      	movs	r1, #4
 8003410:	483e      	ldr	r0, [pc, #248]	@ (800350c <turn+0x15c>)
 8003412:	f007 fecf 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2102      	movs	r1, #2
 800341a:	483c      	ldr	r0, [pc, #240]	@ (800350c <turn+0x15c>)
 800341c:	f007 feca 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR2= abs(r);
 8003420:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <turn+0x150>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003428:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800342c:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <turn+0x158>)
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(motor4_a, 0);
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003436:	4835      	ldr	r0, [pc, #212]	@ (800350c <turn+0x15c>)
 8003438:	f007 febc 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 1);
 800343c:	2201      	movs	r2, #1
 800343e:	2110      	movs	r1, #16
 8003440:	4833      	ldr	r0, [pc, #204]	@ (8003510 <turn+0x160>)
 8003442:	f007 feb7 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR1= abs(r);
 8003446:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <turn+0x150>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800344e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003452:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <turn+0x158>)
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2= abs(r);
		HAL_GPIO_WritePin(motor4_a, 1);
		HAL_GPIO_WritePin(motor4_b, 0);
		TIM3->CCR1= abs(r);
	}
}
 8003456:	e050      	b.n	80034fa <turn+0x14a>
	else if(r<0){
 8003458:	4b29      	ldr	r3, [pc, #164]	@ (8003500 <turn+0x150>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	da4c      	bge.n	80034fa <turn+0x14a>
		HAL_GPIO_WritePin(motor1_a, 1);
 8003460:	2201      	movs	r2, #1
 8003462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003466:	4827      	ldr	r0, [pc, #156]	@ (8003504 <turn+0x154>)
 8003468:	f007 fea4 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003472:	4824      	ldr	r0, [pc, #144]	@ (8003504 <turn+0x154>)
 8003474:	f007 fe9e 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR4= abs(r);
 8003478:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <turn+0x150>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003480:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003484:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <turn+0x158>)
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(motor2_a, 1);
 8003488:	2201      	movs	r2, #1
 800348a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800348e:	481f      	ldr	r0, [pc, #124]	@ (800350c <turn+0x15c>)
 8003490:	f007 fe90 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800349a:	481c      	ldr	r0, [pc, #112]	@ (800350c <turn+0x15c>)
 800349c:	f007 fe8a 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR3= abs(r);
 80034a0:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <turn+0x150>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80034a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80034ac:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <turn+0x158>)
 80034ae:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(motor3_a, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	2104      	movs	r1, #4
 80034b4:	4815      	ldr	r0, [pc, #84]	@ (800350c <turn+0x15c>)
 80034b6:	f007 fe7d 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 1);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2102      	movs	r1, #2
 80034be:	4813      	ldr	r0, [pc, #76]	@ (800350c <turn+0x15c>)
 80034c0:	f007 fe78 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR2= abs(r);
 80034c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <turn+0x150>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80034cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80034d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <turn+0x158>)
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(motor4_a, 1);
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034da:	480c      	ldr	r0, [pc, #48]	@ (800350c <turn+0x15c>)
 80034dc:	f007 fe6a 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2110      	movs	r1, #16
 80034e4:	480a      	ldr	r0, [pc, #40]	@ (8003510 <turn+0x160>)
 80034e6:	f007 fe65 	bl	800b1b4 <HAL_GPIO_WritePin>
		TIM3->CCR1= abs(r);
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <turn+0x150>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80034f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80034f6:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <turn+0x158>)
 80034f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000cc0 	.word	0x20000cc0
 8003504:	40020000 	.word	0x40020000
 8003508:	40000400 	.word	0x40000400
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800

08003514 <yvj_ergeh>:

/*******************************************************************************/

void yvj_ergeh(){
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	af00      	add	r7, sp, #0
	if(r<0){
 8003518:	4b50      	ldr	r3, [pc, #320]	@ (800365c <yvj_ergeh+0x148>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da47      	bge.n	80035b0 <yvj_ergeh+0x9c>
		lf = abs(left_front+r*1.5);
 8003520:	4b4f      	ldr	r3, [pc, #316]	@ (8003660 <yvj_ergeh+0x14c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd f81d 	bl	8000564 <__aeabi_i2d>
 800352a:	4604      	mov	r4, r0
 800352c:	460d      	mov	r5, r1
 800352e:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <yvj_ergeh+0x148>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f816 	bl	8000564 <__aeabi_i2d>
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	4b49      	ldr	r3, [pc, #292]	@ (8003664 <yvj_ergeh+0x150>)
 800353e:	f7fd f87b 	bl	8000638 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f7fc febf 	bl	80002cc <__adddf3>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fb09 	bl	8000b6c <__aeabi_d2iz>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	bfb8      	it	lt
 8003560:	425b      	neglt	r3, r3
 8003562:	b29a      	uxth	r2, r3
 8003564:	4b40      	ldr	r3, [pc, #256]	@ (8003668 <yvj_ergeh+0x154>)
 8003566:	801a      	strh	r2, [r3, #0]
		lb = abs(left_back+r*1.5);
 8003568:	4b40      	ldr	r3, [pc, #256]	@ (800366c <yvj_ergeh+0x158>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc fff9 	bl	8000564 <__aeabi_i2d>
 8003572:	4604      	mov	r4, r0
 8003574:	460d      	mov	r5, r1
 8003576:	4b39      	ldr	r3, [pc, #228]	@ (800365c <yvj_ergeh+0x148>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc fff2 	bl	8000564 <__aeabi_i2d>
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <yvj_ergeh+0x150>)
 8003586:	f7fd f857 	bl	8000638 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4620      	mov	r0, r4
 8003590:	4629      	mov	r1, r5
 8003592:	f7fc fe9b 	bl	80002cc <__adddf3>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f7fd fae5 	bl	8000b6c <__aeabi_d2iz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bfb8      	it	lt
 80035a8:	425b      	neglt	r3, r3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	4b30      	ldr	r3, [pc, #192]	@ (8003670 <yvj_ergeh+0x15c>)
 80035ae:	801a      	strh	r2, [r3, #0]
	}
	if(r>0){
 80035b0:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <yvj_ergeh+0x148>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd47      	ble.n	8003648 <yvj_ergeh+0x134>
		rf = abs(right_front-r*1.5);
 80035b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003674 <yvj_ergeh+0x160>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffd1 	bl	8000564 <__aeabi_i2d>
 80035c2:	4604      	mov	r4, r0
 80035c4:	460d      	mov	r5, r1
 80035c6:	4b25      	ldr	r3, [pc, #148]	@ (800365c <yvj_ergeh+0x148>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ffca 	bl	8000564 <__aeabi_i2d>
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <yvj_ergeh+0x150>)
 80035d6:	f7fd f82f 	bl	8000638 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fc fe71 	bl	80002c8 <__aeabi_dsub>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fabd 	bl	8000b6c <__aeabi_d2iz>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bfb8      	it	lt
 80035f8:	425b      	neglt	r3, r3
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <yvj_ergeh+0x164>)
 80035fe:	801a      	strh	r2, [r3, #0]
		rb = abs(right_back-r*1.5);
 8003600:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <yvj_ergeh+0x168>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ffad 	bl	8000564 <__aeabi_i2d>
 800360a:	4604      	mov	r4, r0
 800360c:	460d      	mov	r5, r1
 800360e:	4b13      	ldr	r3, [pc, #76]	@ (800365c <yvj_ergeh+0x148>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ffa6 	bl	8000564 <__aeabi_i2d>
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <yvj_ergeh+0x150>)
 800361e:	f7fd f80b 	bl	8000638 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f7fc fe4d 	bl	80002c8 <__aeabi_dsub>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd fa99 	bl	8000b6c <__aeabi_d2iz>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	bfb8      	it	lt
 8003640:	425b      	neglt	r3, r3
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <yvj_ergeh+0x16c>)
 8003646:	801a      	strh	r2, [r3, #0]
	}
	motor1();
 8003648:	f7ff fda0 	bl	800318c <motor1>
	motor2();
 800364c:	f7ff fde4 	bl	8003218 <motor2>
	motor3();
 8003650:	f7ff fe28 	bl	80032a4 <motor3>
	motor4();
 8003654:	f7ff fe66 	bl	8003324 <motor4>
}
 8003658:	bf00      	nop
 800365a:	bdb0      	pop	{r4, r5, r7, pc}
 800365c:	20000cc0 	.word	0x20000cc0
 8003660:	20000cc8 	.word	0x20000cc8
 8003664:	3ff80000 	.word	0x3ff80000
 8003668:	20000c52 	.word	0x20000c52
 800366c:	20000ccc 	.word	0x20000ccc
 8003670:	20000c54 	.word	0x20000c54
 8003674:	20000cd0 	.word	0x20000cd0
 8003678:	20000c56 	.word	0x20000c56
 800367c:	20000cd4 	.word	0x20000cd4
 8003680:	20000c58 	.word	0x20000c58

08003684 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK){
 800368c:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8003690:	2100      	movs	r1, #0
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f006 fb76 	bl	8009d84 <HAL_CAN_GetRxMessage>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d136      	bne.n	800370c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		if(rxHeader.StdId == 0x201){
 800369e:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f240 2201 	movw	r2, #513	@ 0x201
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d130      	bne.n	800370c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			if(i < 100000){
 80036aa:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003720 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	dc05      	bgt.n	80036c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
				i++;
 80036b4:	4b19      	ldr	r3, [pc, #100]	@ (800371c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e002      	b.n	80036c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			}else{
				i=0;
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
			}
			speed = RxData[2] << 8;
 80036c6:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80036c8:	789b      	ldrb	r3, [r3, #2]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80036d0:	801a      	strh	r2, [r3, #0]
			speed = speed  + RxData[3];
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80036d4:	78db      	ldrb	r3, [r3, #3]
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	b29a      	uxth	r2, r3
 80036e0:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80036e2:	801a      	strh	r2, [r3, #0]
			speed = speed * 1.5;
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff3b 	bl	8000564 <__aeabi_i2d>
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80036f4:	f7fc ffa0 	bl	8000638 <__aeabi_dmul>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd fa5c 	bl	8000bbc <__aeabi_d2uiz>
 8003704:	4603      	mov	r3, r0
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800370a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000da0 	.word	0x20000da0
 8003718:	2000055c 	.word	0x2000055c
 800371c:	20000d0c 	.word	0x20000d0c
 8003720:	0001869f 	.word	0x0001869f
 8003724:	20000da8 	.word	0x20000da8
 8003728:	3ff80000 	.word	0x3ff80000

0800372c <can_transmit>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1){
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	@ 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	803b      	strh	r3, [r7, #0]
    CAN_TxHeaderTypeDef tx_header;
    uint8_t             data[8];
    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	61bb      	str	r3, [r7, #24]
    tx_header.IDE   = CAN_ID_STD;
 8003740:	2300      	movs	r3, #0
 8003742:	623b      	str	r3, [r7, #32]
    tx_header.RTR   = CAN_RTR_DATA;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.DLC   = CAN_DATA_SIZE;
 8003748:	2308      	movs	r3, #8
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
    tx_header.TransmitGlobalTime = DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    data[0] = msg1 >> 8;
 8003752:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003756:	121b      	asrs	r3, r3, #8
 8003758:	b21b      	sxth	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	743b      	strb	r3, [r7, #16]
    data[1] = msg1;
 800375e:	883b      	ldrh	r3, [r7, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	747b      	strb	r3, [r7, #17]
    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	f107 0210 	add.w	r2, r7, #16
 800376c:	f107 0118 	add.w	r1, r7, #24
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f006 fa13 	bl	8009b9c <HAL_CAN_AddTxMessage>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <can_transmit+0x62>
    	while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 800377c:	bf00      	nop
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f006 fada 	bl	8009d3c <HAL_CAN_IsTxMessagePending>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f7      	bne.n	800377e <can_transmit+0x52>
//    	Error_Handler();
    }
}
 800378e:	bf00      	nop
 8003790:	3730      	adds	r7, #48	@ 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <Joystick_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Joystick_task */
void Joystick_task(void const * argument)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);	//SPI chip select
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037a6:	4844      	ldr	r0, [pc, #272]	@ (80038b8 <Joystick_task+0x120>)
 80037a8:	f007 fd04 	bl	800b1b4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, TX, RX, 9, 10); //full duplexeer medeelel avah RX deer hadgalah
 80037ac:	230a      	movs	r3, #10
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2309      	movs	r3, #9
 80037b2:	4a42      	ldr	r2, [pc, #264]	@ (80038bc <Joystick_task+0x124>)
 80037b4:	4942      	ldr	r1, [pc, #264]	@ (80038c0 <Joystick_task+0x128>)
 80037b6:	4843      	ldr	r0, [pc, #268]	@ (80038c4 <Joystick_task+0x12c>)
 80037b8:	f009 f895 	bl	800c8e6 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 80037bc:	2201      	movs	r2, #1
 80037be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037c2:	483d      	ldr	r0, [pc, #244]	@ (80038b8 <Joystick_task+0x120>)
 80037c4:	f007 fcf6 	bl	800b1b4 <HAL_GPIO_WritePin>
		if(comma == 0){
 80037c8:	4b3f      	ldr	r3, [pc, #252]	@ (80038c8 <Joystick_task+0x130>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d135      	bne.n	800383c <Joystick_task+0xa4>
			y=left_y*7.8125;//(128-RX[8])*7.8125;
 80037d0:	4b3e      	ldr	r3, [pc, #248]	@ (80038cc <Joystick_task+0x134>)
 80037d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	4b3d      	ldr	r3, [pc, #244]	@ (80038d0 <Joystick_task+0x138>)
 80037dc:	f7fc ff2c 	bl	8000638 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fd f9c0 	bl	8000b6c <__aeabi_d2iz>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a39      	ldr	r2, [pc, #228]	@ (80038d4 <Joystick_task+0x13c>)
 80037f0:	6013      	str	r3, [r2, #0]
			x=left_x*7.8125;//(RX[7]-128)*7.8125;
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <Joystick_task+0x140>)
 80037f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <Joystick_task+0x138>)
 80037fe:	f7fc ff1b 	bl	8000638 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	f7fd f9af 	bl	8000b6c <__aeabi_d2iz>
 800380e:	4603      	mov	r3, r0
 8003810:	4a32      	ldr	r2, [pc, #200]	@ (80038dc <Joystick_task+0x144>)
 8003812:	6013      	str	r3, [r2, #0]
			r=right_x*1.828593664;//(RX[5]-128);
 8003814:	4b32      	ldr	r3, [pc, #200]	@ (80038e0 <Joystick_task+0x148>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fea3 	bl	8000564 <__aeabi_i2d>
 800381e:	a322      	add	r3, pc, #136	@ (adr r3, 80038a8 <Joystick_task+0x110>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc ff08 	bl	8000638 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	f7fd f99c 	bl	8000b6c <__aeabi_d2iz>
 8003834:	4603      	mov	r3, r0
 8003836:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <Joystick_task+0x14c>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e087      	b.n	800394c <Joystick_task+0x1b4>
		}

		else if(comma == 10){
 800383c:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <Joystick_task+0x130>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b0a      	cmp	r3, #10
 8003842:	d151      	bne.n	80038e8 <Joystick_task+0x150>
			y=(128-RX[8])*2.62467;//(128-RX[8])*7.8125;
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <Joystick_task+0x124>)
 8003846:	7a1b      	ldrb	r3, [r3, #8]
 8003848:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fe89 	bl	8000564 <__aeabi_i2d>
 8003852:	a317      	add	r3, pc, #92	@ (adr r3, 80038b0 <Joystick_task+0x118>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc feee 	bl	8000638 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f982 	bl	8000b6c <__aeabi_d2iz>
 8003868:	4603      	mov	r3, r0
 800386a:	4a1a      	ldr	r2, [pc, #104]	@ (80038d4 <Joystick_task+0x13c>)
 800386c:	6013      	str	r3, [r2, #0]
			x=(RX[7]-128)*2.62467;//(RX[7]-128)*7.8125;
 800386e:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <Joystick_task+0x124>)
 8003870:	79db      	ldrb	r3, [r3, #7]
 8003872:	3b80      	subs	r3, #128	@ 0x80
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe75 	bl	8000564 <__aeabi_i2d>
 800387a:	a30d      	add	r3, pc, #52	@ (adr r3, 80038b0 <Joystick_task+0x118>)
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f7fc feda 	bl	8000638 <__aeabi_dmul>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f7fd f96e 	bl	8000b6c <__aeabi_d2iz>
 8003890:	4603      	mov	r3, r0
 8003892:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <Joystick_task+0x144>)
 8003894:	6013      	str	r3, [r2, #0]
			r=(RX[5]-128);//(RX[5]-128);
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <Joystick_task+0x124>)
 8003898:	795b      	ldrb	r3, [r3, #5]
 800389a:	3b80      	subs	r3, #128	@ 0x80
 800389c:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <Joystick_task+0x14c>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e054      	b.n	800394c <Joystick_task+0x1b4>
 80038a2:	bf00      	nop
 80038a4:	f3af 8000 	nop.w
 80038a8:	6e08d852 	.word	0x6e08d852
 80038ac:	3ffd41eb 	.word	0x3ffd41eb
 80038b0:	fc2656ac 	.word	0xfc2656ac
 80038b4:	4004ff52 	.word	0x4004ff52
 80038b8:	40020000 	.word	0x40020000
 80038bc:	20000c48 	.word	0x20000c48
 80038c0:	20000020 	.word	0x20000020
 80038c4:	200005a0 	.word	0x200005a0
 80038c8:	20002e30 	.word	0x20002e30
 80038cc:	20002e28 	.word	0x20002e28
 80038d0:	401f4000 	.word	0x401f4000
 80038d4:	20000cbc 	.word	0x20000cbc
 80038d8:	20002e20 	.word	0x20002e20
 80038dc:	20000cb8 	.word	0x20000cb8
 80038e0:	20002e18 	.word	0x20002e18
 80038e4:	20000cc0 	.word	0x20000cc0
		}
		else if(RX[3] == 254){
 80038e8:	4b92      	ldr	r3, [pc, #584]	@ (8003b34 <Joystick_task+0x39c>)
 80038ea:	78db      	ldrb	r3, [r3, #3]
 80038ec:	2bfe      	cmp	r3, #254	@ 0xfe
 80038ee:	d12d      	bne.n	800394c <Joystick_task+0x1b4>
			y=(128-RX[8])*7.8125;//(128-RX[8])*2.62467;
 80038f0:	4b90      	ldr	r3, [pc, #576]	@ (8003b34 <Joystick_task+0x39c>)
 80038f2:	7a1b      	ldrb	r3, [r3, #8]
 80038f4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe33 	bl	8000564 <__aeabi_i2d>
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b8d      	ldr	r3, [pc, #564]	@ (8003b38 <Joystick_task+0x3a0>)
 8003904:	f7fc fe98 	bl	8000638 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f92c 	bl	8000b6c <__aeabi_d2iz>
 8003914:	4603      	mov	r3, r0
 8003916:	4a89      	ldr	r2, [pc, #548]	@ (8003b3c <Joystick_task+0x3a4>)
 8003918:	6013      	str	r3, [r2, #0]
			x=(RX[7]-128)*7.8125;//(RX[7]-128)*2.62467;
 800391a:	4b86      	ldr	r3, [pc, #536]	@ (8003b34 <Joystick_task+0x39c>)
 800391c:	79db      	ldrb	r3, [r3, #7]
 800391e:	3b80      	subs	r3, #128	@ 0x80
 8003920:	4618      	mov	r0, r3
 8003922:	f7fc fe1f 	bl	8000564 <__aeabi_i2d>
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	4b83      	ldr	r3, [pc, #524]	@ (8003b38 <Joystick_task+0x3a0>)
 800392c:	f7fc fe84 	bl	8000638 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f7fd f918 	bl	8000b6c <__aeabi_d2iz>
 800393c:	4603      	mov	r3, r0
 800393e:	4a80      	ldr	r2, [pc, #512]	@ (8003b40 <Joystick_task+0x3a8>)
 8003940:	6013      	str	r3, [r2, #0]
			r=(RX[5]-128);//(RX[5]-128);
 8003942:	4b7c      	ldr	r3, [pc, #496]	@ (8003b34 <Joystick_task+0x39c>)
 8003944:	795b      	ldrb	r3, [r3, #5]
 8003946:	3b80      	subs	r3, #128	@ 0x80
 8003948:	4a7e      	ldr	r2, [pc, #504]	@ (8003b44 <Joystick_task+0x3ac>)
 800394a:	6013      	str	r3, [r2, #0]
		}


		power = hypot(x,y);
 800394c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b40 <Joystick_task+0x3a8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fe07 	bl	8000564 <__aeabi_i2d>
 8003956:	4604      	mov	r4, r0
 8003958:	460d      	mov	r5, r1
 800395a:	4b78      	ldr	r3, [pc, #480]	@ (8003b3c <Joystick_task+0x3a4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fe00 	bl	8000564 <__aeabi_i2d>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	ec43 2b11 	vmov	d1, r2, r3
 800396c:	ec45 4b10 	vmov	d0, r4, r5
 8003970:	f00d f9f2 	bl	8010d58 <hypot>
 8003974:	eeb0 7a40 	vmov.f32	s14, s0
 8003978:	eef0 7a60 	vmov.f32	s15, s1
 800397c:	4b72      	ldr	r3, [pc, #456]	@ (8003b48 <Joystick_task+0x3b0>)
 800397e:	ed83 7b00 	vstr	d7, [r3]
		if(power>1000){
 8003982:	4b71      	ldr	r3, [pc, #452]	@ (8003b48 <Joystick_task+0x3b0>)
 8003984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b4c <Joystick_task+0x3b4>)
 800398e:	f7fd f8e3 	bl	8000b58 <__aeabi_dcmpgt>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <Joystick_task+0x20c>
			power=1000;
 8003998:	496b      	ldr	r1, [pc, #428]	@ (8003b48 <Joystick_task+0x3b0>)
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	4b6b      	ldr	r3, [pc, #428]	@ (8003b4c <Joystick_task+0x3b4>)
 80039a0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		alpha = atan2(y,x);
 80039a4:	4b65      	ldr	r3, [pc, #404]	@ (8003b3c <Joystick_task+0x3a4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fddb 	bl	8000564 <__aeabi_i2d>
 80039ae:	4604      	mov	r4, r0
 80039b0:	460d      	mov	r5, r1
 80039b2:	4b63      	ldr	r3, [pc, #396]	@ (8003b40 <Joystick_task+0x3a8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fdd4 	bl	8000564 <__aeabi_i2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	ec43 2b11 	vmov	d1, r2, r3
 80039c4:	ec45 4b10 	vmov	d0, r4, r5
 80039c8:	f00d f9c2 	bl	8010d50 <atan2>
 80039cc:	eeb0 7a40 	vmov.f32	s14, s0
 80039d0:	eef0 7a60 	vmov.f32	s15, s1
 80039d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b50 <Joystick_task+0x3b8>)
 80039d6:	ed83 7b00 	vstr	d7, [r3]
		ML = sin(alpha-PI/4)*power;
 80039da:	4b5d      	ldr	r3, [pc, #372]	@ (8003b50 <Joystick_task+0x3b8>)
 80039dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80039e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b54 <Joystick_task+0x3bc>)
 80039e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003b58 <Joystick_task+0x3c0>)
 80039ec:	f7fc ff4e 	bl	800088c <__aeabi_ddiv>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4620      	mov	r0, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	f7fc fc66 	bl	80002c8 <__aeabi_dsub>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	ec43 2b17 	vmov	d7, r2, r3
 8003a04:	eeb0 0a47 	vmov.f32	s0, s14
 8003a08:	eef0 0a67 	vmov.f32	s1, s15
 8003a0c:	f00d fca0 	bl	8011350 <sin>
 8003a10:	ec51 0b10 	vmov	r0, r1, d0
 8003a14:	4b4c      	ldr	r3, [pc, #304]	@ (8003b48 <Joystick_task+0x3b0>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fe0d 	bl	8000638 <__aeabi_dmul>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f8a1 	bl	8000b6c <__aeabi_d2iz>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b5c <Joystick_task+0x3c4>)
 8003a2e:	6013      	str	r3, [r2, #0]
		MR = cos(alpha-PI/4)*power;
 8003a30:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <Joystick_task+0x3b8>)
 8003a32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a36:	4b47      	ldr	r3, [pc, #284]	@ (8003b54 <Joystick_task+0x3bc>)
 8003a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	4b45      	ldr	r3, [pc, #276]	@ (8003b58 <Joystick_task+0x3c0>)
 8003a42:	f7fc ff23 	bl	800088c <__aeabi_ddiv>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f7fc fc3b 	bl	80002c8 <__aeabi_dsub>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	ec43 2b17 	vmov	d7, r2, r3
 8003a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a5e:	eef0 0a67 	vmov.f32	s1, s15
 8003a62:	f00d fc0d 	bl	8011280 <cos>
 8003a66:	ec51 0b10 	vmov	r0, r1, d0
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <Joystick_task+0x3b0>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fde2 	bl	8000638 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f876 	bl	8000b6c <__aeabi_d2iz>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a37      	ldr	r2, [pc, #220]	@ (8003b60 <Joystick_task+0x3c8>)
 8003a84:	6013      	str	r3, [r2, #0]

		M1.setpoint=MR;
 8003a86:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <Joystick_task+0x3c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b21a      	sxth	r2, r3
 8003a8c:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <Joystick_task+0x3cc>)
 8003a8e:	801a      	strh	r2, [r3, #0]
		M2.setpoint=ML;
 8003a90:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <Joystick_task+0x3c4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b21a      	sxth	r2, r3
 8003a96:	4b34      	ldr	r3, [pc, #208]	@ (8003b68 <Joystick_task+0x3d0>)
 8003a98:	801a      	strh	r2, [r3, #0]
		M3.setpoint=ML;
 8003a9a:	4b30      	ldr	r3, [pc, #192]	@ (8003b5c <Joystick_task+0x3c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	4b32      	ldr	r3, [pc, #200]	@ (8003b6c <Joystick_task+0x3d4>)
 8003aa2:	801a      	strh	r2, [r3, #0]
		M4.setpoint=MR;
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b60 <Joystick_task+0x3c8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b21a      	sxth	r2, r3
 8003aaa:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <Joystick_task+0x3d8>)
 8003aac:	801a      	strh	r2, [r3, #0]
		can_transmit(&hcan1, FIRST_GROUP_ID, 10000);
 8003aae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ab6:	482f      	ldr	r0, [pc, #188]	@ (8003b74 <Joystick_task+0x3dc>)
 8003ab8:	f7ff fe38 	bl	800372c <can_transmit>
		osDelay(2000);
 8003abc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ac0:	f00b ff5c 	bl	800f97c <osDelay>
		can_transmit(&hcan1, FIRST_GROUP_ID, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aca:	482a      	ldr	r0, [pc, #168]	@ (8003b74 <Joystick_task+0x3dc>)
 8003acc:	f7ff fe2e 	bl	800372c <can_transmit>
		osDelay(2000);
 8003ad0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ad4:	f00b ff52 	bl	800f97c <osDelay>
		can_transmit(&hcan1, FIRST_GROUP_ID, -10000);
 8003ad8:	4a27      	ldr	r2, [pc, #156]	@ (8003b78 <Joystick_task+0x3e0>)
 8003ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ade:	4825      	ldr	r0, [pc, #148]	@ (8003b74 <Joystick_task+0x3dc>)
 8003ae0:	f7ff fe24 	bl	800372c <can_transmit>
		osDelay(2000);
 8003ae4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ae8:	f00b ff48 	bl	800f97c <osDelay>
		can_transmit(&hcan1, FIRST_GROUP_ID, 0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003af2:	4820      	ldr	r0, [pc, #128]	@ (8003b74 <Joystick_task+0x3dc>)
 8003af4:	f7ff fe1a 	bl	800372c <can_transmit>
		osDelay(2000);
 8003af8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003afc:	f00b ff3e 	bl	800f97c <osDelay>
		if(i%1000 == 0){
 8003b00:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <Joystick_task+0x3e4>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <Joystick_task+0x3e8>)
 8003b06:	fb83 1302 	smull	r1, r3, r3, r2
 8003b0a:	1199      	asrs	r1, r3, #6
 8003b0c:	17d3      	asrs	r3, r2, #31
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d104      	bne.n	8003b28 <Joystick_task+0x390>
			HAL_GPIO_TogglePin(blue_user_led_GPIO_Port, blue_user_led_Pin);
 8003b1e:	2180      	movs	r1, #128	@ 0x80
 8003b20:	4818      	ldr	r0, [pc, #96]	@ (8003b84 <Joystick_task+0x3ec>)
 8003b22:	f007 fb60 	bl	800b1e6 <HAL_GPIO_TogglePin>
 8003b26:	e63b      	b.n	80037a0 <Joystick_task+0x8>
		}else
			HAL_GPIO_TogglePin(blue_user_led_GPIO_Port, blue_user_led_Pin);
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	4816      	ldr	r0, [pc, #88]	@ (8003b84 <Joystick_task+0x3ec>)
 8003b2c:	f007 fb5b 	bl	800b1e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);	//SPI chip select
 8003b30:	e636      	b.n	80037a0 <Joystick_task+0x8>
 8003b32:	bf00      	nop
 8003b34:	20000c48 	.word	0x20000c48
 8003b38:	401f4000 	.word	0x401f4000
 8003b3c:	20000cbc 	.word	0x20000cbc
 8003b40:	20000cb8 	.word	0x20000cb8
 8003b44:	20000cc0 	.word	0x20000cc0
 8003b48:	20000c38 	.word	0x20000c38
 8003b4c:	408f4000 	.word	0x408f4000
 8003b50:	20000c40 	.word	0x20000c40
 8003b54:	20000018 	.word	0x20000018
 8003b58:	40100000 	.word	0x40100000
 8003b5c:	20000cd8 	.word	0x20000cd8
 8003b60:	20000cdc 	.word	0x20000cdc
 8003b64:	20000d80 	.word	0x20000d80
 8003b68:	20000d88 	.word	0x20000d88
 8003b6c:	20000d90 	.word	0x20000d90
 8003b70:	20000d98 	.word	0x20000d98
 8003b74:	20000578 	.word	0x20000578
 8003b78:	ffffd8f0 	.word	0xffffd8f0
 8003b7c:	20000d0c 	.word	0x20000d0c
 8003b80:	10624dd3 	.word	0x10624dd3
 8003b84:	40020400 	.word	0x40020400

08003b88 <Ball_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ball_task */
void Ball_task(void const * argument)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ball_task */
  /* Infinite loop */
  for(;;)
  {
 	      if (Ball_switch1 != switchStatePrev_3) {
 8003b90:	2102      	movs	r1, #2
 8003b92:	484d      	ldr	r0, [pc, #308]	@ (8003cc8 <Ball_task+0x140>)
 8003b94:	f007 faf6 	bl	800b184 <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ccc <Ball_task+0x144>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d010      	beq.n	8003bc6 <Ball_task+0x3e>
 	          if (Ball_switch1 == GPIO_PIN_SET) {
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4848      	ldr	r0, [pc, #288]	@ (8003cc8 <Ball_task+0x140>)
 8003ba8:	f007 faec 	bl	800b184 <HAL_GPIO_ReadPin>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d103      	bne.n	8003bba <Ball_task+0x32>
 	              ff[2]=0;
 8003bb2:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <Ball_task+0x148>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	709a      	strb	r2, [r3, #2]
 8003bb8:	e005      	b.n	8003bc6 <Ball_task+0x3e>
 	          } else {
 	              ff[2]++;
 8003bba:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <Ball_task+0x148>)
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <Ball_task+0x148>)
 8003bc4:	709a      	strb	r2, [r3, #2]
 	          }
 	      }
 	      if (ff[2] != 0) {
 8003bc6:	4b42      	ldr	r3, [pc, #264]	@ (8003cd0 <Ball_task+0x148>)
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <Ball_task+0x4c>
 	          flag[2] = 2;
 8003bce:	4b41      	ldr	r3, [pc, #260]	@ (8003cd4 <Ball_task+0x14c>)
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	709a      	strb	r2, [r3, #2]
 	      }
 	      if (Ball_switch2 != switchStatePrev_4) {
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	4840      	ldr	r0, [pc, #256]	@ (8003cd8 <Ball_task+0x150>)
 8003bd8:	f007 fad4 	bl	800b184 <HAL_GPIO_ReadPin>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cdc <Ball_task+0x154>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d010      	beq.n	8003c0a <Ball_task+0x82>
 	          if (Ball_switch2 == GPIO_PIN_SET) {
 8003be8:	2110      	movs	r1, #16
 8003bea:	483b      	ldr	r0, [pc, #236]	@ (8003cd8 <Ball_task+0x150>)
 8003bec:	f007 faca 	bl	800b184 <HAL_GPIO_ReadPin>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d103      	bne.n	8003bfe <Ball_task+0x76>
 	              ff[3]=0;
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <Ball_task+0x148>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	70da      	strb	r2, [r3, #3]
 8003bfc:	e005      	b.n	8003c0a <Ball_task+0x82>
 	          } else {
 	              ff[3]++;
 8003bfe:	4b34      	ldr	r3, [pc, #208]	@ (8003cd0 <Ball_task+0x148>)
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	3301      	adds	r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b32      	ldr	r3, [pc, #200]	@ (8003cd0 <Ball_task+0x148>)
 8003c08:	70da      	strb	r2, [r3, #3]
 	          }
 	      }
 	      if (ff[3] != 0) {
 8003c0a:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <Ball_task+0x148>)
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <Ball_task+0x90>
 	          flag[3] = 2;
 8003c12:	4b30      	ldr	r3, [pc, #192]	@ (8003cd4 <Ball_task+0x14c>)
 8003c14:	2202      	movs	r2, #2
 8003c16:	70da      	strb	r2, [r3, #3]
 	      }
 	      if(((Ball_switch1 == 1) || (Ball_switch2 == 1)) && (RX[6] > 240)){
 8003c18:	2102      	movs	r1, #2
 8003c1a:	482b      	ldr	r0, [pc, #172]	@ (8003cc8 <Ball_task+0x140>)
 8003c1c:	f007 fab2 	bl	800b184 <HAL_GPIO_ReadPin>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d006      	beq.n	8003c34 <Ball_task+0xac>
 8003c26:	2110      	movs	r1, #16
 8003c28:	482b      	ldr	r0, [pc, #172]	@ (8003cd8 <Ball_task+0x150>)
 8003c2a:	f007 faab 	bl	800b184 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d111      	bne.n	8003c58 <Ball_task+0xd0>
 8003c34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <Ball_task+0x158>)
 8003c36:	799b      	ldrb	r3, [r3, #6]
 8003c38:	2bf0      	cmp	r3, #240	@ 0xf0
 8003c3a:	d90d      	bls.n	8003c58 <Ball_task+0xd0>
		  	TIM5->CCR3=zogs;
 8003c3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <Ball_task+0x15c>)
 8003c3e:	2208      	movs	r2, #8
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c
		  	osDelay(200);
 8003c42:	20c8      	movs	r0, #200	@ 0xc8
 8003c44:	f00b fe9a 	bl	800f97c <osDelay>
	  	  	TIM5->CCR3=uragsh;
 8003c48:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <Ball_task+0x15c>)
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, SET);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2108      	movs	r1, #8
 8003c52:	4825      	ldr	r0, [pc, #148]	@ (8003ce8 <Ball_task+0x160>)
 8003c54:	f007 faae 	bl	800b1b4 <HAL_GPIO_WritePin>
	  	  }
 	      if(((Ball_switch1 == 0) || (Ball_switch2 == 0)) && (RX[3] == 253)){
 8003c58:	2102      	movs	r1, #2
 8003c5a:	481b      	ldr	r0, [pc, #108]	@ (8003cc8 <Ball_task+0x140>)
 8003c5c:	f007 fa92 	bl	800b184 <HAL_GPIO_ReadPin>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <Ball_task+0xec>
 8003c66:	2110      	movs	r1, #16
 8003c68:	481b      	ldr	r0, [pc, #108]	@ (8003cd8 <Ball_task+0x150>)
 8003c6a:	f007 fa8b 	bl	800b184 <HAL_GPIO_ReadPin>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <Ball_task+0xfa>
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <Ball_task+0x158>)
 8003c76:	78db      	ldrb	r3, [r3, #3]
 8003c78:	2bfd      	cmp	r3, #253	@ 0xfd
 8003c7a:	d102      	bne.n	8003c82 <Ball_task+0xfa>
	  	  TIM5->CCR3=zogs;
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <Ball_task+0x15c>)
 8003c7e:	2208      	movs	r2, #8
 8003c80:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  }
	  	  if(RX[6]<10){
 8003c82:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <Ball_task+0x158>)
 8003c84:	799b      	ldrb	r3, [r3, #6]
 8003c86:	2b09      	cmp	r3, #9
 8003c88:	d808      	bhi.n	8003c9c <Ball_task+0x114>
	  		TIM5->CCR3=zogs;
 8003c8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <Ball_task+0x15c>)
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		osDelay(200);
 8003c90:	20c8      	movs	r0, #200	@ 0xc8
 8003c92:	f00b fe73 	bl	800f97c <osDelay>
	  		TIM5->CCR3=hoish;
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <Ball_task+0x15c>)
 8003c98:	2206      	movs	r2, #6
 8003c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  }
/**********************     RELAY BOMBOG    ************************************/
	  	  if(RX[4]==251){
 8003c9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <Ball_task+0x158>)
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	2bfb      	cmp	r3, #251	@ 0xfb
 8003ca2:	d10d      	bne.n	8003cc0 <Ball_task+0x138>
	  		  Ball_kick;
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	480f      	ldr	r0, [pc, #60]	@ (8003ce8 <Ball_task+0x160>)
 8003caa:	f007 fa83 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  osDelay(1000);
 8003cae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cb2:	f00b fe63 	bl	800f97c <osDelay>
	  		  Ball_in;
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2108      	movs	r1, #8
 8003cba:	480b      	ldr	r0, [pc, #44]	@ (8003ce8 <Ball_task+0x160>)
 8003cbc:	f007 fa7a 	bl	800b1b4 <HAL_GPIO_WritePin>
	  	  		  }
			  osDelay(30);
 8003cc0:	201e      	movs	r0, #30
 8003cc2:	f00b fe5b 	bl	800f97c <osDelay>
 	      if (Ball_switch1 != switchStatePrev_3) {
 8003cc6:	e763      	b.n	8003b90 <Ball_task+0x8>
 8003cc8:	40020800 	.word	0x40020800
 8003ccc:	20000cfc 	.word	0x20000cfc
 8003cd0:	20000e04 	.word	0x20000e04
 8003cd4:	20000dd4 	.word	0x20000dd4
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	20000d00 	.word	0x20000d00
 8003ce0:	20000c48 	.word	0x20000c48
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40021400 	.word	0x40021400

08003cec <Seedling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Seedling_task */
void Seedling_task(void const * argument)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Seedling_task */
  /* Infinite loop */
  for(;;)
  {
	 	      if (Up_switch1 != switchStatePrev_1) {
 8003cf4:	2104      	movs	r1, #4
 8003cf6:	4873      	ldr	r0, [pc, #460]	@ (8003ec4 <Seedling_task+0x1d8>)
 8003cf8:	f007 fa44 	bl	800b184 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b71      	ldr	r3, [pc, #452]	@ (8003ec8 <Seedling_task+0x1dc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d010      	beq.n	8003d2a <Seedling_task+0x3e>
	 	          if (Up_switch1 == GPIO_PIN_SET) {
 8003d08:	2104      	movs	r1, #4
 8003d0a:	486e      	ldr	r0, [pc, #440]	@ (8003ec4 <Seedling_task+0x1d8>)
 8003d0c:	f007 fa3a 	bl	800b184 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d103      	bne.n	8003d1e <Seedling_task+0x32>
	 	              ff[0]=0;
 8003d16:	4b6d      	ldr	r3, [pc, #436]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e005      	b.n	8003d2a <Seedling_task+0x3e>
	 	          } else {
	 	              ff[0]++;
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b69      	ldr	r3, [pc, #420]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d28:	701a      	strb	r2, [r3, #0]
	 	          }
	 	      }
	 	      if (ff[0] != 0) {
 8003d2a:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <Seedling_task+0x4c>
	 	          flag[0] = 2;
 8003d32:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <Seedling_task+0x1e4>)
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
	 	      }

	 	      if (Up_switch2 != switchStatePrev_2) {
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4866      	ldr	r0, [pc, #408]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003d3c:	f007 fa22 	bl	800b184 <HAL_GPIO_ReadPin>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b64      	ldr	r3, [pc, #400]	@ (8003ed8 <Seedling_task+0x1ec>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d010      	beq.n	8003d6e <Seedling_task+0x82>
	 	          if (Up_switch2 == GPIO_PIN_SET) {
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4861      	ldr	r0, [pc, #388]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003d50:	f007 fa18 	bl	800b184 <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d103      	bne.n	8003d62 <Seedling_task+0x76>
	 	              ff[1]=0;
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	705a      	strb	r2, [r3, #1]
 8003d60:	e005      	b.n	8003d6e <Seedling_task+0x82>
	 	          } else {
	 	              ff[1]++;
 8003d62:	4b5a      	ldr	r3, [pc, #360]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	3301      	adds	r3, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b58      	ldr	r3, [pc, #352]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d6c:	705a      	strb	r2, [r3, #1]
	 	          }
	 	      }
	 	      if (ff[1] != 0) {
 8003d6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ecc <Seedling_task+0x1e0>)
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <Seedling_task+0x90>
	 	          flag[1] = 2;
 8003d76:	4b56      	ldr	r3, [pc, #344]	@ (8003ed0 <Seedling_task+0x1e4>)
 8003d78:	2202      	movs	r2, #2
 8003d7a:	705a      	strb	r2, [r3, #1]
	 	      }
	 	      if (Down_switch1 != switchStatePrev_5) {
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	4857      	ldr	r0, [pc, #348]	@ (8003edc <Seedling_task+0x1f0>)
 8003d80:	f007 fa00 	bl	800b184 <HAL_GPIO_ReadPin>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b55      	ldr	r3, [pc, #340]	@ (8003ee0 <Seedling_task+0x1f4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d010      	beq.n	8003db2 <Seedling_task+0xc6>
	 	          if (Down_switch1 == GPIO_PIN_RESET) {
 8003d90:	2104      	movs	r1, #4
 8003d92:	4852      	ldr	r0, [pc, #328]	@ (8003edc <Seedling_task+0x1f0>)
 8003d94:	f007 f9f6 	bl	800b184 <HAL_GPIO_ReadPin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <Seedling_task+0xba>
	 	              ff[4]=0;
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <Seedling_task+0x1e0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	711a      	strb	r2, [r3, #4]
 8003da4:	e005      	b.n	8003db2 <Seedling_task+0xc6>
	 	          } else {
	 	              ff[4]++;
 8003da6:	4b49      	ldr	r3, [pc, #292]	@ (8003ecc <Seedling_task+0x1e0>)
 8003da8:	791b      	ldrb	r3, [r3, #4]
 8003daa:	3301      	adds	r3, #1
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <Seedling_task+0x1e0>)
 8003db0:	711a      	strb	r2, [r3, #4]
	 	          }
	 	      }
	 	      if (ff[4] != 0) {
 8003db2:	4b46      	ldr	r3, [pc, #280]	@ (8003ecc <Seedling_task+0x1e0>)
 8003db4:	791b      	ldrb	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <Seedling_task+0xd4>
	 	          flag[4] = 2;
 8003dba:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <Seedling_task+0x1e4>)
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	711a      	strb	r2, [r3, #4]
	 	      }
	 	      if (Down_switch2 != switchStatePrev_6) {
 8003dc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003dc4:	4843      	ldr	r0, [pc, #268]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003dc6:	f007 f9dd 	bl	800b184 <HAL_GPIO_ReadPin>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <Seedling_task+0x1f8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d011      	beq.n	8003dfa <Seedling_task+0x10e>
	 	          if (Down_switch2 == GPIO_PIN_RESET) {
 8003dd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003dda:	483e      	ldr	r0, [pc, #248]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003ddc:	f007 f9d2 	bl	800b184 <HAL_GPIO_ReadPin>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <Seedling_task+0x102>
	 	              ff[5]=0;
 8003de6:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <Seedling_task+0x1e0>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	715a      	strb	r2, [r3, #5]
 8003dec:	e005      	b.n	8003dfa <Seedling_task+0x10e>
	 	          } else {
	 	              ff[5]++;
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <Seedling_task+0x1e0>)
 8003df0:	795b      	ldrb	r3, [r3, #5]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b35      	ldr	r3, [pc, #212]	@ (8003ecc <Seedling_task+0x1e0>)
 8003df8:	715a      	strb	r2, [r3, #5]
	 	          }
	 	      }
	 	      if (ff[5] != 0) {
 8003dfa:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <Seedling_task+0x1e0>)
 8003dfc:	795b      	ldrb	r3, [r3, #5]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <Seedling_task+0x11c>
	 	          flag[5] = 2;
 8003e02:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <Seedling_task+0x1e4>)
 8003e04:	2202      	movs	r2, #2
 8003e06:	715a      	strb	r2, [r3, #5]
//	  	  }

//****************************************seedling_motor************************************************/
//	 	      seedling_check();

			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==255)){
 8003e08:	2104      	movs	r1, #4
 8003e0a:	4834      	ldr	r0, [pc, #208]	@ (8003edc <Seedling_task+0x1f0>)
 8003e0c:	f007 f9ba 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <Seedling_task+0x13a>
 8003e16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e1a:	482e      	ldr	r0, [pc, #184]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003e1c:	f007 f9b2 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <Seedling_task+0x148>
 8003e26:	4b30      	ldr	r3, [pc, #192]	@ (8003ee8 <Seedling_task+0x1fc>)
 8003e28:	791b      	ldrb	r3, [r3, #4]
 8003e2a:	2bff      	cmp	r3, #255	@ 0xff
 8003e2c:	d102      	bne.n	8003e34 <Seedling_task+0x148>
				  mode=2;
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <Seedling_task+0x200>)
 8003e30:	2202      	movs	r2, #2
 8003e32:	601a      	str	r2, [r3, #0]
			  }
			  if(((Up_switch1 == 0) || (Up_switch2 == 0)) && (RX[4]==255)){
 8003e34:	2104      	movs	r1, #4
 8003e36:	4823      	ldr	r0, [pc, #140]	@ (8003ec4 <Seedling_task+0x1d8>)
 8003e38:	f007 f9a4 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <Seedling_task+0x164>
 8003e42:	2101      	movs	r1, #1
 8003e44:	4823      	ldr	r0, [pc, #140]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003e46:	f007 f99d 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d117      	bne.n	8003e80 <Seedling_task+0x194>
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <Seedling_task+0x1fc>)
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	2bff      	cmp	r3, #255	@ 0xff
 8003e56:	d113      	bne.n	8003e80 <Seedling_task+0x194>
				  mode=2;
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <Seedling_task+0x200>)
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	601a      	str	r2, [r3, #0]
				  if(fl == 1){
 8003e5e:	4b24      	ldr	r3, [pc, #144]	@ (8003ef0 <Seedling_task+0x204>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d103      	bne.n	8003e6e <Seedling_task+0x182>
					  fl=2;
 8003e66:	4b22      	ldr	r3, [pc, #136]	@ (8003ef0 <Seedling_task+0x204>)
 8003e68:	2202      	movs	r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e008      	b.n	8003e80 <Seedling_task+0x194>
				  }
				  else if(fl == -1){
 8003e6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <Seedling_task+0x204>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e76:	d103      	bne.n	8003e80 <Seedling_task+0x194>
					  fl=-2;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef0 <Seedling_task+0x204>)
 8003e7a:	f06f 0201 	mvn.w	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
				  }
			  }
			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==239)){
 8003e80:	2104      	movs	r1, #4
 8003e82:	4816      	ldr	r0, [pc, #88]	@ (8003edc <Seedling_task+0x1f0>)
 8003e84:	f007 f97e 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <Seedling_task+0x1b2>
 8003e8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e92:	4810      	ldr	r0, [pc, #64]	@ (8003ed4 <Seedling_task+0x1e8>)
 8003e94:	f007 f976 	bl	800b184 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <Seedling_task+0x1c6>
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <Seedling_task+0x1fc>)
 8003ea0:	791b      	ldrb	r3, [r3, #4]
 8003ea2:	2bef      	cmp	r3, #239	@ 0xef
 8003ea4:	d105      	bne.n	8003eb2 <Seedling_task+0x1c6>
				  mode=1;
 8003ea6:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <Seedling_task+0x200>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
				  fl=1;
 8003eac:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <Seedling_task+0x204>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
			  }
			  if(RX[4] == 191){
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <Seedling_task+0x1fc>)
 8003eb4:	791b      	ldrb	r3, [r3, #4]
 8003eb6:	2bbf      	cmp	r3, #191	@ 0xbf
 8003eb8:	d11c      	bne.n	8003ef4 <Seedling_task+0x208>
				  mode=0;
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <Seedling_task+0x200>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e023      	b.n	8003f0a <Seedling_task+0x21e>
 8003ec2:	bf00      	nop
 8003ec4:	40021800 	.word	0x40021800
 8003ec8:	20000cf4 	.word	0x20000cf4
 8003ecc:	20000e04 	.word	0x20000e04
 8003ed0:	20000dd4 	.word	0x20000dd4
 8003ed4:	40020800 	.word	0x40020800
 8003ed8:	20000cf8 	.word	0x20000cf8
 8003edc:	40020c00 	.word	0x40020c00
 8003ee0:	20000d04 	.word	0x20000d04
 8003ee4:	20000d08 	.word	0x20000d08
 8003ee8:	20000c48 	.word	0x20000c48
 8003eec:	20000054 	.word	0x20000054
 8003ef0:	20000cc4 	.word	0x20000cc4
			  }
			  else if(RX[3] == 254){
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <Seedling_task+0x2f4>)
 8003ef6:	78db      	ldrb	r3, [r3, #3]
 8003ef8:	2bfe      	cmp	r3, #254	@ 0xfe
 8003efa:	d106      	bne.n	8003f0a <Seedling_task+0x21e>
				  mode=1;
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <Seedling_task+0x2f8>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
				  fl=-1;
 8003f02:	4b39      	ldr	r3, [pc, #228]	@ (8003fe8 <Seedling_task+0x2fc>)
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f08:	601a      	str	r2, [r3, #0]
			  }
//****************************************seedling_relay************************************************/
			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==247)){
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	4837      	ldr	r0, [pc, #220]	@ (8003fec <Seedling_task+0x300>)
 8003f0e:	f007 f939 	bl	800b184 <HAL_GPIO_ReadPin>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <Seedling_task+0x23c>
 8003f18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f1c:	4834      	ldr	r0, [pc, #208]	@ (8003ff0 <Seedling_task+0x304>)
 8003f1e:	f007 f931 	bl	800b184 <HAL_GPIO_ReadPin>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <Seedling_task+0x25c>
 8003f28:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe0 <Seedling_task+0x2f4>)
 8003f2a:	791b      	ldrb	r3, [r3, #4]
 8003f2c:	2bf7      	cmp	r3, #247	@ 0xf7
 8003f2e:	d10b      	bne.n	8003f48 <Seedling_task+0x25c>
				  Seedling_get;
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f36:	482f      	ldr	r0, [pc, #188]	@ (8003ff4 <Seedling_task+0x308>)
 8003f38:	f007 f93c 	bl	800b1b4 <HAL_GPIO_WritePin>
				  Seedling_get_1;
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f42:	482c      	ldr	r0, [pc, #176]	@ (8003ff4 <Seedling_task+0x308>)
 8003f44:	f007 f936 	bl	800b1b4 <HAL_GPIO_WritePin>
			  }
			  if(RX[4]==223){
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <Seedling_task+0x2f4>)
 8003f4a:	791b      	ldrb	r3, [r3, #4]
 8003f4c:	2bdf      	cmp	r3, #223	@ 0xdf
 8003f4e:	d105      	bne.n	8003f5c <Seedling_task+0x270>
		  	  	  Seedling_take_1;
 8003f50:	2201      	movs	r2, #1
 8003f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f56:	4827      	ldr	r0, [pc, #156]	@ (8003ff4 <Seedling_task+0x308>)
 8003f58:	f007 f92c 	bl	800b1b4 <HAL_GPIO_WritePin>
		  	  }
		  	  if(RX[4]==127){
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <Seedling_task+0x2f4>)
 8003f5e:	791b      	ldrb	r3, [r3, #4]
 8003f60:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f62:	d105      	bne.n	8003f70 <Seedling_task+0x284>
		  	  	  Seedling_take_2;
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f6a:	4822      	ldr	r0, [pc, #136]	@ (8003ff4 <Seedling_task+0x308>)
 8003f6c:	f007 f922 	bl	800b1b4 <HAL_GPIO_WritePin>
		  	  }


	  	  if(mode==0){
 8003f70:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <Seedling_task+0x2f8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <Seedling_task+0x2a6>
	  		  HAL_GPIO_WritePin(motors_a, 1);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2120      	movs	r1, #32
 8003f7c:	481e      	ldr	r0, [pc, #120]	@ (8003ff8 <Seedling_task+0x30c>)
 8003f7e:	f007 f919 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2110      	movs	r1, #16
 8003f86:	481c      	ldr	r0, [pc, #112]	@ (8003ff8 <Seedling_task+0x30c>)
 8003f88:	f007 f914 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=8;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <Seedling_task+0x310>)
 8003f8e:	2208      	movs	r2, #8
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }
	  	  if(mode==2){
 8003f92:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <Seedling_task+0x2f8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d10c      	bne.n	8003fb4 <Seedling_task+0x2c8>
	  		  HAL_GPIO_WritePin(motors_a, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	4816      	ldr	r0, [pc, #88]	@ (8003ff8 <Seedling_task+0x30c>)
 8003fa0:	f007 f908 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 0);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2110      	movs	r1, #16
 8003fa8:	4813      	ldr	r0, [pc, #76]	@ (8003ff8 <Seedling_task+0x30c>)
 8003faa:	f007 f903 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=0;
 8003fae:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <Seedling_task+0x310>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }
	  	  if(mode==1){
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <Seedling_task+0x2f8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10c      	bne.n	8003fd6 <Seedling_task+0x2ea>
	  		  HAL_GPIO_WritePin(motors_a, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	480d      	ldr	r0, [pc, #52]	@ (8003ff8 <Seedling_task+0x30c>)
 8003fc2:	f007 f8f7 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 1);
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2110      	movs	r1, #16
 8003fca:	480b      	ldr	r0, [pc, #44]	@ (8003ff8 <Seedling_task+0x30c>)
 8003fcc:	f007 f8f2 	bl	800b1b4 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=50;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <Seedling_task+0x310>)
 8003fd2:	2232      	movs	r2, #50	@ 0x32
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }

    osDelay(1);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f00b fcd0 	bl	800f97c <osDelay>
	 	      if (Up_switch1 != switchStatePrev_1) {
 8003fdc:	e68a      	b.n	8003cf4 <Seedling_task+0x8>
 8003fde:	bf00      	nop
 8003fe0:	20000c48 	.word	0x20000c48
 8003fe4:	20000054 	.word	0x20000054
 8003fe8:	20000cc4 	.word	0x20000cc4
 8003fec:	40020c00 	.word	0x40020c00
 8003ff0:	40020800 	.word	0x40020800
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40021400 	.word	0x40021400
 8003ffc:	40001800 	.word	0x40001800

08004000 <Wheel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Wheel_task */
  /* Infinite loop */
  for(;;)
  {
	  if(vel_up == 1){
 8004008:	4bac      	ldr	r3, [pc, #688]	@ (80042bc <Wheel_task+0x2bc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 81f4 	bne.w	80043fa <Wheel_task+0x3fa>
	   	  		  vel_up=0;
 8004012:	4baa      	ldr	r3, [pc, #680]	@ (80042bc <Wheel_task+0x2bc>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  	  	  		  M1_pid.error = M1.setpoint-M1.en_speed;
 8004018:	4ba9      	ldr	r3, [pc, #676]	@ (80042c0 <Wheel_task+0x2c0>)
 800401a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401e:	461a      	mov	r2, r3
 8004020:	4ba7      	ldr	r3, [pc, #668]	@ (80042c0 <Wheel_task+0x2c0>)
 8004022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	4aa6      	ldr	r2, [pc, #664]	@ (80042c4 <Wheel_task+0x2c4>)
 800402a:	60d3      	str	r3, [r2, #12]
  	  	  		  M1_pid.I_error+=M1_pid.error;
 800402c:	4ba5      	ldr	r3, [pc, #660]	@ (80042c4 <Wheel_task+0x2c4>)
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	4ba4      	ldr	r3, [pc, #656]	@ (80042c4 <Wheel_task+0x2c4>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4413      	add	r3, r2
 8004036:	4aa3      	ldr	r2, [pc, #652]	@ (80042c4 <Wheel_task+0x2c4>)
 8004038:	6113      	str	r3, [r2, #16]
  	  	  		  M1_pid.D_error=M1_pid.lasterror-M1_pid.error;
 800403a:	4ba2      	ldr	r3, [pc, #648]	@ (80042c4 <Wheel_task+0x2c4>)
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	4ba1      	ldr	r3, [pc, #644]	@ (80042c4 <Wheel_task+0x2c4>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	4a9f      	ldr	r2, [pc, #636]	@ (80042c4 <Wheel_task+0x2c4>)
 8004046:	6153      	str	r3, [r2, #20]
  	  	  		  M1_pid.lasterror=M1_pid.error;
 8004048:	4b9e      	ldr	r3, [pc, #632]	@ (80042c4 <Wheel_task+0x2c4>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a9d      	ldr	r2, [pc, #628]	@ (80042c4 <Wheel_task+0x2c4>)
 800404e:	6193      	str	r3, [r2, #24]
  	  	  		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8004050:	4b9c      	ldr	r3, [pc, #624]	@ (80042c4 <Wheel_task+0x2c4>)
 8004052:	ed93 7a00 	vldr	s14, [r3]
 8004056:	4b9b      	ldr	r3, [pc, #620]	@ (80042c4 <Wheel_task+0x2c4>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004066:	4b97      	ldr	r3, [pc, #604]	@ (80042c4 <Wheel_task+0x2c4>)
 8004068:	edd3 6a01 	vldr	s13, [r3, #4]
 800406c:	4b95      	ldr	r3, [pc, #596]	@ (80042c4 <Wheel_task+0x2c4>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004080:	4b90      	ldr	r3, [pc, #576]	@ (80042c4 <Wheel_task+0x2c4>)
 8004082:	edd3 6a02 	vldr	s13, [r3, #8]
 8004086:	4b8f      	ldr	r3, [pc, #572]	@ (80042c4 <Wheel_task+0x2c4>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800409e:	ee17 3a90 	vmov	r3, s15
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	4b86      	ldr	r3, [pc, #536]	@ (80042c0 <Wheel_task+0x2c0>)
 80040a6:	805a      	strh	r2, [r3, #2]

  	  	  		  M2_pid.error=M2.setpoint-M2.en_speed;
 80040a8:	4b87      	ldr	r3, [pc, #540]	@ (80042c8 <Wheel_task+0x2c8>)
 80040aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b85      	ldr	r3, [pc, #532]	@ (80042c8 <Wheel_task+0x2c8>)
 80040b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	4a84      	ldr	r2, [pc, #528]	@ (80042cc <Wheel_task+0x2cc>)
 80040ba:	60d3      	str	r3, [r2, #12]
  	  	  		  M2_pid.I_error+=M2_pid.error;
 80040bc:	4b83      	ldr	r3, [pc, #524]	@ (80042cc <Wheel_task+0x2cc>)
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <Wheel_task+0x2cc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a81      	ldr	r2, [pc, #516]	@ (80042cc <Wheel_task+0x2cc>)
 80040c8:	6113      	str	r3, [r2, #16]
  	  	  		  M2_pid.D_error=M2_pid.lasterror-M2_pid.error;
 80040ca:	4b80      	ldr	r3, [pc, #512]	@ (80042cc <Wheel_task+0x2cc>)
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	4b7f      	ldr	r3, [pc, #508]	@ (80042cc <Wheel_task+0x2cc>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4a7d      	ldr	r2, [pc, #500]	@ (80042cc <Wheel_task+0x2cc>)
 80040d6:	6153      	str	r3, [r2, #20]
  	  	  		  M2_pid.lasterror=M2_pid.error;
 80040d8:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <Wheel_task+0x2cc>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a7b      	ldr	r2, [pc, #492]	@ (80042cc <Wheel_task+0x2cc>)
 80040de:	6193      	str	r3, [r2, #24]
  	  	  		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 80040e0:	4b7a      	ldr	r3, [pc, #488]	@ (80042cc <Wheel_task+0x2cc>)
 80040e2:	ed93 7a00 	vldr	s14, [r3]
 80040e6:	4b79      	ldr	r3, [pc, #484]	@ (80042cc <Wheel_task+0x2cc>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f6:	4b75      	ldr	r3, [pc, #468]	@ (80042cc <Wheel_task+0x2cc>)
 80040f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80040fc:	4b73      	ldr	r3, [pc, #460]	@ (80042cc <Wheel_task+0x2cc>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004110:	4b6e      	ldr	r3, [pc, #440]	@ (80042cc <Wheel_task+0x2cc>)
 8004112:	edd3 6a02 	vldr	s13, [r3, #8]
 8004116:	4b6d      	ldr	r3, [pc, #436]	@ (80042cc <Wheel_task+0x2cc>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800412a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412e:	ee17 3a90 	vmov	r3, s15
 8004132:	b21a      	sxth	r2, r3
 8004134:	4b64      	ldr	r3, [pc, #400]	@ (80042c8 <Wheel_task+0x2c8>)
 8004136:	805a      	strh	r2, [r3, #2]

  	  	  		  M3_pid.error=M3.setpoint-M3.en_speed;
 8004138:	4b65      	ldr	r3, [pc, #404]	@ (80042d0 <Wheel_task+0x2d0>)
 800413a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800413e:	461a      	mov	r2, r3
 8004140:	4b63      	ldr	r3, [pc, #396]	@ (80042d0 <Wheel_task+0x2d0>)
 8004142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	4a62      	ldr	r2, [pc, #392]	@ (80042d4 <Wheel_task+0x2d4>)
 800414a:	60d3      	str	r3, [r2, #12]
  	  	  		  M3_pid.I_error+=M3_pid.error;
 800414c:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <Wheel_task+0x2d4>)
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	4b60      	ldr	r3, [pc, #384]	@ (80042d4 <Wheel_task+0x2d4>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4413      	add	r3, r2
 8004156:	4a5f      	ldr	r2, [pc, #380]	@ (80042d4 <Wheel_task+0x2d4>)
 8004158:	6113      	str	r3, [r2, #16]
  	  	  		  M3_pid.D_error=M3_pid.lasterror-M3_pid.error;
 800415a:	4b5e      	ldr	r3, [pc, #376]	@ (80042d4 <Wheel_task+0x2d4>)
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	4b5d      	ldr	r3, [pc, #372]	@ (80042d4 <Wheel_task+0x2d4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	4a5b      	ldr	r2, [pc, #364]	@ (80042d4 <Wheel_task+0x2d4>)
 8004166:	6153      	str	r3, [r2, #20]
  	  	  		  M3_pid.lasterror=M3_pid.error;
 8004168:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <Wheel_task+0x2d4>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a59      	ldr	r2, [pc, #356]	@ (80042d4 <Wheel_task+0x2d4>)
 800416e:	6193      	str	r3, [r2, #24]
  	  	  		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8004170:	4b58      	ldr	r3, [pc, #352]	@ (80042d4 <Wheel_task+0x2d4>)
 8004172:	ed93 7a00 	vldr	s14, [r3]
 8004176:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <Wheel_task+0x2d4>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004186:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <Wheel_task+0x2d4>)
 8004188:	edd3 6a01 	vldr	s13, [r3, #4]
 800418c:	4b51      	ldr	r3, [pc, #324]	@ (80042d4 <Wheel_task+0x2d4>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800419c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a0:	4b4c      	ldr	r3, [pc, #304]	@ (80042d4 <Wheel_task+0x2d4>)
 80041a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80041a6:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <Wheel_task+0x2d4>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041be:	ee17 3a90 	vmov	r3, s15
 80041c2:	b21a      	sxth	r2, r3
 80041c4:	4b42      	ldr	r3, [pc, #264]	@ (80042d0 <Wheel_task+0x2d0>)
 80041c6:	805a      	strh	r2, [r3, #2]

  	  	  		  M4_pid.error=M4.setpoint-M4.en_speed;
 80041c8:	4b43      	ldr	r3, [pc, #268]	@ (80042d8 <Wheel_task+0x2d8>)
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b41      	ldr	r3, [pc, #260]	@ (80042d8 <Wheel_task+0x2d8>)
 80041d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a40      	ldr	r2, [pc, #256]	@ (80042dc <Wheel_task+0x2dc>)
 80041da:	60d3      	str	r3, [r2, #12]
  	  	  		  M4_pid.I_error+=M4_pid.error;
 80041dc:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <Wheel_task+0x2dc>)
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	4b3e      	ldr	r3, [pc, #248]	@ (80042dc <Wheel_task+0x2dc>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	4a3d      	ldr	r2, [pc, #244]	@ (80042dc <Wheel_task+0x2dc>)
 80041e8:	6113      	str	r3, [r2, #16]
  	  	  		  M4_pid.D_error=M4_pid.lasterror-M4_pid.error;
 80041ea:	4b3c      	ldr	r3, [pc, #240]	@ (80042dc <Wheel_task+0x2dc>)
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <Wheel_task+0x2dc>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	4a39      	ldr	r2, [pc, #228]	@ (80042dc <Wheel_task+0x2dc>)
 80041f6:	6153      	str	r3, [r2, #20]
  	  	  		  M4_pid.lasterror=M4_pid.error;
 80041f8:	4b38      	ldr	r3, [pc, #224]	@ (80042dc <Wheel_task+0x2dc>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a37      	ldr	r2, [pc, #220]	@ (80042dc <Wheel_task+0x2dc>)
 80041fe:	6193      	str	r3, [r2, #24]
  	  	  		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <Wheel_task+0x2dc>)
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <Wheel_task+0x2dc>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <Wheel_task+0x2dc>)
 8004218:	edd3 6a01 	vldr	s13, [r3, #4]
 800421c:	4b2f      	ldr	r3, [pc, #188]	@ (80042dc <Wheel_task+0x2dc>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004230:	4b2a      	ldr	r3, [pc, #168]	@ (80042dc <Wheel_task+0x2dc>)
 8004232:	edd3 6a02 	vldr	s13, [r3, #8]
 8004236:	4b29      	ldr	r3, [pc, #164]	@ (80042dc <Wheel_task+0x2dc>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424e:	ee17 3a90 	vmov	r3, s15
 8004252:	b21a      	sxth	r2, r3
 8004254:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <Wheel_task+0x2d8>)
 8004256:	805a      	strh	r2, [r3, #2]
  	  	      left_front=M1.Out;
 8004258:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <Wheel_task+0x2c0>)
 800425a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800425e:	461a      	mov	r2, r3
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <Wheel_task+0x2e0>)
 8004262:	601a      	str	r2, [r3, #0]
			  left_back=M2.Out;
 8004264:	4b18      	ldr	r3, [pc, #96]	@ (80042c8 <Wheel_task+0x2c8>)
 8004266:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800426a:	461a      	mov	r2, r3
 800426c:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <Wheel_task+0x2e4>)
 800426e:	601a      	str	r2, [r3, #0]
			  right_front=M3.Out;
 8004270:	4b17      	ldr	r3, [pc, #92]	@ (80042d0 <Wheel_task+0x2d0>)
 8004272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004276:	461a      	mov	r2, r3
 8004278:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <Wheel_task+0x2e8>)
 800427a:	601a      	str	r2, [r3, #0]
			  right_back=M4.Out;
 800427c:	4b16      	ldr	r3, [pc, #88]	@ (80042d8 <Wheel_task+0x2d8>)
 800427e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004282:	461a      	mov	r2, r3
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <Wheel_task+0x2ec>)
 8004286:	601a      	str	r2, [r3, #0]

			  lf = abs(left_front);
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <Wheel_task+0x2e0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	425b      	neglt	r3, r3
 8004292:	b29a      	uxth	r2, r3
 8004294:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <Wheel_task+0x2f0>)
 8004296:	801a      	strh	r2, [r3, #0]
			  lb = abs(left_back);
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <Wheel_task+0x2e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfb8      	it	lt
 80042a0:	425b      	neglt	r3, r3
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	4b13      	ldr	r3, [pc, #76]	@ (80042f4 <Wheel_task+0x2f4>)
 80042a6:	801a      	strh	r2, [r3, #0]
			  rf = abs(right_front);
 80042a8:	4b0f      	ldr	r3, [pc, #60]	@ (80042e8 <Wheel_task+0x2e8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bfb8      	it	lt
 80042b0:	425b      	neglt	r3, r3
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <Wheel_task+0x2f8>)
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e020      	b.n	80042fc <Wheel_task+0x2fc>
 80042ba:	bf00      	nop
 80042bc:	20000ce0 	.word	0x20000ce0
 80042c0:	20000d80 	.word	0x20000d80
 80042c4:	20000d10 	.word	0x20000d10
 80042c8:	20000d88 	.word	0x20000d88
 80042cc:	20000d2c 	.word	0x20000d2c
 80042d0:	20000d90 	.word	0x20000d90
 80042d4:	20000d48 	.word	0x20000d48
 80042d8:	20000d98 	.word	0x20000d98
 80042dc:	20000d64 	.word	0x20000d64
 80042e0:	20000cc8 	.word	0x20000cc8
 80042e4:	20000ccc 	.word	0x20000ccc
 80042e8:	20000cd0 	.word	0x20000cd0
 80042ec:	20000cd4 	.word	0x20000cd4
 80042f0:	20000c52 	.word	0x20000c52
 80042f4:	20000c54 	.word	0x20000c54
 80042f8:	20000c56 	.word	0x20000c56
			  rb = abs(right_back);
 80042fc:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <Wheel_task+0x404>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	425b      	neglt	r3, r3
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <Wheel_task+0x408>)
 800430a:	801a      	strh	r2, [r3, #0]

			  if(abs(x)<5 && abs(y)<5 && abs(r)<5){
 800430c:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <Wheel_task+0x40c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f113 0f04 	cmn.w	r3, #4
 8004314:	db1e      	blt.n	8004354 <Wheel_task+0x354>
 8004316:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <Wheel_task+0x40c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	dc1a      	bgt.n	8004354 <Wheel_task+0x354>
 800431e:	4b3c      	ldr	r3, [pc, #240]	@ (8004410 <Wheel_task+0x410>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f113 0f04 	cmn.w	r3, #4
 8004326:	db15      	blt.n	8004354 <Wheel_task+0x354>
 8004328:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <Wheel_task+0x410>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	dc11      	bgt.n	8004354 <Wheel_task+0x354>
 8004330:	4b38      	ldr	r3, [pc, #224]	@ (8004414 <Wheel_task+0x414>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f113 0f04 	cmn.w	r3, #4
 8004338:	db0c      	blt.n	8004354 <Wheel_task+0x354>
 800433a:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <Wheel_task+0x414>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	dc08      	bgt.n	8004354 <Wheel_task+0x354>
				  motor1();
 8004342:	f7fe ff23 	bl	800318c <motor1>
				  motor2();
 8004346:	f7fe ff67 	bl	8003218 <motor2>
				  motor3();
 800434a:	f7fe ffab 	bl	80032a4 <motor3>
				  motor4();
 800434e:	f7fe ffe9 	bl	8003324 <motor4>
 8004352:	e052      	b.n	80043fa <Wheel_task+0x3fa>
			  }
			  else if((abs(x)>5 || abs(y)>5) && abs(r)<5){
 8004354:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <Wheel_task+0x40c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	bfb8      	it	lt
 800435c:	425b      	neglt	r3, r3
 800435e:	2b05      	cmp	r3, #5
 8004360:	dc06      	bgt.n	8004370 <Wheel_task+0x370>
 8004362:	4b2b      	ldr	r3, [pc, #172]	@ (8004410 <Wheel_task+0x410>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	bfb8      	it	lt
 800436a:	425b      	neglt	r3, r3
 800436c:	2b05      	cmp	r3, #5
 800436e:	dd11      	ble.n	8004394 <Wheel_task+0x394>
 8004370:	4b28      	ldr	r3, [pc, #160]	@ (8004414 <Wheel_task+0x414>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f113 0f04 	cmn.w	r3, #4
 8004378:	db0c      	blt.n	8004394 <Wheel_task+0x394>
 800437a:	4b26      	ldr	r3, [pc, #152]	@ (8004414 <Wheel_task+0x414>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b04      	cmp	r3, #4
 8004380:	dc08      	bgt.n	8004394 <Wheel_task+0x394>
				  motor1();
 8004382:	f7fe ff03 	bl	800318c <motor1>
				  motor2();
 8004386:	f7fe ff47 	bl	8003218 <motor2>
				  motor3();
 800438a:	f7fe ff8b 	bl	80032a4 <motor3>
				  motor4();
 800438e:	f7fe ffc9 	bl	8003324 <motor4>
 8004392:	e032      	b.n	80043fa <Wheel_task+0x3fa>
			  }
			  else if((abs(x)<5 && abs(y)<5) && abs(r)>5){
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <Wheel_task+0x40c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f113 0f04 	cmn.w	r3, #4
 800439c:	db16      	blt.n	80043cc <Wheel_task+0x3cc>
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <Wheel_task+0x40c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	dc12      	bgt.n	80043cc <Wheel_task+0x3cc>
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <Wheel_task+0x410>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f113 0f04 	cmn.w	r3, #4
 80043ae:	db0d      	blt.n	80043cc <Wheel_task+0x3cc>
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <Wheel_task+0x410>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	dc09      	bgt.n	80043cc <Wheel_task+0x3cc>
 80043b8:	4b16      	ldr	r3, [pc, #88]	@ (8004414 <Wheel_task+0x414>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bfb8      	it	lt
 80043c0:	425b      	neglt	r3, r3
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	dd02      	ble.n	80043cc <Wheel_task+0x3cc>
				  turn();
 80043c6:	f7fe fff3 	bl	80033b0 <turn>
 80043ca:	e016      	b.n	80043fa <Wheel_task+0x3fa>
			  }
			  else if((abs(x)>5 || abs(y)>5) && abs(r)>5){
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <Wheel_task+0x40c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfb8      	it	lt
 80043d4:	425b      	neglt	r3, r3
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	dc06      	bgt.n	80043e8 <Wheel_task+0x3e8>
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <Wheel_task+0x410>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	425b      	neglt	r3, r3
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	dd08      	ble.n	80043fa <Wheel_task+0x3fa>
 80043e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <Wheel_task+0x414>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bfb8      	it	lt
 80043f0:	425b      	neglt	r3, r3
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	dd01      	ble.n	80043fa <Wheel_task+0x3fa>
				  yvj_ergeh();
 80043f6:	f7ff f88d 	bl	8003514 <yvj_ergeh>
			  }
	  }

    osDelay(1);
 80043fa:	2001      	movs	r0, #1
 80043fc:	f00b fabe 	bl	800f97c <osDelay>
	  if(vel_up == 1){
 8004400:	e602      	b.n	8004008 <Wheel_task+0x8>
 8004402:	bf00      	nop
 8004404:	20000cd4 	.word	0x20000cd4
 8004408:	20000c58 	.word	0x20000c58
 800440c:	20000cb8 	.word	0x20000cb8
 8004410:	20000cbc 	.word	0x20000cbc
 8004414:	20000cc0 	.word	0x20000cc0

08004418 <Encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Encoder_task */
void Encoder_task(void const * argument)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encoder_task */
  /* Infinite loop */
  for(;;)
  {
		count_2 = TIM1->CNT;
 8004420:	4b91      	ldr	r3, [pc, #580]	@ (8004668 <Encoder_task+0x250>)
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b21a      	sxth	r2, r3
 8004426:	4b91      	ldr	r3, [pc, #580]	@ (800466c <Encoder_task+0x254>)
 8004428:	801a      	strh	r2, [r3, #0]
		count_4 = -(TIM2->CNT);
 800442a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	b29b      	uxth	r3, r3
 8004432:	425b      	negs	r3, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	b21a      	sxth	r2, r3
 8004438:	4b8d      	ldr	r3, [pc, #564]	@ (8004670 <Encoder_task+0x258>)
 800443a:	801a      	strh	r2, [r3, #0]
		count_3 = -(TIM4->CNT);
 800443c:	4b8d      	ldr	r3, [pc, #564]	@ (8004674 <Encoder_task+0x25c>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	b29b      	uxth	r3, r3
 8004442:	425b      	negs	r3, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	b21a      	sxth	r2, r3
 8004448:	4b8b      	ldr	r3, [pc, #556]	@ (8004678 <Encoder_task+0x260>)
 800444a:	801a      	strh	r2, [r3, #0]
		count_1 = -(TIM8->CNT);
 800444c:	4b8b      	ldr	r3, [pc, #556]	@ (800467c <Encoder_task+0x264>)
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	b29b      	uxth	r3, r3
 8004452:	425b      	negs	r3, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	b21a      	sxth	r2, r3
 8004458:	4b89      	ldr	r3, [pc, #548]	@ (8004680 <Encoder_task+0x268>)
 800445a:	801a      	strh	r2, [r3, #0]
		oldpos_1[0]=oldpos_1[1];
 800445c:	4b89      	ldr	r3, [pc, #548]	@ (8004684 <Encoder_task+0x26c>)
 800445e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004462:	4b88      	ldr	r3, [pc, #544]	@ (8004684 <Encoder_task+0x26c>)
 8004464:	801a      	strh	r2, [r3, #0]
		oldpos_1[1]=oldpos_1[2];
 8004466:	4b87      	ldr	r3, [pc, #540]	@ (8004684 <Encoder_task+0x26c>)
 8004468:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800446c:	4b85      	ldr	r3, [pc, #532]	@ (8004684 <Encoder_task+0x26c>)
 800446e:	805a      	strh	r2, [r3, #2]
		oldpos_1[2]=oldpos_1[3];
 8004470:	4b84      	ldr	r3, [pc, #528]	@ (8004684 <Encoder_task+0x26c>)
 8004472:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004476:	4b83      	ldr	r3, [pc, #524]	@ (8004684 <Encoder_task+0x26c>)
 8004478:	809a      	strh	r2, [r3, #4]
		oldpos_1[3]=oldpos_1[4];
 800447a:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <Encoder_task+0x26c>)
 800447c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004480:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <Encoder_task+0x26c>)
 8004482:	80da      	strh	r2, [r3, #6]
		oldpos_1[4]=oldpos_1[5];
 8004484:	4b7f      	ldr	r3, [pc, #508]	@ (8004684 <Encoder_task+0x26c>)
 8004486:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800448a:	4b7e      	ldr	r3, [pc, #504]	@ (8004684 <Encoder_task+0x26c>)
 800448c:	811a      	strh	r2, [r3, #8]
		oldpos_1[5]=oldpos_1[6];
 800448e:	4b7d      	ldr	r3, [pc, #500]	@ (8004684 <Encoder_task+0x26c>)
 8004490:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004494:	4b7b      	ldr	r3, [pc, #492]	@ (8004684 <Encoder_task+0x26c>)
 8004496:	815a      	strh	r2, [r3, #10]
		oldpos_1[6]=oldpos_1[7];
 8004498:	4b7a      	ldr	r3, [pc, #488]	@ (8004684 <Encoder_task+0x26c>)
 800449a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800449e:	4b79      	ldr	r3, [pc, #484]	@ (8004684 <Encoder_task+0x26c>)
 80044a0:	819a      	strh	r2, [r3, #12]
		oldpos_1[7]=oldpos_1[8];
 80044a2:	4b78      	ldr	r3, [pc, #480]	@ (8004684 <Encoder_task+0x26c>)
 80044a4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80044a8:	4b76      	ldr	r3, [pc, #472]	@ (8004684 <Encoder_task+0x26c>)
 80044aa:	81da      	strh	r2, [r3, #14]
		oldpos_1[8]=oldpos_1[9];
 80044ac:	4b75      	ldr	r3, [pc, #468]	@ (8004684 <Encoder_task+0x26c>)
 80044ae:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80044b2:	4b74      	ldr	r3, [pc, #464]	@ (8004684 <Encoder_task+0x26c>)
 80044b4:	821a      	strh	r2, [r3, #16]
		oldpos_1[9] =count_1-older_1;
 80044b6:	4b72      	ldr	r3, [pc, #456]	@ (8004680 <Encoder_task+0x268>)
 80044b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <Encoder_task+0x270>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b21a      	sxth	r2, r3
 80044ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004684 <Encoder_task+0x26c>)
 80044cc:	825a      	strh	r2, [r3, #18]
		older_1=count_1;
 80044ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004680 <Encoder_task+0x268>)
 80044d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004688 <Encoder_task+0x270>)
 80044d8:	601a      	str	r2, [r3, #0]
		oldpos_2[0]=oldpos_2[1];
 80044da:	4b6c      	ldr	r3, [pc, #432]	@ (800468c <Encoder_task+0x274>)
 80044dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80044e0:	4b6a      	ldr	r3, [pc, #424]	@ (800468c <Encoder_task+0x274>)
 80044e2:	801a      	strh	r2, [r3, #0]
		oldpos_2[1]=oldpos_2[2];
 80044e4:	4b69      	ldr	r3, [pc, #420]	@ (800468c <Encoder_task+0x274>)
 80044e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80044ea:	4b68      	ldr	r3, [pc, #416]	@ (800468c <Encoder_task+0x274>)
 80044ec:	805a      	strh	r2, [r3, #2]
		oldpos_2[2]=oldpos_2[3];
 80044ee:	4b67      	ldr	r3, [pc, #412]	@ (800468c <Encoder_task+0x274>)
 80044f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80044f4:	4b65      	ldr	r3, [pc, #404]	@ (800468c <Encoder_task+0x274>)
 80044f6:	809a      	strh	r2, [r3, #4]
		oldpos_2[3]=oldpos_2[4];
 80044f8:	4b64      	ldr	r3, [pc, #400]	@ (800468c <Encoder_task+0x274>)
 80044fa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80044fe:	4b63      	ldr	r3, [pc, #396]	@ (800468c <Encoder_task+0x274>)
 8004500:	80da      	strh	r2, [r3, #6]
		oldpos_2[4]=oldpos_2[5];
 8004502:	4b62      	ldr	r3, [pc, #392]	@ (800468c <Encoder_task+0x274>)
 8004504:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004508:	4b60      	ldr	r3, [pc, #384]	@ (800468c <Encoder_task+0x274>)
 800450a:	811a      	strh	r2, [r3, #8]
		oldpos_2[5]=oldpos_2[6];
 800450c:	4b5f      	ldr	r3, [pc, #380]	@ (800468c <Encoder_task+0x274>)
 800450e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004512:	4b5e      	ldr	r3, [pc, #376]	@ (800468c <Encoder_task+0x274>)
 8004514:	815a      	strh	r2, [r3, #10]
		oldpos_2[6]=oldpos_2[7];
 8004516:	4b5d      	ldr	r3, [pc, #372]	@ (800468c <Encoder_task+0x274>)
 8004518:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800451c:	4b5b      	ldr	r3, [pc, #364]	@ (800468c <Encoder_task+0x274>)
 800451e:	819a      	strh	r2, [r3, #12]
		oldpos_2[7]=oldpos_2[8];
 8004520:	4b5a      	ldr	r3, [pc, #360]	@ (800468c <Encoder_task+0x274>)
 8004522:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004526:	4b59      	ldr	r3, [pc, #356]	@ (800468c <Encoder_task+0x274>)
 8004528:	81da      	strh	r2, [r3, #14]
		oldpos_2[8]=oldpos_2[9];
 800452a:	4b58      	ldr	r3, [pc, #352]	@ (800468c <Encoder_task+0x274>)
 800452c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004530:	4b56      	ldr	r3, [pc, #344]	@ (800468c <Encoder_task+0x274>)
 8004532:	821a      	strh	r2, [r3, #16]
		oldpos_2[9] =count_2-older_2;
 8004534:	4b4d      	ldr	r3, [pc, #308]	@ (800466c <Encoder_task+0x254>)
 8004536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800453a:	b29a      	uxth	r2, r3
 800453c:	4b54      	ldr	r3, [pc, #336]	@ (8004690 <Encoder_task+0x278>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	b21a      	sxth	r2, r3
 8004548:	4b50      	ldr	r3, [pc, #320]	@ (800468c <Encoder_task+0x274>)
 800454a:	825a      	strh	r2, [r3, #18]
		older_2=count_2;
 800454c:	4b47      	ldr	r3, [pc, #284]	@ (800466c <Encoder_task+0x254>)
 800454e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004552:	461a      	mov	r2, r3
 8004554:	4b4e      	ldr	r3, [pc, #312]	@ (8004690 <Encoder_task+0x278>)
 8004556:	601a      	str	r2, [r3, #0]
		oldpos_3[0]=oldpos_3[1];
 8004558:	4b4e      	ldr	r3, [pc, #312]	@ (8004694 <Encoder_task+0x27c>)
 800455a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800455e:	4b4d      	ldr	r3, [pc, #308]	@ (8004694 <Encoder_task+0x27c>)
 8004560:	801a      	strh	r2, [r3, #0]
		oldpos_3[1]=oldpos_3[2];
 8004562:	4b4c      	ldr	r3, [pc, #304]	@ (8004694 <Encoder_task+0x27c>)
 8004564:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004568:	4b4a      	ldr	r3, [pc, #296]	@ (8004694 <Encoder_task+0x27c>)
 800456a:	805a      	strh	r2, [r3, #2]
		oldpos_3[2]=oldpos_3[3];
 800456c:	4b49      	ldr	r3, [pc, #292]	@ (8004694 <Encoder_task+0x27c>)
 800456e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004572:	4b48      	ldr	r3, [pc, #288]	@ (8004694 <Encoder_task+0x27c>)
 8004574:	809a      	strh	r2, [r3, #4]
		oldpos_3[3]=oldpos_3[4];
 8004576:	4b47      	ldr	r3, [pc, #284]	@ (8004694 <Encoder_task+0x27c>)
 8004578:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800457c:	4b45      	ldr	r3, [pc, #276]	@ (8004694 <Encoder_task+0x27c>)
 800457e:	80da      	strh	r2, [r3, #6]
		oldpos_3[4]=oldpos_3[5];
 8004580:	4b44      	ldr	r3, [pc, #272]	@ (8004694 <Encoder_task+0x27c>)
 8004582:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004586:	4b43      	ldr	r3, [pc, #268]	@ (8004694 <Encoder_task+0x27c>)
 8004588:	811a      	strh	r2, [r3, #8]
		oldpos_3[5]=oldpos_3[6];
 800458a:	4b42      	ldr	r3, [pc, #264]	@ (8004694 <Encoder_task+0x27c>)
 800458c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004590:	4b40      	ldr	r3, [pc, #256]	@ (8004694 <Encoder_task+0x27c>)
 8004592:	815a      	strh	r2, [r3, #10]
		oldpos_3[6]=oldpos_3[7];
 8004594:	4b3f      	ldr	r3, [pc, #252]	@ (8004694 <Encoder_task+0x27c>)
 8004596:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800459a:	4b3e      	ldr	r3, [pc, #248]	@ (8004694 <Encoder_task+0x27c>)
 800459c:	819a      	strh	r2, [r3, #12]
		oldpos_3[7]=oldpos_3[8];
 800459e:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <Encoder_task+0x27c>)
 80045a0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80045a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004694 <Encoder_task+0x27c>)
 80045a6:	81da      	strh	r2, [r3, #14]
		oldpos_3[8]=oldpos_3[9];
 80045a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004694 <Encoder_task+0x27c>)
 80045aa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80045ae:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <Encoder_task+0x27c>)
 80045b0:	821a      	strh	r2, [r3, #16]
		oldpos_3[9] =count_3-older_3;
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <Encoder_task+0x260>)
 80045b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	4b37      	ldr	r3, [pc, #220]	@ (8004698 <Encoder_task+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	b21a      	sxth	r2, r3
 80045c6:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <Encoder_task+0x27c>)
 80045c8:	825a      	strh	r2, [r3, #18]
		older_3=count_3;
 80045ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <Encoder_task+0x260>)
 80045cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b31      	ldr	r3, [pc, #196]	@ (8004698 <Encoder_task+0x280>)
 80045d4:	601a      	str	r2, [r3, #0]
		oldpos_4[0]=oldpos_4[1];
 80045d6:	4b31      	ldr	r3, [pc, #196]	@ (800469c <Encoder_task+0x284>)
 80045d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80045dc:	4b2f      	ldr	r3, [pc, #188]	@ (800469c <Encoder_task+0x284>)
 80045de:	801a      	strh	r2, [r3, #0]
		oldpos_4[1]=oldpos_4[2];
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <Encoder_task+0x284>)
 80045e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80045e6:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <Encoder_task+0x284>)
 80045e8:	805a      	strh	r2, [r3, #2]
		oldpos_4[2]=oldpos_4[3];
 80045ea:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <Encoder_task+0x284>)
 80045ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80045f0:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <Encoder_task+0x284>)
 80045f2:	809a      	strh	r2, [r3, #4]
		oldpos_4[3]=oldpos_4[4];
 80045f4:	4b29      	ldr	r3, [pc, #164]	@ (800469c <Encoder_task+0x284>)
 80045f6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80045fa:	4b28      	ldr	r3, [pc, #160]	@ (800469c <Encoder_task+0x284>)
 80045fc:	80da      	strh	r2, [r3, #6]
		oldpos_4[4]=oldpos_4[5];
 80045fe:	4b27      	ldr	r3, [pc, #156]	@ (800469c <Encoder_task+0x284>)
 8004600:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <Encoder_task+0x284>)
 8004606:	811a      	strh	r2, [r3, #8]
		oldpos_4[5]=oldpos_4[6];
 8004608:	4b24      	ldr	r3, [pc, #144]	@ (800469c <Encoder_task+0x284>)
 800460a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800460e:	4b23      	ldr	r3, [pc, #140]	@ (800469c <Encoder_task+0x284>)
 8004610:	815a      	strh	r2, [r3, #10]
		oldpos_4[6]=oldpos_4[7];
 8004612:	4b22      	ldr	r3, [pc, #136]	@ (800469c <Encoder_task+0x284>)
 8004614:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004618:	4b20      	ldr	r3, [pc, #128]	@ (800469c <Encoder_task+0x284>)
 800461a:	819a      	strh	r2, [r3, #12]
		oldpos_4[7]=oldpos_4[8];
 800461c:	4b1f      	ldr	r3, [pc, #124]	@ (800469c <Encoder_task+0x284>)
 800461e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004622:	4b1e      	ldr	r3, [pc, #120]	@ (800469c <Encoder_task+0x284>)
 8004624:	81da      	strh	r2, [r3, #14]
		oldpos_4[8]=oldpos_4[9];
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <Encoder_task+0x284>)
 8004628:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800462c:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <Encoder_task+0x284>)
 800462e:	821a      	strh	r2, [r3, #16]
		oldpos_4[9] =count_4-older_4;
 8004630:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <Encoder_task+0x258>)
 8004632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004636:	b29a      	uxth	r2, r3
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <Encoder_task+0x288>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	b21a      	sxth	r2, r3
 8004644:	4b15      	ldr	r3, [pc, #84]	@ (800469c <Encoder_task+0x284>)
 8004646:	825a      	strh	r2, [r3, #18]
		older_4=count_4;
 8004648:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <Encoder_task+0x258>)
 800464a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464e:	461a      	mov	r2, r3
 8004650:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <Encoder_task+0x288>)
 8004652:	601a      	str	r2, [r3, #0]
		vel_up=1;
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <Encoder_task+0x28c>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
		motor_speed();
 800465a:	f7fe fd23 	bl	80030a4 <motor_speed>


        osDelay(10);
 800465e:	200a      	movs	r0, #10
 8004660:	f00b f98c 	bl	800f97c <osDelay>
		count_2 = TIM1->CNT;
 8004664:	bf00      	nop
 8004666:	e6db      	b.n	8004420 <Encoder_task+0x8>
 8004668:	40010000 	.word	0x40010000
 800466c:	20000c60 	.word	0x20000c60
 8004670:	20000c64 	.word	0x20000c64
 8004674:	40000800 	.word	0x40000800
 8004678:	20000c62 	.word	0x20000c62
 800467c:	40010400 	.word	0x40010400
 8004680:	20000c5e 	.word	0x20000c5e
 8004684:	20000c68 	.word	0x20000c68
 8004688:	20000ce4 	.word	0x20000ce4
 800468c:	20000c7c 	.word	0x20000c7c
 8004690:	20000ce8 	.word	0x20000ce8
 8004694:	20000c90 	.word	0x20000c90
 8004698:	20000cec 	.word	0x20000cec
 800469c:	20000ca4 	.word	0x20000ca4
 80046a0:	20000cf0 	.word	0x20000cf0
 80046a4:	20000ce0 	.word	0x20000ce0

080046a8 <Display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_task */
void Display_task(void const * argument)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af04      	add	r7, sp, #16
 80046ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_task */
  /* Infinite loop */
    LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 80046b0:	2306      	movs	r3, #6
 80046b2:	73fb      	strb	r3, [r7, #15]
    LCD_Init( Lcd_ScanDir, 1000);
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fe5e 	bl	800137c <LCD_Init>
    LCD_SetBackLight();
 80046c0:	f7fc fc42 	bl	8000f48 <LCD_SetBackLight>
    LCD_Clear(LCD_BACKGROUND);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fc ff4f 	bl	8001568 <LCD_Clear>
    GUI_display();
 80046ca:	f7fd fbcb 	bl	8001e64 <GUI_display>
  for(;;)
  {
	  /******************************JOYSTICK************************************/
	  if((RX[1] == 65) || (RX[1] == 0)){
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <Display_task+0x94>)
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b41      	cmp	r3, #65	@ 0x41
 80046d4:	d003      	beq.n	80046de <Display_task+0x36>
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <Display_task+0x94>)
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d136      	bne.n	800474c <Display_task+0xa4>
	 		  GUI_DrawRectangle(x_g[6], y_g[2]+space, (x_g[6]+x_g[7])/2, (y_g[2]+y_g[3])/2-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <Display_task+0x98>)
 80046e0:	8998      	ldrh	r0, [r3, #12]
 80046e2:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <Display_task+0x9c>)
 80046e4:	889a      	ldrh	r2, [r3, #4]
 80046e6:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <Display_task+0xa0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	b299      	uxth	r1, r3
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <Display_task+0x98>)
 80046f2:	899b      	ldrh	r3, [r3, #12]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <Display_task+0x98>)
 80046f8:	89db      	ldrh	r3, [r3, #14]
 80046fa:	4413      	add	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da00      	bge.n	8004702 <Display_task+0x5a>
 8004700:	3301      	adds	r3, #1
 8004702:	105b      	asrs	r3, r3, #1
 8004704:	b29c      	uxth	r4, r3
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <Display_task+0x9c>)
 8004708:	889b      	ldrh	r3, [r3, #4]
 800470a:	461a      	mov	r2, r3
 800470c:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <Display_task+0x9c>)
 800470e:	88db      	ldrh	r3, [r3, #6]
 8004710:	4413      	add	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	da00      	bge.n	8004718 <Display_task+0x70>
 8004716:	3301      	adds	r3, #1
 8004718:	105b      	asrs	r3, r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <Display_task+0xa0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	b29b      	uxth	r3, r3
 8004726:	2201      	movs	r2, #1
 8004728:	9202      	str	r2, [sp, #8]
 800472a:	2201      	movs	r2, #1
 800472c:	9201      	str	r2, [sp, #4]
 800472e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004732:	9200      	str	r2, [sp, #0]
 8004734:	4622      	mov	r2, r4
 8004736:	f7fd f887 	bl	8001848 <GUI_DrawRectangle>
 800473a:	e035      	b.n	80047a8 <Display_task+0x100>
 800473c:	20000c48 	.word	0x20000c48
 8004740:	2000002c 	.word	0x2000002c
 8004744:	20000040 	.word	0x20000040
 8004748:	20000058 	.word	0x20000058
	 	  }
	 	  else{
	 		  GUI_DrawRectangle(x_g[6], y_g[2]+space, (x_g[6]+x_g[7])/2, (y_g[2]+y_g[3])/2-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 800474c:	4b98      	ldr	r3, [pc, #608]	@ (80049b0 <Display_task+0x308>)
 800474e:	8998      	ldrh	r0, [r3, #12]
 8004750:	4b98      	ldr	r3, [pc, #608]	@ (80049b4 <Display_task+0x30c>)
 8004752:	889a      	ldrh	r2, [r3, #4]
 8004754:	4b98      	ldr	r3, [pc, #608]	@ (80049b8 <Display_task+0x310>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4413      	add	r3, r2
 800475c:	b299      	uxth	r1, r3
 800475e:	4b94      	ldr	r3, [pc, #592]	@ (80049b0 <Display_task+0x308>)
 8004760:	899b      	ldrh	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	4b92      	ldr	r3, [pc, #584]	@ (80049b0 <Display_task+0x308>)
 8004766:	89db      	ldrh	r3, [r3, #14]
 8004768:	4413      	add	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	da00      	bge.n	8004770 <Display_task+0xc8>
 800476e:	3301      	adds	r3, #1
 8004770:	105b      	asrs	r3, r3, #1
 8004772:	b29c      	uxth	r4, r3
 8004774:	4b8f      	ldr	r3, [pc, #572]	@ (80049b4 <Display_task+0x30c>)
 8004776:	889b      	ldrh	r3, [r3, #4]
 8004778:	461a      	mov	r2, r3
 800477a:	4b8e      	ldr	r3, [pc, #568]	@ (80049b4 <Display_task+0x30c>)
 800477c:	88db      	ldrh	r3, [r3, #6]
 800477e:	4413      	add	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	da00      	bge.n	8004786 <Display_task+0xde>
 8004784:	3301      	adds	r3, #1
 8004786:	105b      	asrs	r3, r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b8b      	ldr	r3, [pc, #556]	@ (80049b8 <Display_task+0x310>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	2201      	movs	r2, #1
 8004796:	9202      	str	r2, [sp, #8]
 8004798:	2201      	movs	r2, #1
 800479a:	9201      	str	r2, [sp, #4]
 800479c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80047a0:	9200      	str	r2, [sp, #0]
 80047a2:	4622      	mov	r2, r4
 80047a4:	f7fd f850 	bl	8001848 <GUI_DrawRectangle>
	 	  }
/******************************SWITCH************************************/
	  if(Up_switch1 == 1){
 80047a8:	2104      	movs	r1, #4
 80047aa:	4884      	ldr	r0, [pc, #528]	@ (80049bc <Display_task+0x314>)
 80047ac:	f006 fcea 	bl	800b184 <HAL_GPIO_ReadPin>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d12b      	bne.n	800480e <Display_task+0x166>
			GUI_DrawRectangle(x_g[0]+space, y_g[1]+space, x_g[1]-space, y_g[2]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 80047b6:	4b7e      	ldr	r3, [pc, #504]	@ (80049b0 <Display_task+0x308>)
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	4b7f      	ldr	r3, [pc, #508]	@ (80049b8 <Display_task+0x310>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	b298      	uxth	r0, r3
 80047c4:	4b7b      	ldr	r3, [pc, #492]	@ (80049b4 <Display_task+0x30c>)
 80047c6:	885a      	ldrh	r2, [r3, #2]
 80047c8:	4b7b      	ldr	r3, [pc, #492]	@ (80049b8 <Display_task+0x310>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	b299      	uxth	r1, r3
 80047d2:	4b77      	ldr	r3, [pc, #476]	@ (80049b0 <Display_task+0x308>)
 80047d4:	885a      	ldrh	r2, [r3, #2]
 80047d6:	4b78      	ldr	r3, [pc, #480]	@ (80049b8 <Display_task+0x310>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	b29c      	uxth	r4, r3
 80047e0:	4b74      	ldr	r3, [pc, #464]	@ (80049b4 <Display_task+0x30c>)
 80047e2:	889a      	ldrh	r2, [r3, #4]
 80047e4:	4b74      	ldr	r3, [pc, #464]	@ (80049b8 <Display_task+0x310>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2201      	movs	r2, #1
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	2201      	movs	r2, #1
 80047f4:	9201      	str	r2, [sp, #4]
 80047f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047fa:	9200      	str	r2, [sp, #0]
 80047fc:	4622      	mov	r2, r4
 80047fe:	f7fd f823 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004802:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <Display_task+0x318>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f00e f865 	bl	80128d8 <fflush>
	  }
	  if(Up_switch1 == 0){
 800480e:	2104      	movs	r1, #4
 8004810:	486a      	ldr	r0, [pc, #424]	@ (80049bc <Display_task+0x314>)
 8004812:	f006 fcb7 	bl	800b184 <HAL_GPIO_ReadPin>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d12b      	bne.n	8004874 <Display_task+0x1cc>
			GUI_DrawRectangle(x_g[0]+space, y_g[1]+space, x_g[1]-space, y_g[2]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 800481c:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <Display_task+0x308>)
 800481e:	881a      	ldrh	r2, [r3, #0]
 8004820:	4b65      	ldr	r3, [pc, #404]	@ (80049b8 <Display_task+0x310>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	4413      	add	r3, r2
 8004828:	b298      	uxth	r0, r3
 800482a:	4b62      	ldr	r3, [pc, #392]	@ (80049b4 <Display_task+0x30c>)
 800482c:	885a      	ldrh	r2, [r3, #2]
 800482e:	4b62      	ldr	r3, [pc, #392]	@ (80049b8 <Display_task+0x310>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b299      	uxth	r1, r3
 8004838:	4b5d      	ldr	r3, [pc, #372]	@ (80049b0 <Display_task+0x308>)
 800483a:	885a      	ldrh	r2, [r3, #2]
 800483c:	4b5e      	ldr	r3, [pc, #376]	@ (80049b8 <Display_task+0x310>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	b29c      	uxth	r4, r3
 8004846:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <Display_task+0x30c>)
 8004848:	889a      	ldrh	r2, [r3, #4]
 800484a:	4b5b      	ldr	r3, [pc, #364]	@ (80049b8 <Display_task+0x310>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	2201      	movs	r2, #1
 8004856:	9202      	str	r2, [sp, #8]
 8004858:	2201      	movs	r2, #1
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004860:	9200      	str	r2, [sp, #0]
 8004862:	4622      	mov	r2, r4
 8004864:	f7fc fff0 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004868:	4b55      	ldr	r3, [pc, #340]	@ (80049c0 <Display_task+0x318>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f00e f832 	bl	80128d8 <fflush>
	  }
	  if(flag[0] == 2){
 8004874:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <Display_task+0x31c>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d12b      	bne.n	80048d4 <Display_task+0x22c>
		  GUI_DrawRectangle(x_g[0]+space_1, y_g[1]+space_1, x_g[1]-space_1, y_g[2]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 800487c:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <Display_task+0x308>)
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	4b51      	ldr	r3, [pc, #324]	@ (80049c8 <Display_task+0x320>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	4413      	add	r3, r2
 8004888:	b298      	uxth	r0, r3
 800488a:	4b4a      	ldr	r3, [pc, #296]	@ (80049b4 <Display_task+0x30c>)
 800488c:	885a      	ldrh	r2, [r3, #2]
 800488e:	4b4e      	ldr	r3, [pc, #312]	@ (80049c8 <Display_task+0x320>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	4413      	add	r3, r2
 8004896:	b299      	uxth	r1, r3
 8004898:	4b45      	ldr	r3, [pc, #276]	@ (80049b0 <Display_task+0x308>)
 800489a:	885a      	ldrh	r2, [r3, #2]
 800489c:	4b4a      	ldr	r3, [pc, #296]	@ (80049c8 <Display_task+0x320>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	b29c      	uxth	r4, r3
 80048a6:	4b43      	ldr	r3, [pc, #268]	@ (80049b4 <Display_task+0x30c>)
 80048a8:	889a      	ldrh	r2, [r3, #4]
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <Display_task+0x320>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2201      	movs	r2, #1
 80048b6:	9202      	str	r2, [sp, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	9201      	str	r2, [sp, #4]
 80048bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048c0:	9200      	str	r2, [sp, #0]
 80048c2:	4622      	mov	r2, r4
 80048c4:	f7fc ffc0 	bl	8001848 <GUI_DrawRectangle>
		  fflush(stdout);
 80048c8:	4b3d      	ldr	r3, [pc, #244]	@ (80049c0 <Display_task+0x318>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f00e f802 	bl	80128d8 <fflush>
	  }
	  if(flag[1] == 2){
 80048d4:	4b3b      	ldr	r3, [pc, #236]	@ (80049c4 <Display_task+0x31c>)
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d12b      	bne.n	8004934 <Display_task+0x28c>
		  GUI_DrawRectangle(x_g[3]+space_1, y_g[1]+space_1, x_g[4]-space_1, y_g[2]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80048dc:	4b34      	ldr	r3, [pc, #208]	@ (80049b0 <Display_task+0x308>)
 80048de:	88da      	ldrh	r2, [r3, #6]
 80048e0:	4b39      	ldr	r3, [pc, #228]	@ (80049c8 <Display_task+0x320>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	b298      	uxth	r0, r3
 80048ea:	4b32      	ldr	r3, [pc, #200]	@ (80049b4 <Display_task+0x30c>)
 80048ec:	885a      	ldrh	r2, [r3, #2]
 80048ee:	4b36      	ldr	r3, [pc, #216]	@ (80049c8 <Display_task+0x320>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	b299      	uxth	r1, r3
 80048f8:	4b2d      	ldr	r3, [pc, #180]	@ (80049b0 <Display_task+0x308>)
 80048fa:	891a      	ldrh	r2, [r3, #8]
 80048fc:	4b32      	ldr	r3, [pc, #200]	@ (80049c8 <Display_task+0x320>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	b29c      	uxth	r4, r3
 8004906:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <Display_task+0x30c>)
 8004908:	889a      	ldrh	r2, [r3, #4]
 800490a:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <Display_task+0x320>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	2201      	movs	r2, #1
 8004916:	9202      	str	r2, [sp, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004920:	9200      	str	r2, [sp, #0]
 8004922:	4622      	mov	r2, r4
 8004924:	f7fc ff90 	bl	8001848 <GUI_DrawRectangle>
		  fflush(stdout);
 8004928:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <Display_task+0x318>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f00d ffd2 	bl	80128d8 <fflush>
	  }
	  if(Up_switch2 == 1){
 8004934:	2101      	movs	r1, #1
 8004936:	4825      	ldr	r0, [pc, #148]	@ (80049cc <Display_task+0x324>)
 8004938:	f006 fc24 	bl	800b184 <HAL_GPIO_ReadPin>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d12b      	bne.n	800499a <Display_task+0x2f2>
		  GUI_DrawRectangle(x_g[3]+space, y_g[1]+space, x_g[4]-space, y_g[2]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <Display_task+0x308>)
 8004944:	88da      	ldrh	r2, [r3, #6]
 8004946:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <Display_task+0x310>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	4413      	add	r3, r2
 800494e:	b298      	uxth	r0, r3
 8004950:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <Display_task+0x30c>)
 8004952:	885a      	ldrh	r2, [r3, #2]
 8004954:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <Display_task+0x310>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	4413      	add	r3, r2
 800495c:	b299      	uxth	r1, r3
 800495e:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <Display_task+0x308>)
 8004960:	891a      	ldrh	r2, [r3, #8]
 8004962:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <Display_task+0x310>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	b29c      	uxth	r4, r3
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <Display_task+0x30c>)
 800496e:	889a      	ldrh	r2, [r3, #4]
 8004970:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <Display_task+0x310>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	2201      	movs	r2, #1
 800497c:	9202      	str	r2, [sp, #8]
 800497e:	2201      	movs	r2, #1
 8004980:	9201      	str	r2, [sp, #4]
 8004982:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004986:	9200      	str	r2, [sp, #0]
 8004988:	4622      	mov	r2, r4
 800498a:	f7fc ff5d 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 800498e:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <Display_task+0x318>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f00d ff9f 	bl	80128d8 <fflush>
	  }
	  if(Up_switch2 == 0){
 800499a:	2101      	movs	r1, #1
 800499c:	480b      	ldr	r0, [pc, #44]	@ (80049cc <Display_task+0x324>)
 800499e:	f006 fbf1 	bl	800b184 <HAL_GPIO_ReadPin>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d13d      	bne.n	8004a24 <Display_task+0x37c>
		  GUI_DrawRectangle(x_g[3]+space, y_g[1]+space, x_g[4]-space, y_g[2]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 80049a8:	4b01      	ldr	r3, [pc, #4]	@ (80049b0 <Display_task+0x308>)
 80049aa:	88da      	ldrh	r2, [r3, #6]
 80049ac:	e010      	b.n	80049d0 <Display_task+0x328>
 80049ae:	bf00      	nop
 80049b0:	2000002c 	.word	0x2000002c
 80049b4:	20000040 	.word	0x20000040
 80049b8:	20000058 	.word	0x20000058
 80049bc:	40021800 	.word	0x40021800
 80049c0:	2000008c 	.word	0x2000008c
 80049c4:	20000dd4 	.word	0x20000dd4
 80049c8:	2000005c 	.word	0x2000005c
 80049cc:	40020800 	.word	0x40020800
 80049d0:	4ba2      	ldr	r3, [pc, #648]	@ (8004c5c <Display_task+0x5b4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	b298      	uxth	r0, r3
 80049da:	4ba1      	ldr	r3, [pc, #644]	@ (8004c60 <Display_task+0x5b8>)
 80049dc:	885a      	ldrh	r2, [r3, #2]
 80049de:	4b9f      	ldr	r3, [pc, #636]	@ (8004c5c <Display_task+0x5b4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	b299      	uxth	r1, r3
 80049e8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c64 <Display_task+0x5bc>)
 80049ea:	891a      	ldrh	r2, [r3, #8]
 80049ec:	4b9b      	ldr	r3, [pc, #620]	@ (8004c5c <Display_task+0x5b4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	b29c      	uxth	r4, r3
 80049f6:	4b9a      	ldr	r3, [pc, #616]	@ (8004c60 <Display_task+0x5b8>)
 80049f8:	889a      	ldrh	r2, [r3, #4]
 80049fa:	4b98      	ldr	r3, [pc, #608]	@ (8004c5c <Display_task+0x5b4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	9202      	str	r2, [sp, #8]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004a10:	9200      	str	r2, [sp, #0]
 8004a12:	4622      	mov	r2, r4
 8004a14:	f7fc ff18 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004a18:	4b93      	ldr	r3, [pc, #588]	@ (8004c68 <Display_task+0x5c0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f00d ff5a 	bl	80128d8 <fflush>
	  }
	  if(flag[3] == 2){
 8004a24:	4b91      	ldr	r3, [pc, #580]	@ (8004c6c <Display_task+0x5c4>)
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d124      	bne.n	8004a76 <Display_task+0x3ce>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 20, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004c64 <Display_task+0x5bc>)
 8004a2e:	889b      	ldrh	r3, [r3, #4]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b8c      	ldr	r3, [pc, #560]	@ (8004c64 <Display_task+0x5bc>)
 8004a34:	885b      	ldrh	r3, [r3, #2]
 8004a36:	4413      	add	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da00      	bge.n	8004a3e <Display_task+0x396>
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	105b      	asrs	r3, r3, #1
 8004a40:	b298      	uxth	r0, r3
 8004a42:	4b87      	ldr	r3, [pc, #540]	@ (8004c60 <Display_task+0x5b8>)
 8004a44:	88db      	ldrh	r3, [r3, #6]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b85      	ldr	r3, [pc, #532]	@ (8004c60 <Display_task+0x5b8>)
 8004a4a:	885b      	ldrh	r3, [r3, #2]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da00      	bge.n	8004a54 <Display_task+0x3ac>
 8004a52:	3301      	adds	r3, #1
 8004a54:	105b      	asrs	r3, r3, #1
 8004a56:	b299      	uxth	r1, r3
 8004a58:	2301      	movs	r3, #1
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a64:	2214      	movs	r2, #20
 8004a66:	f7fc ff73 	bl	8001950 <GUI_DrawCircle>
		  fflush(stdout);
 8004a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c68 <Display_task+0x5c0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f00d ff31 	bl	80128d8 <fflush>
	  }
	  if(Ball_switch2 == 1){
 8004a76:	2110      	movs	r1, #16
 8004a78:	487d      	ldr	r0, [pc, #500]	@ (8004c70 <Display_task+0x5c8>)
 8004a7a:	f006 fb83 	bl	800b184 <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d124      	bne.n	8004ace <Display_task+0x426>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 15, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004a84:	4b77      	ldr	r3, [pc, #476]	@ (8004c64 <Display_task+0x5bc>)
 8004a86:	889b      	ldrh	r3, [r3, #4]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4b76      	ldr	r3, [pc, #472]	@ (8004c64 <Display_task+0x5bc>)
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	4413      	add	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	da00      	bge.n	8004a96 <Display_task+0x3ee>
 8004a94:	3301      	adds	r3, #1
 8004a96:	105b      	asrs	r3, r3, #1
 8004a98:	b298      	uxth	r0, r3
 8004a9a:	4b71      	ldr	r3, [pc, #452]	@ (8004c60 <Display_task+0x5b8>)
 8004a9c:	88db      	ldrh	r3, [r3, #6]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c60 <Display_task+0x5b8>)
 8004aa2:	885b      	ldrh	r3, [r3, #2]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da00      	bge.n	8004aac <Display_task+0x404>
 8004aaa:	3301      	adds	r3, #1
 8004aac:	105b      	asrs	r3, r3, #1
 8004aae:	b299      	uxth	r1, r3
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004abc:	220f      	movs	r2, #15
 8004abe:	f7fc ff47 	bl	8001950 <GUI_DrawCircle>
			fflush(stdout);
 8004ac2:	4b69      	ldr	r3, [pc, #420]	@ (8004c68 <Display_task+0x5c0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f00d ff05 	bl	80128d8 <fflush>
	  }
	  if(Ball_switch2 == 0){
 8004ace:	2110      	movs	r1, #16
 8004ad0:	4867      	ldr	r0, [pc, #412]	@ (8004c70 <Display_task+0x5c8>)
 8004ad2:	f006 fb57 	bl	800b184 <HAL_GPIO_ReadPin>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d124      	bne.n	8004b26 <Display_task+0x47e>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 15, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004adc:	4b61      	ldr	r3, [pc, #388]	@ (8004c64 <Display_task+0x5bc>)
 8004ade:	889b      	ldrh	r3, [r3, #4]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b60      	ldr	r3, [pc, #384]	@ (8004c64 <Display_task+0x5bc>)
 8004ae4:	885b      	ldrh	r3, [r3, #2]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	da00      	bge.n	8004aee <Display_task+0x446>
 8004aec:	3301      	adds	r3, #1
 8004aee:	105b      	asrs	r3, r3, #1
 8004af0:	b298      	uxth	r0, r3
 8004af2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c60 <Display_task+0x5b8>)
 8004af4:	88db      	ldrh	r3, [r3, #6]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <Display_task+0x5b8>)
 8004afa:	885b      	ldrh	r3, [r3, #2]
 8004afc:	4413      	add	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da00      	bge.n	8004b04 <Display_task+0x45c>
 8004b02:	3301      	adds	r3, #1
 8004b04:	105b      	asrs	r3, r3, #1
 8004b06:	b299      	uxth	r1, r3
 8004b08:	2301      	movs	r3, #1
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004b14:	220f      	movs	r2, #15
 8004b16:	f7fc ff1b 	bl	8001950 <GUI_DrawCircle>
			fflush(stdout);
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <Display_task+0x5c0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f00d fed9 	bl	80128d8 <fflush>
	  }
	  if(flag[2] == 2){
 8004b26:	4b51      	ldr	r3, [pc, #324]	@ (8004c6c <Display_task+0x5c4>)
 8004b28:	789b      	ldrb	r3, [r3, #2]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d124      	bne.n	8004b78 <Display_task+0x4d0>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 20, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c64 <Display_task+0x5bc>)
 8004b30:	88db      	ldrh	r3, [r3, #6]
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <Display_task+0x5bc>)
 8004b36:	889b      	ldrh	r3, [r3, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	da00      	bge.n	8004b40 <Display_task+0x498>
 8004b3e:	3301      	adds	r3, #1
 8004b40:	105b      	asrs	r3, r3, #1
 8004b42:	b298      	uxth	r0, r3
 8004b44:	4b46      	ldr	r3, [pc, #280]	@ (8004c60 <Display_task+0x5b8>)
 8004b46:	88db      	ldrh	r3, [r3, #6]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b45      	ldr	r3, [pc, #276]	@ (8004c60 <Display_task+0x5b8>)
 8004b4c:	885b      	ldrh	r3, [r3, #2]
 8004b4e:	4413      	add	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da00      	bge.n	8004b56 <Display_task+0x4ae>
 8004b54:	3301      	adds	r3, #1
 8004b56:	105b      	asrs	r3, r3, #1
 8004b58:	b299      	uxth	r1, r3
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b66:	2214      	movs	r2, #20
 8004b68:	f7fc fef2 	bl	8001950 <GUI_DrawCircle>
		  fflush(stdout);
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c68 <Display_task+0x5c0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f00d feb0 	bl	80128d8 <fflush>
	  }
	  if(Ball_switch1 == 1){
 8004b78:	2102      	movs	r1, #2
 8004b7a:	483e      	ldr	r0, [pc, #248]	@ (8004c74 <Display_task+0x5cc>)
 8004b7c:	f006 fb02 	bl	800b184 <HAL_GPIO_ReadPin>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d124      	bne.n	8004bd0 <Display_task+0x528>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 15, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <Display_task+0x5bc>)
 8004b88:	88db      	ldrh	r3, [r3, #6]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <Display_task+0x5bc>)
 8004b8e:	889b      	ldrh	r3, [r3, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da00      	bge.n	8004b98 <Display_task+0x4f0>
 8004b96:	3301      	adds	r3, #1
 8004b98:	105b      	asrs	r3, r3, #1
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <Display_task+0x5b8>)
 8004b9e:	88db      	ldrh	r3, [r3, #6]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c60 <Display_task+0x5b8>)
 8004ba4:	885b      	ldrh	r3, [r3, #2]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da00      	bge.n	8004bae <Display_task+0x506>
 8004bac:	3301      	adds	r3, #1
 8004bae:	105b      	asrs	r3, r3, #1
 8004bb0:	b299      	uxth	r1, r3
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	f7fc fec6 	bl	8001950 <GUI_DrawCircle>
			fflush(stdout);
 8004bc4:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <Display_task+0x5c0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f00d fe84 	bl	80128d8 <fflush>
	  }
	  if(Ball_switch1 == 0){
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4828      	ldr	r0, [pc, #160]	@ (8004c74 <Display_task+0x5cc>)
 8004bd4:	f006 fad6 	bl	800b184 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d124      	bne.n	8004c28 <Display_task+0x580>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 15, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004bde:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <Display_task+0x5bc>)
 8004be0:	88db      	ldrh	r3, [r3, #6]
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <Display_task+0x5bc>)
 8004be6:	889b      	ldrh	r3, [r3, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da00      	bge.n	8004bf0 <Display_task+0x548>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	105b      	asrs	r3, r3, #1
 8004bf2:	b298      	uxth	r0, r3
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <Display_task+0x5b8>)
 8004bf6:	88db      	ldrh	r3, [r3, #6]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <Display_task+0x5b8>)
 8004bfc:	885b      	ldrh	r3, [r3, #2]
 8004bfe:	4413      	add	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da00      	bge.n	8004c06 <Display_task+0x55e>
 8004c04:	3301      	adds	r3, #1
 8004c06:	105b      	asrs	r3, r3, #1
 8004c08:	b299      	uxth	r1, r3
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004c16:	220f      	movs	r2, #15
 8004c18:	f7fc fe9a 	bl	8001950 <GUI_DrawCircle>
			fflush(stdout);
 8004c1c:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <Display_task+0x5c0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f00d fe58 	bl	80128d8 <fflush>
	  }
	  if(flag[5] == 2){
 8004c28:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <Display_task+0x5c4>)
 8004c2a:	795b      	ldrb	r3, [r3, #5]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d13d      	bne.n	8004cac <Display_task+0x604>
		  GUI_DrawRectangle(x_g[0]+space_1, y_g[2]+space_1, x_g[1]-space_1, y_g[3]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004c30:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <Display_task+0x5bc>)
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <Display_task+0x5d0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	b298      	uxth	r0, r3
 8004c3e:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <Display_task+0x5b8>)
 8004c40:	889a      	ldrh	r2, [r3, #4]
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <Display_task+0x5d0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	b299      	uxth	r1, r3
 8004c4c:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <Display_task+0x5bc>)
 8004c4e:	885a      	ldrh	r2, [r3, #2]
 8004c50:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <Display_task+0x5d0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	e010      	b.n	8004c7c <Display_task+0x5d4>
 8004c5a:	bf00      	nop
 8004c5c:	20000058 	.word	0x20000058
 8004c60:	20000040 	.word	0x20000040
 8004c64:	2000002c 	.word	0x2000002c
 8004c68:	2000008c 	.word	0x2000008c
 8004c6c:	20000dd4 	.word	0x20000dd4
 8004c70:	40020000 	.word	0x40020000
 8004c74:	40020800 	.word	0x40020800
 8004c78:	2000005c 	.word	0x2000005c
 8004c7c:	b29c      	uxth	r4, r3
 8004c7e:	4b9a      	ldr	r3, [pc, #616]	@ (8004ee8 <Display_task+0x840>)
 8004c80:	88da      	ldrh	r2, [r3, #6]
 8004c82:	4b9a      	ldr	r3, [pc, #616]	@ (8004eec <Display_task+0x844>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	9202      	str	r2, [sp, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	9201      	str	r2, [sp, #4]
 8004c94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	f7fc fdd4 	bl	8001848 <GUI_DrawRectangle>
		  fflush(stdout);
 8004ca0:	4b93      	ldr	r3, [pc, #588]	@ (8004ef0 <Display_task+0x848>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f00d fe16 	bl	80128d8 <fflush>
	  }
	  if(Down_switch2 == 1){
 8004cac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004cb0:	4890      	ldr	r0, [pc, #576]	@ (8004ef4 <Display_task+0x84c>)
 8004cb2:	f006 fa67 	bl	800b184 <HAL_GPIO_ReadPin>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d12b      	bne.n	8004d14 <Display_task+0x66c>
		  GUI_DrawRectangle(x_g[0]+space, y_g[2]+space, x_g[1]-space, y_g[3]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004cbc:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef8 <Display_task+0x850>)
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8004efc <Display_task+0x854>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	b298      	uxth	r0, r3
 8004cca:	4b87      	ldr	r3, [pc, #540]	@ (8004ee8 <Display_task+0x840>)
 8004ccc:	889a      	ldrh	r2, [r3, #4]
 8004cce:	4b8b      	ldr	r3, [pc, #556]	@ (8004efc <Display_task+0x854>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	4b87      	ldr	r3, [pc, #540]	@ (8004ef8 <Display_task+0x850>)
 8004cda:	885a      	ldrh	r2, [r3, #2]
 8004cdc:	4b87      	ldr	r3, [pc, #540]	@ (8004efc <Display_task+0x854>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b29c      	uxth	r4, r3
 8004ce6:	4b80      	ldr	r3, [pc, #512]	@ (8004ee8 <Display_task+0x840>)
 8004ce8:	88da      	ldrh	r2, [r3, #6]
 8004cea:	4b84      	ldr	r3, [pc, #528]	@ (8004efc <Display_task+0x854>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	9202      	str	r2, [sp, #8]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	9201      	str	r2, [sp, #4]
 8004cfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d00:	9200      	str	r2, [sp, #0]
 8004d02:	4622      	mov	r2, r4
 8004d04:	f7fc fda0 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004d08:	4b79      	ldr	r3, [pc, #484]	@ (8004ef0 <Display_task+0x848>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f00d fde2 	bl	80128d8 <fflush>
	  }
	  if(Down_switch2 == 0){
 8004d14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d18:	4876      	ldr	r0, [pc, #472]	@ (8004ef4 <Display_task+0x84c>)
 8004d1a:	f006 fa33 	bl	800b184 <HAL_GPIO_ReadPin>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d12b      	bne.n	8004d7c <Display_task+0x6d4>
		  GUI_DrawRectangle(x_g[0]+space, y_g[2]+space, x_g[1]-space, y_g[3]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004d24:	4b74      	ldr	r3, [pc, #464]	@ (8004ef8 <Display_task+0x850>)
 8004d26:	881a      	ldrh	r2, [r3, #0]
 8004d28:	4b74      	ldr	r3, [pc, #464]	@ (8004efc <Display_task+0x854>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	b298      	uxth	r0, r3
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <Display_task+0x840>)
 8004d34:	889a      	ldrh	r2, [r3, #4]
 8004d36:	4b71      	ldr	r3, [pc, #452]	@ (8004efc <Display_task+0x854>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	b299      	uxth	r1, r3
 8004d40:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef8 <Display_task+0x850>)
 8004d42:	885a      	ldrh	r2, [r3, #2]
 8004d44:	4b6d      	ldr	r3, [pc, #436]	@ (8004efc <Display_task+0x854>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29c      	uxth	r4, r3
 8004d4e:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <Display_task+0x840>)
 8004d50:	88da      	ldrh	r2, [r3, #6]
 8004d52:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <Display_task+0x854>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	9202      	str	r2, [sp, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	9201      	str	r2, [sp, #4]
 8004d64:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004d68:	9200      	str	r2, [sp, #0]
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	f7fc fd6c 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004d70:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef0 <Display_task+0x848>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f00d fdae 	bl	80128d8 <fflush>
	  }
	  if(flag[4] == 2){
 8004d7c:	4b60      	ldr	r3, [pc, #384]	@ (8004f00 <Display_task+0x858>)
 8004d7e:	791b      	ldrb	r3, [r3, #4]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d12b      	bne.n	8004ddc <Display_task+0x734>
		  GUI_DrawRectangle(x_g[3]+space_1, y_g[2]+space_1, x_g[4]-space_1, y_g[3]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004d84:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef8 <Display_task+0x850>)
 8004d86:	88da      	ldrh	r2, [r3, #6]
 8004d88:	4b58      	ldr	r3, [pc, #352]	@ (8004eec <Display_task+0x844>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4413      	add	r3, r2
 8004d90:	b298      	uxth	r0, r3
 8004d92:	4b55      	ldr	r3, [pc, #340]	@ (8004ee8 <Display_task+0x840>)
 8004d94:	889a      	ldrh	r2, [r3, #4]
 8004d96:	4b55      	ldr	r3, [pc, #340]	@ (8004eec <Display_task+0x844>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	4b55      	ldr	r3, [pc, #340]	@ (8004ef8 <Display_task+0x850>)
 8004da2:	891a      	ldrh	r2, [r3, #8]
 8004da4:	4b51      	ldr	r3, [pc, #324]	@ (8004eec <Display_task+0x844>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	b29c      	uxth	r4, r3
 8004dae:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee8 <Display_task+0x840>)
 8004db0:	88da      	ldrh	r2, [r3, #6]
 8004db2:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <Display_task+0x844>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	9202      	str	r2, [sp, #8]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	9201      	str	r2, [sp, #4]
 8004dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dc8:	9200      	str	r2, [sp, #0]
 8004dca:	4622      	mov	r2, r4
 8004dcc:	f7fc fd3c 	bl	8001848 <GUI_DrawRectangle>
		  fflush(stdout);
 8004dd0:	4b47      	ldr	r3, [pc, #284]	@ (8004ef0 <Display_task+0x848>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f00d fd7e 	bl	80128d8 <fflush>
	  }
	  if(Down_switch1 == 1){
 8004ddc:	2104      	movs	r1, #4
 8004dde:	4849      	ldr	r0, [pc, #292]	@ (8004f04 <Display_task+0x85c>)
 8004de0:	f006 f9d0 	bl	800b184 <HAL_GPIO_ReadPin>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d12b      	bne.n	8004e42 <Display_task+0x79a>
		  GUI_DrawRectangle(x_g[3]+space, y_g[2]+space, x_g[4]-space, y_g[3]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004dea:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <Display_task+0x850>)
 8004dec:	88da      	ldrh	r2, [r3, #6]
 8004dee:	4b43      	ldr	r3, [pc, #268]	@ (8004efc <Display_task+0x854>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	b298      	uxth	r0, r3
 8004df8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <Display_task+0x840>)
 8004dfa:	889a      	ldrh	r2, [r3, #4]
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8004efc <Display_task+0x854>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	b299      	uxth	r1, r3
 8004e06:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef8 <Display_task+0x850>)
 8004e08:	891a      	ldrh	r2, [r3, #8]
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004efc <Display_task+0x854>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29c      	uxth	r4, r3
 8004e14:	4b34      	ldr	r3, [pc, #208]	@ (8004ee8 <Display_task+0x840>)
 8004e16:	88da      	ldrh	r2, [r3, #6]
 8004e18:	4b38      	ldr	r3, [pc, #224]	@ (8004efc <Display_task+0x854>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2201      	movs	r2, #1
 8004e24:	9202      	str	r2, [sp, #8]
 8004e26:	2201      	movs	r2, #1
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e2e:	9200      	str	r2, [sp, #0]
 8004e30:	4622      	mov	r2, r4
 8004e32:	f7fc fd09 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004e36:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef0 <Display_task+0x848>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f00d fd4b 	bl	80128d8 <fflush>
	  }
	  if(Down_switch1 == 0){
 8004e42:	2104      	movs	r1, #4
 8004e44:	482f      	ldr	r0, [pc, #188]	@ (8004f04 <Display_task+0x85c>)
 8004e46:	f006 f99d 	bl	800b184 <HAL_GPIO_ReadPin>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d12b      	bne.n	8004ea8 <Display_task+0x800>
		  GUI_DrawRectangle(x_g[3]+space, y_g[2]+space, x_g[4]-space, y_g[3]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004e50:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <Display_task+0x850>)
 8004e52:	88da      	ldrh	r2, [r3, #6]
 8004e54:	4b29      	ldr	r3, [pc, #164]	@ (8004efc <Display_task+0x854>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	b298      	uxth	r0, r3
 8004e5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <Display_task+0x840>)
 8004e60:	889a      	ldrh	r2, [r3, #4]
 8004e62:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <Display_task+0x854>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	b299      	uxth	r1, r3
 8004e6c:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <Display_task+0x850>)
 8004e6e:	891a      	ldrh	r2, [r3, #8]
 8004e70:	4b22      	ldr	r3, [pc, #136]	@ (8004efc <Display_task+0x854>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	b29c      	uxth	r4, r3
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <Display_task+0x840>)
 8004e7c:	88da      	ldrh	r2, [r3, #6]
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004efc <Display_task+0x854>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2201      	movs	r2, #1
 8004e8a:	9202      	str	r2, [sp, #8]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	9201      	str	r2, [sp, #4]
 8004e90:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004e94:	9200      	str	r2, [sp, #0]
 8004e96:	4622      	mov	r2, r4
 8004e98:	f7fc fcd6 	bl	8001848 <GUI_DrawRectangle>
			fflush(stdout);
 8004e9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ef0 <Display_task+0x848>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f00d fd18 	bl	80128d8 <fflush>
	  }
	  /******************************RELAY************************************/
	  if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)) == 0){
 8004ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004eac:	4816      	ldr	r0, [pc, #88]	@ (8004f08 <Display_task+0x860>)
 8004eae:	f006 f969 	bl	800b184 <HAL_GPIO_ReadPin>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d14b      	bne.n	8004f50 <Display_task+0x8a8>
		  GUI_DrawRectangle((x_g[4]+x_g[5])/2+space, y_g[1]+space, (x_g[5]+x_g[6])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef8 <Display_task+0x850>)
 8004eba:	891b      	ldrh	r3, [r3, #8]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <Display_task+0x850>)
 8004ec0:	895b      	ldrh	r3, [r3, #10]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	da00      	bge.n	8004eca <Display_task+0x822>
 8004ec8:	3301      	adds	r3, #1
 8004eca:	105b      	asrs	r3, r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <Display_task+0x854>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	b298      	uxth	r0, r3
 8004ed8:	4b03      	ldr	r3, [pc, #12]	@ (8004ee8 <Display_task+0x840>)
 8004eda:	885a      	ldrh	r2, [r3, #2]
 8004edc:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <Display_task+0x854>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b299      	uxth	r1, r3
 8004ee6:	e011      	b.n	8004f0c <Display_task+0x864>
 8004ee8:	20000040 	.word	0x20000040
 8004eec:	2000005c 	.word	0x2000005c
 8004ef0:	2000008c 	.word	0x2000008c
 8004ef4:	40020800 	.word	0x40020800
 8004ef8:	2000002c 	.word	0x2000002c
 8004efc:	20000058 	.word	0x20000058
 8004f00:	20000dd4 	.word	0x20000dd4
 8004f04:	40020c00 	.word	0x40020c00
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	4b89      	ldr	r3, [pc, #548]	@ (8005134 <Display_task+0xa8c>)
 8004f0e:	895b      	ldrh	r3, [r3, #10]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b88      	ldr	r3, [pc, #544]	@ (8005134 <Display_task+0xa8c>)
 8004f14:	899b      	ldrh	r3, [r3, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da00      	bge.n	8004f1e <Display_task+0x876>
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	105b      	asrs	r3, r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	4b85      	ldr	r3, [pc, #532]	@ (8005138 <Display_task+0xa90>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	b29c      	uxth	r4, r3
 8004f2c:	4b83      	ldr	r3, [pc, #524]	@ (800513c <Display_task+0xa94>)
 8004f2e:	889a      	ldrh	r2, [r3, #4]
 8004f30:	4b81      	ldr	r3, [pc, #516]	@ (8005138 <Display_task+0xa90>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	9202      	str	r2, [sp, #8]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	9201      	str	r2, [sp, #4]
 8004f42:	f248 4230 	movw	r2, #33840	@ 0x8430
 8004f46:	9200      	str	r2, [sp, #0]
 8004f48:	4622      	mov	r2, r4
 8004f4a:	f7fc fc7d 	bl	8001848 <GUI_DrawRectangle>
 8004f4e:	e037      	b.n	8004fc0 <Display_task+0x918>
	  }
	  else{
		  GUI_DrawRectangle((x_g[4]+x_g[5])/2+space, y_g[1]+space, (x_g[5]+x_g[6])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8004f50:	4b78      	ldr	r3, [pc, #480]	@ (8005134 <Display_task+0xa8c>)
 8004f52:	891b      	ldrh	r3, [r3, #8]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b77      	ldr	r3, [pc, #476]	@ (8005134 <Display_task+0xa8c>)
 8004f58:	895b      	ldrh	r3, [r3, #10]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	da00      	bge.n	8004f62 <Display_task+0x8ba>
 8004f60:	3301      	adds	r3, #1
 8004f62:	105b      	asrs	r3, r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	4b74      	ldr	r3, [pc, #464]	@ (8005138 <Display_task+0xa90>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b298      	uxth	r0, r3
 8004f70:	4b72      	ldr	r3, [pc, #456]	@ (800513c <Display_task+0xa94>)
 8004f72:	885a      	ldrh	r2, [r3, #2]
 8004f74:	4b70      	ldr	r3, [pc, #448]	@ (8005138 <Display_task+0xa90>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <Display_task+0xa8c>)
 8004f80:	895b      	ldrh	r3, [r3, #10]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b6b      	ldr	r3, [pc, #428]	@ (8005134 <Display_task+0xa8c>)
 8004f86:	899b      	ldrh	r3, [r3, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da00      	bge.n	8004f90 <Display_task+0x8e8>
 8004f8e:	3301      	adds	r3, #1
 8004f90:	105b      	asrs	r3, r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	4b68      	ldr	r3, [pc, #416]	@ (8005138 <Display_task+0xa90>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29c      	uxth	r4, r3
 8004f9e:	4b67      	ldr	r3, [pc, #412]	@ (800513c <Display_task+0xa94>)
 8004fa0:	889a      	ldrh	r2, [r3, #4]
 8004fa2:	4b65      	ldr	r3, [pc, #404]	@ (8005138 <Display_task+0xa90>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	9202      	str	r2, [sp, #8]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	9201      	str	r2, [sp, #4]
 8004fb4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004fb8:	9200      	str	r2, [sp, #0]
 8004fba:	4622      	mov	r2, r4
 8004fbc:	f7fc fc44 	bl	8001848 <GUI_DrawRectangle>
	  }
	  if( (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) == 0){
 8004fc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fc4:	485e      	ldr	r0, [pc, #376]	@ (8005140 <Display_task+0xa98>)
 8004fc6:	f006 f8dd 	bl	800b184 <HAL_GPIO_ReadPin>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d138      	bne.n	8005042 <Display_task+0x99a>
		  GUI_DrawRectangle((x_g[6]+x_g[7])/2+space, y_g[1]+space, (x_g[7]+x_g[8])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 8004fd0:	4b58      	ldr	r3, [pc, #352]	@ (8005134 <Display_task+0xa8c>)
 8004fd2:	899b      	ldrh	r3, [r3, #12]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b57      	ldr	r3, [pc, #348]	@ (8005134 <Display_task+0xa8c>)
 8004fd8:	89db      	ldrh	r3, [r3, #14]
 8004fda:	4413      	add	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da00      	bge.n	8004fe2 <Display_task+0x93a>
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	105b      	asrs	r3, r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	4b54      	ldr	r3, [pc, #336]	@ (8005138 <Display_task+0xa90>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	b298      	uxth	r0, r3
 8004ff0:	4b52      	ldr	r3, [pc, #328]	@ (800513c <Display_task+0xa94>)
 8004ff2:	885a      	ldrh	r2, [r3, #2]
 8004ff4:	4b50      	ldr	r3, [pc, #320]	@ (8005138 <Display_task+0xa90>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	b299      	uxth	r1, r3
 8004ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8005134 <Display_task+0xa8c>)
 8005000:	89db      	ldrh	r3, [r3, #14]
 8005002:	461a      	mov	r2, r3
 8005004:	4b4b      	ldr	r3, [pc, #300]	@ (8005134 <Display_task+0xa8c>)
 8005006:	8a1b      	ldrh	r3, [r3, #16]
 8005008:	4413      	add	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	da00      	bge.n	8005010 <Display_task+0x968>
 800500e:	3301      	adds	r3, #1
 8005010:	105b      	asrs	r3, r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	4b48      	ldr	r3, [pc, #288]	@ (8005138 <Display_task+0xa90>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	b29c      	uxth	r4, r3
 800501e:	4b47      	ldr	r3, [pc, #284]	@ (800513c <Display_task+0xa94>)
 8005020:	889a      	ldrh	r2, [r3, #4]
 8005022:	4b45      	ldr	r3, [pc, #276]	@ (8005138 <Display_task+0xa90>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	2201      	movs	r2, #1
 800502e:	9202      	str	r2, [sp, #8]
 8005030:	2201      	movs	r2, #1
 8005032:	9201      	str	r2, [sp, #4]
 8005034:	f248 4230 	movw	r2, #33840	@ 0x8430
 8005038:	9200      	str	r2, [sp, #0]
 800503a:	4622      	mov	r2, r4
 800503c:	f7fc fc04 	bl	8001848 <GUI_DrawRectangle>
 8005040:	e037      	b.n	80050b2 <Display_task+0xa0a>
	  }
	  else{
		  GUI_DrawRectangle((x_g[6]+x_g[7])/2+space, y_g[1]+space, (x_g[7]+x_g[8])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8005042:	4b3c      	ldr	r3, [pc, #240]	@ (8005134 <Display_task+0xa8c>)
 8005044:	899b      	ldrh	r3, [r3, #12]
 8005046:	461a      	mov	r2, r3
 8005048:	4b3a      	ldr	r3, [pc, #232]	@ (8005134 <Display_task+0xa8c>)
 800504a:	89db      	ldrh	r3, [r3, #14]
 800504c:	4413      	add	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	da00      	bge.n	8005054 <Display_task+0x9ac>
 8005052:	3301      	adds	r3, #1
 8005054:	105b      	asrs	r3, r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <Display_task+0xa90>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	4413      	add	r3, r2
 8005060:	b298      	uxth	r0, r3
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <Display_task+0xa94>)
 8005064:	885a      	ldrh	r2, [r3, #2]
 8005066:	4b34      	ldr	r3, [pc, #208]	@ (8005138 <Display_task+0xa90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4413      	add	r3, r2
 800506e:	b299      	uxth	r1, r3
 8005070:	4b30      	ldr	r3, [pc, #192]	@ (8005134 <Display_task+0xa8c>)
 8005072:	89db      	ldrh	r3, [r3, #14]
 8005074:	461a      	mov	r2, r3
 8005076:	4b2f      	ldr	r3, [pc, #188]	@ (8005134 <Display_task+0xa8c>)
 8005078:	8a1b      	ldrh	r3, [r3, #16]
 800507a:	4413      	add	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	da00      	bge.n	8005082 <Display_task+0x9da>
 8005080:	3301      	adds	r3, #1
 8005082:	105b      	asrs	r3, r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	4b2c      	ldr	r3, [pc, #176]	@ (8005138 <Display_task+0xa90>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	b29c      	uxth	r4, r3
 8005090:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <Display_task+0xa94>)
 8005092:	889a      	ldrh	r2, [r3, #4]
 8005094:	4b28      	ldr	r3, [pc, #160]	@ (8005138 <Display_task+0xa90>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	b29b      	uxth	r3, r3
 800509e:	2201      	movs	r2, #1
 80050a0:	9202      	str	r2, [sp, #8]
 80050a2:	2201      	movs	r2, #1
 80050a4:	9201      	str	r2, [sp, #4]
 80050a6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80050aa:	9200      	str	r2, [sp, #0]
 80050ac:	4622      	mov	r2, r4
 80050ae:	f7fc fbcb 	bl	8001848 <GUI_DrawRectangle>
	  }
	  if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)) == 0){
 80050b2:	2108      	movs	r1, #8
 80050b4:	4823      	ldr	r0, [pc, #140]	@ (8005144 <Display_task+0xa9c>)
 80050b6:	f006 f865 	bl	800b184 <HAL_GPIO_ReadPin>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d143      	bne.n	8005148 <Display_task+0xaa0>
		  GUI_DrawRectangle((x_g[5]+x_g[6])/2+space, y_g[1]+space, (x_g[6]+x_g[7])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 80050c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <Display_task+0xa8c>)
 80050c2:	895b      	ldrh	r3, [r3, #10]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005134 <Display_task+0xa8c>)
 80050c8:	899b      	ldrh	r3, [r3, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	da00      	bge.n	80050d2 <Display_task+0xa2a>
 80050d0:	3301      	adds	r3, #1
 80050d2:	105b      	asrs	r3, r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b18      	ldr	r3, [pc, #96]	@ (8005138 <Display_task+0xa90>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	4413      	add	r3, r2
 80050de:	b298      	uxth	r0, r3
 80050e0:	4b16      	ldr	r3, [pc, #88]	@ (800513c <Display_task+0xa94>)
 80050e2:	885a      	ldrh	r2, [r3, #2]
 80050e4:	4b14      	ldr	r3, [pc, #80]	@ (8005138 <Display_task+0xa90>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	b299      	uxth	r1, r3
 80050ee:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <Display_task+0xa8c>)
 80050f0:	899b      	ldrh	r3, [r3, #12]
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <Display_task+0xa8c>)
 80050f6:	89db      	ldrh	r3, [r3, #14]
 80050f8:	4413      	add	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da00      	bge.n	8005100 <Display_task+0xa58>
 80050fe:	3301      	adds	r3, #1
 8005100:	105b      	asrs	r3, r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <Display_task+0xa90>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29c      	uxth	r4, r3
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <Display_task+0xa94>)
 8005110:	889a      	ldrh	r2, [r3, #4]
 8005112:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <Display_task+0xa90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	2201      	movs	r2, #1
 800511e:	9202      	str	r2, [sp, #8]
 8005120:	2201      	movs	r2, #1
 8005122:	9201      	str	r2, [sp, #4]
 8005124:	f248 4230 	movw	r2, #33840	@ 0x8430
 8005128:	9200      	str	r2, [sp, #0]
 800512a:	4622      	mov	r2, r4
 800512c:	f7fc fb8c 	bl	8001848 <GUI_DrawRectangle>
 8005130:	e042      	b.n	80051b8 <Display_task+0xb10>
 8005132:	bf00      	nop
 8005134:	2000002c 	.word	0x2000002c
 8005138:	20000058 	.word	0x20000058
 800513c:	20000040 	.word	0x20000040
 8005140:	40021000 	.word	0x40021000
 8005144:	40021400 	.word	0x40021400
	  }
	  else{
		  GUI_DrawRectangle((x_g[5]+x_g[6])/2+space, y_g[1]+space, (x_g[6]+x_g[7])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8005148:	4b9f      	ldr	r3, [pc, #636]	@ (80053c8 <Display_task+0xd20>)
 800514a:	895b      	ldrh	r3, [r3, #10]
 800514c:	461a      	mov	r2, r3
 800514e:	4b9e      	ldr	r3, [pc, #632]	@ (80053c8 <Display_task+0xd20>)
 8005150:	899b      	ldrh	r3, [r3, #12]
 8005152:	4413      	add	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	da00      	bge.n	800515a <Display_task+0xab2>
 8005158:	3301      	adds	r3, #1
 800515a:	105b      	asrs	r3, r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	4b9b      	ldr	r3, [pc, #620]	@ (80053cc <Display_task+0xd24>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	4413      	add	r3, r2
 8005166:	b298      	uxth	r0, r3
 8005168:	4b99      	ldr	r3, [pc, #612]	@ (80053d0 <Display_task+0xd28>)
 800516a:	885a      	ldrh	r2, [r3, #2]
 800516c:	4b97      	ldr	r3, [pc, #604]	@ (80053cc <Display_task+0xd24>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	4413      	add	r3, r2
 8005174:	b299      	uxth	r1, r3
 8005176:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <Display_task+0xd20>)
 8005178:	899b      	ldrh	r3, [r3, #12]
 800517a:	461a      	mov	r2, r3
 800517c:	4b92      	ldr	r3, [pc, #584]	@ (80053c8 <Display_task+0xd20>)
 800517e:	89db      	ldrh	r3, [r3, #14]
 8005180:	4413      	add	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	da00      	bge.n	8005188 <Display_task+0xae0>
 8005186:	3301      	adds	r3, #1
 8005188:	105b      	asrs	r3, r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	4b8f      	ldr	r3, [pc, #572]	@ (80053cc <Display_task+0xd24>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	b29c      	uxth	r4, r3
 8005196:	4b8e      	ldr	r3, [pc, #568]	@ (80053d0 <Display_task+0xd28>)
 8005198:	889a      	ldrh	r2, [r3, #4]
 800519a:	4b8c      	ldr	r3, [pc, #560]	@ (80053cc <Display_task+0xd24>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2201      	movs	r2, #1
 80051a6:	9202      	str	r2, [sp, #8]
 80051a8:	2201      	movs	r2, #1
 80051aa:	9201      	str	r2, [sp, #4]
 80051ac:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80051b0:	9200      	str	r2, [sp, #0]
 80051b2:	4622      	mov	r2, r4
 80051b4:	f7fc fb48 	bl	8001848 <GUI_DrawRectangle>
	  }
/******************************ROBOT************************************/
	  	sprintf(m1_hurd[0], "%d   ", M1.en_speed);
 80051b8:	4b86      	ldr	r3, [pc, #536]	@ (80053d4 <Display_task+0xd2c>)
 80051ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051be:	461a      	mov	r2, r3
 80051c0:	4985      	ldr	r1, [pc, #532]	@ (80053d8 <Display_task+0xd30>)
 80051c2:	4886      	ldr	r0, [pc, #536]	@ (80053dc <Display_task+0xd34>)
 80051c4:	f00d fb9c 	bl	8012900 <siprintf>
	  	sprintf(m1_hurd[1], "%d   ", M2.en_speed);
 80051c8:	4b85      	ldr	r3, [pc, #532]	@ (80053e0 <Display_task+0xd38>)
 80051ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4981      	ldr	r1, [pc, #516]	@ (80053d8 <Display_task+0xd30>)
 80051d2:	4884      	ldr	r0, [pc, #528]	@ (80053e4 <Display_task+0xd3c>)
 80051d4:	f00d fb94 	bl	8012900 <siprintf>
	  	sprintf(m1_hurd[2], "%d   ", M3.en_speed);
 80051d8:	4b83      	ldr	r3, [pc, #524]	@ (80053e8 <Display_task+0xd40>)
 80051da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051de:	461a      	mov	r2, r3
 80051e0:	497d      	ldr	r1, [pc, #500]	@ (80053d8 <Display_task+0xd30>)
 80051e2:	4882      	ldr	r0, [pc, #520]	@ (80053ec <Display_task+0xd44>)
 80051e4:	f00d fb8c 	bl	8012900 <siprintf>
	  	sprintf(m1_hurd[3], "%d   ", M4.en_speed);
 80051e8:	4b81      	ldr	r3, [pc, #516]	@ (80053f0 <Display_task+0xd48>)
 80051ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051ee:	461a      	mov	r2, r3
 80051f0:	4979      	ldr	r1, [pc, #484]	@ (80053d8 <Display_task+0xd30>)
 80051f2:	4880      	ldr	r0, [pc, #512]	@ (80053f4 <Display_task+0xd4c>)
 80051f4:	f00d fb84 	bl	8012900 <siprintf>
	  	sprintf(pwm[0], "%u   ", lf);
 80051f8:	4b7f      	ldr	r3, [pc, #508]	@ (80053f8 <Display_task+0xd50>)
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	497f      	ldr	r1, [pc, #508]	@ (80053fc <Display_task+0xd54>)
 8005200:	487f      	ldr	r0, [pc, #508]	@ (8005400 <Display_task+0xd58>)
 8005202:	f00d fb7d 	bl	8012900 <siprintf>
	  	sprintf(pwm[1], "%u   ", lb);
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <Display_task+0xd5c>)
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	497b      	ldr	r1, [pc, #492]	@ (80053fc <Display_task+0xd54>)
 800520e:	487e      	ldr	r0, [pc, #504]	@ (8005408 <Display_task+0xd60>)
 8005210:	f00d fb76 	bl	8012900 <siprintf>
	  	sprintf(pwm[2], "%u   ", rf);
 8005214:	4b7d      	ldr	r3, [pc, #500]	@ (800540c <Display_task+0xd64>)
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	4978      	ldr	r1, [pc, #480]	@ (80053fc <Display_task+0xd54>)
 800521c:	487c      	ldr	r0, [pc, #496]	@ (8005410 <Display_task+0xd68>)
 800521e:	f00d fb6f 	bl	8012900 <siprintf>
	  	sprintf(pwm[3], "%u   ", rb);
 8005222:	4b7c      	ldr	r3, [pc, #496]	@ (8005414 <Display_task+0xd6c>)
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	4974      	ldr	r1, [pc, #464]	@ (80053fc <Display_task+0xd54>)
 800522a:	487b      	ldr	r0, [pc, #492]	@ (8005418 <Display_task+0xd70>)
 800522c:	f00d fb68 	bl	8012900 <siprintf>
		switchStatePrev_1 = Up_switch2;
 8005230:	2101      	movs	r1, #1
 8005232:	487a      	ldr	r0, [pc, #488]	@ (800541c <Display_task+0xd74>)
 8005234:	f005 ffa6 	bl	800b184 <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	4b78      	ldr	r3, [pc, #480]	@ (8005420 <Display_task+0xd78>)
 800523e:	601a      	str	r2, [r3, #0]
		switchStatePrev_2 = Up_switch2;
 8005240:	2101      	movs	r1, #1
 8005242:	4876      	ldr	r0, [pc, #472]	@ (800541c <Display_task+0xd74>)
 8005244:	f005 ff9e 	bl	800b184 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	4b75      	ldr	r3, [pc, #468]	@ (8005424 <Display_task+0xd7c>)
 800524e:	601a      	str	r2, [r3, #0]
		switchStatePrev_3 = Ball_switch2;
 8005250:	2110      	movs	r1, #16
 8005252:	4875      	ldr	r0, [pc, #468]	@ (8005428 <Display_task+0xd80>)
 8005254:	f005 ff96 	bl	800b184 <HAL_GPIO_ReadPin>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	4b73      	ldr	r3, [pc, #460]	@ (800542c <Display_task+0xd84>)
 800525e:	601a      	str	r2, [r3, #0]
		switchStatePrev_4 = Ball_switch2;
 8005260:	2110      	movs	r1, #16
 8005262:	4871      	ldr	r0, [pc, #452]	@ (8005428 <Display_task+0xd80>)
 8005264:	f005 ff8e 	bl	800b184 <HAL_GPIO_ReadPin>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	4b70      	ldr	r3, [pc, #448]	@ (8005430 <Display_task+0xd88>)
 800526e:	601a      	str	r2, [r3, #0]

		GUI_DisString_EN(x_g[1]+space, y_g[4], m1_hurd[0], &Font16, LCD_BACKGROUND, WHITE);
 8005270:	4b55      	ldr	r3, [pc, #340]	@ (80053c8 <Display_task+0xd20>)
 8005272:	885a      	ldrh	r2, [r3, #2]
 8005274:	4b55      	ldr	r3, [pc, #340]	@ (80053cc <Display_task+0xd24>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	4413      	add	r3, r2
 800527c:	b298      	uxth	r0, r3
 800527e:	4b54      	ldr	r3, [pc, #336]	@ (80053d0 <Display_task+0xd28>)
 8005280:	8919      	ldrh	r1, [r3, #8]
 8005282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	2300      	movs	r3, #0
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	4b69      	ldr	r3, [pc, #420]	@ (8005434 <Display_task+0xd8c>)
 800528e:	4a53      	ldr	r2, [pc, #332]	@ (80053dc <Display_task+0xd34>)
 8005290:	f7fc fd96 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[1]+space, y_g[4]+5*space, pwm[0], &Font16, LCD_BACKGROUND, WHITE);
 8005294:	4b4c      	ldr	r3, [pc, #304]	@ (80053c8 <Display_task+0xd20>)
 8005296:	885a      	ldrh	r2, [r3, #2]
 8005298:	4b4c      	ldr	r3, [pc, #304]	@ (80053cc <Display_task+0xd24>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	4413      	add	r3, r2
 80052a0:	b298      	uxth	r0, r3
 80052a2:	4b4b      	ldr	r3, [pc, #300]	@ (80053d0 <Display_task+0xd28>)
 80052a4:	891a      	ldrh	r2, [r3, #8]
 80052a6:	4b49      	ldr	r3, [pc, #292]	@ (80053cc <Display_task+0xd24>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	0089      	lsls	r1, r1, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	b299      	uxth	r1, r3
 80052b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005434 <Display_task+0xd8c>)
 80052c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005400 <Display_task+0xd58>)
 80052c6:	f7fc fd7b 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[7]+space, y_g[4], m1_hurd[2], &Font16, LCD_BACKGROUND, WHITE);
 80052ca:	4b3f      	ldr	r3, [pc, #252]	@ (80053c8 <Display_task+0xd20>)
 80052cc:	89da      	ldrh	r2, [r3, #14]
 80052ce:	4b3f      	ldr	r3, [pc, #252]	@ (80053cc <Display_task+0xd24>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	b298      	uxth	r0, r3
 80052d8:	4b3d      	ldr	r3, [pc, #244]	@ (80053d0 <Display_task+0xd28>)
 80052da:	8919      	ldrh	r1, [r3, #8]
 80052dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	2300      	movs	r3, #0
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4b53      	ldr	r3, [pc, #332]	@ (8005434 <Display_task+0xd8c>)
 80052e8:	4a40      	ldr	r2, [pc, #256]	@ (80053ec <Display_task+0xd44>)
 80052ea:	f7fc fd69 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[7]+space, y_g[4]+5*space, pwm[2], &Font16, LCD_BACKGROUND, WHITE);
 80052ee:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <Display_task+0xd20>)
 80052f0:	89da      	ldrh	r2, [r3, #14]
 80052f2:	4b36      	ldr	r3, [pc, #216]	@ (80053cc <Display_task+0xd24>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	b298      	uxth	r0, r3
 80052fc:	4b34      	ldr	r3, [pc, #208]	@ (80053d0 <Display_task+0xd28>)
 80052fe:	891a      	ldrh	r2, [r3, #8]
 8005300:	4b32      	ldr	r3, [pc, #200]	@ (80053cc <Display_task+0xd24>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	4619      	mov	r1, r3
 8005308:	0089      	lsls	r1, r1, #2
 800530a:	440b      	add	r3, r1
 800530c:	b29b      	uxth	r3, r3
 800530e:	4413      	add	r3, r2
 8005310:	b299      	uxth	r1, r3
 8005312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	2300      	movs	r3, #0
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4b45      	ldr	r3, [pc, #276]	@ (8005434 <Display_task+0xd8c>)
 800531e:	4a3c      	ldr	r2, [pc, #240]	@ (8005410 <Display_task+0xd68>)
 8005320:	f7fc fd4e 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[1]+space, y_g[6]+2*space, m1_hurd[1], &Font16, LCD_BACKGROUND, WHITE);
 8005324:	4b28      	ldr	r3, [pc, #160]	@ (80053c8 <Display_task+0xd20>)
 8005326:	885a      	ldrh	r2, [r3, #2]
 8005328:	4b28      	ldr	r3, [pc, #160]	@ (80053cc <Display_task+0xd24>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	4413      	add	r3, r2
 8005330:	b298      	uxth	r0, r3
 8005332:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <Display_task+0xd28>)
 8005334:	899a      	ldrh	r2, [r3, #12]
 8005336:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <Display_task+0xd24>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	4413      	add	r3, r2
 8005342:	b299      	uxth	r1, r3
 8005344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	2300      	movs	r3, #0
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <Display_task+0xd8c>)
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <Display_task+0xd3c>)
 8005352:	f7fc fd35 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[1]+space, y_g[6]+6*space, pwm[1], &Font16, LCD_BACKGROUND, WHITE);
 8005356:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <Display_task+0xd20>)
 8005358:	885a      	ldrh	r2, [r3, #2]
 800535a:	4b1c      	ldr	r3, [pc, #112]	@ (80053cc <Display_task+0xd24>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	4413      	add	r3, r2
 8005362:	b298      	uxth	r0, r3
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <Display_task+0xd28>)
 8005366:	899a      	ldrh	r2, [r3, #12]
 8005368:	4b18      	ldr	r3, [pc, #96]	@ (80053cc <Display_task+0xd24>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	0049      	lsls	r1, r1, #1
 8005372:	440b      	add	r3, r1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	4413      	add	r3, r2
 800537a:	b299      	uxth	r1, r3
 800537c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <Display_task+0xd8c>)
 8005388:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <Display_task+0xd60>)
 800538a:	f7fc fd19 	bl	8001dc0 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[7]+space, y_g[6]+2*space, m1_hurd[3], &Font16, LCD_BACKGROUND, WHITE);
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <Display_task+0xd20>)
 8005390:	89da      	ldrh	r2, [r3, #14]
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <Display_task+0xd24>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	4413      	add	r3, r2
 800539a:	b298      	uxth	r0, r3
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <Display_task+0xd28>)
 800539e:	899a      	ldrh	r2, [r3, #12]
 80053a0:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <Display_task+0xd24>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	b299      	uxth	r1, r3
 80053ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <Display_task+0xd8c>)
 80053ba:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <Display_task+0xd4c>)
 80053bc:	f7fc fd00 	bl	8001dc0 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[7]+space, y_g[6]+6*space, pwm[3], &Font16, LCD_BACKGROUND, WHITE);
 80053c0:	4b01      	ldr	r3, [pc, #4]	@ (80053c8 <Display_task+0xd20>)
 80053c2:	89da      	ldrh	r2, [r3, #14]
 80053c4:	e038      	b.n	8005438 <Display_task+0xd90>
 80053c6:	bf00      	nop
 80053c8:	2000002c 	.word	0x2000002c
 80053cc:	20000058 	.word	0x20000058
 80053d0:	20000040 	.word	0x20000040
 80053d4:	20000d80 	.word	0x20000d80
 80053d8:	08013674 	.word	0x08013674
 80053dc:	20000dac 	.word	0x20000dac
 80053e0:	20000d88 	.word	0x20000d88
 80053e4:	20000db6 	.word	0x20000db6
 80053e8:	20000d90 	.word	0x20000d90
 80053ec:	20000dc0 	.word	0x20000dc0
 80053f0:	20000d98 	.word	0x20000d98
 80053f4:	20000dca 	.word	0x20000dca
 80053f8:	20000c52 	.word	0x20000c52
 80053fc:	0801367c 	.word	0x0801367c
 8005400:	20000ddc 	.word	0x20000ddc
 8005404:	20000c54 	.word	0x20000c54
 8005408:	20000de6 	.word	0x20000de6
 800540c:	20000c56 	.word	0x20000c56
 8005410:	20000df0 	.word	0x20000df0
 8005414:	20000c58 	.word	0x20000c58
 8005418:	20000dfa 	.word	0x20000dfa
 800541c:	40020800 	.word	0x40020800
 8005420:	20000cf4 	.word	0x20000cf4
 8005424:	20000cf8 	.word	0x20000cf8
 8005428:	40020000 	.word	0x40020000
 800542c:	20000cfc 	.word	0x20000cfc
 8005430:	20000d00 	.word	0x20000d00
 8005434:	20000008 	.word	0x20000008
 8005438:	4b79      	ldr	r3, [pc, #484]	@ (8005620 <Display_task+0xf78>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	4413      	add	r3, r2
 8005440:	b298      	uxth	r0, r3
 8005442:	4b78      	ldr	r3, [pc, #480]	@ (8005624 <Display_task+0xf7c>)
 8005444:	899a      	ldrh	r2, [r3, #12]
 8005446:	4b76      	ldr	r3, [pc, #472]	@ (8005620 <Display_task+0xf78>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	0049      	lsls	r1, r1, #1
 8005450:	440b      	add	r3, r1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	4413      	add	r3, r2
 8005458:	b299      	uxth	r1, r3
 800545a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	2300      	movs	r3, #0
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4b70      	ldr	r3, [pc, #448]	@ (8005628 <Display_task+0xf80>)
 8005466:	4a71      	ldr	r2, [pc, #452]	@ (800562c <Display_task+0xf84>)
 8005468:	f7fc fcaa 	bl	8001dc0 <GUI_DisString_EN>
/******************************JOYSTICK CHIGLEL************************************/
		if((x_g[4] > (x_g[4]+(RX[7]-128))) || (y_g[6] > (y_g[6]+(128-RX[8])))){
 800546c:	4b70      	ldr	r3, [pc, #448]	@ (8005630 <Display_task+0xf88>)
 800546e:	79db      	ldrb	r3, [r3, #7]
 8005470:	b25b      	sxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	da05      	bge.n	8005482 <Display_task+0xdda>
 8005476:	4b6e      	ldr	r3, [pc, #440]	@ (8005630 <Display_task+0xf88>)
 8005478:	7a1b      	ldrb	r3, [r3, #8]
 800547a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	da5f      	bge.n	8005542 <Display_task+0xe9a>
			GUI_DrawLine(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4 , x_g[4], y_g[6], MAGENTA, LINE_SOLID, DOT_PIXEL_2X2);
 8005482:	4b6c      	ldr	r3, [pc, #432]	@ (8005634 <Display_task+0xf8c>)
 8005484:	891a      	ldrh	r2, [r3, #8]
 8005486:	4b6a      	ldr	r3, [pc, #424]	@ (8005630 <Display_task+0xf88>)
 8005488:	79db      	ldrb	r3, [r3, #7]
 800548a:	3b80      	subs	r3, #128	@ 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	da00      	bge.n	8005492 <Display_task+0xdea>
 8005490:	3303      	adds	r3, #3
 8005492:	109b      	asrs	r3, r3, #2
 8005494:	b29b      	uxth	r3, r3
 8005496:	4413      	add	r3, r2
 8005498:	b298      	uxth	r0, r3
 800549a:	4b62      	ldr	r3, [pc, #392]	@ (8005624 <Display_task+0xf7c>)
 800549c:	899a      	ldrh	r2, [r3, #12]
 800549e:	4b64      	ldr	r3, [pc, #400]	@ (8005630 <Display_task+0xf88>)
 80054a0:	7a1b      	ldrb	r3, [r3, #8]
 80054a2:	3b80      	subs	r3, #128	@ 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	da00      	bge.n	80054aa <Display_task+0xe02>
 80054a8:	3303      	adds	r3, #3
 80054aa:	109b      	asrs	r3, r3, #2
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	b299      	uxth	r1, r3
 80054b2:	4b60      	ldr	r3, [pc, #384]	@ (8005634 <Display_task+0xf8c>)
 80054b4:	891a      	ldrh	r2, [r3, #8]
 80054b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005624 <Display_task+0xf7c>)
 80054b8:	899b      	ldrh	r3, [r3, #12]
 80054ba:	2402      	movs	r4, #2
 80054bc:	9402      	str	r4, [sp, #8]
 80054be:	2400      	movs	r4, #0
 80054c0:	9401      	str	r4, [sp, #4]
 80054c2:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80054c6:	9400      	str	r4, [sp, #0]
 80054c8:	f7fc f8fe 	bl	80016c8 <GUI_DrawLine>
			GUI_DrawPoint(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80054cc:	4b59      	ldr	r3, [pc, #356]	@ (8005634 <Display_task+0xf8c>)
 80054ce:	891a      	ldrh	r2, [r3, #8]
 80054d0:	4b57      	ldr	r3, [pc, #348]	@ (8005630 <Display_task+0xf88>)
 80054d2:	79db      	ldrb	r3, [r3, #7]
 80054d4:	3b80      	subs	r3, #128	@ 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da00      	bge.n	80054dc <Display_task+0xe34>
 80054da:	3303      	adds	r3, #3
 80054dc:	109b      	asrs	r3, r3, #2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	b298      	uxth	r0, r3
 80054e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005624 <Display_task+0xf7c>)
 80054e6:	899a      	ldrh	r2, [r3, #12]
 80054e8:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <Display_task+0xf88>)
 80054ea:	7a1b      	ldrb	r3, [r3, #8]
 80054ec:	3b80      	subs	r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da00      	bge.n	80054f4 <Display_task+0xe4c>
 80054f2:	3303      	adds	r3, #3
 80054f4:	109b      	asrs	r3, r3, #2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	b299      	uxth	r1, r3
 80054fc:	2301      	movs	r3, #1
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	2303      	movs	r3, #3
 8005502:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8005506:	f7fc f859 	bl	80015bc <GUI_DrawPoint>
			GUI_DrawRectangle(x_g[3], y_g[4]+space, x_g[5], y_g[8]-space, BLACK, DRAW_FULL, DOT_PIXEL_DFT);
 800550a:	4b4a      	ldr	r3, [pc, #296]	@ (8005634 <Display_task+0xf8c>)
 800550c:	88d8      	ldrh	r0, [r3, #6]
 800550e:	4b45      	ldr	r3, [pc, #276]	@ (8005624 <Display_task+0xf7c>)
 8005510:	891a      	ldrh	r2, [r3, #8]
 8005512:	4b43      	ldr	r3, [pc, #268]	@ (8005620 <Display_task+0xf78>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	4413      	add	r3, r2
 800551a:	b299      	uxth	r1, r3
 800551c:	4b45      	ldr	r3, [pc, #276]	@ (8005634 <Display_task+0xf8c>)
 800551e:	895c      	ldrh	r4, [r3, #10]
 8005520:	4b40      	ldr	r3, [pc, #256]	@ (8005624 <Display_task+0xf7c>)
 8005522:	8a1a      	ldrh	r2, [r3, #16]
 8005524:	4b3e      	ldr	r3, [pc, #248]	@ (8005620 <Display_task+0xf78>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	b29b      	uxth	r3, r3
 800552e:	2201      	movs	r2, #1
 8005530:	9202      	str	r2, [sp, #8]
 8005532:	2201      	movs	r2, #1
 8005534:	9201      	str	r2, [sp, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	9200      	str	r2, [sp, #0]
 800553a:	4622      	mov	r2, r4
 800553c:	f7fc f984 	bl	8001848 <GUI_DrawRectangle>
 8005540:	e069      	b.n	8005616 <Display_task+0xf6e>
		}
		else if((x_g[4] < (x_g[4]+(RX[7]-128))) || (y_g[6] < (y_g[6]+(128-RX[8])))){
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <Display_task+0xf88>)
 8005544:	79db      	ldrb	r3, [r3, #7]
 8005546:	2b80      	cmp	r3, #128	@ 0x80
 8005548:	d805      	bhi.n	8005556 <Display_task+0xeae>
 800554a:	4b39      	ldr	r3, [pc, #228]	@ (8005630 <Display_task+0xf88>)
 800554c:	7a1b      	ldrb	r3, [r3, #8]
 800554e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	dd5f      	ble.n	8005616 <Display_task+0xf6e>
			GUI_DrawLine(x_g[4], y_g[6] , x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, LINE_SOLID, DOT_PIXEL_2X2);
 8005556:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <Display_task+0xf8c>)
 8005558:	8918      	ldrh	r0, [r3, #8]
 800555a:	4b32      	ldr	r3, [pc, #200]	@ (8005624 <Display_task+0xf7c>)
 800555c:	8999      	ldrh	r1, [r3, #12]
 800555e:	4b35      	ldr	r3, [pc, #212]	@ (8005634 <Display_task+0xf8c>)
 8005560:	891a      	ldrh	r2, [r3, #8]
 8005562:	4b33      	ldr	r3, [pc, #204]	@ (8005630 <Display_task+0xf88>)
 8005564:	79db      	ldrb	r3, [r3, #7]
 8005566:	3b80      	subs	r3, #128	@ 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	da00      	bge.n	800556e <Display_task+0xec6>
 800556c:	3303      	adds	r3, #3
 800556e:	109b      	asrs	r3, r3, #2
 8005570:	b29b      	uxth	r3, r3
 8005572:	4413      	add	r3, r2
 8005574:	b29c      	uxth	r4, r3
 8005576:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <Display_task+0xf7c>)
 8005578:	899a      	ldrh	r2, [r3, #12]
 800557a:	4b2d      	ldr	r3, [pc, #180]	@ (8005630 <Display_task+0xf88>)
 800557c:	7a1b      	ldrb	r3, [r3, #8]
 800557e:	3b80      	subs	r3, #128	@ 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	da00      	bge.n	8005586 <Display_task+0xede>
 8005584:	3303      	adds	r3, #3
 8005586:	109b      	asrs	r3, r3, #2
 8005588:	b29b      	uxth	r3, r3
 800558a:	4413      	add	r3, r2
 800558c:	b29b      	uxth	r3, r3
 800558e:	2202      	movs	r2, #2
 8005590:	9202      	str	r2, [sp, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	9201      	str	r2, [sp, #4]
 8005596:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800559a:	9200      	str	r2, [sp, #0]
 800559c:	4622      	mov	r2, r4
 800559e:	f7fc f893 	bl	80016c8 <GUI_DrawLine>
			GUI_DrawPoint(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80055a2:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <Display_task+0xf8c>)
 80055a4:	891a      	ldrh	r2, [r3, #8]
 80055a6:	4b22      	ldr	r3, [pc, #136]	@ (8005630 <Display_task+0xf88>)
 80055a8:	79db      	ldrb	r3, [r3, #7]
 80055aa:	3b80      	subs	r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da00      	bge.n	80055b2 <Display_task+0xf0a>
 80055b0:	3303      	adds	r3, #3
 80055b2:	109b      	asrs	r3, r3, #2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	b298      	uxth	r0, r3
 80055ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <Display_task+0xf7c>)
 80055bc:	899a      	ldrh	r2, [r3, #12]
 80055be:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <Display_task+0xf88>)
 80055c0:	7a1b      	ldrb	r3, [r3, #8]
 80055c2:	3b80      	subs	r3, #128	@ 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	da00      	bge.n	80055ca <Display_task+0xf22>
 80055c8:	3303      	adds	r3, #3
 80055ca:	109b      	asrs	r3, r3, #2
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	b299      	uxth	r1, r3
 80055d2:	2301      	movs	r3, #1
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	2303      	movs	r3, #3
 80055d8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80055dc:	f7fb ffee 	bl	80015bc <GUI_DrawPoint>
			GUI_DrawRectangle(x_g[3], y_g[4]+space, x_g[5], y_g[8]-space, BLACK, DRAW_FULL, DOT_PIXEL_DFT);
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <Display_task+0xf8c>)
 80055e2:	88d8      	ldrh	r0, [r3, #6]
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <Display_task+0xf7c>)
 80055e6:	891a      	ldrh	r2, [r3, #8]
 80055e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <Display_task+0xf78>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	b299      	uxth	r1, r3
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <Display_task+0xf8c>)
 80055f4:	895c      	ldrh	r4, [r3, #10]
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <Display_task+0xf7c>)
 80055f8:	8a1a      	ldrh	r2, [r3, #16]
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <Display_task+0xf78>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	b29b      	uxth	r3, r3
 8005604:	2201      	movs	r2, #1
 8005606:	9202      	str	r2, [sp, #8]
 8005608:	2201      	movs	r2, #1
 800560a:	9201      	str	r2, [sp, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	9200      	str	r2, [sp, #0]
 8005610:	4622      	mov	r2, r4
 8005612:	f7fc f919 	bl	8001848 <GUI_DrawRectangle>
		}

    osDelay(1);
 8005616:	2001      	movs	r0, #1
 8005618:	f00a f9b0 	bl	800f97c <osDelay>
	  if((RX[1] == 65) || (RX[1] == 0)){
 800561c:	f7ff b857 	b.w	80046ce <Display_task+0x26>
 8005620:	20000058 	.word	0x20000058
 8005624:	20000040 	.word	0x20000040
 8005628:	20000008 	.word	0x20000008
 800562c:	20000dfa 	.word	0x20000dfa
 8005630:	20000c48 	.word	0x20000c48
 8005634:	2000002c 	.word	0x2000002c

08005638 <Ros_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ros_Transmit */
void Ros_Transmit(void const * argument)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ros_Transmit */
  /* Infinite loop */
  for(;;)
  {

	  if(Up_switch1==0){
 8005640:	2104      	movs	r1, #4
 8005642:	4861      	ldr	r0, [pc, #388]	@ (80057c8 <Ros_Transmit+0x190>)
 8005644:	f005 fd9e 	bl	800b184 <HAL_GPIO_ReadPin>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d108      	bne.n	8005660 <Ros_Transmit+0x28>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000001;
 800564e:	4b5f      	ldr	r3, [pc, #380]	@ (80057cc <Ros_Transmit+0x194>)
 8005650:	f993 3000 	ldrsb.w	r3, [r3]
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	b25a      	sxtb	r2, r3
 800565a:	4b5c      	ldr	r3, [pc, #368]	@ (80057cc <Ros_Transmit+0x194>)
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e007      	b.n	8005670 <Ros_Transmit+0x38>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111110;
 8005660:	4b5a      	ldr	r3, [pc, #360]	@ (80057cc <Ros_Transmit+0x194>)
 8005662:	f993 3000 	ldrsb.w	r3, [r3]
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	b25a      	sxtb	r2, r3
 800566c:	4b57      	ldr	r3, [pc, #348]	@ (80057cc <Ros_Transmit+0x194>)
 800566e:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Up_switch2==0){
 8005670:	2101      	movs	r1, #1
 8005672:	4857      	ldr	r0, [pc, #348]	@ (80057d0 <Ros_Transmit+0x198>)
 8005674:	f005 fd86 	bl	800b184 <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d108      	bne.n	8005690 <Ros_Transmit+0x58>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000010;
 800567e:	4b53      	ldr	r3, [pc, #332]	@ (80057cc <Ros_Transmit+0x194>)
 8005680:	f993 3000 	ldrsb.w	r3, [r3]
 8005684:	f043 0302 	orr.w	r3, r3, #2
 8005688:	b25a      	sxtb	r2, r3
 800568a:	4b50      	ldr	r3, [pc, #320]	@ (80057cc <Ros_Transmit+0x194>)
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e007      	b.n	80056a0 <Ros_Transmit+0x68>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111101;
 8005690:	4b4e      	ldr	r3, [pc, #312]	@ (80057cc <Ros_Transmit+0x194>)
 8005692:	f993 3000 	ldrsb.w	r3, [r3]
 8005696:	f023 0302 	bic.w	r3, r3, #2
 800569a:	b25a      	sxtb	r2, r3
 800569c:	4b4b      	ldr	r3, [pc, #300]	@ (80057cc <Ros_Transmit+0x194>)
 800569e:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Down_switch1==0){
 80056a0:	2104      	movs	r1, #4
 80056a2:	484c      	ldr	r0, [pc, #304]	@ (80057d4 <Ros_Transmit+0x19c>)
 80056a4:	f005 fd6e 	bl	800b184 <HAL_GPIO_ReadPin>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <Ros_Transmit+0x88>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000100;
 80056ae:	4b47      	ldr	r3, [pc, #284]	@ (80057cc <Ros_Transmit+0x194>)
 80056b0:	f993 3000 	ldrsb.w	r3, [r3]
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	b25a      	sxtb	r2, r3
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <Ros_Transmit+0x194>)
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e007      	b.n	80056d0 <Ros_Transmit+0x98>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111011;
 80056c0:	4b42      	ldr	r3, [pc, #264]	@ (80057cc <Ros_Transmit+0x194>)
 80056c2:	f993 3000 	ldrsb.w	r3, [r3]
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	b25a      	sxtb	r2, r3
 80056cc:	4b3f      	ldr	r3, [pc, #252]	@ (80057cc <Ros_Transmit+0x194>)
 80056ce:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Down_switch2==0){
 80056d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056d4:	483e      	ldr	r0, [pc, #248]	@ (80057d0 <Ros_Transmit+0x198>)
 80056d6:	f005 fd55 	bl	800b184 <HAL_GPIO_ReadPin>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <Ros_Transmit+0xba>
	  		  sensor_buff[0]=sensor_buff[0]|0b00001000;
 80056e0:	4b3a      	ldr	r3, [pc, #232]	@ (80057cc <Ros_Transmit+0x194>)
 80056e2:	f993 3000 	ldrsb.w	r3, [r3]
 80056e6:	f043 0308 	orr.w	r3, r3, #8
 80056ea:	b25a      	sxtb	r2, r3
 80056ec:	4b37      	ldr	r3, [pc, #220]	@ (80057cc <Ros_Transmit+0x194>)
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e007      	b.n	8005702 <Ros_Transmit+0xca>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11110111;
 80056f2:	4b36      	ldr	r3, [pc, #216]	@ (80057cc <Ros_Transmit+0x194>)
 80056f4:	f993 3000 	ldrsb.w	r3, [r3]
 80056f8:	f023 0308 	bic.w	r3, r3, #8
 80056fc:	b25a      	sxtb	r2, r3
 80056fe:	4b33      	ldr	r3, [pc, #204]	@ (80057cc <Ros_Transmit+0x194>)
 8005700:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Ball_switch1==0){
 8005702:	2102      	movs	r1, #2
 8005704:	4832      	ldr	r0, [pc, #200]	@ (80057d0 <Ros_Transmit+0x198>)
 8005706:	f005 fd3d 	bl	800b184 <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <Ros_Transmit+0xea>
	  		  sensor_buff[0]=sensor_buff[0]|0b00010000;
 8005710:	4b2e      	ldr	r3, [pc, #184]	@ (80057cc <Ros_Transmit+0x194>)
 8005712:	f993 3000 	ldrsb.w	r3, [r3]
 8005716:	f043 0310 	orr.w	r3, r3, #16
 800571a:	b25a      	sxtb	r2, r3
 800571c:	4b2b      	ldr	r3, [pc, #172]	@ (80057cc <Ros_Transmit+0x194>)
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e007      	b.n	8005732 <Ros_Transmit+0xfa>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11101111;
 8005722:	4b2a      	ldr	r3, [pc, #168]	@ (80057cc <Ros_Transmit+0x194>)
 8005724:	f993 3000 	ldrsb.w	r3, [r3]
 8005728:	f023 0310 	bic.w	r3, r3, #16
 800572c:	b25a      	sxtb	r2, r3
 800572e:	4b27      	ldr	r3, [pc, #156]	@ (80057cc <Ros_Transmit+0x194>)
 8005730:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(fl==2){
 8005732:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <Ros_Transmit+0x1a0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d108      	bne.n	800574c <Ros_Transmit+0x114>
	  		  sensor_buff[0]=sensor_buff[0]|0b00100000;
 800573a:	4b24      	ldr	r3, [pc, #144]	@ (80057cc <Ros_Transmit+0x194>)
 800573c:	f993 3000 	ldrsb.w	r3, [r3]
 8005740:	f043 0320 	orr.w	r3, r3, #32
 8005744:	b25a      	sxtb	r2, r3
 8005746:	4b21      	ldr	r3, [pc, #132]	@ (80057cc <Ros_Transmit+0x194>)
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e00c      	b.n	8005766 <Ros_Transmit+0x12e>
	  	  }
	  	  else if(fl==-2){
 800574c:	4b22      	ldr	r3, [pc, #136]	@ (80057d8 <Ros_Transmit+0x1a0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f113 0f02 	cmn.w	r3, #2
 8005754:	d107      	bne.n	8005766 <Ros_Transmit+0x12e>
	  		  sensor_buff[0]=sensor_buff[0]&0b11011111;
 8005756:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <Ros_Transmit+0x194>)
 8005758:	f993 3000 	ldrsb.w	r3, [r3]
 800575c:	f023 0320 	bic.w	r3, r3, #32
 8005760:	b25a      	sxtb	r2, r3
 8005762:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <Ros_Transmit+0x194>)
 8005764:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(RX[3]==247){
 8005766:	4b1d      	ldr	r3, [pc, #116]	@ (80057dc <Ros_Transmit+0x1a4>)
 8005768:	78db      	ldrb	r3, [r3, #3]
 800576a:	2bf7      	cmp	r3, #247	@ 0xf7
 800576c:	d108      	bne.n	8005780 <Ros_Transmit+0x148>
	  		  sensor_buff[0]=sensor_buff[0]|0b01000000;
 800576e:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <Ros_Transmit+0x194>)
 8005770:	f993 3000 	ldrsb.w	r3, [r3]
 8005774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005778:	b25a      	sxtb	r2, r3
 800577a:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <Ros_Transmit+0x194>)
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e007      	b.n	8005790 <Ros_Transmit+0x158>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b10111111;
 8005780:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <Ros_Transmit+0x194>)
 8005782:	f993 3000 	ldrsb.w	r3, [r3]
 8005786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578a:	b25a      	sxtb	r2, r3
 800578c:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <Ros_Transmit+0x194>)
 800578e:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(RX[3] == 254){
 8005790:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <Ros_Transmit+0x1a4>)
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2bfe      	cmp	r3, #254	@ 0xfe
 8005796:	d108      	bne.n	80057aa <Ros_Transmit+0x172>
	  		  sensor_buff[0]=sensor_buff[0]|0b10000000;
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <Ros_Transmit+0x194>)
 800579a:	f993 3000 	ldrsb.w	r3, [r3]
 800579e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a2:	b25a      	sxtb	r2, r3
 80057a4:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <Ros_Transmit+0x194>)
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e007      	b.n	80057ba <Ros_Transmit+0x182>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b01111111;
 80057aa:	4b08      	ldr	r3, [pc, #32]	@ (80057cc <Ros_Transmit+0x194>)
 80057ac:	f993 3000 	ldrsb.w	r3, [r3]
 80057b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b4:	b25a      	sxtb	r2, r3
 80057b6:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <Ros_Transmit+0x194>)
 80057b8:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  loop();
 80057ba:	f002 fa87 	bl	8007ccc <loop>
    osDelay(5);
 80057be:	2005      	movs	r0, #5
 80057c0:	f00a f8dc 	bl	800f97c <osDelay>
	  if(Up_switch1==0){
 80057c4:	e73c      	b.n	8005640 <Ros_Transmit+0x8>
 80057c6:	bf00      	nop
 80057c8:	40021800 	.word	0x40021800
 80057cc:	20000c5c 	.word	0x20000c5c
 80057d0:	40020800 	.word	0x40020800
 80057d4:	40020c00 	.word	0x40020c00
 80057d8:	20000cc4 	.word	0x20000cc4
 80057dc:	20000c48 	.word	0x20000c48

080057e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80057f2:	f003 ff6f 	bl	80096d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40014000 	.word	0x40014000

08005804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005808:	b672      	cpsid	i
}
 800580a:	bf00      	nop
  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	4a04      	ldr	r2, [pc, #16]	@ (8005854 <_ZN3ros3MsgC1Ev+0x1c>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	080159cc 	.word	0x080159cc

08005858 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
      data()
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff ffe8 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8005868:	4a06      	ldr	r2, [pc, #24]	@ (8005884 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff ffcf 	bl	8005816 <_ZN3ros4TimeC1Ev>
    {
    }
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	080159b4 	.word	0x080159b4

08005888 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	4413      	add	r3, r2
 80058a0:	b2ca      	uxtb	r2, r1
 80058a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	0a19      	lsrs	r1, r3, #8
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	4413      	add	r3, r2
 80058b2:	b2ca      	uxtb	r2, r1
 80058b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	0c19      	lsrs	r1, r3, #16
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3302      	adds	r3, #2
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	b2ca      	uxtb	r2, r1
 80058c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	0e19      	lsrs	r1, r3, #24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3303      	adds	r3, #3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	b2ca      	uxtb	r2, r1
 80058d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3304      	adds	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6899      	ldr	r1, [r3, #8]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	4413      	add	r3, r2
 80058ea:	b2ca      	uxtb	r2, r1
 80058ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0a19      	lsrs	r1, r3, #8
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	4413      	add	r3, r2
 80058fc:	b2ca      	uxtb	r2, r1
 80058fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	0c19      	lsrs	r1, r3, #16
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3302      	adds	r3, #2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4413      	add	r3, r2
 800590e:	b2ca      	uxtb	r2, r1
 8005910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	0e19      	lsrs	r1, r3, #24
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3303      	adds	r3, #3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	4413      	add	r3, r2
 8005920:	b2ca      	uxtb	r2, r1
 8005922:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3304      	adds	r3, #4
 8005928:	60fb      	str	r3, [r7, #12]
      return offset;
 800592a:	68fb      	ldr	r3, [r7, #12]
    }
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	4413      	add	r3, r2
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	440b      	add	r3, r1
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3302      	adds	r3, #2
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	440b      	add	r3, r1
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3303      	adds	r3, #3
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	440b      	add	r3, r1
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	061b      	lsls	r3, r3, #24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	440b      	add	r3, r1
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3302      	adds	r3, #2
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	440b      	add	r3, r1
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3303      	adds	r3, #3
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	440b      	add	r3, r1
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	061b      	lsls	r3, r3, #24
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3304      	adds	r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
     return offset;
 80059f2:	68fb      	ldr	r3, [r7, #12]
    }
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	4b03      	ldr	r3, [pc, #12]	@ (8005a18 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	08013684 	.word	0x08013684

08005a1c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	4b03      	ldr	r3, [pc, #12]	@ (8005a34 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	08013694 	.word	0x08013694

08005a38 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fef8 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8005a48:	4a0b      	ldr	r2, [pc, #44]	@ (8005a78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a09      	ldr	r2, [pc, #36]	@ (8005a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005a58:	609a      	str	r2, [r3, #8]
      message_type(""),
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005a5e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a06      	ldr	r2, [pc, #24]	@ (8005a7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005a64:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	615a      	str	r2, [r3, #20]
    {
    }
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	0801599c 	.word	0x0801599c
 8005a7c:	080136b8 	.word	0x080136b8

08005a80 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8899      	ldrh	r1, [r3, #4]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	b2ca      	uxtb	r2, r1
 8005a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	889b      	ldrh	r3, [r3, #4]
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	b299      	uxth	r1, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	b2ca      	uxtb	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fa fba8 	bl	8000210 <strlen>
 8005ac0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	69b9      	ldr	r1, [r7, #24]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 f918 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	18d0      	adds	r0, r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f00d f859 	bl	8012b9a <memcpy>
      offset += length_topic_name;
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fb8b 	bl	8000210 <strlen>
 8005afa:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 f8fb 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	18d0      	adds	r0, r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f00d f83c 	bl	8012b9a <memcpy>
      offset += length_message_type;
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4413      	add	r3, r2
 8005b28:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fa fb6e 	bl	8000210 <strlen>
 8005b34:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	6939      	ldr	r1, [r7, #16]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 f8de 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3304      	adds	r3, #4
 8005b48:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	18d0      	adds	r0, r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4619      	mov	r1, r3
 8005b58:	f00d f81f 	bl	8012b9a <memcpy>
      offset += length_md5sum;
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	b2ca      	uxtb	r2, r1
 8005b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	0a19      	lsrs	r1, r3, #8
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	4413      	add	r3, r2
 8005b82:	b2ca      	uxtb	r2, r1
 8005b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	0c19      	lsrs	r1, r3, #16
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4413      	add	r3, r2
 8005b92:	b2ca      	uxtb	r2, r1
 8005b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	0e19      	lsrs	r1, r3, #24
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b2ca      	uxtb	r2, r1
 8005ba4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	61fb      	str	r3, [r7, #28]
      return offset;
 8005bac:	69fb      	ldr	r3, [r7, #28]
    }
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08a      	sub	sp, #40	@ 0x28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4413      	add	r3, r2
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	889b      	ldrh	r3, [r3, #4]
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	440b      	add	r3, r1
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	f107 0314 	add.w	r3, r7, #20
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 f89b 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c12:	e00b      	b.n	8005c2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	441a      	add	r2, r3
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	440b      	add	r3, r1
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3ed      	bcc.n	8005c14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	441a      	add	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	441a      	add	r2, r3
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f002 f868 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3304      	adds	r3, #4
 8005c72:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	e00b      	b.n	8005c92 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	441a      	add	r2, r3
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	440b      	add	r3, r1
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3ed      	bcc.n	8005c7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4413      	add	r3, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	441a      	add	r2, r3
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f002 f835 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e00b      	b.n	8005cf8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	440b      	add	r3, r1
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3ed      	bcc.n	8005ce0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	4413      	add	r3, r2
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	440a      	add	r2, r1
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	440b      	add	r3, r1
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3302      	adds	r3, #2
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	440b      	add	r3, r1
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	3303      	adds	r3, #3
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	440b      	add	r3, r1
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	61bb      	str	r3, [r7, #24]
     return offset;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
    }
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3728      	adds	r7, #40	@ 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	080136bc 	.word	0x080136bc

08005da4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	4b03      	ldr	r3, [pc, #12]	@ (8005dbc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	080136d8 	.word	0x080136d8

08005dc0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fd34 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8005dd0:	4a06      	ldr	r2, [pc, #24]	@ (8005dec <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
      level(0),
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	711a      	strb	r2, [r3, #4]
      msg("")
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a04      	ldr	r2, [pc, #16]	@ (8005df0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8005de0:	609a      	str	r2, [r3, #8]
    {
    }
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08015984 	.word	0x08015984
 8005df0:	080136b8 	.word	0x080136b8

08005df4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	7912      	ldrb	r2, [r2, #4]
 8005e0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fa f9f9 	bl	8000210 <strlen>
 8005e1e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 ff69 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3304      	adds	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	18d0      	adds	r0, r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4619      	mov	r1, r3
 8005e42:	f00c feaa 	bl	8012b9a <memcpy>
      offset += length_msg;
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
      return offset;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    }
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	441a      	add	r2, r3
 8005e7e:	f107 030c 	add.w	r3, r7, #12
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 ff5a 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e00b      	b.n	8005eae <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	440b      	add	r3, r1
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d3ed      	bcc.n	8005e96 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
     return offset;
 8005ede:	693b      	ldr	r3, [r7, #16]
    }
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	080136fc 	.word	0x080136fc

08005f04 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	4b03      	ldr	r3, [pc, #12]	@ (8005f1c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	08013710 	.word	0x08013710

08005f20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fc84 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8005f30:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	615a      	str	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	61da      	str	r2, [r3, #28]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	621a      	str	r2, [r3, #32]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	0801596c 	.word	0x0801596c

08005f7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	@ 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	b2ca      	uxtb	r2, r1
 8005f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	0a19      	lsrs	r1, r3, #8
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	b2ca      	uxtb	r2, r1
 8005fa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	0c19      	lsrs	r1, r3, #16
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	b2ca      	uxtb	r2, r1
 8005fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	0e19      	lsrs	r1, r3, #24
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	3303      	adds	r3, #3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	4413      	add	r3, r2
 8005fca:	b2ca      	uxtb	r2, r1
 8005fcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
 8005fd8:	e02a      	b.n	8006030 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8005fe8:	6939      	ldr	r1, [r7, #16]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	4413      	add	r3, r2
 8005ff0:	b2ca      	uxtb	r2, r1
 8005ff2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	0a19      	lsrs	r1, r3, #8
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	4413      	add	r3, r2
 8006000:	b2ca      	uxtb	r2, r1
 8006002:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	0c19      	lsrs	r1, r3, #16
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	3302      	adds	r3, #2
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	4413      	add	r3, r2
 8006010:	b2ca      	uxtb	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	0e19      	lsrs	r1, r3, #24
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	3303      	adds	r3, #3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	4413      	add	r3, r2
 8006020:	b2ca      	uxtb	r2, r1
 8006022:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	3304      	adds	r3, #4
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	3301      	adds	r3, #1
 800602e:	623b      	str	r3, [r7, #32]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3cf      	bcc.n	8005fda <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6919      	ldr	r1, [r3, #16]
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	4413      	add	r3, r2
 8006044:	b2ca      	uxtb	r2, r1
 8006046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	0a19      	lsrs	r1, r3, #8
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4413      	add	r3, r2
 8006056:	b2ca      	uxtb	r2, r1
 8006058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	0c19      	lsrs	r1, r3, #16
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	3302      	adds	r3, #2
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4413      	add	r3, r2
 8006068:	b2ca      	uxtb	r2, r1
 800606a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	0e19      	lsrs	r1, r3, #24
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	3303      	adds	r3, #3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4413      	add	r3, r2
 800607a:	b2ca      	uxtb	r2, r1
 800607c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	3304      	adds	r3, #4
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	e02a      	b.n	80060e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	b2ca      	uxtb	r2, r1
 80060a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	0a19      	lsrs	r1, r3, #8
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	4413      	add	r3, r2
 80060b0:	b2ca      	uxtb	r2, r1
 80060b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0c19      	lsrs	r1, r3, #16
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	3302      	adds	r3, #2
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	4413      	add	r3, r2
 80060c0:	b2ca      	uxtb	r2, r1
 80060c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	0e19      	lsrs	r1, r3, #24
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	3303      	adds	r3, #3
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	4413      	add	r3, r2
 80060d0:	b2ca      	uxtb	r2, r1
 80060d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	3304      	adds	r3, #4
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	3301      	adds	r3, #1
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3cf      	bcc.n	800608a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69d9      	ldr	r1, [r3, #28]
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	4413      	add	r3, r2
 80060f4:	b2ca      	uxtb	r2, r1
 80060f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	0a19      	lsrs	r1, r3, #8
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4413      	add	r3, r2
 8006106:	b2ca      	uxtb	r2, r1
 8006108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	0c19      	lsrs	r1, r3, #16
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	3302      	adds	r3, #2
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	4413      	add	r3, r2
 8006118:	b2ca      	uxtb	r2, r1
 800611a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	0e19      	lsrs	r1, r3, #24
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	3303      	adds	r3, #3
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	4413      	add	r3, r2
 800612a:	b2ca      	uxtb	r2, r1
 800612c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	3304      	adds	r3, #4
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	e027      	b.n	800618a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fa f862 	bl	8000210 <strlen>
 800614c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	4413      	add	r3, r2
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fdd2 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	3304      	adds	r3, #4
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	18d0      	adds	r0, r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4619      	mov	r1, r3
 8006178:	f00c fd0f 	bl	8012b9a <memcpy>
      offset += length_stringsi;
 800617c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3301      	adds	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	429a      	cmp	r2, r3
 8006192:	d3d2      	bcc.n	800613a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006196:	4618      	mov	r0, r3
 8006198:	3728      	adds	r7, #40	@ 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800619e:	b580      	push	{r7, lr}
 80061a0:	b08e      	sub	sp, #56	@ 0x38
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80061ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80061b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b8:	3301      	adds	r3, #1
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	3302      	adds	r3, #2
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	4413      	add	r3, r2
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80061da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061dc:	3303      	adds	r3, #3
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	061b      	lsls	r3, r3, #24
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ee:	3304      	adds	r3, #4
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d90a      	bls.n	8006212 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f00c fb9a 	bl	8012940 <realloc>
 800620c:	4602      	mov	r2, r0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a3a      	ldr	r2, [r7, #32]
 8006216:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8006218:	2300      	movs	r3, #0
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
 800621c:	e035      	b.n	800628a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	440a      	add	r2, r1
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	3301      	adds	r3, #1
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	440b      	add	r3, r1
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006246:	3302      	adds	r3, #2
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	440b      	add	r3, r1
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006258:	3303      	adds	r3, #3
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	440b      	add	r3, r1
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800626c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626e:	3304      	adds	r3, #4
 8006270:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	3208      	adds	r2, #8
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	3301      	adds	r3, #1
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006290:	429a      	cmp	r2, r3
 8006292:	d3c4      	bcc.n	800621e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	4413      	add	r3, r2
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	3301      	adds	r3, #1
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80062b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b2:	3302      	adds	r3, #2
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80062c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c4:	3303      	adds	r3, #3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	4413      	add	r3, r2
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	061b      	lsls	r3, r3, #24
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	3304      	adds	r3, #4
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d90a      	bls.n	80062fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f00c fb26 	bl	8012940 <realloc>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8006300:	2300      	movs	r3, #0
 8006302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006304:	e035      	b.n	8006372 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	440a      	add	r2, r1
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	3301      	adds	r3, #1
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	440b      	add	r3, r1
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632e:	3302      	adds	r3, #2
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	440b      	add	r3, r1
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006340:	3303      	adds	r3, #3
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	440b      	add	r3, r1
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8006354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006356:	3304      	adds	r3, #4
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	3214      	adds	r2, #20
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	3301      	adds	r3, #1
 8006370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006378:	429a      	cmp	r2, r3
 800637a:	d3c4      	bcc.n	8006306 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	3301      	adds	r3, #1
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	4413      	add	r3, r2
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639a:	3302      	adds	r3, #2
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	3303      	adds	r3, #3
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	061b      	lsls	r3, r3, #24
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80063bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063be:	3304      	adds	r3, #4
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d90a      	bls.n	80063e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f00c fab2 	bl	8012940 <realloc>
 80063dc:	4602      	mov	r2, r0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80063e8:	2300      	movs	r3, #0
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ec:	e03e      	b.n	800646c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	441a      	add	r2, r3
 80063f4:	f107 030c 	add.w	r3, r7, #12
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fc9f 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006402:	3304      	adds	r3, #4
 8006404:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8006406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
 800640a:	e00b      	b.n	8006424 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	441a      	add	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	3b01      	subs	r3, #1
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	440b      	add	r3, r1
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
 8006424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	429a      	cmp	r2, r3
 800642e:	d3ed      	bcc.n	800640c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8006430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	3b01      	subs	r3, #1
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	4413      	add	r3, r2
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	3b01      	subs	r3, #1
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800644c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	3220      	adds	r2, #32
 8006462:	6812      	ldr	r2, [r2, #0]
 8006464:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	3301      	adds	r3, #1
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006472:	429a      	cmp	r2, r3
 8006474:	d3bb      	bcc.n	80063ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8006476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006478:	4618      	mov	r0, r3
 800647a:	3738      	adds	r7, #56	@ 0x38
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	08015848 	.word	0x08015848

0800649c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	4b03      	ldr	r3, [pc, #12]	@ (80064b4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	08013734 	.word	0x08013734

080064b8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	611a      	str	r2, [r3, #16]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68d8      	ldr	r0, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6891      	ldr	r1, [r2, #8]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
  };
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
  }
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006540:	2200      	movs	r2, #0
 8006542:	805a      	strh	r2, [r3, #2]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800654a:	2200      	movs	r2, #0
 800654c:	809a      	strh	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006554:	2200      	movs	r2, #0
 8006556:	80da      	strh	r2, [r3, #6]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800655e:	461a      	mov	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006580:	689b      	ldr	r3, [r3, #8]
	}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80065a6:	2200      	movs	r2, #0
 80065a8:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80065b0:	6898      	ldr	r0, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80065bc:	4619      	mov	r1, r3
 80065be:	f007 ff79 	bl	800e4b4 <HAL_UART_Receive_DMA>
	}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <_ZN11SerialClass4readEv>:



	inline int read(void)
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80065e6:	b29b      	uxth	r3, r3
				& buf_mask;
 80065e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ec:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	89fa      	ldrh	r2, [r7, #14]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d102      	bne.n	8006602 <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006600:	e01c      	b.n	800663c <_ZN11SerialClass4readEv+0x72>
		}

		int c = (int) rx_buf[rx_tail++];
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006608:	885b      	ldrh	r3, [r3, #2]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	b291      	uxth	r1, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006614:	8051      	strh	r1, [r2, #2]
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800662a:	885b      	ldrh	r3, [r3, #2]
 800662c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006638:	805a      	strh	r2, [r3, #2]
		return c;
 800663a:	68bb      	ldr	r3, [r7, #8]
	}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800665a:	dc35      	bgt.n	80066c8 <_ZN11SerialClass5writeEPKhi+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd32      	ble.n	80066c8 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8006662:	bf00      	nop
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f083 0301 	eor.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f6      	bne.n	8006664 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e00b      	b.n	8006694 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	7819      	ldrb	r1, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	460a      	mov	r2, r1
 800668c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	3301      	adds	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	dbef      	blt.n	800667c <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d010      	beq.n	80066ca <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	b292      	uxth	r2, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f007 fe7b 	bl	800e3bc <HAL_UART_Transmit_DMA>
 80066c6:	e000      	b.n	80066ca <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80066c8:	bf00      	nop
		}
	}
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
	}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066fc:	6898      	ldr	r0, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006704:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006708:	4619      	mov	r1, r3
 800670a:	f007 fed3 	bl	800e4b4 <HAL_UART_Receive_DMA>
    }
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart3);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681c      	ldr	r4, [r3, #0]
 8006724:	4809      	ldr	r0, [pc, #36]	@ (800674c <HAL_UART_TxCpltCallback+0x34>)
 8006726:	f7ff ff24 	bl	8006572 <_ZN11SerialClass10get_handleEv>
 800672a:	4603      	mov	r3, r0
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429c      	cmp	r4, r3
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 800673c:	4803      	ldr	r0, [pc, #12]	@ (800674c <HAL_UART_TxCpltCallback+0x34>)
 800673e:	f7ff ffc7 	bl	80066d0 <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bd90      	pop	{r4, r7, pc}
 800674a:	bf00      	nop
 800674c:	20000e0c 	.word	0x20000e0c

08006750 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8006758:	4803      	ldr	r0, [pc, #12]	@ (8006768 <HAL_UART_RxCpltCallback+0x18>)
 800675a:	f7ff ffc8 	bl	80066ee <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000e0c 	.word	0x20000e0c

0800676c <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
			com(&serial)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <_ZN13STM32HardwareC1Ev+0x1c>)
 8006778:	601a      	str	r2, [r3, #0]
	{

	}
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	20000e0c 	.word	0x20000e0c

0800678c <_ZN13STM32Hardware4initEv>:

	void init()
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fef8 	bl	800658e <_ZN11SerialClass9start_dmaEv>
	}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <_ZN13STM32Hardware4readEv>:

	int read()
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff ff09 	bl	80065ca <_ZN11SerialClass4readEv>
 80067b8:	4603      	mov	r3, r0
	}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ff36 	bl	8006648 <_ZN11SerialClass5writeEPKhi>
	}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80067ec:	f002 ff86 	bl	80096fc <HAL_GetTick>
 80067f0:	4603      	mov	r3, r0
	}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f816 	bl	8005838 <_ZN3ros3MsgC1Ev>
 800680c:	4a08      	ldr	r2, [pc, #32]	@ (8006830 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	601a      	str	r2, [r3, #0]
      label(""),
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a07      	ldr	r2, [pc, #28]	@ (8006834 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8006816:	605a      	str	r2, [r3, #4]
      size(0),
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
      stride(0)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	60da      	str	r2, [r3, #12]
    {
    }
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	08015928 	.word	0x08015928
 8006834:	080136b8 	.word	0x080136b8

08006838 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f7f9 fce0 	bl	8000210 <strlen>
 8006850:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	4413      	add	r3, r2
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fa50 	bl	8007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3304      	adds	r3, #4
 8006864:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	18d0      	adds	r0, r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4619      	mov	r1, r3
 8006874:	f00c f991 	bl	8012b9a <memcpy>
      offset += length_label;
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4413      	add	r3, r2
 800688a:	b2ca      	uxtb	r2, r1
 800688c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0a19      	lsrs	r1, r3, #8
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	4413      	add	r3, r2
 800689c:	b2ca      	uxtb	r2, r1
 800689e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	0c19      	lsrs	r1, r3, #16
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3302      	adds	r3, #2
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4413      	add	r3, r2
 80068ae:	b2ca      	uxtb	r2, r1
 80068b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0e19      	lsrs	r1, r3, #24
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3303      	adds	r3, #3
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	b2ca      	uxtb	r2, r1
 80068c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3304      	adds	r3, #4
 80068c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68d9      	ldr	r1, [r3, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	4413      	add	r3, r2
 80068d4:	b2ca      	uxtb	r2, r1
 80068d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	0a19      	lsrs	r1, r3, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	b2ca      	uxtb	r2, r1
 80068e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	0c19      	lsrs	r1, r3, #16
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3302      	adds	r3, #2
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	4413      	add	r3, r2
 80068f8:	b2ca      	uxtb	r2, r1
 80068fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	0e19      	lsrs	r1, r3, #24
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3303      	adds	r3, #3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4413      	add	r3, r2
 800690a:	b2ca      	uxtb	r2, r1
 800690c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	60fb      	str	r3, [r7, #12]
      return offset;
 8006914:	68fb      	ldr	r3, [r7, #12]
    }
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800691e:	b580      	push	{r7, lr}
 8006920:	b086      	sub	sp, #24
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	441a      	add	r2, r3
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fa00 	bl	8007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3304      	adds	r3, #4
 8006942:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e00b      	b.n	8006962 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	441a      	add	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3b01      	subs	r3, #1
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	440b      	add	r3, r1
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	3301      	adds	r3, #1
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	429a      	cmp	r2, r3
 800696c:	d3ed      	bcc.n	800694a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	3b01      	subs	r3, #1
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4413      	add	r3, r2
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	3b01      	subs	r3, #1
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	441a      	add	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]
      offset += length_label;
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	4413      	add	r3, r2
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3301      	adds	r3, #1
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	440b      	add	r3, r1
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3302      	adds	r3, #2
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	440b      	add	r3, r1
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	3303      	adds	r3, #3
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	440b      	add	r3, r1
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3304      	adds	r3, #4
 80069e6:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4413      	add	r3, r2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	3301      	adds	r3, #1
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	440b      	add	r3, r1
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	3302      	adds	r3, #2
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	440b      	add	r3, r1
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	440b      	add	r3, r1
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	613b      	str	r3, [r7, #16]
     return offset;
 8006a3e:	693b      	ldr	r3, [r7, #16]
    }
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	4b03      	ldr	r3, [pc, #12]	@ (8006a60 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	08013758 	.word	0x08013758

08006a64 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	4b03      	ldr	r3, [pc, #12]	@ (8006a7c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	08013778 	.word	0x08013778

08006a80 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fed4 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8006a90:	4a0a      	ldr	r2, [pc, #40]	@ (8006abc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff feab 	bl	80067fc <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	61da      	str	r2, [r3, #28]
    {
    }
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	08015910 	.word	0x08015910

08006ac0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6859      	ldr	r1, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	b2ca      	uxtb	r2, r1
 8006ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	0a19      	lsrs	r1, r3, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4413      	add	r3, r2
 8006aea:	b2ca      	uxtb	r2, r1
 8006aec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	0c19      	lsrs	r1, r3, #16
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3302      	adds	r3, #2
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4413      	add	r3, r2
 8006afc:	b2ca      	uxtb	r2, r1
 8006afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	0e19      	lsrs	r1, r3, #24
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3303      	adds	r3, #3
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	b2ca      	uxtb	r2, r1
 8006b10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3304      	adds	r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	e017      	b.n	8006b4e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	18d0      	adds	r0, r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	4413      	add	r3, r2
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4798      	blx	r3
 8006b40:	4602      	mov	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3e2      	bcc.n	8006b1e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	b2ca      	uxtb	r2, r1
 8006b64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	0a19      	lsrs	r1, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	b2ca      	uxtb	r2, r1
 8006b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	0c19      	lsrs	r1, r3, #16
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3302      	adds	r3, #2
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	b2ca      	uxtb	r2, r1
 8006b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	0e19      	lsrs	r1, r3, #24
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3303      	adds	r3, #3
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	4413      	add	r3, r2
 8006b98:	b2ca      	uxtb	r2, r1
 8006b9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	60fb      	str	r3, [r7, #12]
      return offset;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
    }
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	4413      	add	r3, r2
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4413      	add	r3, r2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	3303      	adds	r3, #3
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d90a      	bls.n	8006c20 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f00b fe93 	bl	8012940 <realloc>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e01a      	b.n	8006c62 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f103 0008 	add.w	r0, r3, #8
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	4413      	add	r3, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7ff fe70 	bl	800691e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	4413      	add	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	18d0      	adds	r0, r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3308      	adds	r3, #8
 8006c54:	2210      	movs	r2, #16
 8006c56:	4619      	mov	r1, r3
 8006c58:	f00b ff9f 	bl	8012b9a <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3df      	bcc.n	8006c2c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	3301      	adds	r3, #1
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	440b      	add	r3, r1
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3302      	adds	r3, #2
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	440b      	add	r3, r1
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	3303      	adds	r3, #3
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	440b      	add	r3, r1
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	061b      	lsls	r3, r3, #24
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	617b      	str	r3, [r7, #20]
     return offset;
 8006cc2:	697b      	ldr	r3, [r7, #20]
    }
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	4b03      	ldr	r3, [pc, #12]	@ (8006ce4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	0801379c 	.word	0x0801379c

08006ce8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	4b03      	ldr	r3, [pc, #12]	@ (8006d00 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	080137b8 	.word	0x080137b8

08006d04 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
      data(0)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fd92 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8006d14:	4a05      	ldr	r2, [pc, #20]	@ (8006d2c <_ZN8std_msgs4Int8C1Ev+0x28>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	711a      	strb	r2, [r3, #4]
    {
    }
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	080158f8 	.word	0x080158f8

08006d30 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006d44:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	7a3a      	ldrb	r2, [r7, #8]
 8006d4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
      return offset;
 8006d56:	68fb      	ldr	r3, [r7, #12]
    }
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006d76:	7a3a      	ldrb	r2, [r7, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	440b      	add	r3, r1
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8006d86:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
     return offset;
 8006d94:	68fb      	ldr	r3, [r7, #12]
    }
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <_ZN8std_msgs4Int87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8"; };
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	4b03      	ldr	r3, [pc, #12]	@ (8006dbc <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	080137dc 	.word	0x080137dc

08006dc0 <_ZN8std_msgs4Int86getMD5Ev>:
    virtual const char * getMD5() override { return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	4b03      	ldr	r3, [pc, #12]	@ (8006dd8 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	080137ec 	.word	0x080137ec

08006ddc <_ZN8std_msgs14Int8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int8_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int8MultiArray():
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fd26 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8006dec:	4a0b      	ldr	r2, [pc, #44]	@ (8006e1c <_ZN8std_msgs14Int8MultiArrayC1Ev+0x40>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
      layout(),
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fe42 	bl	8006a80 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	080158e0 	.word	0x080158e0

08006e20 <_ZNK8std_msgs14Int8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	1d18      	adds	r0, r3, #4
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	4413      	add	r3, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	f7ff fe41 	bl	8006ac0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	4413      	add	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	b2ca      	uxtb	r2, r1
 8006e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	0a19      	lsrs	r1, r3, #8
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4413      	add	r3, r2
 8006e62:	b2ca      	uxtb	r2, r1
 8006e64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	0c19      	lsrs	r1, r3, #16
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3302      	adds	r3, #2
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	4413      	add	r3, r2
 8006e74:	b2ca      	uxtb	r2, r1
 8006e76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	0e19      	lsrs	r1, r3, #24
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3303      	adds	r3, #3
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4413      	add	r3, r2
 8006e86:	b2ca      	uxtb	r2, r1
 8006e88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	e011      	b.n	8006eba <_ZNK8std_msgs14Int8MultiArray9serializeEPh+0x9a>
      union {
        int8_t real;
        uint8_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f993 3000 	ldrsb.w	r3, [r3]
 8006ea2:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	7b3a      	ldrb	r2, [r7, #12]
 8006eac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d3e8      	bcc.n	8006e96 <_ZNK8std_msgs14Int8MultiArray9serializeEPh+0x76>
      }
      return offset;
 8006ec4:	697b      	ldr	r3, [r7, #20]
    }
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <_ZN8std_msgs14Int8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1d18      	adds	r0, r3, #4
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f7ff fe60 	bl	8006bac <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8006eec:	4602      	mov	r2, r0
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	3301      	adds	r3, #1
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4413      	add	r3, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3302      	adds	r3, #2
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	3303      	adds	r3, #3
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4413      	add	r3, r2
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	061b      	lsls	r3, r3, #24
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	3304      	adds	r3, #4
 8006f38:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d908      	bls.n	8006f56 <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0x88>
        this->data = (int8_t*)realloc(this->data, data_lengthT * sizeof(int8_t));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00b fcf8 	bl	8012940 <realloc>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	e01c      	b.n	8006f9c <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0xce>
      union {
        int8_t real;
        uint8_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	723b      	strb	r3, [r7, #8]
      u_st_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006f66:	7a3a      	ldrb	r2, [r7, #8]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	440b      	add	r3, r1
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	723b      	strb	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8006f76:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	3301      	adds	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	3228      	adds	r2, #40	@ 0x28
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3dd      	bcc.n	8006f62 <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0x94>
      }
     return offset;
 8006fa6:	697b      	ldr	r3, [r7, #20]
    }
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <_ZN8std_msgs14Int8MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8MultiArray"; };
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	4b03      	ldr	r3, [pc, #12]	@ (8006fc8 <_ZN8std_msgs14Int8MultiArray7getTypeEv+0x18>)
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	08013810 	.word	0x08013810

08006fcc <_ZN8std_msgs14Int8MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d7c1af35a1b4781bbe79e03dd94b7c13"; };
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <_ZN8std_msgs14Int8MultiArray6getMD5Ev+0x18>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	08013828 	.word	0x08013828

08006fe8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fc20 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8006ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8007034 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
      x(0),
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	080158c8 	.word	0x080158c8

08007038 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007038:	b480      	push	{r7}
 800703a:	b08b      	sub	sp, #44	@ 0x2c
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800704c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8007050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007056:	6838      	ldr	r0, [r7, #0]
 8007058:	4401      	add	r1, r0
 800705a:	b2d3      	uxtb	r3, r2
 800705c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800705e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	0a02      	lsrs	r2, r0, #8
 800706c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007070:	0a0b      	lsrs	r3, r1, #8
 8007072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007074:	3101      	adds	r1, #1
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	4401      	add	r1, r0
 800707a:	b2d3      	uxtb	r3, r2
 800707c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800707e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	0c02      	lsrs	r2, r0, #16
 800708c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007090:	0c0b      	lsrs	r3, r1, #16
 8007092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007094:	3102      	adds	r1, #2
 8007096:	6838      	ldr	r0, [r7, #0]
 8007098:	4401      	add	r1, r0
 800709a:	b2d3      	uxtb	r3, r2
 800709c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800709e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	0e02      	lsrs	r2, r0, #24
 80070ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80070b0:	0e0b      	lsrs	r3, r1, #24
 80070b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070b4:	3103      	adds	r1, #3
 80070b6:	6838      	ldr	r0, [r7, #0]
 80070b8:	4401      	add	r1, r0
 80070ba:	b2d3      	uxtb	r3, r2
 80070bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80070be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	000a      	movs	r2, r1
 80070cc:	2300      	movs	r3, #0
 80070ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070d0:	3104      	adds	r1, #4
 80070d2:	6838      	ldr	r0, [r7, #0]
 80070d4:	4401      	add	r1, r0
 80070d6:	b2d3      	uxtb	r3, r2
 80070d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80070da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	0a0a      	lsrs	r2, r1, #8
 80070e8:	2300      	movs	r3, #0
 80070ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ec:	3105      	adds	r1, #5
 80070ee:	6838      	ldr	r0, [r7, #0]
 80070f0:	4401      	add	r1, r0
 80070f2:	b2d3      	uxtb	r3, r2
 80070f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80070f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	0c0a      	lsrs	r2, r1, #16
 8007104:	2300      	movs	r3, #0
 8007106:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007108:	3106      	adds	r1, #6
 800710a:	6838      	ldr	r0, [r7, #0]
 800710c:	4401      	add	r1, r0
 800710e:	b2d3      	uxtb	r3, r2
 8007110:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8007112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	0e0a      	lsrs	r2, r1, #24
 8007120:	2300      	movs	r3, #0
 8007122:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007124:	3107      	adds	r1, #7
 8007126:	6838      	ldr	r0, [r7, #0]
 8007128:	4401      	add	r1, r0
 800712a:	b2d3      	uxtb	r3, r2
 800712c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	3308      	adds	r3, #8
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800713a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800713e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007142:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007144:	6838      	ldr	r0, [r7, #0]
 8007146:	4401      	add	r1, r0
 8007148:	b2d3      	uxtb	r3, r2
 800714a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800714c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	0a02      	lsrs	r2, r0, #8
 800715a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800715e:	0a0b      	lsrs	r3, r1, #8
 8007160:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007162:	3101      	adds	r1, #1
 8007164:	6838      	ldr	r0, [r7, #0]
 8007166:	4401      	add	r1, r0
 8007168:	b2d3      	uxtb	r3, r2
 800716a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800716c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	0c02      	lsrs	r2, r0, #16
 800717a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800717e:	0c0b      	lsrs	r3, r1, #16
 8007180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007182:	3102      	adds	r1, #2
 8007184:	6838      	ldr	r0, [r7, #0]
 8007186:	4401      	add	r1, r0
 8007188:	b2d3      	uxtb	r3, r2
 800718a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800718c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	0e02      	lsrs	r2, r0, #24
 800719a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800719e:	0e0b      	lsrs	r3, r1, #24
 80071a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071a2:	3103      	adds	r1, #3
 80071a4:	6838      	ldr	r0, [r7, #0]
 80071a6:	4401      	add	r1, r0
 80071a8:	b2d3      	uxtb	r3, r2
 80071aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80071ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	000a      	movs	r2, r1
 80071ba:	2300      	movs	r3, #0
 80071bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071be:	3104      	adds	r1, #4
 80071c0:	6838      	ldr	r0, [r7, #0]
 80071c2:	4401      	add	r1, r0
 80071c4:	b2d3      	uxtb	r3, r2
 80071c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80071c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	0a0a      	lsrs	r2, r1, #8
 80071d6:	2300      	movs	r3, #0
 80071d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071da:	3105      	adds	r1, #5
 80071dc:	6838      	ldr	r0, [r7, #0]
 80071de:	4401      	add	r1, r0
 80071e0:	b2d3      	uxtb	r3, r2
 80071e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80071e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	0c0a      	lsrs	r2, r1, #16
 80071f2:	2300      	movs	r3, #0
 80071f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071f6:	3106      	adds	r1, #6
 80071f8:	6838      	ldr	r0, [r7, #0]
 80071fa:	4401      	add	r1, r0
 80071fc:	b2d3      	uxtb	r3, r2
 80071fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8007200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	0e0a      	lsrs	r2, r1, #24
 800720e:	2300      	movs	r3, #0
 8007210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007212:	3107      	adds	r1, #7
 8007214:	6838      	ldr	r0, [r7, #0]
 8007216:	4401      	add	r1, r0
 8007218:	b2d3      	uxtb	r3, r2
 800721a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	3308      	adds	r3, #8
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007228:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800722c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007232:	6838      	ldr	r0, [r7, #0]
 8007234:	4401      	add	r1, r0
 8007236:	b2d3      	uxtb	r3, r2
 8007238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800723a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	0a02      	lsrs	r2, r0, #8
 8007248:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800724c:	0a0b      	lsrs	r3, r1, #8
 800724e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007250:	3101      	adds	r1, #1
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	4401      	add	r1, r0
 8007256:	b2d3      	uxtb	r3, r2
 8007258:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800725a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	0c02      	lsrs	r2, r0, #16
 8007268:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800726c:	0c0b      	lsrs	r3, r1, #16
 800726e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007270:	3102      	adds	r1, #2
 8007272:	6838      	ldr	r0, [r7, #0]
 8007274:	4401      	add	r1, r0
 8007276:	b2d3      	uxtb	r3, r2
 8007278:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800727a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	0e02      	lsrs	r2, r0, #24
 8007288:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800728c:	0e0b      	lsrs	r3, r1, #24
 800728e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007290:	3103      	adds	r1, #3
 8007292:	6838      	ldr	r0, [r7, #0]
 8007294:	4401      	add	r1, r0
 8007296:	b2d3      	uxtb	r3, r2
 8007298:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800729a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	000a      	movs	r2, r1
 80072a8:	2300      	movs	r3, #0
 80072aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ac:	3104      	adds	r1, #4
 80072ae:	6838      	ldr	r0, [r7, #0]
 80072b0:	4401      	add	r1, r0
 80072b2:	b2d3      	uxtb	r3, r2
 80072b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80072b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	0a0a      	lsrs	r2, r1, #8
 80072c4:	2300      	movs	r3, #0
 80072c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072c8:	3105      	adds	r1, #5
 80072ca:	6838      	ldr	r0, [r7, #0]
 80072cc:	4401      	add	r1, r0
 80072ce:	b2d3      	uxtb	r3, r2
 80072d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80072d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	0c0a      	lsrs	r2, r1, #16
 80072e0:	2300      	movs	r3, #0
 80072e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072e4:	3106      	adds	r1, #6
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	4401      	add	r1, r0
 80072ea:	b2d3      	uxtb	r3, r2
 80072ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80072ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	0e0a      	lsrs	r2, r1, #24
 80072fc:	2300      	movs	r3, #0
 80072fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007300:	3107      	adds	r1, #7
 8007302:	6838      	ldr	r0, [r7, #0]
 8007304:	4401      	add	r1, r0
 8007306:	b2d3      	uxtb	r3, r2
 8007308:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	3308      	adds	r3, #8
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007312:	4618      	mov	r0, r3
 8007314:	372c      	adds	r7, #44	@ 0x2c
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800731e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007322:	b0eb      	sub	sp, #428	@ 0x1ac
 8007324:	af00      	add	r7, sp, #0
 8007326:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 800732a:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007340:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007344:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8007348:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800734c:	4413      	add	r3, r2
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2200      	movs	r2, #0
 8007354:	461c      	mov	r4, r3
 8007356:	4615      	mov	r5, r2
 8007358:	ea40 0804 	orr.w	r8, r0, r4
 800735c:	ea41 0905 	orr.w	r9, r1, r5
 8007360:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007364:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007368:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007372:	4413      	add	r3, r2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2200      	movs	r2, #0
 800737a:	469a      	mov	sl, r3
 800737c:	4693      	mov	fp, r2
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800738a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800738e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8007392:	ea40 0402 	orr.w	r4, r0, r2
 8007396:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 800739a:	430b      	orrs	r3, r1
 800739c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80073a0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80073a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80073a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80073ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80073b0:	1c9a      	adds	r2, r3, #2
 80073b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80073b6:	4413      	add	r3, r2
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80073c2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80073d2:	464c      	mov	r4, r9
 80073d4:	0423      	lsls	r3, r4, #16
 80073d6:	4644      	mov	r4, r8
 80073d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80073dc:	4644      	mov	r4, r8
 80073de:	0422      	lsls	r2, r4, #16
 80073e0:	ea40 0402 	orr.w	r4, r0, r2
 80073e4:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80073e8:	430b      	orrs	r3, r1
 80073ea:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80073ee:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80073f2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80073f6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80073fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80073fe:	1cda      	adds	r2, r3, #3
 8007400:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007404:	4413      	add	r3, r2
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8007410:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8007414:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8007418:	4623      	mov	r3, r4
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8007420:	4623      	mov	r3, r4
 8007422:	061b      	lsls	r3, r3, #24
 8007424:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8007428:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800742c:	4623      	mov	r3, r4
 800742e:	4303      	orrs	r3, r0
 8007430:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8007434:	462b      	mov	r3, r5
 8007436:	430b      	orrs	r3, r1
 8007438:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800743c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8007440:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007444:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007448:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007452:	4413      	add	r3, r2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2200      	movs	r2, #0
 800745a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800745e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 800746e:	0023      	movs	r3, r4
 8007470:	2200      	movs	r2, #0
 8007472:	ea40 0402 	orr.w	r4, r0, r2
 8007476:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 800747a:	430b      	orrs	r3, r1
 800747c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007480:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8007484:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007488:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800748c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007490:	1d5a      	adds	r2, r3, #5
 8007492:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007496:	4413      	add	r3, r2
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80074a2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80074b2:	0223      	lsls	r3, r4, #8
 80074b4:	2200      	movs	r2, #0
 80074b6:	ea40 0402 	orr.w	r4, r0, r2
 80074ba:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80074be:	430b      	orrs	r3, r1
 80074c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80074c4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80074c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80074cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80074d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80074d4:	1d9a      	adds	r2, r3, #6
 80074d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80074da:	4413      	add	r3, r2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80074e6:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80074f6:	0423      	lsls	r3, r4, #16
 80074f8:	2200      	movs	r2, #0
 80074fa:	ea40 0402 	orr.w	r4, r0, r2
 80074fe:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8007502:	430b      	orrs	r3, r1
 8007504:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007508:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 800750c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007510:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007514:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007518:	1dda      	adds	r2, r3, #7
 800751a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800752a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 800753a:	0623      	lsls	r3, r4, #24
 800753c:	2200      	movs	r2, #0
 800753e:	ea40 0402 	orr.w	r4, r0, r2
 8007542:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8007546:	430b      	orrs	r3, r1
 8007548:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800754c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8007550:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8007554:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007558:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800755c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8007560:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007564:	3308      	adds	r3, #8
 8007566:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007576:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800757a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800757e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007582:	4413      	add	r3, r2
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2200      	movs	r2, #0
 800758a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800758e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8007592:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8007596:	4623      	mov	r3, r4
 8007598:	4303      	orrs	r3, r0
 800759a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800759e:	462b      	mov	r3, r5
 80075a0:	430b      	orrs	r3, r1
 80075a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075a6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80075aa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80075ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80075b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80075bc:	4413      	add	r3, r2
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075c8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80075d8:	464c      	mov	r4, r9
 80075da:	0223      	lsls	r3, r4, #8
 80075dc:	4644      	mov	r4, r8
 80075de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075e2:	4644      	mov	r4, r8
 80075e4:	0222      	lsls	r2, r4, #8
 80075e6:	ea40 0402 	orr.w	r4, r0, r2
 80075ea:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80075ee:	430b      	orrs	r3, r1
 80075f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075f4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80075f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80075fc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007600:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800760a:	4413      	add	r3, r2
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2200      	movs	r2, #0
 8007612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8007626:	464c      	mov	r4, r9
 8007628:	0423      	lsls	r3, r4, #16
 800762a:	4644      	mov	r4, r8
 800762c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8007630:	4644      	mov	r4, r8
 8007632:	0422      	lsls	r2, r4, #16
 8007634:	ea40 0402 	orr.w	r4, r0, r2
 8007638:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 800763c:	430b      	orrs	r3, r1
 800763e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007642:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8007646:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800764a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800764e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007652:	1cda      	adds	r2, r3, #3
 8007654:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007658:	4413      	add	r3, r2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007664:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007668:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800766c:	4623      	mov	r3, r4
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007674:	4623      	mov	r3, r4
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800767c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8007680:	4623      	mov	r3, r4
 8007682:	4303      	orrs	r3, r0
 8007684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007688:	462b      	mov	r3, r5
 800768a:	430b      	orrs	r3, r1
 800768c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007690:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8007694:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007698:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800769c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076b2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80076c2:	0023      	movs	r3, r4
 80076c4:	2200      	movs	r2, #0
 80076c6:	ea40 0402 	orr.w	r4, r0, r2
 80076ca:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80076ce:	430b      	orrs	r3, r1
 80076d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076d4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80076d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80076dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80076e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80076e4:	1d5a      	adds	r2, r3, #5
 80076e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80076ea:	4413      	add	r3, r2
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076f6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8007706:	0223      	lsls	r3, r4, #8
 8007708:	2200      	movs	r2, #0
 800770a:	ea40 0402 	orr.w	r4, r0, r2
 800770e:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8007712:	430b      	orrs	r3, r1
 8007714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007718:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 800771c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007720:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007724:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007728:	1d9a      	adds	r2, r3, #6
 800772a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800772e:	4413      	add	r3, r2
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800773a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800774a:	0423      	lsls	r3, r4, #16
 800774c:	2200      	movs	r2, #0
 800774e:	ea40 0402 	orr.w	r4, r0, r2
 8007752:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8007756:	430b      	orrs	r3, r1
 8007758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800775c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8007760:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007764:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007768:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800776c:	1dda      	adds	r2, r3, #7
 800776e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007772:	4413      	add	r3, r2
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2200      	movs	r2, #0
 800777a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800777e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800778e:	0623      	lsls	r3, r4, #24
 8007790:	2200      	movs	r2, #0
 8007792:	ea40 0402 	orr.w	r4, r0, r2
 8007796:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800779a:	430b      	orrs	r3, r1
 800779c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077a0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80077a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 80077a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80077ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80077b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80077b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80077b8:	3308      	adds	r3, #8
 80077ba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80077ca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80077ce:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80077d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80077d6:	4413      	add	r3, r2
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077e2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80077e6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80077ea:	4623      	mov	r3, r4
 80077ec:	4303      	orrs	r3, r0
 80077ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077f0:	462b      	mov	r3, r5
 80077f2:	430b      	orrs	r3, r1
 80077f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077f6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80077fa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80077fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007802:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800780c:	4413      	add	r3, r2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2200      	movs	r2, #0
 8007814:	673b      	str	r3, [r7, #112]	@ 0x70
 8007816:	677a      	str	r2, [r7, #116]	@ 0x74
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007824:	464c      	mov	r4, r9
 8007826:	0223      	lsls	r3, r4, #8
 8007828:	4644      	mov	r4, r8
 800782a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800782e:	4644      	mov	r4, r8
 8007830:	0222      	lsls	r2, r4, #8
 8007832:	ea40 0402 	orr.w	r4, r0, r2
 8007836:	66bc      	str	r4, [r7, #104]	@ 0x68
 8007838:	430b      	orrs	r3, r1
 800783a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800783c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8007840:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007844:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007848:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800784c:	1c9a      	adds	r2, r3, #2
 800784e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2200      	movs	r2, #0
 800785a:	663b      	str	r3, [r7, #96]	@ 0x60
 800785c:	667a      	str	r2, [r7, #100]	@ 0x64
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800786a:	464c      	mov	r4, r9
 800786c:	0423      	lsls	r3, r4, #16
 800786e:	4644      	mov	r4, r8
 8007870:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8007874:	4644      	mov	r4, r8
 8007876:	0422      	lsls	r2, r4, #16
 8007878:	ea40 0402 	orr.w	r4, r0, r2
 800787c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800787e:	430b      	orrs	r3, r1
 8007880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007882:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8007886:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800788a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800788e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007892:	1cda      	adds	r2, r3, #3
 8007894:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007898:	4413      	add	r3, r2
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2200      	movs	r2, #0
 80078a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80078a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80078a4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80078a8:	4623      	mov	r3, r4
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ae:	4623      	mov	r3, r4
 80078b0:	061b      	lsls	r3, r3, #24
 80078b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80078b8:	4623      	mov	r3, r4
 80078ba:	4303      	orrs	r3, r0
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80078be:	462b      	mov	r3, r5
 80078c0:	430b      	orrs	r3, r1
 80078c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80078c8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80078cc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80078d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80078da:	4413      	add	r3, r2
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2200      	movs	r2, #0
 80078e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80078f0:	0023      	movs	r3, r4
 80078f2:	2200      	movs	r2, #0
 80078f4:	ea40 0402 	orr.w	r4, r0, r2
 80078f8:	633c      	str	r4, [r7, #48]	@ 0x30
 80078fa:	430b      	orrs	r3, r1
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8007902:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007906:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800790a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800790e:	1d5a      	adds	r2, r3, #5
 8007910:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007914:	4413      	add	r3, r2
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2200      	movs	r2, #0
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800792a:	0223      	lsls	r3, r4, #8
 800792c:	2200      	movs	r2, #0
 800792e:	ea40 0402 	orr.w	r4, r0, r2
 8007932:	623c      	str	r4, [r7, #32]
 8007934:	430b      	orrs	r3, r1
 8007936:	627b      	str	r3, [r7, #36]	@ 0x24
 8007938:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800793c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007940:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007944:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007948:	3306      	adds	r3, #6
 800794a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800794e:	4413      	add	r3, r2
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2200      	movs	r2, #0
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	61fa      	str	r2, [r7, #28]
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	69bc      	ldr	r4, [r7, #24]
 8007964:	0423      	lsls	r3, r4, #16
 8007966:	2200      	movs	r2, #0
 8007968:	ea40 0402 	orr.w	r4, r0, r2
 800796c:	613c      	str	r4, [r7, #16]
 800796e:	430b      	orrs	r3, r1
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007976:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800797a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800797e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007982:	3307      	adds	r3, #7
 8007984:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007988:	4413      	add	r3, r2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2200      	movs	r2, #0
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	60fa      	str	r2, [r7, #12]
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	68bc      	ldr	r4, [r7, #8]
 800799e:	0623      	lsls	r3, r4, #24
 80079a0:	2200      	movs	r2, #0
 80079a2:	ea40 0402 	orr.w	r4, r0, r2
 80079a6:	603c      	str	r4, [r7, #0]
 80079a8:	430b      	orrs	r3, r1
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80079b0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 80079b4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80079b8:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 80079bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80079c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80079c4:	3308      	adds	r3, #8
 80079c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 80079ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 80079ce:	4618      	mov	r0, r3
 80079d0:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 80079d4:	46bd      	mov	sp, r7
 80079d6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80079da:	4770      	bx	lr

080079dc <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	4b03      	ldr	r3, [pc, #12]	@ (80079f4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	0801384c 	.word	0x0801384c

080079f8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	4b03      	ldr	r3, [pc, #12]	@ (8007a10 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	08013864 	.word	0x08013864

08007a14 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd ff0a 	bl	8005838 <_ZN3ros3MsgC1Ev>
 8007a24:	4a08      	ldr	r2, [pc, #32]	@ (8007a48 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
      linear(),
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fada 	bl	8006fe8 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3328      	adds	r3, #40	@ 0x28
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fad5 	bl	8006fe8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	080158b0 	.word	0x080158b0

08007a4c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f103 0008 	add.w	r0, r3, #8
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7ff fae6 	bl	8007038 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	4413      	add	r3, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7ff fad9 	bl	8007038 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
    }
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f103 0008 	add.w	r0, r3, #8
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	f7ff fc33 	bl	800731e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	4413      	add	r3, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	f7ff fc26 	bl	800731e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
     return offset;
 8007ada:	68fb      	ldr	r3, [r7, #12]
    }
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	08013888 	.word	0x08013888

08007b00 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	4b03      	ldr	r3, [pc, #12]	@ (8007b18 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	0801389c 	.word	0x0801389c

08007b1c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	4a04      	ldr	r2, [pc, #16]	@ (8007b38 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	08015958 	.word	0x08015958

08007b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ffe8 	bl	8007b1c <_ZN3ros15NodeHandleBase_C1Ev>
 8007b4c:	4a33      	ldr	r2, [pc, #204]	@ (8007c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fe08 	bl	800676c <_ZN13STM32HardwareC1Ev>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	609a      	str	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	611a      	str	r2, [r3, #16]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	615a      	str	r2, [r3, #20]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3318      	adds	r3, #24
 8007b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f00a ffd6 	bl	8012b30 <memset>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8007b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f00a ffcd 	bl	8012b30 <memset>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8007b9c:	2264      	movs	r2, #100	@ 0x64
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f00a ffc5 	bl	8012b30 <memset>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8007bac:	2264      	movs	r2, #100	@ 0x64
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f00a ffbd 	bl	8012b30 <memset>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe f987 	bl	8005f20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	0801589c 	.word	0x0801589c

08007c20 <_Z9call_backRKN13geometry_msgs5TwistE>:
//void coordinate(const std_msgs::Int16& msg){
//	reset_encoder = msg.data;
//	reset_flag =1;
//}
//extern char color_buffer[]='';
void call_back(const geometry_msgs::Twist& cmd_vel){
 8007c20:	b5b0      	push	{r4, r5, r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
	right_x = cmd_vel.angular.z;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	f7f8 ff9b 	bl	8000b6c <__aeabi_d2iz>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4a0a      	ldr	r2, [pc, #40]	@ (8007c64 <_Z9call_backRKN13geometry_msgs5TwistE+0x44>)
 8007c3a:	6013      	str	r3, [r2, #0]
	left_x = cmd_vel.linear.x;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c42:	4909      	ldr	r1, [pc, #36]	@ (8007c68 <_Z9call_backRKN13geometry_msgs5TwistE+0x48>)
 8007c44:	e9c1 2300 	strd	r2, r3, [r1]
	left_y = -cmd_vel.linear.y;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007c4e:	4614      	mov	r4, r2
 8007c50:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007c54:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <_Z9call_backRKN13geometry_msgs5TwistE+0x4c>)
 8007c56:	e9c3 4500 	strd	r4, r5, [r3]
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bdb0      	pop	{r4, r5, r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20002e18 	.word	0x20002e18
 8007c68:	20002e20 	.word	0x20002e20
 8007c6c:	20002e28 	.word	0x20002e28

08007c70 <_Z4seedRKN8std_msgs4Int8E>:
void seed(const std_msgs::Int8& seed){
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	 comma = seed.data;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4b03      	ldr	r3, [pc, #12]	@ (8007c90 <_Z4seedRKN8std_msgs4Int8E+0x20>)
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	20002e30 	.word	0x20002e30

08007c94 <setup>:
ros::Publisher sensor("sensor", &Sensor_data);
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
ros::Subscriber<std_msgs::Int8>seedl("seed", &seed);
//ros::Subscriber<std_msgs::Int16> reset_en("coordinate", &coordinate);
//ros::Publisher color_sensor("color", &color_data);
void setup(void){
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
	nh.initNode();
 8007c98:	4808      	ldr	r0, [pc, #32]	@ (8007cbc <setup+0x28>)
 8007c9a:	f000 f8cf 	bl	8007e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(sensor);
 8007c9e:	4908      	ldr	r1, [pc, #32]	@ (8007cc0 <setup+0x2c>)
 8007ca0:	4806      	ldr	r0, [pc, #24]	@ (8007cbc <setup+0x28>)
 8007ca2:	f000 f8e8 	bl	8007e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(joy);
 8007ca6:	4907      	ldr	r1, [pc, #28]	@ (8007cc4 <setup+0x30>)
 8007ca8:	4804      	ldr	r0, [pc, #16]	@ (8007cbc <setup+0x28>)
 8007caa:	f000 f912 	bl	8007ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(seedl);
 8007cae:	4906      	ldr	r1, [pc, #24]	@ (8007cc8 <setup+0x34>)
 8007cb0:	4802      	ldr	r0, [pc, #8]	@ (8007cbc <setup+0x28>)
 8007cb2:	f000 f90e 	bl	8007ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//	nh.subscribe(reset_en);
//	nh.advertise(color_sensor);
}
 8007cb6:	bf00      	nop
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20002e34 	.word	0x20002e34
 8007cc0:	20003394 	.word	0x20003394
 8007cc4:	200033a8 	.word	0x200033a8
 8007cc8:	20003408 	.word	0x20003408

08007ccc <loop>:

void loop(void){
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
//		color_data.data= color_buffer;
		Sensor_data.data_length =2;
 8007cd0:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <loop+0x24>)
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	625a      	str	r2, [r3, #36]	@ 0x24
		Sensor_data.data= sensor_buff;
 8007cd6:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <loop+0x24>)
 8007cd8:	4a06      	ldr	r2, [pc, #24]	@ (8007cf4 <loop+0x28>)
 8007cda:	62da      	str	r2, [r3, #44]	@ 0x2c
		sensor.publish(&Sensor_data);
 8007cdc:	4904      	ldr	r1, [pc, #16]	@ (8007cf0 <loop+0x24>)
 8007cde:	4806      	ldr	r0, [pc, #24]	@ (8007cf8 <loop+0x2c>)
 8007ce0:	f7fe fc01 	bl	80064e6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//		color_sensor.publish(&color_data);
		nh.spinOnce();
 8007ce4:	4805      	ldr	r0, [pc, #20]	@ (8007cfc <loop+0x30>)
 8007ce6:	f000 f921 	bl	8007f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8007cea:	bf00      	nop
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20003364 	.word	0x20003364
 8007cf4:	20000c5c 	.word	0x20000c5c
 8007cf8:	20003394 	.word	0x20003394
 8007cfc:	20002e34 	.word	0x20002e34

08007d00 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e00c      	b.n	8007d2a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	fa22 f103 	lsr.w	r1, r2, r3
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	b2ca      	uxtb	r2, r1
 8007d22:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d9ef      	bls.n	8007d10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e010      	b.n	8007d76 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	4611      	mov	r1, r2
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	00d2      	lsls	r2, r2, #3
 8007d66:	fa01 f202 	lsl.w	r2, r1, r2
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d9eb      	bls.n	8007d54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	4a04      	ldr	r2, [pc, #16]	@ (8007da8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	08015940 	.word	0x08015940

08007dac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff ffe5 	bl	8007d8c <_ZN3ros11Subscriber_C1Ev>
 8007dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8007df0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3310      	adds	r3, #16
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fe21 	bl	8007a14 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	609a      	str	r2, [r3, #8]
  };
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	08015884 	.word	0x08015884

08007df4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ffc1 	bl	8007d8c <_ZN3ros11Subscriber_C1Ev>
 8007e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e38 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	330c      	adds	r3, #12
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe ff75 	bl	8006d04 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	609a      	str	r2, [r3, #8]
  };
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	0801586c 	.word	0x0801586c

08007e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fc9f 	bl	800678c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e01b      	b.n	8007ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d110      	bne.n	8007eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	60da      	str	r2, [r3, #12]
        return true;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e006      	b.n	8007ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b18      	cmp	r3, #24
 8007ec2:	dde0      	ble.n	8007e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8007ec4:	2300      	movs	r3, #0
  }
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e01a      	b.n	8007f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10e      	bne.n	8007f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	605a      	str	r2, [r3, #4]
        return true;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e006      	b.n	8007f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3301      	adds	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b18      	cmp	r3, #24
 8007f1c:	dde1      	ble.n	8007ee2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8007f1e:	2300      	movs	r3, #0
  }
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fc53 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 8007f3e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d903      	bls.n	8007f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d903      	bls.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d013      	beq.n	8007fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fc2d 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	bf8c      	ite	hi
 8007f98:	2301      	movhi	r3, #1
 8007f9a:	2300      	movls	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8007fa2:	f06f 0301 	mvn.w	r3, #1
 8007fa6:	e190      	b.n	80082ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fbfa 	bl	80067a6 <_ZN13STM32Hardware4readEv>
 8007fb2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f2c0 8170 	blt.w	800829c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fd2:	2b07      	cmp	r3, #7
 8007fd4:	d11d      	bne.n	8008012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	b2d1      	uxtb	r1, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	4413      	add	r3, r2
 8007fec:	460a      	mov	r2, r1
 8007fee:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8007ff6:	1e5a      	subs	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1b7      	bne.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2208      	movs	r2, #8
 800800c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8008010:	e7b2      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d128      	bne.n	800806e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2bff      	cmp	r3, #255	@ 0xff
 8008020:	d10d      	bne.n	800803e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f103 0214 	add.w	r2, r3, #20
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 800803c:	e79c      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3304      	adds	r3, #4
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fbce 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008052:	4293      	cmp	r3, r2
 8008054:	bf8c      	ite	hi
 8008056:	2301      	movhi	r3, #1
 8008058:	2300      	movls	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d08b      	beq.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8008068:	f06f 0301 	mvn.w	r3, #1
 800806c:	e12d      	b.n	80082ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d118      	bne.n	80080aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2bfe      	cmp	r3, #254	@ 0xfe
 800807c:	d107      	bne.n	800808e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800808c:	e774      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800809c:	2b00      	cmp	r3, #0
 800809e:	f47f af6b 	bne.w	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f915 	bl	80082d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80080a8:	e766      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d113      	bne.n	80080dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 80080da:	e74d      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d110      	bne.n	8008108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8008106:	e737      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800810e:	2b04      	cmp	r3, #4
 8008110:	d116      	bne.n	8008140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8008118:	425a      	negs	r2, r3
 800811a:	b2db      	uxtb	r3, r3
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	bf58      	it	pl
 8008120:	4253      	negpl	r3, r2
 8008122:	2bff      	cmp	r3, #255	@ 0xff
 8008124:	d107      	bne.n	8008136 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8008134:	e720      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800813e:	e71b      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008146:	2b05      	cmp	r3, #5
 8008148:	d10f      	bne.n	800816a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8008168:	e706      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008170:	2b06      	cmp	r3, #6
 8008172:	d117      	bne.n	80081a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	441a      	add	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2207      	movs	r2, #7
 800818a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f aeef 	bne.w	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2208      	movs	r2, #8
 800819e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80081a2:	e6e9      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081aa:	2b08      	cmp	r3, #8
 80081ac:	f47f aee4 	bne.w	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80081be:	425a      	negs	r2, r3
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	bf58      	it	pl
 80081c6:	4253      	negpl	r3, r2
 80081c8:	2bff      	cmp	r3, #255	@ 0xff
 80081ca:	f47f aed5 	bne.w	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d110      	bne.n	80081fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f87a 	bl	80082d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f894 	bl	800830c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081f8:	e067      	b.n	80082ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8008200:	2b0a      	cmp	r3, #10
 8008202:	d106      	bne.n	8008212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3318      	adds	r3, #24
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f95e 	bl	80084cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8008210:	e6b2      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8008218:	2b06      	cmp	r3, #6
 800821a:	d10d      	bne.n	8008238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3318      	adds	r3, #24
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fd ffb8 	bl	800619e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8008236:	e69f      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800823e:	2b0b      	cmp	r3, #11
 8008240:	d104      	bne.n	800824c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 800824a:	e695      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8008252:	3b64      	subs	r3, #100	@ 0x64
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f43f ae89 	beq.w	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800826c:	3b64      	subs	r3, #100	@ 0x64
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	6858      	ldr	r0, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8008280:	3b64      	subs	r3, #100	@ 0x64
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	3218      	adds	r2, #24
 8008296:	4611      	mov	r1, r2
 8008298:	4798      	blx	r3
    while (true)
 800829a:	e66d      	b.n	8007f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800829c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d906      	bls.n	80082c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f809 	bl	80082d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 80082c8:	2300      	movs	r3, #0
  }
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fd faba 	bl	8005858 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f107 020c 	add.w	r2, r7, #12
 80082ee:	210a      	movs	r1, #10
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
    rt_time = hardware_.time();
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fa73 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 80082fe:	4602      	mov	r2, r0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	609a      	str	r2, [r3, #8]
  }
 8008304:	bf00      	nop
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800830c:	b590      	push	{r4, r7, lr}
 800830e:	b08b      	sub	sp, #44	@ 0x2c
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fb8d 	bl	8005a38 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
 8008322:	e05a      	b.n	80083da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008328:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d04f      	beq.n	80083d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008338:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800833c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	b29b      	uxth	r3, r3
 8008344:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834a:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800835a:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800835e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008368:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4608      	mov	r0, r1
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
 800837e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008384:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	6859      	ldr	r1, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008392:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	330c      	adds	r3, #12
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4608      	mov	r0, r1
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80083aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ba:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe f8a3 	bl	800650e <_ZN3ros9Publisher15getEndpointTypeEv>
 80083c8:	4601      	mov	r1, r0
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	461a      	mov	r2, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	3301      	adds	r3, #1
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	2b18      	cmp	r3, #24
 80083de:	dda1      	ble.n	8008324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80083e0:	2300      	movs	r3, #0
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e4:	e067      	b.n	80084b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05b      	beq.n	80084b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	b29b      	uxth	r3, r3
 800840a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008422:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4608      	mov	r0, r1
 8008442:	4798      	blx	r3
 8008444:	4603      	mov	r3, r0
 8008446:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	6859      	ldr	r1, [r3, #4]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4608      	mov	r0, r1
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8008472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008476:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681c      	ldr	r4, [r3, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4608      	mov	r0, r1
 80084a2:	4798      	blx	r3
 80084a4:	4601      	mov	r1, r0
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	461a      	mov	r2, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	3301      	adds	r3, #1
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	2b18      	cmp	r3, #24
 80084ba:	dd94      	ble.n	80083e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 80084c4:	bf00      	nop
 80084c6:	372c      	adds	r7, #44	@ 0x2c
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd90      	pop	{r4, r7, pc}

080084cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80084d6:	f107 0308 	add.w	r3, r7, #8
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fd f9bc 	bl	8005858 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe f97d 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 80084ea:	4602      	mov	r2, r0
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd fa1c 	bl	8005938 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	4914      	ldr	r1, [pc, #80]	@ (8008558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8008506:	fba1 1303 	umull	r1, r3, r1, r3
 800850a:	099b      	lsrs	r3, r3, #6
 800850c:	4413      	add	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008510:	6939      	ldr	r1, [r7, #16]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8008516:	fba3 0302 	umull	r0, r3, r3, r2
 800851a:	099b      	lsrs	r3, r3, #6
 800851c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008520:	fb00 f303 	mul.w	r3, r0, r3
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	4a0d      	ldr	r2, [pc, #52]	@ (800855c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	440b      	add	r3, r1
 800852e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8008530:	f107 0308 	add.w	r3, r7, #8
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8a5 	bl	8008688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe f94e 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 8008548:	4602      	mov	r2, r0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 8008550:	bf00      	nop
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	10624dd3 	.word	0x10624dd3
 800855c:	000f4240 	.word	0x000f4240

08008560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b63      	cmp	r3, #99	@ 0x63
 8008570:	dd09      	ble.n	8008586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8008578:	f083 0301 	eor.w	r3, r3, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8008582:	2300      	movs	r3, #0
 8008584:	e079      	b.n	800867a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 8008592:	3207      	adds	r2, #7
 8008594:	4611      	mov	r1, r2
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	22ff      	movs	r2, #255	@ 0xff
 80085a0:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	22fe      	movs	r2, #254	@ 0xfe
 80085a8:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80085d2:	4413      	add	r3, r2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	43db      	mvns	r3, r3
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	b21b      	sxth	r3, r3
 80085ee:	121b      	asrs	r3, r3, #8
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80085fe:	2305      	movs	r3, #5
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	e00c      	b.n	800861e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	4413      	add	r3, r2
 800860a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	3301      	adds	r3, #1
 800861c:	61bb      	str	r3, [r7, #24]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	3306      	adds	r3, #6
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	429a      	cmp	r2, r3
 8008626:	dded      	ble.n	8008604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	3307      	adds	r3, #7
 800862c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	425a      	negs	r2, r3
 8008632:	b2db      	uxtb	r3, r3
 8008634:	b2d2      	uxtb	r2, r2
 8008636:	bf58      	it	pl
 8008638:	4253      	negpl	r3, r2
 800863a:	b2da      	uxtb	r2, r3
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	6179      	str	r1, [r7, #20]
 8008642:	43d2      	mvns	r2, r2
 8008644:	b2d1      	uxtb	r1, r2
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	460a      	mov	r2, r1
 800864c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008656:	dc0a      	bgt.n	800866e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1d18      	adds	r0, r3, #4
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4619      	mov	r1, r3
 8008666:	f7fe f8ac 	bl	80067c2 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	e005      	b.n	800867a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800866e:	4905      	ldr	r1, [pc, #20]	@ (8008684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f847 	bl	8008704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8008676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	080138c0 	.word	0x080138c0

08008688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe f8a4 	bl	80067e4 <_ZN13STM32Hardware4timeEv>
 800869c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4914      	ldr	r1, [pc, #80]	@ (80086f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80086a6:	fba1 1303 	umull	r1, r3, r1, r3
 80086aa:	099b      	lsrs	r3, r3, #6
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6859      	ldr	r1, [r3, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80086bc:	fba3 0302 	umull	r0, r3, r3, r2
 80086c0:	099b      	lsrs	r3, r3, #6
 80086c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80086c6:	fb00 f303 	mul.w	r3, r0, r3
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	4a0b      	ldr	r2, [pc, #44]	@ (80086fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80086ce:	fb02 f303 	mul.w	r3, r2, r3
 80086d2:	1aca      	subs	r2, r1, r3
 80086d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80086d6:	4413      	add	r3, r2
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 020c 	add.w	r2, r3, #12
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3310      	adds	r3, #16
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 ff91 	bl	8009610 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	10624dd3 	.word	0x10624dd3
 80086fc:	000f4240 	.word	0x000f4240
 8008700:	3b9aca00 	.word	0x3b9aca00

08008704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	2103      	movs	r1, #3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f804 	bl	8008720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	460b      	mov	r3, r1
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800872e:	f107 0314 	add.w	r3, r7, #20
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fb44 	bl	8005dc0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f107 0214 	add.w	r2, r7, #20
 800874a:	2107      	movs	r1, #7
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	4798      	blx	r3
  }
 8008750:	bf00      	nop
 8008752:	3720      	adds	r7, #32
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <_Z41__static_initialization_and_destruction_0ii>:
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d120      	bne.n	80087aa <_Z41__static_initialization_and_destruction_0ii+0x52>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800876e:	4293      	cmp	r3, r2
 8008770:	d11b      	bne.n	80087aa <_Z41__static_initialization_and_destruction_0ii+0x52>
SerialClass serial(huart3);
 8008772:	4910      	ldr	r1, [pc, #64]	@ (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008774:	4810      	ldr	r0, [pc, #64]	@ (80087b8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008776:	f7fd fed6 	bl	8006526 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800877a:	4810      	ldr	r0, [pc, #64]	@ (80087bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800877c:	f7ff f9de 	bl	8007b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8MultiArray Sensor_data;
 8008780:	480f      	ldr	r0, [pc, #60]	@ (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008782:	f7fe fb2b 	bl	8006ddc <_ZN8std_msgs14Int8MultiArrayC1Ev>
ros::Publisher sensor("sensor", &Sensor_data);
 8008786:	2300      	movs	r3, #0
 8008788:	4a0d      	ldr	r2, [pc, #52]	@ (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800878a:	490e      	ldr	r1, [pc, #56]	@ (80087c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800878c:	480e      	ldr	r0, [pc, #56]	@ (80087c8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800878e:	f7fd fe93 	bl	80064b8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
 8008792:	2301      	movs	r3, #1
 8008794:	4a0d      	ldr	r2, [pc, #52]	@ (80087cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8008796:	490e      	ldr	r1, [pc, #56]	@ (80087d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8008798:	480e      	ldr	r0, [pc, #56]	@ (80087d4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800879a:	f7ff fb07 	bl	8007dac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8>seedl("seed", &seed);
 800879e:	2301      	movs	r3, #1
 80087a0:	4a0d      	ldr	r2, [pc, #52]	@ (80087d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80087a2:	490e      	ldr	r1, [pc, #56]	@ (80087dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80087a4:	480e      	ldr	r0, [pc, #56]	@ (80087e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80087a6:	f7ff fb25 	bl	8007df4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000a10 	.word	0x20000a10
 80087b8:	20000e0c 	.word	0x20000e0c
 80087bc:	20002e34 	.word	0x20002e34
 80087c0:	20003364 	.word	0x20003364
 80087c4:	080138fc 	.word	0x080138fc
 80087c8:	20003394 	.word	0x20003394
 80087cc:	08007c21 	.word	0x08007c21
 80087d0:	08013904 	.word	0x08013904
 80087d4:	200033a8 	.word	0x200033a8
 80087d8:	08007c71 	.word	0x08007c71
 80087dc:	0801390c 	.word	0x0801390c
 80087e0:	20003408 	.word	0x20003408

080087e4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	330c      	adds	r3, #12
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fab5 	bl	8006d64 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	320c      	adds	r2, #12
 8008802:	4610      	mov	r0, r2
 8008804:	4798      	blx	r3
  }
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
  }
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	330c      	adds	r3, #12
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fab6 	bl	8006da4 <_ZN8std_msgs4Int87getTypeEv>
 8008838:	4603      	mov	r3, r0
  }
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	330c      	adds	r3, #12
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fab6 	bl	8006dc0 <_ZN8std_msgs4Int86getMD5Ev>
 8008854:	4603      	mov	r3, r0
  }
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3310      	adds	r3, #16
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff f912 	bl	8007a98 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	3210      	adds	r2, #16
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
  }
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3310      	adds	r3, #16
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff f919 	bl	8007ae4 <_ZN13geometry_msgs5Twist7getTypeEv>
 80088b2:	4603      	mov	r3, r0
  }
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3310      	adds	r3, #16
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff f919 	bl	8007b00 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80088ce:	4603      	mov	r3, r0
  }
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
    return configured_;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <_GLOBAL__sub_I_serial>:
 80088f2:	b580      	push	{r7, lr}
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80088fa:	2001      	movs	r0, #1
 80088fc:	f7ff ff2c 	bl	8008758 <_Z41__static_initialization_and_destruction_0ii>
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800890a:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <HAL_MspInit+0x4c>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890e:	4a10      	ldr	r2, [pc, #64]	@ (8008950 <HAL_MspInit+0x4c>)
 8008910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008914:	6413      	str	r3, [r2, #64]	@ 0x40
 8008916:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <HAL_MspInit+0x4c>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800891e:	607b      	str	r3, [r7, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008922:	4b0b      	ldr	r3, [pc, #44]	@ (8008950 <HAL_MspInit+0x4c>)
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	4a0a      	ldr	r2, [pc, #40]	@ (8008950 <HAL_MspInit+0x4c>)
 8008928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800892c:	6453      	str	r3, [r2, #68]	@ 0x44
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <HAL_MspInit+0x4c>)
 8008930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800893a:	2200      	movs	r2, #0
 800893c:	210f      	movs	r1, #15
 800893e:	f06f 0001 	mvn.w	r0, #1
 8008942:	f001 fe3f 	bl	800a5c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40023800 	.word	0x40023800

08008954 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	@ 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1b      	ldr	r2, [pc, #108]	@ (80089e0 <HAL_CAN_MspInit+0x8c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d12f      	bne.n	80089d6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008976:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	4a1a      	ldr	r2, [pc, #104]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 800897c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008980:	6413      	str	r3, [r2, #64]	@ 0x40
 8008982:	4b18      	ldr	r3, [pc, #96]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800898e:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008992:	4a14      	ldr	r2, [pc, #80]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 8008994:	f043 0308 	orr.w	r3, r3, #8
 8008998:	6313      	str	r3, [r2, #48]	@ 0x30
 800899a:	4b12      	ldr	r3, [pc, #72]	@ (80089e4 <HAL_CAN_MspInit+0x90>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80089a6:	2303      	movs	r3, #3
 80089a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089aa:	2302      	movs	r3, #2
 80089ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b2:	2303      	movs	r3, #3
 80089b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80089b6:	2309      	movs	r3, #9
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089ba:	f107 0314 	add.w	r3, r7, #20
 80089be:	4619      	mov	r1, r3
 80089c0:	4809      	ldr	r0, [pc, #36]	@ (80089e8 <HAL_CAN_MspInit+0x94>)
 80089c2:	f002 fa33 	bl	800ae2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2105      	movs	r1, #5
 80089ca:	2014      	movs	r0, #20
 80089cc:	f001 fdfa 	bl	800a5c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80089d0:	2014      	movs	r0, #20
 80089d2:	f001 fe13 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80089d6:	bf00      	nop
 80089d8:	3728      	adds	r7, #40	@ 0x28
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40006400 	.word	0x40006400
 80089e4:	40023800 	.word	0x40023800
 80089e8:	40020c00 	.word	0x40020c00

080089ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08c      	sub	sp, #48	@ 0x30
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089f4:	f107 031c 	add.w	r3, r7, #28
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	60da      	str	r2, [r3, #12]
 8008a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a7a      	ldr	r2, [pc, #488]	@ (8008bf4 <HAL_SPI_MspInit+0x208>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d154      	bne.n	8008ab8 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a12:	4a79      	ldr	r2, [pc, #484]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a1a:	4b77      	ldr	r3, [pc, #476]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a26:	4b74      	ldr	r3, [pc, #464]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2a:	4a73      	ldr	r2, [pc, #460]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a2c:	f043 0301 	orr.w	r3, r3, #1
 8008a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a32:	4b71      	ldr	r3, [pc, #452]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	4a6d      	ldr	r2, [pc, #436]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a44:	f043 0302 	orr.w	r3, r3, #2
 8008a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	613b      	str	r3, [r7, #16]
 8008a54:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008a56:	2320      	movs	r3, #32
 8008a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a62:	2303      	movs	r3, #3
 8008a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a66:	2305      	movs	r3, #5
 8008a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a6a:	f107 031c 	add.w	r3, r7, #28
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4862      	ldr	r0, [pc, #392]	@ (8008bfc <HAL_SPI_MspInit+0x210>)
 8008a72:	f002 f9db 	bl	800ae2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008a76:	2310      	movs	r3, #16
 8008a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a82:	2303      	movs	r3, #3
 8008a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a86:	2305      	movs	r3, #5
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a8a:	f107 031c 	add.w	r3, r7, #28
 8008a8e:	4619      	mov	r1, r3
 8008a90:	485b      	ldr	r0, [pc, #364]	@ (8008c00 <HAL_SPI_MspInit+0x214>)
 8008a92:	f002 f9cb 	bl	800ae2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008a96:	2320      	movs	r3, #32
 8008a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008aa6:	2305      	movs	r3, #5
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aaa:	f107 031c 	add.w	r3, r7, #28
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4853      	ldr	r0, [pc, #332]	@ (8008c00 <HAL_SPI_MspInit+0x214>)
 8008ab2:	f002 f9bb 	bl	800ae2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8008ab6:	e099      	b.n	8008bec <HAL_SPI_MspInit+0x200>
  else if(hspi->Instance==SPI4)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a51      	ldr	r2, [pc, #324]	@ (8008c04 <HAL_SPI_MspInit+0x218>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	f040 8094 	bne.w	8008bec <HAL_SPI_MspInit+0x200>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008ace:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ad0:	4b49      	ldr	r3, [pc, #292]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008adc:	4b46      	ldr	r3, [pc, #280]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae0:	4a45      	ldr	r2, [pc, #276]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008ae2:	f043 0310 	orr.w	r3, r3, #16
 8008ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ae8:	4b43      	ldr	r3, [pc, #268]	@ (8008bf8 <HAL_SPI_MspInit+0x20c>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	60bb      	str	r3, [r7, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8008af4:	2324      	movs	r3, #36	@ 0x24
 8008af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af8:	2302      	movs	r3, #2
 8008afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b00:	2303      	movs	r3, #3
 8008b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008b04:	2305      	movs	r3, #5
 8008b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b08:	f107 031c 	add.w	r3, r7, #28
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	483e      	ldr	r0, [pc, #248]	@ (8008c08 <HAL_SPI_MspInit+0x21c>)
 8008b10:	f002 f98c 	bl	800ae2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008b14:	2340      	movs	r3, #64	@ 0x40
 8008b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b20:	2303      	movs	r3, #3
 8008b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008b24:	2305      	movs	r3, #5
 8008b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b28:	f107 031c 	add.w	r3, r7, #28
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4836      	ldr	r0, [pc, #216]	@ (8008c08 <HAL_SPI_MspInit+0x21c>)
 8008b30:	f002 f97c 	bl	800ae2c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8008b34:	4b35      	ldr	r3, [pc, #212]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b36:	4a36      	ldr	r2, [pc, #216]	@ (8008c10 <HAL_SPI_MspInit+0x224>)
 8008b38:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b3c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b40:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b42:	4b32      	ldr	r3, [pc, #200]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b48:	4b30      	ldr	r3, [pc, #192]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b54:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b56:	4b2d      	ldr	r3, [pc, #180]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8008b62:	4b2a      	ldr	r3, [pc, #168]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b68:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b6e:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008b74:	4825      	ldr	r0, [pc, #148]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b76:	f001 fd4f 	bl	800a618 <HAL_DMA_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8008b80:	f7fc fe40 	bl	8005804 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a21      	ldr	r2, [pc, #132]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b88:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b8a:	4a20      	ldr	r2, [pc, #128]	@ (8008c0c <HAL_SPI_MspInit+0x220>)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8008b90:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008b92:	4a21      	ldr	r2, [pc, #132]	@ (8008c18 <HAL_SPI_MspInit+0x22c>)
 8008b94:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8008b96:	4b1f      	ldr	r3, [pc, #124]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008b98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b9c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008ba0:	2240      	movs	r2, #64	@ 0x40
 8008ba2:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008baa:	4b1a      	ldr	r3, [pc, #104]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008bb0:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008bb2:	4b18      	ldr	r3, [pc, #96]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008bb8:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8008bbe:	4b15      	ldr	r3, [pc, #84]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008bc4:	4b13      	ldr	r3, [pc, #76]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008bca:	4b12      	ldr	r3, [pc, #72]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8008bd0:	4810      	ldr	r0, [pc, #64]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008bd2:	f001 fd21 	bl	800a618 <HAL_DMA_Init>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_SPI_MspInit+0x1f4>
      Error_Handler();
 8008bdc:	f7fc fe12 	bl	8005804 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008be4:	655a      	str	r2, [r3, #84]	@ 0x54
 8008be6:	4a0b      	ldr	r2, [pc, #44]	@ (8008c14 <HAL_SPI_MspInit+0x228>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008bec:	bf00      	nop
 8008bee:	3730      	adds	r7, #48	@ 0x30
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40013000 	.word	0x40013000
 8008bf8:	40023800 	.word	0x40023800
 8008bfc:	40020000 	.word	0x40020000
 8008c00:	40020400 	.word	0x40020400
 8008c04:	40013400 	.word	0x40013400
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	20000668 	.word	0x20000668
 8008c10:	40026410 	.word	0x40026410
 8008c14:	200006c8 	.word	0x200006c8
 8008c18:	40026428 	.word	0x40026428

08008c1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b090      	sub	sp, #64	@ 0x40
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	605a      	str	r2, [r3, #4]
 8008c2e:	609a      	str	r2, [r3, #8]
 8008c30:	60da      	str	r2, [r3, #12]
 8008c32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a61      	ldr	r2, [pc, #388]	@ (8008dc0 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d131      	bne.n	8008ca2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c3e:	4b61      	ldr	r3, [pc, #388]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c42:	4a60      	ldr	r2, [pc, #384]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c56:	4b5b      	ldr	r3, [pc, #364]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c5c:	f043 0301 	orr.w	r3, r3, #1
 8008c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c62:	4b58      	ldr	r3, [pc, #352]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER1_A_Pin|TIM1_CH2_ENCODER1_B_Pin;
 8008c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c74:	2302      	movs	r3, #2
 8008c76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c88:	4619      	mov	r1, r3
 8008c8a:	484f      	ldr	r0, [pc, #316]	@ (8008dc8 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8008c8c:	f002 f8ce 	bl	800ae2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 8008c90:	2200      	movs	r2, #0
 8008c92:	210f      	movs	r1, #15
 8008c94:	2018      	movs	r0, #24
 8008c96:	f001 fc95 	bl	800a5c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008c9a:	2018      	movs	r0, #24
 8008c9c:	f001 fcae 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8008ca0:	e089      	b.n	8008db6 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM2)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008caa:	d128      	bne.n	8008cfe <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008cac:	4b45      	ldr	r3, [pc, #276]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb0:	4a44      	ldr	r2, [pc, #272]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cb2:	f043 0301 	orr.w	r3, r3, #1
 8008cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cb8:	4b42      	ldr	r3, [pc, #264]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	623b      	str	r3, [r7, #32]
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_ENCODER2_A_Pin|TIM2_CH2_ENCODER2_B_Pin;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008cec:	2301      	movs	r3, #1
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4834      	ldr	r0, [pc, #208]	@ (8008dc8 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8008cf8:	f002 f898 	bl	800ae2c <HAL_GPIO_Init>
}
 8008cfc:	e05b      	b.n	8008db6 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM4)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a32      	ldr	r2, [pc, #200]	@ (8008dcc <HAL_TIM_Encoder_MspInit+0x1b0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d129      	bne.n	8008d5c <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008d08:	4b2e      	ldr	r3, [pc, #184]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d0e:	f043 0304 	orr.w	r3, r3, #4
 8008d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d14:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d20:	4b28      	ldr	r3, [pc, #160]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d24:	4a27      	ldr	r2, [pc, #156]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d26:	f043 0308 	orr.w	r3, r3, #8
 8008d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d2c:	4b25      	ldr	r3, [pc, #148]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCODER4_A_Pin|TIM4_CH2_ENCODER4_B_Pin;
 8008d38:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8008d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d52:	4619      	mov	r1, r3
 8008d54:	481e      	ldr	r0, [pc, #120]	@ (8008dd0 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008d56:	f002 f869 	bl	800ae2c <HAL_GPIO_Init>
}
 8008d5a:	e02c      	b.n	8008db6 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM8)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d127      	bne.n	8008db6 <HAL_TIM_Encoder_MspInit+0x19a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008d66:	4b17      	ldr	r3, [pc, #92]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	4a16      	ldr	r2, [pc, #88]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d72:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d82:	4a10      	ldr	r2, [pc, #64]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d84:	f043 0304 	orr.w	r3, r3, #4
 8008d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1__ENCODER3_A_Pin|TIM8_CH2__ENCODER3_B_Pin;
 8008d96:	23c0      	movs	r3, #192	@ 0xc0
 8008d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008da6:	2303      	movs	r3, #3
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008dae:	4619      	mov	r1, r3
 8008db0:	4809      	ldr	r0, [pc, #36]	@ (8008dd8 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8008db2:	f002 f83b 	bl	800ae2c <HAL_GPIO_Init>
}
 8008db6:	bf00      	nop
 8008db8:	3740      	adds	r7, #64	@ 0x40
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40010000 	.word	0x40010000
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40020000 	.word	0x40020000
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40020c00 	.word	0x40020c00
 8008dd4:	40010400 	.word	0x40010400
 8008dd8:	40020800 	.word	0x40020800

08008ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e5c <HAL_TIM_PWM_MspInit+0x80>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d10c      	bne.n	8008e08 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008dee:	4b1c      	ldr	r3, [pc, #112]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008dfa:	4b19      	ldr	r3, [pc, #100]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8008e06:	e022      	b.n	8008e4e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM5)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <HAL_TIM_PWM_MspInit+0x88>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d10c      	bne.n	8008e2c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008e12:	4b13      	ldr	r3, [pc, #76]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e16:	4a12      	ldr	r2, [pc, #72]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e18:	f043 0308 	orr.w	r3, r3, #8
 8008e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e1e:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e22:	f003 0308 	and.w	r3, r3, #8
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	693b      	ldr	r3, [r7, #16]
}
 8008e2a:	e010      	b.n	8008e4e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM12)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a0d      	ldr	r2, [pc, #52]	@ (8008e68 <HAL_TIM_PWM_MspInit+0x8c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d10b      	bne.n	8008e4e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8008e36:	4b0a      	ldr	r3, [pc, #40]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3a:	4a09      	ldr	r2, [pc, #36]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e42:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <HAL_TIM_PWM_MspInit+0x84>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	bf00      	nop
 8008e50:	371c      	adds	r7, #28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	40023800 	.word	0x40023800
 8008e64:	40000c00 	.word	0x40000c00
 8008e68:	40001800 	.word	0x40001800

08008e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a0a      	ldr	r2, [pc, #40]	@ (8008ea4 <HAL_TIM_Base_MspInit+0x38>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d10b      	bne.n	8008e96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8008e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e82:	4a09      	ldr	r2, [pc, #36]	@ (8008ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8008e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e8a:	4b07      	ldr	r3, [pc, #28]	@ (8008ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40023800 	.word	0x40023800

08008eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb4:	f107 031c 	add.w	r3, r7, #28
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a42      	ldr	r2, [pc, #264]	@ (8008fd4 <HAL_TIM_MspPostInit+0x128>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d139      	bne.n	8008f42 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ece:	4b42      	ldr	r3, [pc, #264]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed2:	4a41      	ldr	r2, [pc, #260]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008eda:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	4a3b      	ldr	r2, [pc, #236]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008eec:	f043 0304 	orr.w	r3, r3, #4
 8008ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ef2:	4b39      	ldr	r3, [pc, #228]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH1_MOTOR4_PWM_Pin|TIM3_CH2_MOTOR3_PWM_Pin;
 8008efe:	23c0      	movs	r3, #192	@ 0xc0
 8008f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f02:	2302      	movs	r3, #2
 8008f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f12:	f107 031c 	add.w	r3, r7, #28
 8008f16:	4619      	mov	r1, r3
 8008f18:	4830      	ldr	r0, [pc, #192]	@ (8008fdc <HAL_TIM_MspPostInit+0x130>)
 8008f1a:	f001 ff87 	bl	800ae2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH3_MOTOR2_PWM_Pin|TIM3_CH4_MOTOR1_PWM_Pin;
 8008f1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f24:	2302      	movs	r3, #2
 8008f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008f30:	2302      	movs	r3, #2
 8008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f34:	f107 031c 	add.w	r3, r7, #28
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4829      	ldr	r0, [pc, #164]	@ (8008fe0 <HAL_TIM_MspPostInit+0x134>)
 8008f3c:	f001 ff76 	bl	800ae2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8008f40:	e043      	b.n	8008fca <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM5)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a27      	ldr	r2, [pc, #156]	@ (8008fe4 <HAL_TIM_MspPostInit+0x138>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d11c      	bne.n	8008f86 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f4c:	4b22      	ldr	r3, [pc, #136]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f50:	4a21      	ldr	r2, [pc, #132]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f52:	f043 0301 	orr.w	r3, r3, #1
 8008f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f58:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH3_BRUSHLESS1_Pin|TIM5_CH4_BRUSHLESS2_Pin;
 8008f64:	230c      	movs	r3, #12
 8008f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f70:	2300      	movs	r3, #0
 8008f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008f74:	2302      	movs	r3, #2
 8008f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f78:	f107 031c 	add.w	r3, r7, #28
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4817      	ldr	r0, [pc, #92]	@ (8008fdc <HAL_TIM_MspPostInit+0x130>)
 8008f80:	f001 ff54 	bl	800ae2c <HAL_GPIO_Init>
}
 8008f84:	e021      	b.n	8008fca <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM12)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a17      	ldr	r2, [pc, #92]	@ (8008fe8 <HAL_TIM_MspPostInit+0x13c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d11c      	bne.n	8008fca <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f90:	4b11      	ldr	r3, [pc, #68]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f94:	4a10      	ldr	r2, [pc, #64]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f96:	f043 0302 	orr.w	r3, r3, #2
 8008f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd8 <HAL_TIM_MspPostInit+0x12c>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM12_CH1_MOTOR6_PWM_Pin|TIM12_CH2_MOTOR5_PWM_Pin;
 8008fa8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8008fba:	2309      	movs	r3, #9
 8008fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fbe:	f107 031c 	add.w	r3, r7, #28
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4809      	ldr	r0, [pc, #36]	@ (8008fec <HAL_TIM_MspPostInit+0x140>)
 8008fc6:	f001 ff31 	bl	800ae2c <HAL_GPIO_Init>
}
 8008fca:	bf00      	nop
 8008fcc:	3730      	adds	r7, #48	@ 0x30
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	40000400 	.word	0x40000400
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	40020000 	.word	0x40020000
 8008fe0:	40020800 	.word	0x40020800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40001800 	.word	0x40001800
 8008fec:	40020400 	.word	0x40020400

08008ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b0ac      	sub	sp, #176	@ 0xb0
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ff8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009008:	f107 0318 	add.w	r3, r7, #24
 800900c:	2284      	movs	r2, #132	@ 0x84
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f009 fd8d 	bl	8012b30 <memset>
  if(huart->Instance==USART2)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4aa9      	ldr	r2, [pc, #676]	@ (80092c0 <HAL_UART_MspInit+0x2d0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	f040 80a1 	bne.w	8009164 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009022:	2380      	movs	r3, #128	@ 0x80
 8009024:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009026:	2300      	movs	r3, #0
 8009028:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800902a:	f107 0318 	add.w	r3, r7, #24
 800902e:	4618      	mov	r0, r3
 8009030:	f002 fe50 	bl	800bcd4 <HAL_RCCEx_PeriphCLKConfig>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800903a:	f7fc fbe3 	bl	8005804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800903e:	4ba1      	ldr	r3, [pc, #644]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009042:	4aa0      	ldr	r2, [pc, #640]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009048:	6413      	str	r3, [r2, #64]	@ 0x40
 800904a:	4b9e      	ldr	r3, [pc, #632]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009056:	4b9b      	ldr	r3, [pc, #620]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905a:	4a9a      	ldr	r2, [pc, #616]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 800905c:	f043 0308 	orr.w	r3, r3, #8
 8009060:	6313      	str	r3, [r2, #48]	@ 0x30
 8009062:	4b98      	ldr	r3, [pc, #608]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009066:	f003 0308 	and.w	r3, r3, #8
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800906e:	2360      	movs	r3, #96	@ 0x60
 8009070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009074:	2302      	movs	r3, #2
 8009076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907a:	2300      	movs	r3, #0
 800907c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009080:	2303      	movs	r3, #3
 8009082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009086:	2307      	movs	r3, #7
 8009088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800908c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009090:	4619      	mov	r1, r3
 8009092:	488d      	ldr	r0, [pc, #564]	@ (80092c8 <HAL_UART_MspInit+0x2d8>)
 8009094:	f001 feca 	bl	800ae2c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009098:	4b8c      	ldr	r3, [pc, #560]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 800909a:	4a8d      	ldr	r2, [pc, #564]	@ (80092d0 <HAL_UART_MspInit+0x2e0>)
 800909c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800909e:	4b8b      	ldr	r3, [pc, #556]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80090a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090a6:	4b89      	ldr	r3, [pc, #548]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090ac:	4b87      	ldr	r3, [pc, #540]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090b2:	4b86      	ldr	r3, [pc, #536]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090ba:	4b84      	ldr	r3, [pc, #528]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090bc:	2200      	movs	r2, #0
 80090be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090c0:	4b82      	ldr	r3, [pc, #520]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80090c6:	4b81      	ldr	r3, [pc, #516]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80090ce:	4b7f      	ldr	r3, [pc, #508]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80090d4:	4b7d      	ldr	r3, [pc, #500]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80090da:	487c      	ldr	r0, [pc, #496]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090dc:	f001 fa9c 	bl	800a618 <HAL_DMA_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80090e6:	f7fc fb8d 	bl	8005804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a77      	ldr	r2, [pc, #476]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090ee:	675a      	str	r2, [r3, #116]	@ 0x74
 80090f0:	4a76      	ldr	r2, [pc, #472]	@ (80092cc <HAL_UART_MspInit+0x2dc>)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80090f6:	4b77      	ldr	r3, [pc, #476]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 80090f8:	4a77      	ldr	r2, [pc, #476]	@ (80092d8 <HAL_UART_MspInit+0x2e8>)
 80090fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80090fc:	4b75      	ldr	r3, [pc, #468]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 80090fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009102:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009104:	4b73      	ldr	r3, [pc, #460]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009106:	2240      	movs	r2, #64	@ 0x40
 8009108:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800910a:	4b72      	ldr	r3, [pc, #456]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 800910c:	2200      	movs	r2, #0
 800910e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009110:	4b70      	ldr	r3, [pc, #448]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009116:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009118:	4b6e      	ldr	r3, [pc, #440]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 800911a:	2200      	movs	r2, #0
 800911c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800911e:	4b6d      	ldr	r3, [pc, #436]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009120:	2200      	movs	r2, #0
 8009122:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009124:	4b6b      	ldr	r3, [pc, #428]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009126:	2200      	movs	r2, #0
 8009128:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800912a:	4b6a      	ldr	r3, [pc, #424]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 800912c:	2200      	movs	r2, #0
 800912e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009130:	4b68      	ldr	r3, [pc, #416]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009132:	2200      	movs	r2, #0
 8009134:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009136:	4867      	ldr	r0, [pc, #412]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 8009138:	f001 fa6e 	bl	800a618 <HAL_DMA_Init>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8009142:	f7fc fb5f 	bl	8005804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a62      	ldr	r2, [pc, #392]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 800914a:	671a      	str	r2, [r3, #112]	@ 0x70
 800914c:	4a61      	ldr	r2, [pc, #388]	@ (80092d4 <HAL_UART_MspInit+0x2e4>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8009152:	2200      	movs	r2, #0
 8009154:	2105      	movs	r1, #5
 8009156:	2026      	movs	r0, #38	@ 0x26
 8009158:	f001 fa34 	bl	800a5c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800915c:	2026      	movs	r0, #38	@ 0x26
 800915e:	f001 fa4d 	bl	800a5fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009162:	e0a9      	b.n	80092b8 <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART3)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a5c      	ldr	r2, [pc, #368]	@ (80092dc <HAL_UART_MspInit+0x2ec>)
 800916a:	4293      	cmp	r3, r2
 800916c:	f040 80a4 	bne.w	80092b8 <HAL_UART_MspInit+0x2c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8009170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009174:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009176:	2300      	movs	r3, #0
 8009178:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800917a:	f107 0318 	add.w	r3, r7, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f002 fda8 	bl	800bcd4 <HAL_RCCEx_PeriphCLKConfig>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800918a:	f7fc fb3b 	bl	8005804 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800918e:	4b4d      	ldr	r3, [pc, #308]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009192:	4a4c      	ldr	r2, [pc, #304]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 8009194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009198:	6413      	str	r3, [r2, #64]	@ 0x40
 800919a:	4b4a      	ldr	r3, [pc, #296]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80091a6:	4b47      	ldr	r3, [pc, #284]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091aa:	4a46      	ldr	r2, [pc, #280]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80091b2:	4b44      	ldr	r3, [pc, #272]	@ (80092c4 <HAL_UART_MspInit+0x2d4>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	60bb      	str	r3, [r7, #8]
 80091bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80091be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80091c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c6:	2302      	movs	r3, #2
 80091c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d2:	2303      	movs	r3, #3
 80091d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80091d8:	2307      	movs	r3, #7
 80091da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80091de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80091e2:	4619      	mov	r1, r3
 80091e4:	4838      	ldr	r0, [pc, #224]	@ (80092c8 <HAL_UART_MspInit+0x2d8>)
 80091e6:	f001 fe21 	bl	800ae2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80091ea:	4b3d      	ldr	r3, [pc, #244]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 80091ec:	4a3d      	ldr	r2, [pc, #244]	@ (80092e4 <HAL_UART_MspInit+0x2f4>)
 80091ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80091f0:	4b3b      	ldr	r3, [pc, #236]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 80091f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80091f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80091f8:	4b39      	ldr	r3, [pc, #228]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80091fe:	4b38      	ldr	r3, [pc, #224]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009200:	2200      	movs	r2, #0
 8009202:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009204:	4b36      	ldr	r3, [pc, #216]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009206:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800920a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800920c:	4b34      	ldr	r3, [pc, #208]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 800920e:	2200      	movs	r2, #0
 8009210:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009212:	4b33      	ldr	r3, [pc, #204]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009214:	2200      	movs	r2, #0
 8009216:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8009218:	4b31      	ldr	r3, [pc, #196]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 800921a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800921e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009220:	4b2f      	ldr	r3, [pc, #188]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009222:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009226:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009228:	4b2d      	ldr	r3, [pc, #180]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 800922a:	2200      	movs	r2, #0
 800922c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800922e:	482c      	ldr	r0, [pc, #176]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009230:	f001 f9f2 	bl	800a618 <HAL_DMA_Init>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800923a:	f7fc fae3 	bl	8005804 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a27      	ldr	r2, [pc, #156]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009242:	675a      	str	r2, [r3, #116]	@ 0x74
 8009244:	4a26      	ldr	r2, [pc, #152]	@ (80092e0 <HAL_UART_MspInit+0x2f0>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800924a:	4b27      	ldr	r3, [pc, #156]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 800924c:	4a27      	ldr	r2, [pc, #156]	@ (80092ec <HAL_UART_MspInit+0x2fc>)
 800924e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8009250:	4b25      	ldr	r3, [pc, #148]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009252:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009256:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009258:	4b23      	ldr	r3, [pc, #140]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 800925a:	2240      	movs	r2, #64	@ 0x40
 800925c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800925e:	4b22      	ldr	r3, [pc, #136]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009260:	2200      	movs	r2, #0
 8009262:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009264:	4b20      	ldr	r3, [pc, #128]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800926a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800926c:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 800926e:	2200      	movs	r2, #0
 8009270:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009272:	4b1d      	ldr	r3, [pc, #116]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009274:	2200      	movs	r2, #0
 8009276:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009278:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 800927a:	2200      	movs	r2, #0
 800927c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800927e:	4b1a      	ldr	r3, [pc, #104]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009280:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009284:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009286:	4b18      	ldr	r3, [pc, #96]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 8009288:	2200      	movs	r2, #0
 800928a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800928c:	4816      	ldr	r0, [pc, #88]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 800928e:	f001 f9c3 	bl	800a618 <HAL_DMA_Init>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8009298:	f7fc fab4 	bl	8005804 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a12      	ldr	r2, [pc, #72]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 80092a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80092a2:	4a11      	ldr	r2, [pc, #68]	@ (80092e8 <HAL_UART_MspInit+0x2f8>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80092a8:	2200      	movs	r2, #0
 80092aa:	2105      	movs	r1, #5
 80092ac:	2027      	movs	r0, #39	@ 0x27
 80092ae:	f001 f989 	bl	800a5c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80092b2:	2027      	movs	r0, #39	@ 0x27
 80092b4:	f001 f9a2 	bl	800a5fc <HAL_NVIC_EnableIRQ>
}
 80092b8:	bf00      	nop
 80092ba:	37b0      	adds	r7, #176	@ 0xb0
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40004400 	.word	0x40004400
 80092c4:	40023800 	.word	0x40023800
 80092c8:	40020c00 	.word	0x40020c00
 80092cc:	20000a98 	.word	0x20000a98
 80092d0:	40026088 	.word	0x40026088
 80092d4:	20000af8 	.word	0x20000af8
 80092d8:	400260a0 	.word	0x400260a0
 80092dc:	40004800 	.word	0x40004800
 80092e0:	20000b58 	.word	0x20000b58
 80092e4:	40026028 	.word	0x40026028
 80092e8:	20000bb8 	.word	0x20000bb8
 80092ec:	40026058 	.word	0x40026058

080092f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08c      	sub	sp, #48	@ 0x30
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8009300:	4b2f      	ldr	r3, [pc, #188]	@ (80093c0 <HAL_InitTick+0xd0>)
 8009302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009304:	4a2e      	ldr	r2, [pc, #184]	@ (80093c0 <HAL_InitTick+0xd0>)
 8009306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800930a:	6453      	str	r3, [r2, #68]	@ 0x44
 800930c:	4b2c      	ldr	r3, [pc, #176]	@ (80093c0 <HAL_InitTick+0xd0>)
 800930e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009318:	f107 020c 	add.w	r2, r7, #12
 800931c:	f107 0310 	add.w	r3, r7, #16
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f002 fca4 	bl	800bc70 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009328:	f002 fc8e 	bl	800bc48 <HAL_RCC_GetPCLK2Freq>
 800932c:	4603      	mov	r3, r0
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	4a23      	ldr	r2, [pc, #140]	@ (80093c4 <HAL_InitTick+0xd4>)
 8009336:	fba2 2303 	umull	r2, r3, r2, r3
 800933a:	0c9b      	lsrs	r3, r3, #18
 800933c:	3b01      	subs	r3, #1
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8009340:	4b21      	ldr	r3, [pc, #132]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009342:	4a22      	ldr	r2, [pc, #136]	@ (80093cc <HAL_InitTick+0xdc>)
 8009344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8009346:	4b20      	ldr	r3, [pc, #128]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009348:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800934c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800934e:	4a1e      	ldr	r2, [pc, #120]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8009354:	4b1c      	ldr	r3, [pc, #112]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009356:	2200      	movs	r2, #0
 8009358:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800935a:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <HAL_InitTick+0xd8>)
 800935c:	2200      	movs	r2, #0
 800935e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009360:	4b19      	ldr	r3, [pc, #100]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009362:	2200      	movs	r2, #0
 8009364:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8009366:	4818      	ldr	r0, [pc, #96]	@ (80093c8 <HAL_InitTick+0xd8>)
 8009368:	f003 fe58 	bl	800d01c <HAL_TIM_Base_Init>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8009372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11b      	bne.n	80093b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800937a:	4813      	ldr	r0, [pc, #76]	@ (80093c8 <HAL_InitTick+0xd8>)
 800937c:	f003 fea6 	bl	800d0cc <HAL_TIM_Base_Start_IT>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8009386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800938a:	2b00      	cmp	r3, #0
 800938c:	d111      	bne.n	80093b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800938e:	2018      	movs	r0, #24
 8009390:	f001 f934 	bl	800a5fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b0f      	cmp	r3, #15
 8009398:	d808      	bhi.n	80093ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800939a:	2200      	movs	r2, #0
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	2018      	movs	r0, #24
 80093a0:	f001 f910 	bl	800a5c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80093a4:	4a0a      	ldr	r2, [pc, #40]	@ (80093d0 <HAL_InitTick+0xe0>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	e002      	b.n	80093b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80093b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3730      	adds	r7, #48	@ 0x30
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	40023800 	.word	0x40023800
 80093c4:	431bde83 	.word	0x431bde83
 80093c8:	20003424 	.word	0x20003424
 80093cc:	40014000 	.word	0x40014000
 80093d0:	20000064 	.word	0x20000064

080093d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80093d8:	bf00      	nop
 80093da:	e7fd      	b.n	80093d8 <NMI_Handler+0x4>

080093dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093e0:	bf00      	nop
 80093e2:	e7fd      	b.n	80093e0 <HardFault_Handler+0x4>

080093e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <MemManage_Handler+0x4>

080093ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093f0:	bf00      	nop
 80093f2:	e7fd      	b.n	80093f0 <BusFault_Handler+0x4>

080093f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093f8:	bf00      	nop
 80093fa:	e7fd      	b.n	80093f8 <UsageFault_Handler+0x4>

080093fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009410:	4802      	ldr	r0, [pc, #8]	@ (800941c <DMA1_Stream1_IRQHandler+0x10>)
 8009412:	f001 faa1 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009416:	bf00      	nop
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000b58 	.word	0x20000b58

08009420 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009424:	4802      	ldr	r0, [pc, #8]	@ (8009430 <DMA1_Stream3_IRQHandler+0x10>)
 8009426:	f001 fa97 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800942a:	bf00      	nop
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000bb8 	.word	0x20000bb8

08009434 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009438:	4802      	ldr	r0, [pc, #8]	@ (8009444 <DMA1_Stream5_IRQHandler+0x10>)
 800943a:	f001 fa8d 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800943e:	bf00      	nop
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000a98 	.word	0x20000a98

08009448 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800944c:	4802      	ldr	r0, [pc, #8]	@ (8009458 <DMA1_Stream6_IRQHandler+0x10>)
 800944e:	f001 fa83 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000af8 	.word	0x20000af8

0800945c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009460:	4802      	ldr	r0, [pc, #8]	@ (800946c <CAN1_RX0_IRQHandler+0x10>)
 8009462:	f000 fdc7 	bl	8009ff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009466:	bf00      	nop
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000578 	.word	0x20000578

08009470 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009474:	4803      	ldr	r0, [pc, #12]	@ (8009484 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8009476:	f004 f927 	bl	800d6c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800947a:	4803      	ldr	r0, [pc, #12]	@ (8009488 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800947c:	f004 f924 	bl	800d6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8009480:	bf00      	nop
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000728 	.word	0x20000728
 8009488:	20003424 	.word	0x20003424

0800948c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009490:	4802      	ldr	r0, [pc, #8]	@ (800949c <USART2_IRQHandler+0x10>)
 8009492:	f005 f853 	bl	800e53c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000988 	.word	0x20000988

080094a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80094a4:	4802      	ldr	r0, [pc, #8]	@ (80094b0 <USART3_IRQHandler+0x10>)
 80094a6:	f005 f849 	bl	800e53c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80094aa:	bf00      	nop
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000a10 	.word	0x20000a10

080094b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80094b8:	4802      	ldr	r0, [pc, #8]	@ (80094c4 <DMA2_Stream0_IRQHandler+0x10>)
 80094ba:	f001 fa4d 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80094be:	bf00      	nop
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000668 	.word	0x20000668

080094c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80094cc:	4802      	ldr	r0, [pc, #8]	@ (80094d8 <DMA2_Stream1_IRQHandler+0x10>)
 80094ce:	f001 fa43 	bl	800a958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80094d2:	bf00      	nop
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200006c8 	.word	0x200006c8

080094dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e00a      	b.n	8009504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80094ee:	f3af 8000 	nop.w
 80094f2:	4601      	mov	r1, r0
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	60ba      	str	r2, [r7, #8]
 80094fa:	b2ca      	uxtb	r2, r1
 80094fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	3301      	adds	r3, #1
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	dbf0      	blt.n	80094ee <_read+0x12>
  }

  return len;
 800950c:	687b      	ldr	r3, [r7, #4]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	e009      	b.n	800953c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	60ba      	str	r2, [r7, #8]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	4618      	mov	r0, r3
 8009532:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	3301      	adds	r3, #1
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	dbf1      	blt.n	8009528 <_write+0x12>
  }
  return len;
 8009544:	687b      	ldr	r3, [r7, #4]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <_close>:

int _close(int file)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009588:	4a14      	ldr	r2, [pc, #80]	@ (80095dc <_sbrk+0x5c>)
 800958a:	4b15      	ldr	r3, [pc, #84]	@ (80095e0 <_sbrk+0x60>)
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009594:	4b13      	ldr	r3, [pc, #76]	@ (80095e4 <_sbrk+0x64>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800959c:	4b11      	ldr	r3, [pc, #68]	@ (80095e4 <_sbrk+0x64>)
 800959e:	4a12      	ldr	r2, [pc, #72]	@ (80095e8 <_sbrk+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80095a2:	4b10      	ldr	r3, [pc, #64]	@ (80095e4 <_sbrk+0x64>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4413      	add	r3, r2
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d207      	bcs.n	80095c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095b0:	f009 fac6 	bl	8012b40 <__errno>
 80095b4:	4603      	mov	r3, r0
 80095b6:	220c      	movs	r2, #12
 80095b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095be:	e009      	b.n	80095d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80095c0:	4b08      	ldr	r3, [pc, #32]	@ (80095e4 <_sbrk+0x64>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095c6:	4b07      	ldr	r3, [pc, #28]	@ (80095e4 <_sbrk+0x64>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	4a05      	ldr	r2, [pc, #20]	@ (80095e4 <_sbrk+0x64>)
 80095d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80095d2:	68fb      	ldr	r3, [r7, #12]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20050000 	.word	0x20050000
 80095e0:	00000400 	.word	0x00000400
 80095e4:	20003470 	.word	0x20003470
 80095e8:	20008530 	.word	0x20008530

080095ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095f0:	4b06      	ldr	r3, [pc, #24]	@ (800960c <SystemInit+0x20>)
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f6:	4a05      	ldr	r2, [pc, #20]	@ (800960c <SystemInit+0x20>)
 80095f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80095fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	e000ed00 	.word	0xe000ed00

08009610 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	0a5a      	lsrs	r2, r3, #9
 8009620:	490f      	ldr	r1, [pc, #60]	@ (8009660 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8009622:	fba1 1202 	umull	r1, r2, r1, r2
 8009626:	09d2      	lsrs	r2, r2, #7
 8009628:	490e      	ldr	r1, [pc, #56]	@ (8009664 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800962a:	fb01 f202 	mul.w	r2, r1, r2
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	0a5b      	lsrs	r3, r3, #9
 8009638:	4a09      	ldr	r2, [pc, #36]	@ (8009660 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	09db      	lsrs	r3, r3, #7
 8009640:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	441a      	add	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	00044b83 	.word	0x00044b83
 8009664:	3b9aca00 	.word	0x3b9aca00

08009668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80096a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800966c:	480d      	ldr	r0, [pc, #52]	@ (80096a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800966e:	490e      	ldr	r1, [pc, #56]	@ (80096a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009670:	4a0e      	ldr	r2, [pc, #56]	@ (80096ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009674:	e002      	b.n	800967c <LoopCopyDataInit>

08009676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800967a:	3304      	adds	r3, #4

0800967c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800967c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800967e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009680:	d3f9      	bcc.n	8009676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009682:	4a0b      	ldr	r2, [pc, #44]	@ (80096b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009684:	4c0b      	ldr	r4, [pc, #44]	@ (80096b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009688:	e001      	b.n	800968e <LoopFillZerobss>

0800968a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800968a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800968c:	3204      	adds	r2, #4

0800968e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800968e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009690:	d3fb      	bcc.n	800968a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009692:	f7ff ffab 	bl	80095ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009696:	f009 fa59 	bl	8012b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800969a:	f7f8 fdb9 	bl	8002210 <main>
  bx  lr    
 800969e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80096a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80096a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096a8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80096ac:	08015c90 	.word	0x08015c90
  ldr r2, =_sbss
 80096b0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80096b4:	20008530 	.word	0x20008530

080096b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096b8:	e7fe      	b.n	80096b8 <ADC_IRQHandler>

080096ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096be:	2003      	movs	r0, #3
 80096c0:	f000 ff75 	bl	800a5ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096c4:	200f      	movs	r0, #15
 80096c6:	f7ff fe13 	bl	80092f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096ca:	f7ff f91b 	bl	8008904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80096d8:	4b06      	ldr	r3, [pc, #24]	@ (80096f4 <HAL_IncTick+0x20>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	4b06      	ldr	r3, [pc, #24]	@ (80096f8 <HAL_IncTick+0x24>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4413      	add	r3, r2
 80096e4:	4a04      	ldr	r2, [pc, #16]	@ (80096f8 <HAL_IncTick+0x24>)
 80096e6:	6013      	str	r3, [r2, #0]
}
 80096e8:	bf00      	nop
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000068 	.word	0x20000068
 80096f8:	20003474 	.word	0x20003474

080096fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
  return uwTick;
 8009700:	4b03      	ldr	r3, [pc, #12]	@ (8009710 <HAL_GetTick+0x14>)
 8009702:	681b      	ldr	r3, [r3, #0]
}
 8009704:	4618      	mov	r0, r3
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20003474 	.word	0x20003474

08009714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800971c:	f7ff ffee 	bl	80096fc <HAL_GetTick>
 8009720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800972c:	d005      	beq.n	800973a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800972e:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <HAL_Delay+0x44>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800973a:	bf00      	nop
 800973c:	f7ff ffde 	bl	80096fc <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d8f7      	bhi.n	800973c <HAL_Delay+0x28>
  {
  }
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000068 	.word	0x20000068

0800975c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e0ed      	b.n	800994a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff f8ea 	bl	8008954 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0201 	orr.w	r2, r2, #1
 800978e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009790:	f7ff ffb4 	bl	80096fc <HAL_GetTick>
 8009794:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009796:	e012      	b.n	80097be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009798:	f7ff ffb0 	bl	80096fc <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b0a      	cmp	r3, #10
 80097a4:	d90b      	bls.n	80097be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2205      	movs	r2, #5
 80097b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0c5      	b.n	800994a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0e5      	beq.n	8009798 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0202 	bic.w	r2, r2, #2
 80097da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097dc:	f7ff ff8e 	bl	80096fc <HAL_GetTick>
 80097e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80097e2:	e012      	b.n	800980a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097e4:	f7ff ff8a 	bl	80096fc <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b0a      	cmp	r3, #10
 80097f0:	d90b      	bls.n	800980a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2205      	movs	r2, #5
 8009802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e09f      	b.n	800994a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e5      	bne.n	80097e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7e1b      	ldrb	r3, [r3, #24]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d108      	bne.n	8009832 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	e007      	b.n	8009842 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009840:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7e5b      	ldrb	r3, [r3, #25]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d108      	bne.n	800985c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e007      	b.n	800986c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800986a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7e9b      	ldrb	r3, [r3, #26]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d108      	bne.n	8009886 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0220 	orr.w	r2, r2, #32
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	e007      	b.n	8009896 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0220 	bic.w	r2, r2, #32
 8009894:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	7edb      	ldrb	r3, [r3, #27]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d108      	bne.n	80098b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0210 	bic.w	r2, r2, #16
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e007      	b.n	80098c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0210 	orr.w	r2, r2, #16
 80098be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7f1b      	ldrb	r3, [r3, #28]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d108      	bne.n	80098da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0208 	orr.w	r2, r2, #8
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	e007      	b.n	80098ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0208 	bic.w	r2, r2, #8
 80098e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	7f5b      	ldrb	r3, [r3, #29]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d108      	bne.n	8009904 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0204 	orr.w	r2, r2, #4
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e007      	b.n	8009914 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0204 	bic.w	r2, r2, #4
 8009912:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	ea42 0103 	orr.w	r1, r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800996a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800996c:	7cfb      	ldrb	r3, [r7, #19]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d003      	beq.n	800997a <HAL_CAN_ConfigFilter+0x26>
 8009972:	7cfb      	ldrb	r3, [r7, #19]
 8009974:	2b02      	cmp	r3, #2
 8009976:	f040 80be 	bne.w	8009af6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800997a:	4b65      	ldr	r3, [pc, #404]	@ (8009b10 <HAL_CAN_ConfigFilter+0x1bc>)
 800997c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009984:	f043 0201 	orr.w	r2, r3, #1
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009994:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	431a      	orrs	r2, r3
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	2201      	movs	r2, #1
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	43db      	mvns	r3, r3
 80099cc:	401a      	ands	r2, r3
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d123      	bne.n	8009a24 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	43db      	mvns	r3, r3
 80099e6:	401a      	ands	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80099fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	3248      	adds	r2, #72	@ 0x48
 8009a04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	3348      	adds	r3, #72	@ 0x48
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	440b      	add	r3, r1
 8009a22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d122      	bne.n	8009a72 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009a4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	3248      	adds	r2, #72	@ 0x48
 8009a52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a68:	6979      	ldr	r1, [r7, #20]
 8009a6a:	3348      	adds	r3, #72	@ 0x48
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	440b      	add	r3, r1
 8009a70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	43db      	mvns	r3, r3
 8009a84:	401a      	ands	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8009a8c:	e007      	b.n	8009a9e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	43db      	mvns	r3, r3
 8009ab0:	401a      	ands	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8009ab8:	e007      	b.n	8009aca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d107      	bne.n	8009ae2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	431a      	orrs	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009ae8:	f023 0201 	bic.w	r2, r3, #1
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e006      	b.n	8009b04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
  }
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	371c      	adds	r7, #28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	40006400 	.word	0x40006400

08009b14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d12e      	bne.n	8009b86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0201 	bic.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b40:	f7ff fddc 	bl	80096fc <HAL_GetTick>
 8009b44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009b46:	e012      	b.n	8009b6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b48:	f7ff fdd8 	bl	80096fc <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	2b0a      	cmp	r3, #10
 8009b54:	d90b      	bls.n	8009b6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2205      	movs	r2, #5
 8009b66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e012      	b.n	8009b94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e006      	b.n	8009b94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
  }
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b089      	sub	sp, #36	@ 0x24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bb0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009bba:	7ffb      	ldrb	r3, [r7, #31]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d003      	beq.n	8009bc8 <HAL_CAN_AddTxMessage+0x2c>
 8009bc0:	7ffb      	ldrb	r3, [r7, #31]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	f040 80ad 	bne.w	8009d22 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d105      	bne.n	8009be8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 8095 	beq.w	8009d12 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	0e1b      	lsrs	r3, r3, #24
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	409a      	lsls	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10d      	bne.n	8009c20 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	6809      	ldr	r1, [r1, #0]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	3318      	adds	r3, #24
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	440b      	add	r3, r1
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e00f      	b.n	8009c40 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009c34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	3318      	adds	r3, #24
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	440b      	add	r3, r1
 8009c3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	3318      	adds	r3, #24
 8009c4c:	011b      	lsls	r3, r3, #4
 8009c4e:	440b      	add	r3, r1
 8009c50:	3304      	adds	r3, #4
 8009c52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d111      	bne.n	8009c80 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	3318      	adds	r3, #24
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	4413      	add	r3, r2
 8009c68:	3304      	adds	r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	6811      	ldr	r1, [r2, #0]
 8009c70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	3318      	adds	r3, #24
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3307      	adds	r3, #7
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	061a      	lsls	r2, r3, #24
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3306      	adds	r3, #6
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	041b      	lsls	r3, r3, #16
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3305      	adds	r3, #5
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	3204      	adds	r2, #4
 8009ca0:	7812      	ldrb	r2, [r2, #0]
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	6811      	ldr	r1, [r2, #0]
 8009ca8:	ea43 0200 	orr.w	r2, r3, r0
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	440b      	add	r3, r1
 8009cb2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8009cb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3303      	adds	r3, #3
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	061a      	lsls	r2, r3, #24
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3302      	adds	r3, #2
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	4610      	mov	r0, r2
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6811      	ldr	r1, [r2, #0]
 8009cde:	ea43 0200 	orr.w	r2, r3, r0
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	440b      	add	r3, r1
 8009ce8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8009cec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	4413      	add	r3, r2
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	6811      	ldr	r1, [r2, #0]
 8009d00:	f043 0201 	orr.w	r2, r3, #1
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3318      	adds	r3, #24
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	440b      	add	r3, r1
 8009d0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e00e      	b.n	8009d30 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e006      	b.n	8009d30 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
  }
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3724      	adds	r7, #36	@ 0x24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d50:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d002      	beq.n	8009d5e <HAL_CAN_IsTxMessagePending+0x22>
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d10b      	bne.n	8009d76 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	069b      	lsls	r3, r3, #26
 8009d68:	401a      	ands	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	069b      	lsls	r3, r3, #26
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d001      	beq.n	8009d76 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8009d72:	2301      	movs	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8009d76:	68fb      	ldr	r3, [r7, #12]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d98:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d003      	beq.n	8009da8 <HAL_CAN_GetRxMessage+0x24>
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	f040 80f3 	bne.w	8009f8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10e      	bne.n	8009dcc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f003 0303 	and.w	r3, r3, #3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d116      	bne.n	8009dea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e0e7      	b.n	8009f9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e0d8      	b.n	8009f9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	331b      	adds	r3, #27
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0204 	and.w	r2, r3, #4
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10c      	bne.n	8009e22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	331b      	adds	r3, #27
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	0d5b      	lsrs	r3, r3, #21
 8009e18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	e00b      	b.n	8009e3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	331b      	adds	r3, #27
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	4413      	add	r3, r2
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	08db      	lsrs	r3, r3, #3
 8009e32:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	331b      	adds	r3, #27
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	4413      	add	r3, r2
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0202 	and.w	r2, r3, #2
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	331b      	adds	r3, #27
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 020f 	and.w	r2, r3, #15
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	331b      	adds	r3, #27
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	4413      	add	r3, r2
 8009e74:	3304      	adds	r3, #4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	331b      	adds	r3, #27
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0c1b      	lsrs	r3, r3, #16
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	0a1a      	lsrs	r2, r3, #8
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	0c1a      	lsrs	r2, r3, #16
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	3302      	adds	r3, #2
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	0e1a      	lsrs	r2, r3, #24
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	3303      	adds	r3, #3
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	0a1a      	lsrs	r2, r3, #8
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	3305      	adds	r3, #5
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	0c1a      	lsrs	r2, r3, #16
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	3306      	adds	r3, #6
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	0e1a      	lsrs	r2, r3, #24
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	3307      	adds	r3, #7
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d108      	bne.n	8009f7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0220 	orr.w	r2, r2, #32
 8009f76:	60da      	str	r2, [r3, #12]
 8009f78:	e007      	b.n	8009f8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0220 	orr.w	r2, r2, #32
 8009f88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e006      	b.n	8009f9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	371c      	adds	r7, #28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d002      	beq.n	8009fc6 <HAL_CAN_ActivateNotification+0x1e>
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d109      	bne.n	8009fda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6959      	ldr	r1, [r3, #20]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e006      	b.n	8009fe8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	@ 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d07c      	beq.n	800a134 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d023      	beq.n	800a08c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2201      	movs	r2, #1
 800a04a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f983 	bl	800a362 <HAL_CAN_TxMailbox0CompleteCallback>
 800a05c:	e016      	b.n	800a08c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a070:	e00c      	b.n	800a08c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a082:	627b      	str	r3, [r7, #36]	@ 0x24
 800a084:	e002      	b.n	800a08c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f989 	bl	800a39e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d024      	beq.n	800a0e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a09e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f963 	bl	800a376 <HAL_CAN_TxMailbox1CompleteCallback>
 800a0b0:	e016      	b.n	800a0e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0c4:	e00c      	b.n	800a0e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d004      	beq.n	800a0da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a0d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0d8:	e002      	b.n	800a0e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f969 	bl	800a3b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d024      	beq.n	800a134 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a0f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f943 	bl	800a38a <HAL_CAN_TxMailbox2CompleteCallback>
 800a104:	e016      	b.n	800a134 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
 800a118:	e00c      	b.n	800a134 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a12c:	e002      	b.n	800a134 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f949 	bl	800a3c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00c      	beq.n	800a158 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2210      	movs	r2, #16
 800a156:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f003 0308 	and.w	r3, r3, #8
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2208      	movs	r2, #8
 800a172:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f930 	bl	800a3da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7f9 fa76 	bl	8003684 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00c      	beq.n	800a1bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f912 	bl	800a402 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d009      	beq.n	800a1fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f8f9 	bl	800a3ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2210      	movs	r2, #16
 800a216:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f8fc 	bl	800a416 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2208      	movs	r2, #8
 800a238:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8f5 	bl	800a42a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d07b      	beq.n	800a342 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d072      	beq.n	800a33a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d008      	beq.n	800a270 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a276:	2b00      	cmp	r3, #0
 800a278:	d008      	beq.n	800a28c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	f043 0302 	orr.w	r3, r3, #2
 800a28a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a292:	2b00      	cmp	r3, #0
 800a294:	d008      	beq.n	800a2a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a2:	f043 0304 	orr.w	r3, r3, #4
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d043      	beq.n	800a33a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d03e      	beq.n	800a33a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2c2:	2b60      	cmp	r3, #96	@ 0x60
 800a2c4:	d02b      	beq.n	800a31e <HAL_CAN_IRQHandler+0x32a>
 800a2c6:	2b60      	cmp	r3, #96	@ 0x60
 800a2c8:	d82e      	bhi.n	800a328 <HAL_CAN_IRQHandler+0x334>
 800a2ca:	2b50      	cmp	r3, #80	@ 0x50
 800a2cc:	d022      	beq.n	800a314 <HAL_CAN_IRQHandler+0x320>
 800a2ce:	2b50      	cmp	r3, #80	@ 0x50
 800a2d0:	d82a      	bhi.n	800a328 <HAL_CAN_IRQHandler+0x334>
 800a2d2:	2b40      	cmp	r3, #64	@ 0x40
 800a2d4:	d019      	beq.n	800a30a <HAL_CAN_IRQHandler+0x316>
 800a2d6:	2b40      	cmp	r3, #64	@ 0x40
 800a2d8:	d826      	bhi.n	800a328 <HAL_CAN_IRQHandler+0x334>
 800a2da:	2b30      	cmp	r3, #48	@ 0x30
 800a2dc:	d010      	beq.n	800a300 <HAL_CAN_IRQHandler+0x30c>
 800a2de:	2b30      	cmp	r3, #48	@ 0x30
 800a2e0:	d822      	bhi.n	800a328 <HAL_CAN_IRQHandler+0x334>
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d002      	beq.n	800a2ec <HAL_CAN_IRQHandler+0x2f8>
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d005      	beq.n	800a2f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a2ea:	e01d      	b.n	800a328 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ee:	f043 0308 	orr.w	r3, r3, #8
 800a2f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a2f4:	e019      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	f043 0310 	orr.w	r3, r3, #16
 800a2fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a2fe:	e014      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	f043 0320 	orr.w	r3, r3, #32
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a308:	e00f      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a312:	e00a      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a31c:	e005      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a326:	e000      	b.n	800a32a <HAL_CAN_IRQHandler+0x336>
            break;
 800a328:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	699a      	ldr	r2, [r3, #24]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a338:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2204      	movs	r2, #4
 800a340:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f872 	bl	800a43e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a35a:	bf00      	nop
 800a35c:	3728      	adds	r7, #40	@ 0x28
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a464:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <__NVIC_SetPriorityGrouping+0x40>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a470:	4013      	ands	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a47c:	4b06      	ldr	r3, [pc, #24]	@ (800a498 <__NVIC_SetPriorityGrouping+0x44>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a482:	4a04      	ldr	r2, [pc, #16]	@ (800a494 <__NVIC_SetPriorityGrouping+0x40>)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	60d3      	str	r3, [r2, #12]
}
 800a488:	bf00      	nop
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	e000ed00 	.word	0xe000ed00
 800a498:	05fa0000 	.word	0x05fa0000

0800a49c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4a0:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <__NVIC_GetPriorityGrouping+0x18>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	f003 0307 	and.w	r3, r3, #7
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	e000ed00 	.word	0xe000ed00

0800a4b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	db0b      	blt.n	800a4e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	f003 021f 	and.w	r2, r3, #31
 800a4d0:	4907      	ldr	r1, [pc, #28]	@ (800a4f0 <__NVIC_EnableIRQ+0x38>)
 800a4d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	2001      	movs	r0, #1
 800a4da:	fa00 f202 	lsl.w	r2, r0, r2
 800a4de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	e000e100 	.word	0xe000e100

0800a4f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a504:	2b00      	cmp	r3, #0
 800a506:	db0a      	blt.n	800a51e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	490c      	ldr	r1, [pc, #48]	@ (800a540 <__NVIC_SetPriority+0x4c>)
 800a50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a512:	0112      	lsls	r2, r2, #4
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	440b      	add	r3, r1
 800a518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a51c:	e00a      	b.n	800a534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	4908      	ldr	r1, [pc, #32]	@ (800a544 <__NVIC_SetPriority+0x50>)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	3b04      	subs	r3, #4
 800a52c:	0112      	lsls	r2, r2, #4
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	440b      	add	r3, r1
 800a532:	761a      	strb	r2, [r3, #24]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	e000e100 	.word	0xe000e100
 800a544:	e000ed00 	.word	0xe000ed00

0800a548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a548:	b480      	push	{r7}
 800a54a:	b089      	sub	sp, #36	@ 0x24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	f1c3 0307 	rsb	r3, r3, #7
 800a562:	2b04      	cmp	r3, #4
 800a564:	bf28      	it	cs
 800a566:	2304      	movcs	r3, #4
 800a568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	3304      	adds	r3, #4
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d902      	bls.n	800a578 <NVIC_EncodePriority+0x30>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3b03      	subs	r3, #3
 800a576:	e000      	b.n	800a57a <NVIC_EncodePriority+0x32>
 800a578:	2300      	movs	r3, #0
 800a57a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43da      	mvns	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	401a      	ands	r2, r3
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	43d9      	mvns	r1, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a0:	4313      	orrs	r3, r2
         );
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	@ 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff ff4c 	bl	800a454 <__NVIC_SetPriorityGrouping>
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5d6:	f7ff ff61 	bl	800a49c <__NVIC_GetPriorityGrouping>
 800a5da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	6978      	ldr	r0, [r7, #20]
 800a5e2:	f7ff ffb1 	bl	800a548 <NVIC_EncodePriority>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff ff80 	bl	800a4f4 <__NVIC_SetPriority>
}
 800a5f4:	bf00      	nop
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff ff54 	bl	800a4b8 <__NVIC_EnableIRQ>
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a624:	f7ff f86a 	bl	80096fc <HAL_GetTick>
 800a628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e099      	b.n	800a768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0201 	bic.w	r2, r2, #1
 800a652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a654:	e00f      	b.n	800a676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a656:	f7ff f851 	bl	80096fc <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	2b05      	cmp	r3, #5
 800a662:	d908      	bls.n	800a676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2203      	movs	r2, #3
 800a66e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e078      	b.n	800a768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e8      	bne.n	800a656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4b38      	ldr	r3, [pc, #224]	@ (800a770 <HAL_DMA_Init+0x158>)
 800a690:	4013      	ands	r3, r2
 800a692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d107      	bne.n	800a6e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f023 0307 	bic.w	r3, r3, #7
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a706:	2b04      	cmp	r3, #4
 800a708:	d117      	bne.n	800a73a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00e      	beq.n	800a73a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fb09 	bl	800ad34 <DMA_CheckFifoParam>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2240      	movs	r2, #64	@ 0x40
 800a72c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a736:	2301      	movs	r3, #1
 800a738:	e016      	b.n	800a768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fac0 	bl	800acc8 <DMA_CalcBaseAndBitshift>
 800a748:	4603      	mov	r3, r0
 800a74a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a750:	223f      	movs	r2, #63	@ 0x3f
 800a752:	409a      	lsls	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	f010803f 	.word	0xf010803f

0800a774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a78a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a792:	2b01      	cmp	r3, #1
 800a794:	d101      	bne.n	800a79a <HAL_DMA_Start_IT+0x26>
 800a796:	2302      	movs	r3, #2
 800a798:	e048      	b.n	800a82c <HAL_DMA_Start_IT+0xb8>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d137      	bne.n	800a81e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fa52 	bl	800ac6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7cc:	223f      	movs	r2, #63	@ 0x3f
 800a7ce:	409a      	lsls	r2, r3
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0216 	orr.w	r2, r2, #22
 800a7e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	695a      	ldr	r2, [r3, #20]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a7f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0208 	orr.w	r2, r2, #8
 800a80a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f042 0201 	orr.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	e005      	b.n	800a82a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a826:	2302      	movs	r3, #2
 800a828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a842:	f7fe ff5b 	bl	80096fc <HAL_GetTick>
 800a846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b02      	cmp	r3, #2
 800a852:	d008      	beq.n	800a866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2280      	movs	r2, #128	@ 0x80
 800a858:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e052      	b.n	800a90c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f022 0216 	bic.w	r2, r2, #22
 800a874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695a      	ldr	r2, [r3, #20]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d103      	bne.n	800a896 <HAL_DMA_Abort+0x62>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a892:	2b00      	cmp	r3, #0
 800a894:	d007      	beq.n	800a8a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0208 	bic.w	r2, r2, #8
 800a8a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8b6:	e013      	b.n	800a8e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8b8:	f7fe ff20 	bl	80096fc <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d90c      	bls.n	800a8e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e015      	b.n	800a90c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e4      	bne.n	800a8b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8f2:	223f      	movs	r2, #63	@ 0x3f
 800a8f4:	409a      	lsls	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d004      	beq.n	800a932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2280      	movs	r2, #128	@ 0x80
 800a92c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e00c      	b.n	800a94c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2205      	movs	r2, #5
 800a936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a964:	4b8e      	ldr	r3, [pc, #568]	@ (800aba0 <HAL_DMA_IRQHandler+0x248>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a8e      	ldr	r2, [pc, #568]	@ (800aba4 <HAL_DMA_IRQHandler+0x24c>)
 800a96a:	fba2 2303 	umull	r2, r3, r2, r3
 800a96e:	0a9b      	lsrs	r3, r3, #10
 800a970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a982:	2208      	movs	r2, #8
 800a984:	409a      	lsls	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4013      	ands	r3, r2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d01a      	beq.n	800a9c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0304 	and.w	r3, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d013      	beq.n	800a9c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0204 	bic.w	r2, r2, #4
 800a9aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	409a      	lsls	r2, r3
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9bc:	f043 0201 	orr.w	r2, r3, #1
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	409a      	lsls	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d012      	beq.n	800a9fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	409a      	lsls	r2, r3
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f2:	f043 0202 	orr.w	r2, r3, #2
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9fe:	2204      	movs	r2, #4
 800aa00:	409a      	lsls	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4013      	ands	r3, r2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d012      	beq.n	800aa30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	409a      	lsls	r2, r3
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa28:	f043 0204 	orr.w	r2, r3, #4
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa34:	2210      	movs	r2, #16
 800aa36:	409a      	lsls	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d043      	beq.n	800aac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d03c      	beq.n	800aac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa52:	2210      	movs	r2, #16
 800aa54:	409a      	lsls	r2, r3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d108      	bne.n	800aa88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d024      	beq.n	800aac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	4798      	blx	r3
 800aa86:	e01f      	b.n	800aac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01b      	beq.n	800aac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	4798      	blx	r3
 800aa98:	e016      	b.n	800aac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d107      	bne.n	800aab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f022 0208 	bic.w	r2, r2, #8
 800aab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aacc:	2220      	movs	r2, #32
 800aace:	409a      	lsls	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4013      	ands	r3, r2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 808f 	beq.w	800abf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0310 	and.w	r3, r3, #16
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8087 	beq.w	800abf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaee:	2220      	movs	r2, #32
 800aaf0:	409a      	lsls	r2, r3
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b05      	cmp	r3, #5
 800ab00:	d136      	bne.n	800ab70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0216 	bic.w	r2, r2, #22
 800ab10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	695a      	ldr	r2, [r3, #20]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <HAL_DMA_IRQHandler+0x1da>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d007      	beq.n	800ab42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0208 	bic.w	r2, r2, #8
 800ab40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab46:	223f      	movs	r2, #63	@ 0x3f
 800ab48:	409a      	lsls	r2, r3
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d07e      	beq.n	800ac64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	4798      	blx	r3
        }
        return;
 800ab6e:	e079      	b.n	800ac64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01d      	beq.n	800abba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10d      	bne.n	800aba8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d031      	beq.n	800abf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
 800ab9c:	e02c      	b.n	800abf8 <HAL_DMA_IRQHandler+0x2a0>
 800ab9e:	bf00      	nop
 800aba0:	20000060 	.word	0x20000060
 800aba4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d023      	beq.n	800abf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
 800abb8:	e01e      	b.n	800abf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10f      	bne.n	800abe8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0210 	bic.w	r2, r2, #16
 800abd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d032      	beq.n	800ac66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d022      	beq.n	800ac52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2205      	movs	r2, #5
 800ac10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0201 	bic.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d307      	bcc.n	800ac40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f2      	bne.n	800ac24 <HAL_DMA_IRQHandler+0x2cc>
 800ac3e:	e000      	b.n	800ac42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ac40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d005      	beq.n	800ac66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
 800ac62:	e000      	b.n	800ac66 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ac64:	bf00      	nop
    }
  }
}
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ac88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	2b40      	cmp	r3, #64	@ 0x40
 800ac98:	d108      	bne.n	800acac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800acaa:	e007      	b.n	800acbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	60da      	str	r2, [r3, #12]
}
 800acbc:	bf00      	nop
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	3b10      	subs	r3, #16
 800acd8:	4a13      	ldr	r2, [pc, #76]	@ (800ad28 <DMA_CalcBaseAndBitshift+0x60>)
 800acda:	fba2 2303 	umull	r2, r3, r2, r3
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ace2:	4a12      	ldr	r2, [pc, #72]	@ (800ad2c <DMA_CalcBaseAndBitshift+0x64>)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4413      	add	r3, r2
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d908      	bls.n	800ad08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <DMA_CalcBaseAndBitshift+0x68>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad06:	e006      	b.n	800ad16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	4b08      	ldr	r3, [pc, #32]	@ (800ad30 <DMA_CalcBaseAndBitshift+0x68>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	aaaaaaab 	.word	0xaaaaaaab
 800ad2c:	080159f4 	.word	0x080159f4
 800ad30:	fffffc00 	.word	0xfffffc00

0800ad34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d11f      	bne.n	800ad8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d856      	bhi.n	800ae02 <DMA_CheckFifoParam+0xce>
 800ad54:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <DMA_CheckFifoParam+0x28>)
 800ad56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5a:	bf00      	nop
 800ad5c:	0800ad6d 	.word	0x0800ad6d
 800ad60:	0800ad7f 	.word	0x0800ad7f
 800ad64:	0800ad6d 	.word	0x0800ad6d
 800ad68:	0800ae03 	.word	0x0800ae03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d046      	beq.n	800ae06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad7c:	e043      	b.n	800ae06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ad86:	d140      	bne.n	800ae0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad8c:	e03d      	b.n	800ae0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad96:	d121      	bne.n	800addc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d837      	bhi.n	800ae0e <DMA_CheckFifoParam+0xda>
 800ad9e:	a201      	add	r2, pc, #4	@ (adr r2, 800ada4 <DMA_CheckFifoParam+0x70>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800adb5 	.word	0x0800adb5
 800ada8:	0800adbb 	.word	0x0800adbb
 800adac:	0800adb5 	.word	0x0800adb5
 800adb0:	0800adcd 	.word	0x0800adcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	73fb      	strb	r3, [r7, #15]
      break;
 800adb8:	e030      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d025      	beq.n	800ae12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adca:	e022      	b.n	800ae12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800add4:	d11f      	bne.n	800ae16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800adda:	e01c      	b.n	800ae16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d903      	bls.n	800adea <DMA_CheckFifoParam+0xb6>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d003      	beq.n	800adf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ade8:	e018      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	73fb      	strb	r3, [r7, #15]
      break;
 800adee:	e015      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00e      	beq.n	800ae1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ae00:	e00b      	b.n	800ae1a <DMA_CheckFifoParam+0xe6>
      break;
 800ae02:	bf00      	nop
 800ae04:	e00a      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;
 800ae06:	bf00      	nop
 800ae08:	e008      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;
 800ae0a:	bf00      	nop
 800ae0c:	e006      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;
 800ae0e:	bf00      	nop
 800ae10:	e004      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;
 800ae12:	bf00      	nop
 800ae14:	e002      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;   
 800ae16:	bf00      	nop
 800ae18:	e000      	b.n	800ae1c <DMA_CheckFifoParam+0xe8>
      break;
 800ae1a:	bf00      	nop
    }
  } 
  
  return status; 
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop

0800ae2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b089      	sub	sp, #36	@ 0x24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ae46:	2300      	movs	r3, #0
 800ae48:	61fb      	str	r3, [r7, #28]
 800ae4a:	e175      	b.n	800b138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	fa02 f303 	lsl.w	r3, r2, r3
 800ae54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	f040 8164 	bne.w	800b132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d005      	beq.n	800ae82 <HAL_GPIO_Init+0x56>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f003 0303 	and.w	r3, r3, #3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d130      	bne.n	800aee4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae92:	43db      	mvns	r3, r3
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	4013      	ands	r3, r2
 800ae98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	fa02 f303 	lsl.w	r3, r2, r3
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aeb8:	2201      	movs	r2, #1
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	43db      	mvns	r3, r3
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	4013      	ands	r3, r2
 800aec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	091b      	lsrs	r3, r3, #4
 800aece:	f003 0201 	and.w	r2, r3, #1
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	fa02 f303 	lsl.w	r3, r2, r3
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d017      	beq.n	800af20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	2203      	movs	r2, #3
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	43db      	mvns	r3, r3
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	4013      	ands	r3, r2
 800af06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	4313      	orrs	r3, r2
 800af18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d123      	bne.n	800af74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	08da      	lsrs	r2, r3, #3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3208      	adds	r2, #8
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	f003 0307 	and.w	r3, r3, #7
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	220f      	movs	r2, #15
 800af44:	fa02 f303 	lsl.w	r3, r2, r3
 800af48:	43db      	mvns	r3, r3
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	4013      	ands	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	fa02 f303 	lsl.w	r3, r2, r3
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	4313      	orrs	r3, r2
 800af64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	08da      	lsrs	r2, r3, #3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3208      	adds	r2, #8
 800af6e:	69b9      	ldr	r1, [r7, #24]
 800af70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	2203      	movs	r2, #3
 800af80:	fa02 f303 	lsl.w	r3, r2, r3
 800af84:	43db      	mvns	r3, r3
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	4013      	ands	r3, r2
 800af8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f003 0203 	and.w	r2, r3, #3
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	fa02 f303 	lsl.w	r3, r2, r3
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 80be 	beq.w	800b132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afb6:	4b66      	ldr	r3, [pc, #408]	@ (800b150 <HAL_GPIO_Init+0x324>)
 800afb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afba:	4a65      	ldr	r2, [pc, #404]	@ (800b150 <HAL_GPIO_Init+0x324>)
 800afbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800afc0:	6453      	str	r3, [r2, #68]	@ 0x44
 800afc2:	4b63      	ldr	r3, [pc, #396]	@ (800b150 <HAL_GPIO_Init+0x324>)
 800afc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800afce:	4a61      	ldr	r2, [pc, #388]	@ (800b154 <HAL_GPIO_Init+0x328>)
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	089b      	lsrs	r3, r3, #2
 800afd4:	3302      	adds	r3, #2
 800afd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	f003 0303 	and.w	r3, r3, #3
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	220f      	movs	r2, #15
 800afe6:	fa02 f303 	lsl.w	r3, r2, r3
 800afea:	43db      	mvns	r3, r3
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	4013      	ands	r3, r2
 800aff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a58      	ldr	r2, [pc, #352]	@ (800b158 <HAL_GPIO_Init+0x32c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d037      	beq.n	800b06a <HAL_GPIO_Init+0x23e>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a57      	ldr	r2, [pc, #348]	@ (800b15c <HAL_GPIO_Init+0x330>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d031      	beq.n	800b066 <HAL_GPIO_Init+0x23a>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a56      	ldr	r2, [pc, #344]	@ (800b160 <HAL_GPIO_Init+0x334>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d02b      	beq.n	800b062 <HAL_GPIO_Init+0x236>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a55      	ldr	r2, [pc, #340]	@ (800b164 <HAL_GPIO_Init+0x338>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d025      	beq.n	800b05e <HAL_GPIO_Init+0x232>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a54      	ldr	r2, [pc, #336]	@ (800b168 <HAL_GPIO_Init+0x33c>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d01f      	beq.n	800b05a <HAL_GPIO_Init+0x22e>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a53      	ldr	r2, [pc, #332]	@ (800b16c <HAL_GPIO_Init+0x340>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d019      	beq.n	800b056 <HAL_GPIO_Init+0x22a>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a52      	ldr	r2, [pc, #328]	@ (800b170 <HAL_GPIO_Init+0x344>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d013      	beq.n	800b052 <HAL_GPIO_Init+0x226>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a51      	ldr	r2, [pc, #324]	@ (800b174 <HAL_GPIO_Init+0x348>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00d      	beq.n	800b04e <HAL_GPIO_Init+0x222>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a50      	ldr	r2, [pc, #320]	@ (800b178 <HAL_GPIO_Init+0x34c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d007      	beq.n	800b04a <HAL_GPIO_Init+0x21e>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a4f      	ldr	r2, [pc, #316]	@ (800b17c <HAL_GPIO_Init+0x350>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d101      	bne.n	800b046 <HAL_GPIO_Init+0x21a>
 800b042:	2309      	movs	r3, #9
 800b044:	e012      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b046:	230a      	movs	r3, #10
 800b048:	e010      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b04a:	2308      	movs	r3, #8
 800b04c:	e00e      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b04e:	2307      	movs	r3, #7
 800b050:	e00c      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b052:	2306      	movs	r3, #6
 800b054:	e00a      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b056:	2305      	movs	r3, #5
 800b058:	e008      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b05a:	2304      	movs	r3, #4
 800b05c:	e006      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b05e:	2303      	movs	r3, #3
 800b060:	e004      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b062:	2302      	movs	r3, #2
 800b064:	e002      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <HAL_GPIO_Init+0x240>
 800b06a:	2300      	movs	r3, #0
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	f002 0203 	and.w	r2, r2, #3
 800b072:	0092      	lsls	r2, r2, #2
 800b074:	4093      	lsls	r3, r2
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	4313      	orrs	r3, r2
 800b07a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b07c:	4935      	ldr	r1, [pc, #212]	@ (800b154 <HAL_GPIO_Init+0x328>)
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	089b      	lsrs	r3, r3, #2
 800b082:	3302      	adds	r3, #2
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b08a:	4b3d      	ldr	r3, [pc, #244]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	43db      	mvns	r3, r3
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	4013      	ands	r3, r2
 800b098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b0ae:	4a34      	ldr	r2, [pc, #208]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0b4:	4b32      	ldr	r3, [pc, #200]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	69ba      	ldr	r2, [r7, #24]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b0d8:	4a29      	ldr	r2, [pc, #164]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b0de:	4b28      	ldr	r3, [pc, #160]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	43db      	mvns	r3, r3
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b102:	4a1f      	ldr	r2, [pc, #124]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b108:	4b1d      	ldr	r3, [pc, #116]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	43db      	mvns	r3, r3
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	4013      	ands	r3, r2
 800b116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d003      	beq.n	800b12c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b12c:	4a14      	ldr	r2, [pc, #80]	@ (800b180 <HAL_GPIO_Init+0x354>)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	3301      	adds	r3, #1
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	2b0f      	cmp	r3, #15
 800b13c:	f67f ae86 	bls.w	800ae4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	3724      	adds	r7, #36	@ 0x24
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	40023800 	.word	0x40023800
 800b154:	40013800 	.word	0x40013800
 800b158:	40020000 	.word	0x40020000
 800b15c:	40020400 	.word	0x40020400
 800b160:	40020800 	.word	0x40020800
 800b164:	40020c00 	.word	0x40020c00
 800b168:	40021000 	.word	0x40021000
 800b16c:	40021400 	.word	0x40021400
 800b170:	40021800 	.word	0x40021800
 800b174:	40021c00 	.word	0x40021c00
 800b178:	40022000 	.word	0x40022000
 800b17c:	40022400 	.word	0x40022400
 800b180:	40013c00 	.word	0x40013c00

0800b184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	887b      	ldrh	r3, [r7, #2]
 800b196:	4013      	ands	r3, r2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e001      	b.n	800b1a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	807b      	strh	r3, [r7, #2]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1c4:	787b      	ldrb	r3, [r7, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1ca:	887a      	ldrh	r2, [r7, #2]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b1d0:	e003      	b.n	800b1da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b1d2:	887b      	ldrh	r3, [r7, #2]
 800b1d4:	041a      	lsls	r2, r3, #16
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	619a      	str	r2, [r3, #24]
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b1f8:	887a      	ldrh	r2, [r7, #2]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	041a      	lsls	r2, r3, #16
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	43d9      	mvns	r1, r3
 800b204:	887b      	ldrh	r3, [r7, #2]
 800b206:	400b      	ands	r3, r1
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	619a      	str	r2, [r3, #24]
}
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b220:	4b05      	ldr	r3, [pc, #20]	@ (800b238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a04      	ldr	r2, [pc, #16]	@ (800b238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b22a:	6013      	str	r3, [r2, #0]
}
 800b22c:	bf00      	nop
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	40007000 	.word	0x40007000

0800b23c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b246:	4b23      	ldr	r3, [pc, #140]	@ (800b2d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24a:	4a22      	ldr	r2, [pc, #136]	@ (800b2d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b24c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b250:	6413      	str	r3, [r2, #64]	@ 0x40
 800b252:	4b20      	ldr	r3, [pc, #128]	@ (800b2d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b25e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b268:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b26a:	f7fe fa47 	bl	80096fc <HAL_GetTick>
 800b26e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b270:	e009      	b.n	800b286 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b272:	f7fe fa43 	bl	80096fc <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b280:	d901      	bls.n	800b286 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e022      	b.n	800b2cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b286:	4b14      	ldr	r3, [pc, #80]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b28e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b292:	d1ee      	bne.n	800b272 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b294:	4b10      	ldr	r3, [pc, #64]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a0f      	ldr	r2, [pc, #60]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b29a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b29e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2a0:	f7fe fa2c 	bl	80096fc <HAL_GetTick>
 800b2a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2a6:	e009      	b.n	800b2bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2a8:	f7fe fa28 	bl	80096fc <HAL_GetTick>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2b6:	d901      	bls.n	800b2bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e007      	b.n	800b2cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2bc:	4b06      	ldr	r3, [pc, #24]	@ (800b2d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2c8:	d1ee      	bne.n	800b2a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40023800 	.word	0x40023800
 800b2d8:	40007000 	.word	0x40007000

0800b2dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e291      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 8087 	beq.w	800b40e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b300:	4b96      	ldr	r3, [pc, #600]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 030c 	and.w	r3, r3, #12
 800b308:	2b04      	cmp	r3, #4
 800b30a:	d00c      	beq.n	800b326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b30c:	4b93      	ldr	r3, [pc, #588]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f003 030c 	and.w	r3, r3, #12
 800b314:	2b08      	cmp	r3, #8
 800b316:	d112      	bne.n	800b33e <HAL_RCC_OscConfig+0x62>
 800b318:	4b90      	ldr	r3, [pc, #576]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b324:	d10b      	bne.n	800b33e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b326:	4b8d      	ldr	r3, [pc, #564]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d06c      	beq.n	800b40c <HAL_RCC_OscConfig+0x130>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d168      	bne.n	800b40c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e26b      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b346:	d106      	bne.n	800b356 <HAL_RCC_OscConfig+0x7a>
 800b348:	4b84      	ldr	r3, [pc, #528]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a83      	ldr	r2, [pc, #524]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b34e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	e02e      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd8>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10c      	bne.n	800b378 <HAL_RCC_OscConfig+0x9c>
 800b35e:	4b7f      	ldr	r3, [pc, #508]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a7e      	ldr	r2, [pc, #504]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b368:	6013      	str	r3, [r2, #0]
 800b36a:	4b7c      	ldr	r3, [pc, #496]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a7b      	ldr	r2, [pc, #492]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	e01d      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b380:	d10c      	bne.n	800b39c <HAL_RCC_OscConfig+0xc0>
 800b382:	4b76      	ldr	r3, [pc, #472]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a75      	ldr	r2, [pc, #468]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4b73      	ldr	r3, [pc, #460]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a72      	ldr	r2, [pc, #456]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	e00b      	b.n	800b3b4 <HAL_RCC_OscConfig+0xd8>
 800b39c:	4b6f      	ldr	r3, [pc, #444]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a6e      	ldr	r2, [pc, #440]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b3a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	4b6c      	ldr	r3, [pc, #432]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a6b      	ldr	r2, [pc, #428]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b3ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d013      	beq.n	800b3e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3bc:	f7fe f99e 	bl	80096fc <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3c2:	e008      	b.n	800b3d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3c4:	f7fe f99a 	bl	80096fc <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b64      	cmp	r3, #100	@ 0x64
 800b3d0:	d901      	bls.n	800b3d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e21f      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3d6:	4b61      	ldr	r3, [pc, #388]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0f0      	beq.n	800b3c4 <HAL_RCC_OscConfig+0xe8>
 800b3e2:	e014      	b.n	800b40e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e4:	f7fe f98a 	bl	80096fc <HAL_GetTick>
 800b3e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3ea:	e008      	b.n	800b3fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ec:	f7fe f986 	bl	80096fc <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	2b64      	cmp	r3, #100	@ 0x64
 800b3f8:	d901      	bls.n	800b3fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e20b      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3fe:	4b57      	ldr	r3, [pc, #348]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f0      	bne.n	800b3ec <HAL_RCC_OscConfig+0x110>
 800b40a:	e000      	b.n	800b40e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b40c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d069      	beq.n	800b4ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b41a:	4b50      	ldr	r3, [pc, #320]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f003 030c 	and.w	r3, r3, #12
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b426:	4b4d      	ldr	r3, [pc, #308]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f003 030c 	and.w	r3, r3, #12
 800b42e:	2b08      	cmp	r3, #8
 800b430:	d11c      	bne.n	800b46c <HAL_RCC_OscConfig+0x190>
 800b432:	4b4a      	ldr	r3, [pc, #296]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d116      	bne.n	800b46c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b43e:	4b47      	ldr	r3, [pc, #284]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <HAL_RCC_OscConfig+0x17a>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d001      	beq.n	800b456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e1df      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b456:	4b41      	ldr	r3, [pc, #260]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	493d      	ldr	r1, [pc, #244]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b466:	4313      	orrs	r3, r2
 800b468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b46a:	e040      	b.n	800b4ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d023      	beq.n	800b4bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b474:	4b39      	ldr	r3, [pc, #228]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a38      	ldr	r2, [pc, #224]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b47a:	f043 0301 	orr.w	r3, r3, #1
 800b47e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b480:	f7fe f93c 	bl	80096fc <HAL_GetTick>
 800b484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b486:	e008      	b.n	800b49a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b488:	f7fe f938 	bl	80096fc <HAL_GetTick>
 800b48c:	4602      	mov	r2, r0
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	2b02      	cmp	r3, #2
 800b494:	d901      	bls.n	800b49a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e1bd      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b49a:	4b30      	ldr	r3, [pc, #192]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0f0      	beq.n	800b488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4929      	ldr	r1, [pc, #164]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	600b      	str	r3, [r1, #0]
 800b4ba:	e018      	b.n	800b4ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4bc:	4b27      	ldr	r3, [pc, #156]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a26      	ldr	r2, [pc, #152]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b4c2:	f023 0301 	bic.w	r3, r3, #1
 800b4c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c8:	f7fe f918 	bl	80096fc <HAL_GetTick>
 800b4cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4ce:	e008      	b.n	800b4e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4d0:	f7fe f914 	bl	80096fc <HAL_GetTick>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d901      	bls.n	800b4e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e199      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 0302 	and.w	r3, r3, #2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1f0      	bne.n	800b4d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d038      	beq.n	800b56c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d019      	beq.n	800b536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b502:	4b16      	ldr	r3, [pc, #88]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b506:	4a15      	ldr	r2, [pc, #84]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b508:	f043 0301 	orr.w	r3, r3, #1
 800b50c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b50e:	f7fe f8f5 	bl	80096fc <HAL_GetTick>
 800b512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b514:	e008      	b.n	800b528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b516:	f7fe f8f1 	bl	80096fc <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d901      	bls.n	800b528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e176      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b528:	4b0c      	ldr	r3, [pc, #48]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b52a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0f0      	beq.n	800b516 <HAL_RCC_OscConfig+0x23a>
 800b534:	e01a      	b.n	800b56c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b536:	4b09      	ldr	r3, [pc, #36]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b53a:	4a08      	ldr	r2, [pc, #32]	@ (800b55c <HAL_RCC_OscConfig+0x280>)
 800b53c:	f023 0301 	bic.w	r3, r3, #1
 800b540:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b542:	f7fe f8db 	bl	80096fc <HAL_GetTick>
 800b546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b548:	e00a      	b.n	800b560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b54a:	f7fe f8d7 	bl	80096fc <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b02      	cmp	r3, #2
 800b556:	d903      	bls.n	800b560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e15c      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
 800b55c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b560:	4b91      	ldr	r3, [pc, #580]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1ee      	bne.n	800b54a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0304 	and.w	r3, r3, #4
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80a4 	beq.w	800b6c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b57a:	4b8b      	ldr	r3, [pc, #556]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10d      	bne.n	800b5a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b586:	4b88      	ldr	r3, [pc, #544]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b58a:	4a87      	ldr	r2, [pc, #540]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b58c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b590:	6413      	str	r3, [r2, #64]	@ 0x40
 800b592:	4b85      	ldr	r3, [pc, #532]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b59a:	60bb      	str	r3, [r7, #8]
 800b59c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5a2:	4b82      	ldr	r3, [pc, #520]	@ (800b7ac <HAL_RCC_OscConfig+0x4d0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d118      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b5ae:	4b7f      	ldr	r3, [pc, #508]	@ (800b7ac <HAL_RCC_OscConfig+0x4d0>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a7e      	ldr	r2, [pc, #504]	@ (800b7ac <HAL_RCC_OscConfig+0x4d0>)
 800b5b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5ba:	f7fe f89f 	bl	80096fc <HAL_GetTick>
 800b5be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5c0:	e008      	b.n	800b5d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5c2:	f7fe f89b 	bl	80096fc <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b64      	cmp	r3, #100	@ 0x64
 800b5ce:	d901      	bls.n	800b5d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e120      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5d4:	4b75      	ldr	r3, [pc, #468]	@ (800b7ac <HAL_RCC_OscConfig+0x4d0>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f0      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d106      	bne.n	800b5f6 <HAL_RCC_OscConfig+0x31a>
 800b5e8:	4b6f      	ldr	r3, [pc, #444]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b5ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5ec:	4a6e      	ldr	r2, [pc, #440]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5f4:	e02d      	b.n	800b652 <HAL_RCC_OscConfig+0x376>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10c      	bne.n	800b618 <HAL_RCC_OscConfig+0x33c>
 800b5fe:	4b6a      	ldr	r3, [pc, #424]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b602:	4a69      	ldr	r2, [pc, #420]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b604:	f023 0301 	bic.w	r3, r3, #1
 800b608:	6713      	str	r3, [r2, #112]	@ 0x70
 800b60a:	4b67      	ldr	r3, [pc, #412]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b60c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b60e:	4a66      	ldr	r2, [pc, #408]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b610:	f023 0304 	bic.w	r3, r3, #4
 800b614:	6713      	str	r3, [r2, #112]	@ 0x70
 800b616:	e01c      	b.n	800b652 <HAL_RCC_OscConfig+0x376>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	2b05      	cmp	r3, #5
 800b61e:	d10c      	bne.n	800b63a <HAL_RCC_OscConfig+0x35e>
 800b620:	4b61      	ldr	r3, [pc, #388]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b624:	4a60      	ldr	r2, [pc, #384]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b626:	f043 0304 	orr.w	r3, r3, #4
 800b62a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b62c:	4b5e      	ldr	r3, [pc, #376]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b630:	4a5d      	ldr	r2, [pc, #372]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	6713      	str	r3, [r2, #112]	@ 0x70
 800b638:	e00b      	b.n	800b652 <HAL_RCC_OscConfig+0x376>
 800b63a:	4b5b      	ldr	r3, [pc, #364]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b63e:	4a5a      	ldr	r2, [pc, #360]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b640:	f023 0301 	bic.w	r3, r3, #1
 800b644:	6713      	str	r3, [r2, #112]	@ 0x70
 800b646:	4b58      	ldr	r3, [pc, #352]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b64a:	4a57      	ldr	r2, [pc, #348]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b64c:	f023 0304 	bic.w	r3, r3, #4
 800b650:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d015      	beq.n	800b686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b65a:	f7fe f84f 	bl	80096fc <HAL_GetTick>
 800b65e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b660:	e00a      	b.n	800b678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b662:	f7fe f84b 	bl	80096fc <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b670:	4293      	cmp	r3, r2
 800b672:	d901      	bls.n	800b678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e0ce      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b678:	4b4b      	ldr	r3, [pc, #300]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b67a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0ee      	beq.n	800b662 <HAL_RCC_OscConfig+0x386>
 800b684:	e014      	b.n	800b6b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b686:	f7fe f839 	bl	80096fc <HAL_GetTick>
 800b68a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b68c:	e00a      	b.n	800b6a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b68e:	f7fe f835 	bl	80096fc <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e0b8      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6a4:	4b40      	ldr	r3, [pc, #256]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1ee      	bne.n	800b68e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d105      	bne.n	800b6c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6b6:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ba:	4a3b      	ldr	r2, [pc, #236]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 80a4 	beq.w	800b814 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6cc:	4b36      	ldr	r3, [pc, #216]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f003 030c 	and.w	r3, r3, #12
 800b6d4:	2b08      	cmp	r3, #8
 800b6d6:	d06b      	beq.n	800b7b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d149      	bne.n	800b774 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6e0:	4b31      	ldr	r3, [pc, #196]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a30      	ldr	r2, [pc, #192]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b6e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6ec:	f7fe f806 	bl	80096fc <HAL_GetTick>
 800b6f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6f2:	e008      	b.n	800b706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6f4:	f7fe f802 	bl	80096fc <HAL_GetTick>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d901      	bls.n	800b706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	e087      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b706:	4b28      	ldr	r3, [pc, #160]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f0      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	69da      	ldr	r2, [r3, #28]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b720:	019b      	lsls	r3, r3, #6
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	085b      	lsrs	r3, r3, #1
 800b72a:	3b01      	subs	r3, #1
 800b72c:	041b      	lsls	r3, r3, #16
 800b72e:	431a      	orrs	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	061b      	lsls	r3, r3, #24
 800b736:	4313      	orrs	r3, r2
 800b738:	4a1b      	ldr	r2, [pc, #108]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b73a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b73e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b740:	4b19      	ldr	r3, [pc, #100]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a18      	ldr	r2, [pc, #96]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b74a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b74c:	f7fd ffd6 	bl	80096fc <HAL_GetTick>
 800b750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b752:	e008      	b.n	800b766 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b754:	f7fd ffd2 	bl	80096fc <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d901      	bls.n	800b766 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e057      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b766:	4b10      	ldr	r3, [pc, #64]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0f0      	beq.n	800b754 <HAL_RCC_OscConfig+0x478>
 800b772:	e04f      	b.n	800b814 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b774:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a0b      	ldr	r2, [pc, #44]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b77a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b77e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b780:	f7fd ffbc 	bl	80096fc <HAL_GetTick>
 800b784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b786:	e008      	b.n	800b79a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b788:	f7fd ffb8 	bl	80096fc <HAL_GetTick>
 800b78c:	4602      	mov	r2, r0
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	2b02      	cmp	r3, #2
 800b794:	d901      	bls.n	800b79a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e03d      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b79a:	4b03      	ldr	r3, [pc, #12]	@ (800b7a8 <HAL_RCC_OscConfig+0x4cc>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1f0      	bne.n	800b788 <HAL_RCC_OscConfig+0x4ac>
 800b7a6:	e035      	b.n	800b814 <HAL_RCC_OscConfig+0x538>
 800b7a8:	40023800 	.word	0x40023800
 800b7ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b7b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b820 <HAL_RCC_OscConfig+0x544>)
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d028      	beq.n	800b810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d121      	bne.n	800b810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d11a      	bne.n	800b810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b7e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d111      	bne.n	800b810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f6:	085b      	lsrs	r3, r3, #1
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d107      	bne.n	800b810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d001      	beq.n	800b814 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	40023800 	.word	0x40023800

0800b824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e0d0      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b83c:	4b6a      	ldr	r3, [pc, #424]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d910      	bls.n	800b86c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b84a:	4b67      	ldr	r3, [pc, #412]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f023 020f 	bic.w	r2, r3, #15
 800b852:	4965      	ldr	r1, [pc, #404]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	4313      	orrs	r3, r2
 800b858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b85a:	4b63      	ldr	r3, [pc, #396]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d001      	beq.n	800b86c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e0b8      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d020      	beq.n	800b8ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	d005      	beq.n	800b890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b884:	4b59      	ldr	r3, [pc, #356]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	4a58      	ldr	r2, [pc, #352]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b88a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b88e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0308 	and.w	r3, r3, #8
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d005      	beq.n	800b8a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b89c:	4b53      	ldr	r3, [pc, #332]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	4a52      	ldr	r2, [pc, #328]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b8a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8a8:	4b50      	ldr	r3, [pc, #320]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	494d      	ldr	r1, [pc, #308]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d040      	beq.n	800b948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d107      	bne.n	800b8de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8ce:	4b47      	ldr	r3, [pc, #284]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d115      	bne.n	800b906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e07f      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d107      	bne.n	800b8f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8e6:	4b41      	ldr	r3, [pc, #260]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d109      	bne.n	800b906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e073      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8f6:	4b3d      	ldr	r3, [pc, #244]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0302 	and.w	r3, r3, #2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e06b      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b906:	4b39      	ldr	r3, [pc, #228]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f023 0203 	bic.w	r2, r3, #3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	4936      	ldr	r1, [pc, #216]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b914:	4313      	orrs	r3, r2
 800b916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b918:	f7fd fef0 	bl	80096fc <HAL_GetTick>
 800b91c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b91e:	e00a      	b.n	800b936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b920:	f7fd feec 	bl	80096fc <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b92e:	4293      	cmp	r3, r2
 800b930:	d901      	bls.n	800b936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e053      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b936:	4b2d      	ldr	r3, [pc, #180]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 020c 	and.w	r2, r3, #12
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	429a      	cmp	r2, r3
 800b946:	d1eb      	bne.n	800b920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b948:	4b27      	ldr	r3, [pc, #156]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 030f 	and.w	r3, r3, #15
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d210      	bcs.n	800b978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b956:	4b24      	ldr	r3, [pc, #144]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f023 020f 	bic.w	r2, r3, #15
 800b95e:	4922      	ldr	r1, [pc, #136]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	4313      	orrs	r3, r2
 800b964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b966:	4b20      	ldr	r3, [pc, #128]	@ (800b9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d001      	beq.n	800b978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e032      	b.n	800b9de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b984:	4b19      	ldr	r3, [pc, #100]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	4916      	ldr	r1, [pc, #88]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b992:	4313      	orrs	r3, r2
 800b994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0308 	and.w	r3, r3, #8
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b9a2:	4b12      	ldr	r3, [pc, #72]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	490e      	ldr	r1, [pc, #56]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b9b6:	f000 f821 	bl	800b9fc <HAL_RCC_GetSysClockFreq>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ec <HAL_RCC_ClockConfig+0x1c8>)
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	091b      	lsrs	r3, r3, #4
 800b9c2:	f003 030f 	and.w	r3, r3, #15
 800b9c6:	490a      	ldr	r1, [pc, #40]	@ (800b9f0 <HAL_RCC_ClockConfig+0x1cc>)
 800b9c8:	5ccb      	ldrb	r3, [r1, r3]
 800b9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ce:	4a09      	ldr	r2, [pc, #36]	@ (800b9f4 <HAL_RCC_ClockConfig+0x1d0>)
 800b9d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b9d2:	4b09      	ldr	r3, [pc, #36]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1d4>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fd fc8a 	bl	80092f0 <HAL_InitTick>

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	40023c00 	.word	0x40023c00
 800b9ec:	40023800 	.word	0x40023800
 800b9f0:	080159dc 	.word	0x080159dc
 800b9f4:	20000060 	.word	0x20000060
 800b9f8:	20000064 	.word	0x20000064

0800b9fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba00:	b094      	sub	sp, #80	@ 0x50
 800ba02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba08:	2300      	movs	r3, #0
 800ba0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba14:	4b79      	ldr	r3, [pc, #484]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	f003 030c 	and.w	r3, r3, #12
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	d00d      	beq.n	800ba3c <HAL_RCC_GetSysClockFreq+0x40>
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	f200 80e1 	bhi.w	800bbe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <HAL_RCC_GetSysClockFreq+0x34>
 800ba2a:	2b04      	cmp	r3, #4
 800ba2c:	d003      	beq.n	800ba36 <HAL_RCC_GetSysClockFreq+0x3a>
 800ba2e:	e0db      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ba30:	4b73      	ldr	r3, [pc, #460]	@ (800bc00 <HAL_RCC_GetSysClockFreq+0x204>)
 800ba32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ba34:	e0db      	b.n	800bbee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ba36:	4b73      	ldr	r3, [pc, #460]	@ (800bc04 <HAL_RCC_GetSysClockFreq+0x208>)
 800ba38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ba3a:	e0d8      	b.n	800bbee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba3c:	4b6f      	ldr	r3, [pc, #444]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ba46:	4b6d      	ldr	r3, [pc, #436]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d063      	beq.n	800bb1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba52:	4b6a      	ldr	r3, [pc, #424]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	099b      	lsrs	r3, r3, #6
 800ba58:	2200      	movs	r2, #0
 800ba5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba64:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba66:	2300      	movs	r3, #0
 800ba68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ba6e:	4622      	mov	r2, r4
 800ba70:	462b      	mov	r3, r5
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f04f 0100 	mov.w	r1, #0
 800ba7a:	0159      	lsls	r1, r3, #5
 800ba7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba80:	0150      	lsls	r0, r2, #5
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4621      	mov	r1, r4
 800ba88:	1a51      	subs	r1, r2, r1
 800ba8a:	6139      	str	r1, [r7, #16]
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	eb63 0301 	sbc.w	r3, r3, r1
 800ba92:	617b      	str	r3, [r7, #20]
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800baa0:	4659      	mov	r1, fp
 800baa2:	018b      	lsls	r3, r1, #6
 800baa4:	4651      	mov	r1, sl
 800baa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800baaa:	4651      	mov	r1, sl
 800baac:	018a      	lsls	r2, r1, #6
 800baae:	4651      	mov	r1, sl
 800bab0:	ebb2 0801 	subs.w	r8, r2, r1
 800bab4:	4659      	mov	r1, fp
 800bab6:	eb63 0901 	sbc.w	r9, r3, r1
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	f04f 0300 	mov.w	r3, #0
 800bac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800baca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bace:	4690      	mov	r8, r2
 800bad0:	4699      	mov	r9, r3
 800bad2:	4623      	mov	r3, r4
 800bad4:	eb18 0303 	adds.w	r3, r8, r3
 800bad8:	60bb      	str	r3, [r7, #8]
 800bada:	462b      	mov	r3, r5
 800badc:	eb49 0303 	adc.w	r3, r9, r3
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	f04f 0200 	mov.w	r2, #0
 800bae6:	f04f 0300 	mov.w	r3, #0
 800baea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800baee:	4629      	mov	r1, r5
 800baf0:	024b      	lsls	r3, r1, #9
 800baf2:	4621      	mov	r1, r4
 800baf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800baf8:	4621      	mov	r1, r4
 800bafa:	024a      	lsls	r2, r1, #9
 800bafc:	4610      	mov	r0, r2
 800bafe:	4619      	mov	r1, r3
 800bb00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb02:	2200      	movs	r2, #0
 800bb04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bb0c:	f7f5 f876 	bl	8000bfc <__aeabi_uldivmod>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4613      	mov	r3, r2
 800bb16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb18:	e058      	b.n	800bbcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb1a:	4b38      	ldr	r3, [pc, #224]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	099b      	lsrs	r3, r3, #6
 800bb20:	2200      	movs	r2, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	4611      	mov	r1, r2
 800bb26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800bb34:	4642      	mov	r2, r8
 800bb36:	464b      	mov	r3, r9
 800bb38:	f04f 0000 	mov.w	r0, #0
 800bb3c:	f04f 0100 	mov.w	r1, #0
 800bb40:	0159      	lsls	r1, r3, #5
 800bb42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bb46:	0150      	lsls	r0, r2, #5
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	ebb2 0a01 	subs.w	sl, r2, r1
 800bb52:	4649      	mov	r1, r9
 800bb54:	eb63 0b01 	sbc.w	fp, r3, r1
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800bb64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800bb68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800bb6c:	ebb2 040a 	subs.w	r4, r2, sl
 800bb70:	eb63 050b 	sbc.w	r5, r3, fp
 800bb74:	f04f 0200 	mov.w	r2, #0
 800bb78:	f04f 0300 	mov.w	r3, #0
 800bb7c:	00eb      	lsls	r3, r5, #3
 800bb7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb82:	00e2      	lsls	r2, r4, #3
 800bb84:	4614      	mov	r4, r2
 800bb86:	461d      	mov	r5, r3
 800bb88:	4643      	mov	r3, r8
 800bb8a:	18e3      	adds	r3, r4, r3
 800bb8c:	603b      	str	r3, [r7, #0]
 800bb8e:	464b      	mov	r3, r9
 800bb90:	eb45 0303 	adc.w	r3, r5, r3
 800bb94:	607b      	str	r3, [r7, #4]
 800bb96:	f04f 0200 	mov.w	r2, #0
 800bb9a:	f04f 0300 	mov.w	r3, #0
 800bb9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bba2:	4629      	mov	r1, r5
 800bba4:	028b      	lsls	r3, r1, #10
 800bba6:	4621      	mov	r1, r4
 800bba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bbac:	4621      	mov	r1, r4
 800bbae:	028a      	lsls	r2, r1, #10
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	61bb      	str	r3, [r7, #24]
 800bbba:	61fa      	str	r2, [r7, #28]
 800bbbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbc0:	f7f5 f81c 	bl	8000bfc <__aeabi_uldivmod>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4613      	mov	r3, r2
 800bbca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x200>)
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	0c1b      	lsrs	r3, r3, #16
 800bbd2:	f003 0303 	and.w	r3, r3, #3
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800bbdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800bbe6:	e002      	b.n	800bbee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bbe8:	4b05      	ldr	r3, [pc, #20]	@ (800bc00 <HAL_RCC_GetSysClockFreq+0x204>)
 800bbea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800bbec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bbee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3750      	adds	r7, #80	@ 0x50
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbfa:	bf00      	nop
 800bbfc:	40023800 	.word	0x40023800
 800bc00:	00f42400 	.word	0x00f42400
 800bc04:	007a1200 	.word	0x007a1200

0800bc08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc0c:	4b03      	ldr	r3, [pc, #12]	@ (800bc1c <HAL_RCC_GetHCLKFreq+0x14>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000060 	.word	0x20000060

0800bc20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc24:	f7ff fff0 	bl	800bc08 <HAL_RCC_GetHCLKFreq>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	4b05      	ldr	r3, [pc, #20]	@ (800bc40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	0a9b      	lsrs	r3, r3, #10
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	4903      	ldr	r1, [pc, #12]	@ (800bc44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc36:	5ccb      	ldrb	r3, [r1, r3]
 800bc38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	40023800 	.word	0x40023800
 800bc44:	080159ec 	.word	0x080159ec

0800bc48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bc4c:	f7ff ffdc 	bl	800bc08 <HAL_RCC_GetHCLKFreq>
 800bc50:	4602      	mov	r2, r0
 800bc52:	4b05      	ldr	r3, [pc, #20]	@ (800bc68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	0b5b      	lsrs	r3, r3, #13
 800bc58:	f003 0307 	and.w	r3, r3, #7
 800bc5c:	4903      	ldr	r1, [pc, #12]	@ (800bc6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc5e:	5ccb      	ldrb	r3, [r1, r3]
 800bc60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40023800 	.word	0x40023800
 800bc6c:	080159ec 	.word	0x080159ec

0800bc70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	220f      	movs	r2, #15
 800bc7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bc80:	4b12      	ldr	r3, [pc, #72]	@ (800bccc <HAL_RCC_GetClockConfig+0x5c>)
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	f003 0203 	and.w	r2, r3, #3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	@ (800bccc <HAL_RCC_GetClockConfig+0x5c>)
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bc98:	4b0c      	ldr	r3, [pc, #48]	@ (800bccc <HAL_RCC_GetClockConfig+0x5c>)
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bca4:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <HAL_RCC_GetClockConfig+0x5c>)
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	08db      	lsrs	r3, r3, #3
 800bcaa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bcb2:	4b07      	ldr	r3, [pc, #28]	@ (800bcd0 <HAL_RCC_GetClockConfig+0x60>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 020f 	and.w	r2, r3, #15
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	601a      	str	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	40023800 	.word	0x40023800
 800bcd0:	40023c00 	.word	0x40023c00

0800bcd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d012      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bcfc:	4b69      	ldr	r3, [pc, #420]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	4a68      	ldr	r2, [pc, #416]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bd06:	6093      	str	r3, [r2, #8]
 800bd08:	4b66      	ldr	r3, [pc, #408]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd10:	4964      	ldr	r1, [pc, #400]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d017      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd2e:	4b5d      	ldr	r3, [pc, #372]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd3c:	4959      	ldr	r1, [pc, #356]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd4c:	d101      	bne.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d017      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd6a:	4b4e      	ldr	r3, [pc, #312]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd78:	494a      	ldr	r1, [pc, #296]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd88:	d101      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bd96:	2301      	movs	r3, #1
 800bd98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bda6:	2301      	movs	r3, #1
 800bda8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 808b 	beq.w	800bece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdb8:	4b3a      	ldr	r3, [pc, #232]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbc:	4a39      	ldr	r2, [pc, #228]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdc2:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdc4:	4b37      	ldr	r3, [pc, #220]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdcc:	60bb      	str	r3, [r7, #8]
 800bdce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bdd0:	4b35      	ldr	r3, [pc, #212]	@ (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a34      	ldr	r2, [pc, #208]	@ (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bddc:	f7fd fc8e 	bl	80096fc <HAL_GetTick>
 800bde0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bde2:	e008      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bde4:	f7fd fc8a 	bl	80096fc <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	2b64      	cmp	r3, #100	@ 0x64
 800bdf0:	d901      	bls.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e357      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdf6:	4b2c      	ldr	r3, [pc, #176]	@ (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0f0      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800be02:	4b28      	ldr	r3, [pc, #160]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d035      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d02e      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be20:	4b20      	ldr	r3, [pc, #128]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800be2a:	4b1e      	ldr	r3, [pc, #120]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be34:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800be36:	4b1b      	ldr	r3, [pc, #108]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be3a:	4a1a      	ldr	r2, [pc, #104]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800be42:	4a18      	ldr	r2, [pc, #96]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800be48:	4b16      	ldr	r3, [pc, #88]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b01      	cmp	r3, #1
 800be52:	d114      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be54:	f7fd fc52 	bl	80096fc <HAL_GetTick>
 800be58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be5a:	e00a      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be5c:	f7fd fc4e 	bl	80096fc <HAL_GetTick>
 800be60:	4602      	mov	r2, r0
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d901      	bls.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e319      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be72:	4b0c      	ldr	r3, [pc, #48]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be76:	f003 0302 	and.w	r3, r3, #2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ee      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be8a:	d111      	bne.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800be8c:	4b05      	ldr	r3, [pc, #20]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800be98:	4b04      	ldr	r3, [pc, #16]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800be9a:	400b      	ands	r3, r1
 800be9c:	4901      	ldr	r1, [pc, #4]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	608b      	str	r3, [r1, #8]
 800bea2:	e00b      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bea4:	40023800 	.word	0x40023800
 800bea8:	40007000 	.word	0x40007000
 800beac:	0ffffcff 	.word	0x0ffffcff
 800beb0:	4baa      	ldr	r3, [pc, #680]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	4aa9      	ldr	r2, [pc, #676]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beb6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800beba:	6093      	str	r3, [r2, #8]
 800bebc:	4ba7      	ldr	r3, [pc, #668]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bebe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bec8:	49a4      	ldr	r1, [pc, #656]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beca:	4313      	orrs	r3, r2
 800becc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0310 	and.w	r3, r3, #16
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d010      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800beda:	4ba0      	ldr	r3, [pc, #640]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bedc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bee0:	4a9e      	ldr	r2, [pc, #632]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800beea:	4b9c      	ldr	r3, [pc, #624]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef4:	4999      	ldr	r1, [pc, #612]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00a      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf08:	4b94      	ldr	r3, [pc, #592]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf16:	4991      	ldr	r1, [pc, #580]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf2a:	4b8c      	ldr	r3, [pc, #560]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf38:	4988      	ldr	r1, [pc, #544]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf4c:	4b83      	ldr	r3, [pc, #524]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf5a:	4980      	ldr	r1, [pc, #512]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf6e:	4b7b      	ldr	r3, [pc, #492]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf7c:	4977      	ldr	r1, [pc, #476]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00a      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf90:	4b72      	ldr	r3, [pc, #456]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf96:	f023 0203 	bic.w	r2, r3, #3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9e:	496f      	ldr	r1, [pc, #444]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bfb2:	4b6a      	ldr	r3, [pc, #424]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb8:	f023 020c 	bic.w	r2, r3, #12
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfc0:	4966      	ldr	r1, [pc, #408]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfd4:	4b61      	ldr	r3, [pc, #388]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfe2:	495e      	ldr	r1, [pc, #376]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bff6:	4b59      	ldr	r3, [pc, #356]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bffc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c004:	4955      	ldr	r1, [pc, #340]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00a      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c018:	4b50      	ldr	r3, [pc, #320]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c01e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c026:	494d      	ldr	r1, [pc, #308]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c03a:	4b48      	ldr	r3, [pc, #288]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c040:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c048:	4944      	ldr	r1, [pc, #272]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c05c:	4b3f      	ldr	r3, [pc, #252]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c062:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c06a:	493c      	ldr	r1, [pc, #240]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c07e:	4b37      	ldr	r3, [pc, #220]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c084:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c08c:	4933      	ldr	r1, [pc, #204]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c0a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0ae:	492b      	ldr	r1, [pc, #172]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d011      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c0c2:	4b26      	ldr	r3, [pc, #152]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0d0:	4922      	ldr	r1, [pc, #136]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0e0:	d101      	bne.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0308 	and.w	r3, r3, #8
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c102:	4b16      	ldr	r3, [pc, #88]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c108:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c110:	4912      	ldr	r1, [pc, #72]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c112:	4313      	orrs	r3, r2
 800c114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c124:	4b0d      	ldr	r3, [pc, #52]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c12a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c134:	4909      	ldr	r1, [pc, #36]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c136:	4313      	orrs	r3, r2
 800c138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d006      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80d9 	beq.w	800c302 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c150:	4b02      	ldr	r3, [pc, #8]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a01      	ldr	r2, [pc, #4]	@ (800c15c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c156:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c15a:	e001      	b.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c15c:	40023800 	.word	0x40023800
 800c160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c162:	f7fd facb 	bl	80096fc <HAL_GetTick>
 800c166:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c168:	e008      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c16a:	f7fd fac7 	bl	80096fc <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	2b64      	cmp	r3, #100	@ 0x64
 800c176:	d901      	bls.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e194      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c17c:	4b6c      	ldr	r3, [pc, #432]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1f0      	bne.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d021      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d11d      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c19c:	4b64      	ldr	r3, [pc, #400]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1a2:	0c1b      	lsrs	r3, r3, #16
 800c1a4:	f003 0303 	and.w	r3, r3, #3
 800c1a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1aa:	4b61      	ldr	r3, [pc, #388]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1b0:	0e1b      	lsrs	r3, r3, #24
 800c1b2:	f003 030f 	and.w	r3, r3, #15
 800c1b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	019a      	lsls	r2, r3, #6
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	041b      	lsls	r3, r3, #16
 800c1c2:	431a      	orrs	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	061b      	lsls	r3, r3, #24
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	071b      	lsls	r3, r3, #28
 800c1d0:	4957      	ldr	r1, [pc, #348]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1ec:	d00a      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d02e      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c202:	d129      	bne.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c204:	4b4a      	ldr	r3, [pc, #296]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c20a:	0c1b      	lsrs	r3, r3, #16
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c212:	4b47      	ldr	r3, [pc, #284]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c218:	0f1b      	lsrs	r3, r3, #28
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	019a      	lsls	r2, r3, #6
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	041b      	lsls	r3, r3, #16
 800c22a:	431a      	orrs	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	061b      	lsls	r3, r3, #24
 800c232:	431a      	orrs	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	071b      	lsls	r3, r3, #28
 800c238:	493d      	ldr	r1, [pc, #244]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c23a:	4313      	orrs	r3, r2
 800c23c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c240:	4b3b      	ldr	r3, [pc, #236]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c246:	f023 021f 	bic.w	r2, r3, #31
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	3b01      	subs	r3, #1
 800c250:	4937      	ldr	r1, [pc, #220]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c252:	4313      	orrs	r3, r2
 800c254:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01d      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c264:	4b32      	ldr	r3, [pc, #200]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c26a:	0e1b      	lsrs	r3, r3, #24
 800c26c:	f003 030f 	and.w	r3, r3, #15
 800c270:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c272:	4b2f      	ldr	r3, [pc, #188]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c278:	0f1b      	lsrs	r3, r3, #28
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	019a      	lsls	r2, r3, #6
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	041b      	lsls	r3, r3, #16
 800c28c:	431a      	orrs	r2, r3
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	061b      	lsls	r3, r3, #24
 800c292:	431a      	orrs	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	071b      	lsls	r3, r3, #28
 800c298:	4925      	ldr	r1, [pc, #148]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d011      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	019a      	lsls	r2, r3, #6
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	041b      	lsls	r3, r3, #16
 800c2b8:	431a      	orrs	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	061b      	lsls	r3, r3, #24
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	071b      	lsls	r3, r3, #28
 800c2c8:	4919      	ldr	r1, [pc, #100]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c2d0:	4b17      	ldr	r3, [pc, #92]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a16      	ldr	r2, [pc, #88]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2dc:	f7fd fa0e 	bl	80096fc <HAL_GetTick>
 800c2e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2e2:	e008      	b.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2e4:	f7fd fa0a 	bl	80096fc <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	2b64      	cmp	r3, #100	@ 0x64
 800c2f0:	d901      	bls.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e0d7      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0f0      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	2b01      	cmp	r3, #1
 800c306:	f040 80cd 	bne.w	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c30a:	4b09      	ldr	r3, [pc, #36]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a08      	ldr	r2, [pc, #32]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c316:	f7fd f9f1 	bl	80096fc <HAL_GetTick>
 800c31a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c31c:	e00a      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c31e:	f7fd f9ed 	bl	80096fc <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b64      	cmp	r3, #100	@ 0x64
 800c32a:	d903      	bls.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e0ba      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c330:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c334:	4b5e      	ldr	r3, [pc, #376]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c33c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c340:	d0ed      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c352:	2b00      	cmp	r3, #0
 800c354:	d009      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d02e      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c366:	2b00      	cmp	r3, #0
 800c368:	d12a      	bne.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c36a:	4b51      	ldr	r3, [pc, #324]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c370:	0c1b      	lsrs	r3, r3, #16
 800c372:	f003 0303 	and.w	r3, r3, #3
 800c376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c378:	4b4d      	ldr	r3, [pc, #308]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c37e:	0f1b      	lsrs	r3, r3, #28
 800c380:	f003 0307 	and.w	r3, r3, #7
 800c384:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	019a      	lsls	r2, r3, #6
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	041b      	lsls	r3, r3, #16
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	061b      	lsls	r3, r3, #24
 800c398:	431a      	orrs	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	071b      	lsls	r3, r3, #28
 800c39e:	4944      	ldr	r1, [pc, #272]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c3a6:	4b42      	ldr	r3, [pc, #264]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	021b      	lsls	r3, r3, #8
 800c3b8:	493d      	ldr	r1, [pc, #244]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d022      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3d4:	d11d      	bne.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c3d6:	4b36      	ldr	r3, [pc, #216]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3dc:	0e1b      	lsrs	r3, r3, #24
 800c3de:	f003 030f 	and.w	r3, r3, #15
 800c3e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c3e4:	4b32      	ldr	r3, [pc, #200]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3ea:	0f1b      	lsrs	r3, r3, #28
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	019a      	lsls	r2, r3, #6
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a1b      	ldr	r3, [r3, #32]
 800c3fc:	041b      	lsls	r3, r3, #16
 800c3fe:	431a      	orrs	r2, r3
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	061b      	lsls	r3, r3, #24
 800c404:	431a      	orrs	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	071b      	lsls	r3, r3, #28
 800c40a:	4929      	ldr	r1, [pc, #164]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c40c:	4313      	orrs	r3, r2
 800c40e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0308 	and.w	r3, r3, #8
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d028      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c41e:	4b24      	ldr	r3, [pc, #144]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c424:	0e1b      	lsrs	r3, r3, #24
 800c426:	f003 030f 	and.w	r3, r3, #15
 800c42a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c42c:	4b20      	ldr	r3, [pc, #128]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c432:	0c1b      	lsrs	r3, r3, #16
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	019a      	lsls	r2, r3, #6
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	431a      	orrs	r2, r3
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	061b      	lsls	r3, r3, #24
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	69db      	ldr	r3, [r3, #28]
 800c450:	071b      	lsls	r3, r3, #28
 800c452:	4917      	ldr	r1, [pc, #92]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c454:	4313      	orrs	r3, r2
 800c456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c45a:	4b15      	ldr	r3, [pc, #84]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c460:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c468:	4911      	ldr	r1, [pc, #68]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c470:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c47a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c47c:	f7fd f93e 	bl	80096fc <HAL_GetTick>
 800c480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c482:	e008      	b.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c484:	f7fd f93a 	bl	80096fc <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	2b64      	cmp	r3, #100	@ 0x64
 800c490:	d901      	bls.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c492:	2303      	movs	r3, #3
 800c494:	e007      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c496:	4b06      	ldr	r3, [pc, #24]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c49e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4a2:	d1ef      	bne.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3720      	adds	r7, #32
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	40023800 	.word	0x40023800

0800c4b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e09d      	b.n	800c602 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d108      	bne.n	800c4e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c4d6:	d009      	beq.n	800c4ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	61da      	str	r2, [r3, #28]
 800c4de:	e005      	b.n	800c4ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d106      	bne.n	800c50c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7fc fa70 	bl	80089ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2202      	movs	r2, #2
 800c510:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c522:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c52c:	d902      	bls.n	800c534 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	e002      	b.n	800c53a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c538:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c542:	d007      	beq.n	800c554 <HAL_SPI_Init+0xa0>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c54c:	d002      	beq.n	800c554 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c564:	431a      	orrs	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c582:	431a      	orrs	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c58c:	431a      	orrs	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c596:	ea42 0103 	orr.w	r1, r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c59e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	0c1b      	lsrs	r3, r3, #16
 800c5b0:	f003 0204 	and.w	r2, r3, #4
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b8:	f003 0310 	and.w	r3, r3, #16
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c2:	f003 0308 	and.w	r3, r3, #8
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c5d0:	ea42 0103 	orr.w	r1, r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69da      	ldr	r2, [r3, #28]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c5f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b088      	sub	sp, #32
 800c60e:	af00      	add	r7, sp, #0
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	60b9      	str	r1, [r7, #8]
 800c614:	603b      	str	r3, [r7, #0]
 800c616:	4613      	mov	r3, r2
 800c618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <HAL_SPI_Transmit+0x22>
 800c628:	2302      	movs	r3, #2
 800c62a:	e158      	b.n	800c8de <HAL_SPI_Transmit+0x2d4>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c634:	f7fd f862 	bl	80096fc <HAL_GetTick>
 800c638:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c63a:	88fb      	ldrh	r3, [r7, #6]
 800c63c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b01      	cmp	r3, #1
 800c648:	d002      	beq.n	800c650 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c64a:	2302      	movs	r3, #2
 800c64c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c64e:	e13d      	b.n	800c8cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_SPI_Transmit+0x52>
 800c656:	88fb      	ldrh	r3, [r7, #6]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c660:	e134      	b.n	800c8cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2203      	movs	r2, #3
 800c666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	88fa      	ldrh	r2, [r7, #6]
 800c67a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	88fa      	ldrh	r2, [r7, #6]
 800c680:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6ac:	d10f      	bne.n	800c6ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c6cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6d8:	2b40      	cmp	r3, #64	@ 0x40
 800c6da:	d007      	beq.n	800c6ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c6f4:	d94b      	bls.n	800c78e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <HAL_SPI_Transmit+0xfa>
 800c6fe:	8afb      	ldrh	r3, [r7, #22]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d13e      	bne.n	800c782 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c708:	881a      	ldrh	r2, [r3, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c714:	1c9a      	adds	r2, r3, #2
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	b29a      	uxth	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c728:	e02b      	b.n	800c782 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f003 0302 	and.w	r3, r3, #2
 800c734:	2b02      	cmp	r3, #2
 800c736:	d112      	bne.n	800c75e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73c:	881a      	ldrh	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c748:	1c9a      	adds	r2, r3, #2
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c752:	b29b      	uxth	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	b29a      	uxth	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c75c:	e011      	b.n	800c782 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c75e:	f7fc ffcd 	bl	80096fc <HAL_GetTick>
 800c762:	4602      	mov	r2, r0
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d803      	bhi.n	800c776 <HAL_SPI_Transmit+0x16c>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c774:	d102      	bne.n	800c77c <HAL_SPI_Transmit+0x172>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d102      	bne.n	800c782 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c780:	e0a4      	b.n	800c8cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c786:	b29b      	uxth	r3, r3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1ce      	bne.n	800c72a <HAL_SPI_Transmit+0x120>
 800c78c:	e07c      	b.n	800c888 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <HAL_SPI_Transmit+0x192>
 800c796:	8afb      	ldrh	r3, [r7, #22]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d170      	bne.n	800c87e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d912      	bls.n	800c7cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7aa:	881a      	ldrh	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b02      	subs	r3, #2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c7ca:	e058      	b.n	800c87e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	330c      	adds	r3, #12
 800c7d6:	7812      	ldrb	r2, [r2, #0]
 800c7d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c7f2:	e044      	b.n	800c87e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d12b      	bne.n	800c85a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d912      	bls.n	800c832 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c810:	881a      	ldrh	r2, [r3, #0]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81c:	1c9a      	adds	r2, r3, #2
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c826:	b29b      	uxth	r3, r3
 800c828:	3b02      	subs	r3, #2
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c830:	e025      	b.n	800c87e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	330c      	adds	r3, #12
 800c83c:	7812      	ldrb	r2, [r2, #0]
 800c83e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c84e:	b29b      	uxth	r3, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c858:	e011      	b.n	800c87e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c85a:	f7fc ff4f 	bl	80096fc <HAL_GetTick>
 800c85e:	4602      	mov	r2, r0
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d803      	bhi.n	800c872 <HAL_SPI_Transmit+0x268>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c870:	d102      	bne.n	800c878 <HAL_SPI_Transmit+0x26e>
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c87c:	e026      	b.n	800c8cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c882:	b29b      	uxth	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1b5      	bne.n	800c7f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c888:	69ba      	ldr	r2, [r7, #24]
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fb5b 	bl	800cf48 <SPI_EndRxTxTransaction>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2220      	movs	r2, #32
 800c89c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10a      	bne.n	800c8bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	613b      	str	r3, [r7, #16]
 800c8ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	77fb      	strb	r3, [r7, #31]
 800c8c8:	e000      	b.n	800c8cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c8ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c8dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b08a      	sub	sp, #40	@ 0x28
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c904:	2b01      	cmp	r3, #1
 800c906:	d101      	bne.n	800c90c <HAL_SPI_TransmitReceive+0x26>
 800c908:	2302      	movs	r3, #2
 800c90a:	e1fb      	b.n	800cd04 <HAL_SPI_TransmitReceive+0x41e>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c914:	f7fc fef2 	bl	80096fc <HAL_GetTick>
 800c918:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c920:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c928:	887b      	ldrh	r3, [r7, #2]
 800c92a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c92c:	887b      	ldrh	r3, [r7, #2]
 800c92e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c930:	7efb      	ldrb	r3, [r7, #27]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d00e      	beq.n	800c954 <HAL_SPI_TransmitReceive+0x6e>
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c93c:	d106      	bne.n	800c94c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <HAL_SPI_TransmitReceive+0x66>
 800c946:	7efb      	ldrb	r3, [r7, #27]
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d003      	beq.n	800c954 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c94c:	2302      	movs	r3, #2
 800c94e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c952:	e1cd      	b.n	800ccf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d005      	beq.n	800c966 <HAL_SPI_TransmitReceive+0x80>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <HAL_SPI_TransmitReceive+0x80>
 800c960:	887b      	ldrh	r3, [r7, #2]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d103      	bne.n	800c96e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c96c:	e1c0      	b.n	800ccf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b04      	cmp	r3, #4
 800c978:	d003      	beq.n	800c982 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2205      	movs	r2, #5
 800c97e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	887a      	ldrh	r2, [r7, #2]
 800c992:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	887a      	ldrh	r2, [r7, #2]
 800c99a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	887a      	ldrh	r2, [r7, #2]
 800c9a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	887a      	ldrh	r2, [r7, #2]
 800c9ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c9c4:	d802      	bhi.n	800c9cc <HAL_SPI_TransmitReceive+0xe6>
 800c9c6:	8a3b      	ldrh	r3, [r7, #16]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d908      	bls.n	800c9de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c9da:	605a      	str	r2, [r3, #4]
 800c9dc:	e007      	b.n	800c9ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c9ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9f8:	2b40      	cmp	r3, #64	@ 0x40
 800c9fa:	d007      	beq.n	800ca0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca14:	d97c      	bls.n	800cb10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <HAL_SPI_TransmitReceive+0x13e>
 800ca1e:	8a7b      	ldrh	r3, [r7, #18]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d169      	bne.n	800caf8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca28:	881a      	ldrh	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca34:	1c9a      	adds	r2, r3, #2
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca48:	e056      	b.n	800caf8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f003 0302 	and.w	r3, r3, #2
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d11b      	bne.n	800ca90 <HAL_SPI_TransmitReceive+0x1aa>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d016      	beq.n	800ca90 <HAL_SPI_TransmitReceive+0x1aa>
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d113      	bne.n	800ca90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca6c:	881a      	ldrh	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca78:	1c9a      	adds	r2, r3, #2
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	3b01      	subs	r3, #1
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d11c      	bne.n	800cad8 <HAL_SPI_TransmitReceive+0x1f2>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d016      	beq.n	800cad8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	68da      	ldr	r2, [r3, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab4:	b292      	uxth	r2, r2
 800cab6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cabc:	1c9a      	adds	r2, r3, #2
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cac8:	b29b      	uxth	r3, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cad4:	2301      	movs	r3, #1
 800cad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cad8:	f7fc fe10 	bl	80096fc <HAL_GetTick>
 800cadc:	4602      	mov	r2, r0
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d807      	bhi.n	800caf8 <HAL_SPI_TransmitReceive+0x212>
 800cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800caee:	d003      	beq.n	800caf8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800caf6:	e0fb      	b.n	800ccf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1a3      	bne.n	800ca4a <HAL_SPI_TransmitReceive+0x164>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d19d      	bne.n	800ca4a <HAL_SPI_TransmitReceive+0x164>
 800cb0e:	e0df      	b.n	800ccd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <HAL_SPI_TransmitReceive+0x23a>
 800cb18:	8a7b      	ldrh	r3, [r7, #18]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 80cb 	bne.w	800ccb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d912      	bls.n	800cb50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2e:	881a      	ldrh	r2, [r3, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3a:	1c9a      	adds	r2, r3, #2
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	3b02      	subs	r3, #2
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cb4e:	e0b2      	b.n	800ccb6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	330c      	adds	r3, #12
 800cb5a:	7812      	ldrb	r2, [r2, #0]
 800cb5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb76:	e09e      	b.n	800ccb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f003 0302 	and.w	r3, r3, #2
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d134      	bne.n	800cbf0 <HAL_SPI_TransmitReceive+0x30a>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d02f      	beq.n	800cbf0 <HAL_SPI_TransmitReceive+0x30a>
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d12c      	bne.n	800cbf0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d912      	bls.n	800cbc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba4:	881a      	ldrh	r2, [r3, #0]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb0:	1c9a      	adds	r2, r3, #2
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	3b02      	subs	r3, #2
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cbc4:	e012      	b.n	800cbec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	330c      	adds	r3, #12
 800cbd0:	7812      	ldrb	r2, [r2, #0]
 800cbd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cbec:	2300      	movs	r3, #0
 800cbee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d148      	bne.n	800cc90 <HAL_SPI_TransmitReceive+0x3aa>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d042      	beq.n	800cc90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d923      	bls.n	800cc5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68da      	ldr	r2, [r3, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc20:	b292      	uxth	r2, r2
 800cc22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc28:	1c9a      	adds	r2, r3, #2
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	3b02      	subs	r3, #2
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d81f      	bhi.n	800cc8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc5a:	605a      	str	r2, [r3, #4]
 800cc5c:	e016      	b.n	800cc8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f103 020c 	add.w	r2, r3, #12
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc6a:	7812      	ldrb	r2, [r2, #0]
 800cc6c:	b2d2      	uxtb	r2, r2
 800cc6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3b01      	subs	r3, #1
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cc90:	f7fc fd34 	bl	80096fc <HAL_GetTick>
 800cc94:	4602      	mov	r2, r0
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d803      	bhi.n	800cca8 <HAL_SPI_TransmitReceive+0x3c2>
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cca6:	d102      	bne.n	800ccae <HAL_SPI_TransmitReceive+0x3c8>
 800cca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800ccb4:	e01c      	b.n	800ccf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f47f af5b 	bne.w	800cb78 <HAL_SPI_TransmitReceive+0x292>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f47f af54 	bne.w	800cb78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ccd0:	69fa      	ldr	r2, [r7, #28]
 800ccd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f937 	bl	800cf48 <SPI_EndRxTxTransaction>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2220      	movs	r2, #32
 800ccea:	661a      	str	r2, [r3, #96]	@ 0x60
 800ccec:	e000      	b.n	800ccf0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ccee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cd00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3728      	adds	r7, #40	@ 0x28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	603b      	str	r3, [r7, #0]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cd1c:	f7fc fcee 	bl	80096fc <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd24:	1a9b      	subs	r3, r3, r2
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4413      	add	r3, r2
 800cd2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cd2c:	f7fc fce6 	bl	80096fc <HAL_GetTick>
 800cd30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cd32:	4b39      	ldr	r3, [pc, #228]	@ (800ce18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	015b      	lsls	r3, r3, #5
 800cd38:	0d1b      	lsrs	r3, r3, #20
 800cd3a:	69fa      	ldr	r2, [r7, #28]
 800cd3c:	fb02 f303 	mul.w	r3, r2, r3
 800cd40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd42:	e054      	b.n	800cdee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd4a:	d050      	beq.n	800cdee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd4c:	f7fc fcd6 	bl	80096fc <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d902      	bls.n	800cd62 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d13d      	bne.n	800cdde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cd70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd7a:	d111      	bne.n	800cda0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd84:	d004      	beq.n	800cd90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd8e:	d107      	bne.n	800cda0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cda8:	d10f      	bne.n	800cdca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cdc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e017      	b.n	800ce0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	689a      	ldr	r2, [r3, #8]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	bf0c      	ite	eq
 800cdfe:	2301      	moveq	r3, #1
 800ce00:	2300      	movne	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	461a      	mov	r2, r3
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d19b      	bne.n	800cd44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20000060 	.word	0x20000060

0800ce1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08a      	sub	sp, #40	@ 0x28
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
 800ce28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ce2e:	f7fc fc65 	bl	80096fc <HAL_GetTick>
 800ce32:	4602      	mov	r2, r0
 800ce34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce36:	1a9b      	subs	r3, r3, r2
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ce3e:	f7fc fc5d 	bl	80096fc <HAL_GetTick>
 800ce42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ce4c:	4b3d      	ldr	r3, [pc, #244]	@ (800cf44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	4613      	mov	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	00da      	lsls	r2, r3, #3
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	0d1b      	lsrs	r3, r3, #20
 800ce5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce5e:	fb02 f303 	mul.w	r3, r2, r3
 800ce62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ce64:	e060      	b.n	800cf28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ce6c:	d107      	bne.n	800ce7e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce84:	d050      	beq.n	800cf28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce86:	f7fc fc39 	bl	80096fc <HAL_GetTick>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d902      	bls.n	800ce9c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ce96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d13d      	bne.n	800cf18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ceaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ceb4:	d111      	bne.n	800ceda <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cebe:	d004      	beq.n	800ceca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cec8:	d107      	bne.n	800ceda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ced8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cee2:	d10f      	bne.n	800cf04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cf02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e010      	b.n	800cf3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	3b01      	subs	r3, #1
 800cf26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	689a      	ldr	r2, [r3, #8]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	4013      	ands	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d196      	bne.n	800ce66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3728      	adds	r7, #40	@ 0x28
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	20000060 	.word	0x20000060

0800cf48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff ff5b 	bl	800ce1c <SPI_WaitFifoStateUntilTimeout>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d007      	beq.n	800cf7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf70:	f043 0220 	orr.w	r2, r3, #32
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e046      	b.n	800d00a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cf7c:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <SPI_EndRxTxTransaction+0xcc>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a25      	ldr	r2, [pc, #148]	@ (800d018 <SPI_EndRxTxTransaction+0xd0>)
 800cf82:	fba2 2303 	umull	r2, r3, r2, r3
 800cf86:	0d5b      	lsrs	r3, r3, #21
 800cf88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cf8c:	fb02 f303 	mul.w	r3, r2, r3
 800cf90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf9a:	d112      	bne.n	800cfc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2180      	movs	r1, #128	@ 0x80
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff feb0 	bl	800cd0c <SPI_WaitFlagStateUntilTimeout>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d016      	beq.n	800cfe0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfb6:	f043 0220 	orr.w	r2, r3, #32
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e023      	b.n	800d00a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00a      	beq.n	800cfde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfd8:	2b80      	cmp	r3, #128	@ 0x80
 800cfda:	d0f2      	beq.n	800cfc2 <SPI_EndRxTxTransaction+0x7a>
 800cfdc:	e000      	b.n	800cfe0 <SPI_EndRxTxTransaction+0x98>
        break;
 800cfde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff ff15 	bl	800ce1c <SPI_WaitFifoStateUntilTimeout>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d007      	beq.n	800d008 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cffc:	f043 0220 	orr.w	r2, r3, #32
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e000      	b.n	800d00a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20000060 	.word	0x20000060
 800d018:	165e9f81 	.word	0x165e9f81

0800d01c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e049      	b.n	800d0c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7fb ff12 	bl	8008e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2202      	movs	r2, #2
 800d04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	3304      	adds	r3, #4
 800d058:	4619      	mov	r1, r3
 800d05a:	4610      	mov	r0, r2
 800d05c:	f000 fd90 	bl	800db80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d001      	beq.n	800d0e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e054      	b.n	800d18e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68da      	ldr	r2, [r3, #12]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0201 	orr.w	r2, r2, #1
 800d0fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a26      	ldr	r2, [pc, #152]	@ (800d19c <HAL_TIM_Base_Start_IT+0xd0>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d022      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d10e:	d01d      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a22      	ldr	r2, [pc, #136]	@ (800d1a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d018      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a21      	ldr	r2, [pc, #132]	@ (800d1a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d013      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a1f      	ldr	r2, [pc, #124]	@ (800d1a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d00e      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a1e      	ldr	r2, [pc, #120]	@ (800d1ac <HAL_TIM_Base_Start_IT+0xe0>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d009      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a1c      	ldr	r2, [pc, #112]	@ (800d1b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d004      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x80>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a1b      	ldr	r2, [pc, #108]	@ (800d1b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d115      	bne.n	800d178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689a      	ldr	r2, [r3, #8]
 800d152:	4b19      	ldr	r3, [pc, #100]	@ (800d1b8 <HAL_TIM_Base_Start_IT+0xec>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b06      	cmp	r3, #6
 800d15c:	d015      	beq.n	800d18a <HAL_TIM_Base_Start_IT+0xbe>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d164:	d011      	beq.n	800d18a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f042 0201 	orr.w	r2, r2, #1
 800d174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d176:	e008      	b.n	800d18a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f042 0201 	orr.w	r2, r2, #1
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	e000      	b.n	800d18c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	40010000 	.word	0x40010000
 800d1a0:	40000400 	.word	0x40000400
 800d1a4:	40000800 	.word	0x40000800
 800d1a8:	40000c00 	.word	0x40000c00
 800d1ac:	40010400 	.word	0x40010400
 800d1b0:	40014000 	.word	0x40014000
 800d1b4:	40001800 	.word	0x40001800
 800d1b8:	00010007 	.word	0x00010007

0800d1bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e049      	b.n	800d262 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7fb fdfa 	bl	8008ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f000 fcc0 	bl	800db80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d109      	bne.n	800d290 <HAL_TIM_PWM_Start+0x24>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	bf14      	ite	ne
 800d288:	2301      	movne	r3, #1
 800d28a:	2300      	moveq	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	e03c      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b04      	cmp	r3, #4
 800d294:	d109      	bne.n	800d2aa <HAL_TIM_PWM_Start+0x3e>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	bf14      	ite	ne
 800d2a2:	2301      	movne	r3, #1
 800d2a4:	2300      	moveq	r3, #0
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	e02f      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d109      	bne.n	800d2c4 <HAL_TIM_PWM_Start+0x58>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	bf14      	ite	ne
 800d2bc:	2301      	movne	r3, #1
 800d2be:	2300      	moveq	r3, #0
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	e022      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b0c      	cmp	r3, #12
 800d2c8:	d109      	bne.n	800d2de <HAL_TIM_PWM_Start+0x72>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	bf14      	ite	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	e015      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2b10      	cmp	r3, #16
 800d2e2:	d109      	bne.n	800d2f8 <HAL_TIM_PWM_Start+0x8c>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	bf14      	ite	ne
 800d2f0:	2301      	movne	r3, #1
 800d2f2:	2300      	moveq	r3, #0
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	e008      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b01      	cmp	r3, #1
 800d302:	bf14      	ite	ne
 800d304:	2301      	movne	r3, #1
 800d306:	2300      	moveq	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e092      	b.n	800d438 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d104      	bne.n	800d322 <HAL_TIM_PWM_Start+0xb6>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d320:	e023      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b04      	cmp	r3, #4
 800d326:	d104      	bne.n	800d332 <HAL_TIM_PWM_Start+0xc6>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2202      	movs	r2, #2
 800d32c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d330:	e01b      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b08      	cmp	r3, #8
 800d336:	d104      	bne.n	800d342 <HAL_TIM_PWM_Start+0xd6>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d340:	e013      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b0c      	cmp	r3, #12
 800d346:	d104      	bne.n	800d352 <HAL_TIM_PWM_Start+0xe6>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d350:	e00b      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b10      	cmp	r3, #16
 800d356:	d104      	bne.n	800d362 <HAL_TIM_PWM_Start+0xf6>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d360:	e003      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2202      	movs	r2, #2
 800d366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2201      	movs	r2, #1
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	4618      	mov	r0, r3
 800d374:	f000 ff02 	bl	800e17c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a30      	ldr	r2, [pc, #192]	@ (800d440 <HAL_TIM_PWM_Start+0x1d4>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d004      	beq.n	800d38c <HAL_TIM_PWM_Start+0x120>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a2f      	ldr	r2, [pc, #188]	@ (800d444 <HAL_TIM_PWM_Start+0x1d8>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d101      	bne.n	800d390 <HAL_TIM_PWM_Start+0x124>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e000      	b.n	800d392 <HAL_TIM_PWM_Start+0x126>
 800d390:	2300      	movs	r3, #0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d3a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a25      	ldr	r2, [pc, #148]	@ (800d440 <HAL_TIM_PWM_Start+0x1d4>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d022      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3b8:	d01d      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a22      	ldr	r2, [pc, #136]	@ (800d448 <HAL_TIM_PWM_Start+0x1dc>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d018      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a20      	ldr	r2, [pc, #128]	@ (800d44c <HAL_TIM_PWM_Start+0x1e0>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d013      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d450 <HAL_TIM_PWM_Start+0x1e4>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d00e      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a19      	ldr	r2, [pc, #100]	@ (800d444 <HAL_TIM_PWM_Start+0x1d8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d009      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a1b      	ldr	r2, [pc, #108]	@ (800d454 <HAL_TIM_PWM_Start+0x1e8>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d004      	beq.n	800d3f6 <HAL_TIM_PWM_Start+0x18a>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a19      	ldr	r2, [pc, #100]	@ (800d458 <HAL_TIM_PWM_Start+0x1ec>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d115      	bne.n	800d422 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689a      	ldr	r2, [r3, #8]
 800d3fc:	4b17      	ldr	r3, [pc, #92]	@ (800d45c <HAL_TIM_PWM_Start+0x1f0>)
 800d3fe:	4013      	ands	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b06      	cmp	r3, #6
 800d406:	d015      	beq.n	800d434 <HAL_TIM_PWM_Start+0x1c8>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d40e:	d011      	beq.n	800d434 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f042 0201 	orr.w	r2, r2, #1
 800d41e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d420:	e008      	b.n	800d434 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f042 0201 	orr.w	r2, r2, #1
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e000      	b.n	800d436 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	40010000 	.word	0x40010000
 800d444:	40010400 	.word	0x40010400
 800d448:	40000400 	.word	0x40000400
 800d44c:	40000800 	.word	0x40000800
 800d450:	40000c00 	.word	0x40000c00
 800d454:	40014000 	.word	0x40014000
 800d458:	40001800 	.word	0x40001800
 800d45c:	00010007 	.word	0x00010007

0800d460 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e08f      	b.n	800d594 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d106      	bne.n	800d48e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7fb fbc7 	bl	8008c1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2202      	movs	r2, #2
 800d492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6899      	ldr	r1, [r3, #8]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	4b3e      	ldr	r3, [pc, #248]	@ (800d59c <HAL_TIM_Encoder_Init+0x13c>)
 800d4a2:	400b      	ands	r3, r1
 800d4a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	f000 fb65 	bl	800db80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6a1b      	ldr	r3, [r3, #32]
 800d4cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	4b31      	ldr	r3, [pc, #196]	@ (800d5a0 <HAL_TIM_Encoder_Init+0x140>)
 800d4dc:	4013      	ands	r3, r2
 800d4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	689a      	ldr	r2, [r3, #8]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	021b      	lsls	r3, r3, #8
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	693a      	ldr	r2, [r7, #16]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a4 <HAL_TIM_Encoder_Init+0x144>)
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	4b2a      	ldr	r3, [pc, #168]	@ (800d5a8 <HAL_TIM_Encoder_Init+0x148>)
 800d4fe:	4013      	ands	r3, r2
 800d500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	4313      	orrs	r3, r2
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	4313      	orrs	r3, r2
 800d512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	011a      	lsls	r2, r3, #4
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	031b      	lsls	r3, r3, #12
 800d520:	4313      	orrs	r3, r2
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	4313      	orrs	r3, r2
 800d526:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d52e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d536:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	4313      	orrs	r3, r2
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	4313      	orrs	r3, r2
 800d548:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	fffebff8 	.word	0xfffebff8
 800d5a0:	fffffcfc 	.word	0xfffffcfc
 800d5a4:	fffff3f3 	.word	0xfffff3f3
 800d5a8:	ffff0f0f 	.word	0xffff0f0f

0800d5ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d5bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d5c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d110      	bne.n	800d5fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d102      	bne.n	800d5e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d5e2:	7b7b      	ldrb	r3, [r7, #13]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d001      	beq.n	800d5ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e069      	b.n	800d6c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5fc:	e031      	b.n	800d662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b04      	cmp	r3, #4
 800d602:	d110      	bne.n	800d626 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d604:	7bbb      	ldrb	r3, [r7, #14]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d102      	bne.n	800d610 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d60a:	7b3b      	ldrb	r3, [r7, #12]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d001      	beq.n	800d614 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e055      	b.n	800d6c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2202      	movs	r2, #2
 800d618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d624:	e01d      	b.n	800d662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d108      	bne.n	800d63e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d105      	bne.n	800d63e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d632:	7b7b      	ldrb	r3, [r7, #13]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d102      	bne.n	800d63e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d638:	7b3b      	ldrb	r3, [r7, #12]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d001      	beq.n	800d642 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e03e      	b.n	800d6c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2202      	movs	r2, #2
 800d646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2202      	movs	r2, #2
 800d64e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2202      	movs	r2, #2
 800d656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2202      	movs	r2, #2
 800d65e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_TIM_Encoder_Start+0xc4>
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2b04      	cmp	r3, #4
 800d66c:	d008      	beq.n	800d680 <HAL_TIM_Encoder_Start+0xd4>
 800d66e:	e00f      	b.n	800d690 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2201      	movs	r2, #1
 800d676:	2100      	movs	r1, #0
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 fd7f 	bl	800e17c <TIM_CCxChannelCmd>
      break;
 800d67e:	e016      	b.n	800d6ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2201      	movs	r2, #1
 800d686:	2104      	movs	r1, #4
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 fd77 	bl	800e17c <TIM_CCxChannelCmd>
      break;
 800d68e:	e00e      	b.n	800d6ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2201      	movs	r2, #1
 800d696:	2100      	movs	r1, #0
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 fd6f 	bl	800e17c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 fd68 	bl	800e17c <TIM_CCxChannelCmd>
      break;
 800d6ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f042 0201 	orr.w	r2, r2, #1
 800d6bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d122      	bne.n	800d724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d11b      	bne.n	800d724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f06f 0202 	mvn.w	r2, #2
 800d6f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fa1a 	bl	800db44 <HAL_TIM_IC_CaptureCallback>
 800d710:	e005      	b.n	800d71e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fa0c 	bl	800db30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fa1d 	bl	800db58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	f003 0304 	and.w	r3, r3, #4
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d122      	bne.n	800d778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d11b      	bne.n	800d778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f06f 0204 	mvn.w	r2, #4
 800d748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2202      	movs	r2, #2
 800d74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f9f0 	bl	800db44 <HAL_TIM_IC_CaptureCallback>
 800d764:	e005      	b.n	800d772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f9e2 	bl	800db30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f9f3 	bl	800db58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	f003 0308 	and.w	r3, r3, #8
 800d782:	2b08      	cmp	r3, #8
 800d784:	d122      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	f003 0308 	and.w	r3, r3, #8
 800d790:	2b08      	cmp	r3, #8
 800d792:	d11b      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f06f 0208 	mvn.w	r2, #8
 800d79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2204      	movs	r2, #4
 800d7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f003 0303 	and.w	r3, r3, #3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f9c6 	bl	800db44 <HAL_TIM_IC_CaptureCallback>
 800d7b8:	e005      	b.n	800d7c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f9b8 	bl	800db30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f9c9 	bl	800db58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	f003 0310 	and.w	r3, r3, #16
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d122      	bne.n	800d820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b10      	cmp	r3, #16
 800d7e6:	d11b      	bne.n	800d820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f06f 0210 	mvn.w	r2, #16
 800d7f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f99c 	bl	800db44 <HAL_TIM_IC_CaptureCallback>
 800d80c:	e005      	b.n	800d81a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f98e 	bl	800db30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f99f 	bl	800db58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d10e      	bne.n	800d84c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d107      	bne.n	800d84c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0201 	mvn.w	r2, #1
 800d844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f7 ffca 	bl	80057e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d856:	2b80      	cmp	r3, #128	@ 0x80
 800d858:	d10e      	bne.n	800d878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d864:	2b80      	cmp	r3, #128	@ 0x80
 800d866:	d107      	bne.n	800d878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fd40 	bl	800e2f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d886:	d10e      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d892:	2b80      	cmp	r3, #128	@ 0x80
 800d894:	d107      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fd33 	bl	800e30c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8b0:	2b40      	cmp	r3, #64	@ 0x40
 800d8b2:	d10e      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8be:	2b40      	cmp	r3, #64	@ 0x40
 800d8c0:	d107      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f94d 	bl	800db6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b20      	cmp	r3, #32
 800d8de:	d10e      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b20      	cmp	r3, #32
 800d8ec:	d107      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f06f 0220 	mvn.w	r2, #32
 800d8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fcf3 	bl	800e2e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
	...

0800d908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d101      	bne.n	800d926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d922:	2302      	movs	r3, #2
 800d924:	e0ff      	b.n	800db26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b14      	cmp	r3, #20
 800d932:	f200 80f0 	bhi.w	800db16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d936:	a201      	add	r2, pc, #4	@ (adr r2, 800d93c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d991 	.word	0x0800d991
 800d940:	0800db17 	.word	0x0800db17
 800d944:	0800db17 	.word	0x0800db17
 800d948:	0800db17 	.word	0x0800db17
 800d94c:	0800d9d1 	.word	0x0800d9d1
 800d950:	0800db17 	.word	0x0800db17
 800d954:	0800db17 	.word	0x0800db17
 800d958:	0800db17 	.word	0x0800db17
 800d95c:	0800da13 	.word	0x0800da13
 800d960:	0800db17 	.word	0x0800db17
 800d964:	0800db17 	.word	0x0800db17
 800d968:	0800db17 	.word	0x0800db17
 800d96c:	0800da53 	.word	0x0800da53
 800d970:	0800db17 	.word	0x0800db17
 800d974:	0800db17 	.word	0x0800db17
 800d978:	0800db17 	.word	0x0800db17
 800d97c:	0800da95 	.word	0x0800da95
 800d980:	0800db17 	.word	0x0800db17
 800d984:	0800db17 	.word	0x0800db17
 800d988:	0800db17 	.word	0x0800db17
 800d98c:	0800dad5 	.word	0x0800dad5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68b9      	ldr	r1, [r7, #8]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f992 	bl	800dcc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	699a      	ldr	r2, [r3, #24]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0208 	orr.w	r2, r2, #8
 800d9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	699a      	ldr	r2, [r3, #24]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f022 0204 	bic.w	r2, r2, #4
 800d9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6999      	ldr	r1, [r3, #24]
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	691a      	ldr	r2, [r3, #16]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	430a      	orrs	r2, r1
 800d9cc:	619a      	str	r2, [r3, #24]
      break;
 800d9ce:	e0a5      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68b9      	ldr	r1, [r7, #8]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 f9e4 	bl	800dda4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699a      	ldr	r2, [r3, #24]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	699a      	ldr	r2, [r3, #24]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6999      	ldr	r1, [r3, #24]
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	021a      	lsls	r2, r3, #8
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	430a      	orrs	r2, r1
 800da0e:	619a      	str	r2, [r3, #24]
      break;
 800da10:	e084      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68b9      	ldr	r1, [r7, #8]
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fa3b 	bl	800de94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	69da      	ldr	r2, [r3, #28]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f042 0208 	orr.w	r2, r2, #8
 800da2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	69da      	ldr	r2, [r3, #28]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f022 0204 	bic.w	r2, r2, #4
 800da3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	69d9      	ldr	r1, [r3, #28]
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	691a      	ldr	r2, [r3, #16]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	430a      	orrs	r2, r1
 800da4e:	61da      	str	r2, [r3, #28]
      break;
 800da50:	e064      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68b9      	ldr	r1, [r7, #8]
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 fa91 	bl	800df80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	69da      	ldr	r2, [r3, #28]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	69da      	ldr	r2, [r3, #28]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	69d9      	ldr	r1, [r3, #28]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	021a      	lsls	r2, r3, #8
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	430a      	orrs	r2, r1
 800da90:	61da      	str	r2, [r3, #28]
      break;
 800da92:	e043      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68b9      	ldr	r1, [r7, #8]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 fac8 	bl	800e030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f042 0208 	orr.w	r2, r2, #8
 800daae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f022 0204 	bic.w	r2, r2, #4
 800dabe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	691a      	ldr	r2, [r3, #16]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	430a      	orrs	r2, r1
 800dad0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dad2:	e023      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68b9      	ldr	r1, [r7, #8]
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 fafa 	bl	800e0d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800daee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dafe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	021a      	lsls	r2, r3, #8
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	430a      	orrs	r2, r1
 800db12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800db14:	e002      	b.n	800db1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	75fb      	strb	r3, [r7, #23]
      break;
 800db1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800db24:	7dfb      	ldrb	r3, [r7, #23]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop

0800db30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a40      	ldr	r2, [pc, #256]	@ (800dc94 <TIM_Base_SetConfig+0x114>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d013      	beq.n	800dbc0 <TIM_Base_SetConfig+0x40>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db9e:	d00f      	beq.n	800dbc0 <TIM_Base_SetConfig+0x40>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a3d      	ldr	r2, [pc, #244]	@ (800dc98 <TIM_Base_SetConfig+0x118>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00b      	beq.n	800dbc0 <TIM_Base_SetConfig+0x40>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a3c      	ldr	r2, [pc, #240]	@ (800dc9c <TIM_Base_SetConfig+0x11c>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d007      	beq.n	800dbc0 <TIM_Base_SetConfig+0x40>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a3b      	ldr	r2, [pc, #236]	@ (800dca0 <TIM_Base_SetConfig+0x120>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d003      	beq.n	800dbc0 <TIM_Base_SetConfig+0x40>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a3a      	ldr	r2, [pc, #232]	@ (800dca4 <TIM_Base_SetConfig+0x124>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d108      	bne.n	800dbd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a2f      	ldr	r2, [pc, #188]	@ (800dc94 <TIM_Base_SetConfig+0x114>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d02b      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbe0:	d027      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a2c      	ldr	r2, [pc, #176]	@ (800dc98 <TIM_Base_SetConfig+0x118>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d023      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a2b      	ldr	r2, [pc, #172]	@ (800dc9c <TIM_Base_SetConfig+0x11c>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d01f      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a2a      	ldr	r2, [pc, #168]	@ (800dca0 <TIM_Base_SetConfig+0x120>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d01b      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a29      	ldr	r2, [pc, #164]	@ (800dca4 <TIM_Base_SetConfig+0x124>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d017      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a28      	ldr	r2, [pc, #160]	@ (800dca8 <TIM_Base_SetConfig+0x128>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d013      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a27      	ldr	r2, [pc, #156]	@ (800dcac <TIM_Base_SetConfig+0x12c>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d00f      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a26      	ldr	r2, [pc, #152]	@ (800dcb0 <TIM_Base_SetConfig+0x130>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00b      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a25      	ldr	r2, [pc, #148]	@ (800dcb4 <TIM_Base_SetConfig+0x134>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d007      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a24      	ldr	r2, [pc, #144]	@ (800dcb8 <TIM_Base_SetConfig+0x138>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d003      	beq.n	800dc32 <TIM_Base_SetConfig+0xb2>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a23      	ldr	r2, [pc, #140]	@ (800dcbc <TIM_Base_SetConfig+0x13c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d108      	bne.n	800dc44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	689a      	ldr	r2, [r3, #8]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a0a      	ldr	r2, [pc, #40]	@ (800dc94 <TIM_Base_SetConfig+0x114>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d003      	beq.n	800dc78 <TIM_Base_SetConfig+0xf8>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4a0c      	ldr	r2, [pc, #48]	@ (800dca4 <TIM_Base_SetConfig+0x124>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d103      	bne.n	800dc80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	691a      	ldr	r2, [r3, #16]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	615a      	str	r2, [r3, #20]
}
 800dc86:	bf00      	nop
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	40010000 	.word	0x40010000
 800dc98:	40000400 	.word	0x40000400
 800dc9c:	40000800 	.word	0x40000800
 800dca0:	40000c00 	.word	0x40000c00
 800dca4:	40010400 	.word	0x40010400
 800dca8:	40014000 	.word	0x40014000
 800dcac:	40014400 	.word	0x40014400
 800dcb0:	40014800 	.word	0x40014800
 800dcb4:	40001800 	.word	0x40001800
 800dcb8:	40001c00 	.word	0x40001c00
 800dcbc:	40002000 	.word	0x40002000

0800dcc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	f023 0201 	bic.w	r2, r3, #1
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	4b2b      	ldr	r3, [pc, #172]	@ (800dd98 <TIM_OC1_SetConfig+0xd8>)
 800dcec:	4013      	ands	r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0303 	bic.w	r3, r3, #3
 800dcf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f023 0302 	bic.w	r3, r3, #2
 800dd08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a21      	ldr	r2, [pc, #132]	@ (800dd9c <TIM_OC1_SetConfig+0xdc>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d003      	beq.n	800dd24 <TIM_OC1_SetConfig+0x64>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a20      	ldr	r2, [pc, #128]	@ (800dda0 <TIM_OC1_SetConfig+0xe0>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d10c      	bne.n	800dd3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	f023 0308 	bic.w	r3, r3, #8
 800dd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	f023 0304 	bic.w	r3, r3, #4
 800dd3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a16      	ldr	r2, [pc, #88]	@ (800dd9c <TIM_OC1_SetConfig+0xdc>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d003      	beq.n	800dd4e <TIM_OC1_SetConfig+0x8e>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a15      	ldr	r2, [pc, #84]	@ (800dda0 <TIM_OC1_SetConfig+0xe0>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d111      	bne.n	800dd72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	693a      	ldr	r2, [r7, #16]
 800dd76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	621a      	str	r2, [r3, #32]
}
 800dd8c:	bf00      	nop
 800dd8e:	371c      	adds	r7, #28
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	fffeff8f 	.word	0xfffeff8f
 800dd9c:	40010000 	.word	0x40010000
 800dda0:	40010400 	.word	0x40010400

0800dda4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b087      	sub	sp, #28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	f023 0210 	bic.w	r2, r3, #16
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4b2e      	ldr	r3, [pc, #184]	@ (800de88 <TIM_OC2_SetConfig+0xe4>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	f023 0320 	bic.w	r3, r3, #32
 800ddee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	011b      	lsls	r3, r3, #4
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a23      	ldr	r2, [pc, #140]	@ (800de8c <TIM_OC2_SetConfig+0xe8>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <TIM_OC2_SetConfig+0x68>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a22      	ldr	r2, [pc, #136]	@ (800de90 <TIM_OC2_SetConfig+0xec>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d10d      	bne.n	800de28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	011b      	lsls	r3, r3, #4
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a18      	ldr	r2, [pc, #96]	@ (800de8c <TIM_OC2_SetConfig+0xe8>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d003      	beq.n	800de38 <TIM_OC2_SetConfig+0x94>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a17      	ldr	r2, [pc, #92]	@ (800de90 <TIM_OC2_SetConfig+0xec>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d113      	bne.n	800de60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	4313      	orrs	r3, r2
 800de52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	693a      	ldr	r2, [r7, #16]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	621a      	str	r2, [r3, #32]
}
 800de7a:	bf00      	nop
 800de7c:	371c      	adds	r7, #28
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	feff8fff 	.word	0xfeff8fff
 800de8c:	40010000 	.word	0x40010000
 800de90:	40010400 	.word	0x40010400

0800de94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	69db      	ldr	r3, [r3, #28]
 800deba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	4b2d      	ldr	r3, [pc, #180]	@ (800df74 <TIM_OC3_SetConfig+0xe0>)
 800dec0:	4013      	ands	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f023 0303 	bic.w	r3, r3, #3
 800deca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dedc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	021b      	lsls	r3, r3, #8
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a22      	ldr	r2, [pc, #136]	@ (800df78 <TIM_OC3_SetConfig+0xe4>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d003      	beq.n	800defa <TIM_OC3_SetConfig+0x66>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a21      	ldr	r2, [pc, #132]	@ (800df7c <TIM_OC3_SetConfig+0xe8>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d10d      	bne.n	800df16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	021b      	lsls	r3, r3, #8
 800df08:	697a      	ldr	r2, [r7, #20]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a17      	ldr	r2, [pc, #92]	@ (800df78 <TIM_OC3_SetConfig+0xe4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d003      	beq.n	800df26 <TIM_OC3_SetConfig+0x92>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a16      	ldr	r2, [pc, #88]	@ (800df7c <TIM_OC3_SetConfig+0xe8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d113      	bne.n	800df4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	695b      	ldr	r3, [r3, #20]
 800df3a:	011b      	lsls	r3, r3, #4
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	4313      	orrs	r3, r2
 800df40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	011b      	lsls	r3, r3, #4
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	697a      	ldr	r2, [r7, #20]
 800df66:	621a      	str	r2, [r3, #32]
}
 800df68:	bf00      	nop
 800df6a:	371c      	adds	r7, #28
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	fffeff8f 	.word	0xfffeff8f
 800df78:	40010000 	.word	0x40010000
 800df7c:	40010400 	.word	0x40010400

0800df80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df80:	b480      	push	{r7}
 800df82:	b087      	sub	sp, #28
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	69db      	ldr	r3, [r3, #28]
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	4b1e      	ldr	r3, [pc, #120]	@ (800e024 <TIM_OC4_SetConfig+0xa4>)
 800dfac:	4013      	ands	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dfb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	021b      	lsls	r3, r3, #8
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dfca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	031b      	lsls	r3, r3, #12
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a13      	ldr	r2, [pc, #76]	@ (800e028 <TIM_OC4_SetConfig+0xa8>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d003      	beq.n	800dfe8 <TIM_OC4_SetConfig+0x68>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a12      	ldr	r2, [pc, #72]	@ (800e02c <TIM_OC4_SetConfig+0xac>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d109      	bne.n	800dffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dfee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	019b      	lsls	r3, r3, #6
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	621a      	str	r2, [r3, #32]
}
 800e016:	bf00      	nop
 800e018:	371c      	adds	r7, #28
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	feff8fff 	.word	0xfeff8fff
 800e028:	40010000 	.word	0x40010000
 800e02c:	40010400 	.word	0x40010400

0800e030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e030:	b480      	push	{r7}
 800e032:	b087      	sub	sp, #28
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0c8 <TIM_OC5_SetConfig+0x98>)
 800e05c:	4013      	ands	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a12      	ldr	r2, [pc, #72]	@ (800e0cc <TIM_OC5_SetConfig+0x9c>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d003      	beq.n	800e08e <TIM_OC5_SetConfig+0x5e>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a11      	ldr	r2, [pc, #68]	@ (800e0d0 <TIM_OC5_SetConfig+0xa0>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d109      	bne.n	800e0a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	695b      	ldr	r3, [r3, #20]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	693a      	ldr	r2, [r7, #16]
 800e0ba:	621a      	str	r2, [r3, #32]
}
 800e0bc:	bf00      	nop
 800e0be:	371c      	adds	r7, #28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	fffeff8f 	.word	0xfffeff8f
 800e0cc:	40010000 	.word	0x40010000
 800e0d0:	40010400 	.word	0x40010400

0800e0d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e170 <TIM_OC6_SetConfig+0x9c>)
 800e100:	4013      	ands	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	021b      	lsls	r3, r3, #8
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	051b      	lsls	r3, r3, #20
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	4313      	orrs	r3, r2
 800e122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a13      	ldr	r2, [pc, #76]	@ (800e174 <TIM_OC6_SetConfig+0xa0>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d003      	beq.n	800e134 <TIM_OC6_SetConfig+0x60>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a12      	ldr	r2, [pc, #72]	@ (800e178 <TIM_OC6_SetConfig+0xa4>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d109      	bne.n	800e148 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e13a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	029b      	lsls	r3, r3, #10
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	4313      	orrs	r3, r2
 800e146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	693a      	ldr	r2, [r7, #16]
 800e160:	621a      	str	r2, [r3, #32]
}
 800e162:	bf00      	nop
 800e164:	371c      	adds	r7, #28
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	feff8fff 	.word	0xfeff8fff
 800e174:	40010000 	.word	0x40010000
 800e178:	40010400 	.word	0x40010400

0800e17c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b087      	sub	sp, #28
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f003 031f 	and.w	r3, r3, #31
 800e18e:	2201      	movs	r2, #1
 800e190:	fa02 f303 	lsl.w	r3, r2, r3
 800e194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6a1a      	ldr	r2, [r3, #32]
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	43db      	mvns	r3, r3
 800e19e:	401a      	ands	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6a1a      	ldr	r2, [r3, #32]
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f003 031f 	and.w	r3, r3, #31
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	621a      	str	r2, [r3, #32]
}
 800e1ba:	bf00      	nop
 800e1bc:	371c      	adds	r7, #28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
	...

0800e1c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d101      	bne.n	800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1dc:	2302      	movs	r3, #2
 800e1de:	e06d      	b.n	800e2bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2202      	movs	r2, #2
 800e1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a30      	ldr	r2, [pc, #192]	@ (800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d004      	beq.n	800e214 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a2f      	ldr	r2, [pc, #188]	@ (800e2cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d108      	bne.n	800e226 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e21a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e22c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4313      	orrs	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a20      	ldr	r2, [pc, #128]	@ (800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d022      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e252:	d01d      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a1d      	ldr	r2, [pc, #116]	@ (800e2d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d018      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a1c      	ldr	r2, [pc, #112]	@ (800e2d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d013      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a1a      	ldr	r2, [pc, #104]	@ (800e2d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d00e      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a15      	ldr	r2, [pc, #84]	@ (800e2cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d009      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a16      	ldr	r2, [pc, #88]	@ (800e2dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d004      	beq.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a15      	ldr	r2, [pc, #84]	@ (800e2e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10c      	bne.n	800e2aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	40010000 	.word	0x40010000
 800e2cc:	40010400 	.word	0x40010400
 800e2d0:	40000400 	.word	0x40000400
 800e2d4:	40000800 	.word	0x40000800
 800e2d8:	40000c00 	.word	0x40000c00
 800e2dc:	40014000 	.word	0x40014000
 800e2e0:	40001800 	.word	0x40001800

0800e2e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e040      	b.n	800e3b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7fa fe54 	bl	8008ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2224      	movs	r2, #36	@ 0x24
 800e34c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f022 0201 	bic.w	r2, r2, #1
 800e35c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fbe8 	bl	800eb34 <UART_SetConfig>
 800e364:	4603      	mov	r3, r0
 800e366:	2b01      	cmp	r3, #1
 800e368:	d101      	bne.n	800e36e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e022      	b.n	800e3b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fe40 	bl	800effc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e38a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	689a      	ldr	r2, [r3, #8]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e39a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0201 	orr.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 fec7 	bl	800f140 <UART_CheckIdleState>
 800e3b2:	4603      	mov	r3, r0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	@ 0x28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3ce:	2b20      	cmp	r3, #32
 800e3d0:	d165      	bne.n	800e49e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <HAL_UART_Transmit_DMA+0x22>
 800e3d8:	88fb      	ldrh	r3, [r7, #6]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e05e      	b.n	800e4a0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	88fa      	ldrh	r2, [r7, #6]
 800e3ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	88fa      	ldrh	r2, [r7, #6]
 800e3f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2221      	movs	r2, #33	@ 0x21
 800e404:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d027      	beq.n	800e45e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e412:	4a25      	ldr	r2, [pc, #148]	@ (800e4a8 <HAL_UART_Transmit_DMA+0xec>)
 800e414:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e41a:	4a24      	ldr	r2, [pc, #144]	@ (800e4ac <HAL_UART_Transmit_DMA+0xf0>)
 800e41c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e422:	4a23      	ldr	r2, [pc, #140]	@ (800e4b0 <HAL_UART_Transmit_DMA+0xf4>)
 800e424:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e42a:	2200      	movs	r2, #0
 800e42c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e436:	4619      	mov	r1, r3
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3328      	adds	r3, #40	@ 0x28
 800e43e:	461a      	mov	r2, r3
 800e440:	88fb      	ldrh	r3, [r7, #6]
 800e442:	f7fc f997 	bl	800a774 <HAL_DMA_Start_IT>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d008      	beq.n	800e45e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2210      	movs	r2, #16
 800e450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2220      	movs	r2, #32
 800e458:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800e45a:	2301      	movs	r3, #1
 800e45c:	e020      	b.n	800e4a0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2240      	movs	r2, #64	@ 0x40
 800e464:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	613b      	str	r3, [r7, #16]
   return(result);
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e47c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	3308      	adds	r3, #8
 800e484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e486:	623a      	str	r2, [r7, #32]
 800e488:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48a:	69f9      	ldr	r1, [r7, #28]
 800e48c:	6a3a      	ldr	r2, [r7, #32]
 800e48e:	e841 2300 	strex	r3, r2, [r1]
 800e492:	61bb      	str	r3, [r7, #24]
   return(result);
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1e5      	bne.n	800e466 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	e000      	b.n	800e4a0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800e49e:	2302      	movs	r3, #2
  }
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3728      	adds	r7, #40	@ 0x28
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	0800f591 	.word	0x0800f591
 800e4ac:	0800f627 	.word	0x0800f627
 800e4b0:	0800f7a9 	.word	0x0800f7a9

0800e4b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08a      	sub	sp, #40	@ 0x28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4c8:	2b20      	cmp	r3, #32
 800e4ca:	d132      	bne.n	800e532 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <HAL_UART_Receive_DMA+0x24>
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e02b      	b.n	800e534 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d018      	beq.n	800e522 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	e853 3f00 	ldrex	r3, [r3]
 800e4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e504:	627b      	str	r3, [r7, #36]	@ 0x24
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50e:	623b      	str	r3, [r7, #32]
 800e510:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	69f9      	ldr	r1, [r7, #28]
 800e514:	6a3a      	ldr	r2, [r7, #32]
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e6      	bne.n	800e4f0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	461a      	mov	r2, r3
 800e526:	68b9      	ldr	r1, [r7, #8]
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 ff07 	bl	800f33c <UART_Start_Receive_DMA>
 800e52e:	4603      	mov	r3, r0
 800e530:	e000      	b.n	800e534 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e532:	2302      	movs	r3, #2
  }
}
 800e534:	4618      	mov	r0, r3
 800e536:	3728      	adds	r7, #40	@ 0x28
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b0ba      	sub	sp, #232	@ 0xe8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e566:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e56a:	4013      	ands	r3, r2
 800e56c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e574:	2b00      	cmp	r3, #0
 800e576:	d115      	bne.n	800e5a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e57c:	f003 0320 	and.w	r3, r3, #32
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00f      	beq.n	800e5a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e588:	f003 0320 	and.w	r3, r3, #32
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d009      	beq.n	800e5a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 8297 	beq.w	800eac8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	4798      	blx	r3
      }
      return;
 800e5a2:	e291      	b.n	800eac8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e5a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 8117 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e5ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e5be:	4b85      	ldr	r3, [pc, #532]	@ (800e7d4 <HAL_UART_IRQHandler+0x298>)
 800e5c0:	4013      	ands	r3, r2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 810a 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d011      	beq.n	800e5f8 <HAL_UART_IRQHandler+0xbc>
 800e5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00b      	beq.n	800e5f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5ee:	f043 0201 	orr.w	r2, r3, #1
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5fc:	f003 0302 	and.w	r3, r3, #2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d011      	beq.n	800e628 <HAL_UART_IRQHandler+0xec>
 800e604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00b      	beq.n	800e628 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2202      	movs	r2, #2
 800e616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e61e:	f043 0204 	orr.w	r2, r3, #4
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d011      	beq.n	800e658 <HAL_UART_IRQHandler+0x11c>
 800e634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00b      	beq.n	800e658 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2204      	movs	r2, #4
 800e646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e64e:	f043 0202 	orr.w	r2, r3, #2
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e65c:	f003 0308 	and.w	r3, r3, #8
 800e660:	2b00      	cmp	r3, #0
 800e662:	d017      	beq.n	800e694 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e668:	f003 0320 	and.w	r3, r3, #32
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d105      	bne.n	800e67c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e674:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2208      	movs	r2, #8
 800e682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e68a:	f043 0208 	orr.w	r2, r3, #8
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d012      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x18a>
 800e6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00c      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e6b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6bc:	f043 0220 	orr.w	r2, r3, #32
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 81fd 	beq.w	800eacc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00d      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6e2:	f003 0320 	and.w	r3, r3, #32
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d007      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e70e:	2b40      	cmp	r3, #64	@ 0x40
 800e710:	d005      	beq.n	800e71e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e716:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d04f      	beq.n	800e7be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fed2 	bl	800f4c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e72e:	2b40      	cmp	r3, #64	@ 0x40
 800e730:	d141      	bne.n	800e7b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3308      	adds	r3, #8
 800e738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e74c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3308      	adds	r3, #8
 800e75a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e75e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e76a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e76e:	e841 2300 	strex	r3, r2, [r1]
 800e772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1d9      	bne.n	800e732 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e782:	2b00      	cmp	r3, #0
 800e784:	d013      	beq.n	800e7ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e78a:	4a13      	ldr	r2, [pc, #76]	@ (800e7d8 <HAL_UART_IRQHandler+0x29c>)
 800e78c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e792:	4618      	mov	r0, r3
 800e794:	f7fc f8be 	bl	800a914 <HAL_DMA_Abort_IT>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d017      	beq.n	800e7ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ac:	e00f      	b.n	800e7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 f9aa 	bl	800eb08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b4:	e00b      	b.n	800e7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f9a6 	bl	800eb08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7bc:	e007      	b.n	800e7ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f9a2 	bl	800eb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e7cc:	e17e      	b.n	800eacc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ce:	bf00      	nop
    return;
 800e7d0:	e17c      	b.n	800eacc <HAL_UART_IRQHandler+0x590>
 800e7d2:	bf00      	nop
 800e7d4:	04000120 	.word	0x04000120
 800e7d8:	0800f827 	.word	0x0800f827

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	f040 814c 	bne.w	800ea7e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ea:	f003 0310 	and.w	r3, r3, #16
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 8145 	beq.w	800ea7e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f8:	f003 0310 	and.w	r3, r3, #16
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 813e 	beq.w	800ea7e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2210      	movs	r2, #16
 800e808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e814:	2b40      	cmp	r3, #64	@ 0x40
 800e816:	f040 80b6 	bne.w	800e986 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e826:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8150 	beq.w	800ead0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e83a:	429a      	cmp	r2, r3
 800e83c:	f080 8148 	bcs.w	800ead0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e846:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e854:	f000 8086 	beq.w	800e964 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e864:	e853 3f00 	ldrex	r3, [r3]
 800e868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	461a      	mov	r2, r3
 800e87e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e886:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e88e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e892:	e841 2300 	strex	r3, r2, [r1]
 800e896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1da      	bne.n	800e858 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e8ac:	e853 3f00 	ldrex	r3, [r3]
 800e8b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e8b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e8b4:	f023 0301 	bic.w	r3, r3, #1
 800e8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e8c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e8ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e8ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e8d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e1      	bne.n	800e8a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e90a:	e841 2300 	strex	r3, r2, [r1]
 800e90e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1e3      	bne.n	800e8de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2220      	movs	r2, #32
 800e91a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e934:	f023 0310 	bic.w	r3, r3, #16
 800e938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	461a      	mov	r2, r3
 800e942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e946:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e948:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e94c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e4      	bne.n	800e924 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fb ff68 	bl	800a834 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e976:	b29b      	uxth	r3, r3
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f8cc 	bl	800eb1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e984:	e0a4      	b.n	800ead0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e992:	b29b      	uxth	r3, r3
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 8096 	beq.w	800ead4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800e9a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f000 8091 	beq.w	800ead4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e9c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9dc:	e841 2300 	strex	r3, r2, [r1]
 800e9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e4      	bne.n	800e9b2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f2:	e853 3f00 	ldrex	r3, [r3]
 800e9f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	f023 0301 	bic.w	r3, r3, #1
 800e9fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3308      	adds	r3, #8
 800ea08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ea0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ea0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea14:	e841 2300 	strex	r3, r2, [r1]
 800ea18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e3      	bne.n	800e9e8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	e853 3f00 	ldrex	r3, [r3]
 800ea40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f023 0310 	bic.w	r3, r3, #16
 800ea48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	461a      	mov	r2, r3
 800ea52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ea56:	61fb      	str	r3, [r7, #28]
 800ea58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5a:	69b9      	ldr	r1, [r7, #24]
 800ea5c:	69fa      	ldr	r2, [r7, #28]
 800ea5e:	e841 2300 	strex	r3, r2, [r1]
 800ea62:	617b      	str	r3, [r7, #20]
   return(result);
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1e4      	bne.n	800ea34 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ea74:	4619      	mov	r1, r3
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 f850 	bl	800eb1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea7c:	e02a      	b.n	800ead4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ea7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00e      	beq.n	800eaa8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ea8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d008      	beq.n	800eaa8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d01c      	beq.n	800ead8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	4798      	blx	r3
    }
    return;
 800eaa6:	e017      	b.n	800ead8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d012      	beq.n	800eada <HAL_UART_IRQHandler+0x59e>
 800eab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00c      	beq.n	800eada <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fec6 	bl	800f852 <UART_EndTransmit_IT>
    return;
 800eac6:	e008      	b.n	800eada <HAL_UART_IRQHandler+0x59e>
      return;
 800eac8:	bf00      	nop
 800eaca:	e006      	b.n	800eada <HAL_UART_IRQHandler+0x59e>
    return;
 800eacc:	bf00      	nop
 800eace:	e004      	b.n	800eada <HAL_UART_IRQHandler+0x59e>
      return;
 800ead0:	bf00      	nop
 800ead2:	e002      	b.n	800eada <HAL_UART_IRQHandler+0x59e>
      return;
 800ead4:	bf00      	nop
 800ead6:	e000      	b.n	800eada <HAL_UART_IRQHandler+0x59e>
    return;
 800ead8:	bf00      	nop
  }

}
 800eada:	37e8      	adds	r7, #232	@ 0xe8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	689a      	ldr	r2, [r3, #8]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	431a      	orrs	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	431a      	orrs	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	4ba6      	ldr	r3, [pc, #664]	@ (800edf8 <UART_SetConfig+0x2c4>)
 800eb60:	4013      	ands	r3, r2
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	6812      	ldr	r2, [r2, #0]
 800eb66:	6979      	ldr	r1, [r7, #20]
 800eb68:	430b      	orrs	r3, r1
 800eb6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68da      	ldr	r2, [r3, #12]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	430a      	orrs	r2, r1
 800eba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a94      	ldr	r2, [pc, #592]	@ (800edfc <UART_SetConfig+0x2c8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d120      	bne.n	800ebf2 <UART_SetConfig+0xbe>
 800ebb0:	4b93      	ldr	r3, [pc, #588]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ebb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb6:	f003 0303 	and.w	r3, r3, #3
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d816      	bhi.n	800ebec <UART_SetConfig+0xb8>
 800ebbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc4 <UART_SetConfig+0x90>)
 800ebc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc4:	0800ebd5 	.word	0x0800ebd5
 800ebc8:	0800ebe1 	.word	0x0800ebe1
 800ebcc:	0800ebdb 	.word	0x0800ebdb
 800ebd0:	0800ebe7 	.word	0x0800ebe7
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	77fb      	strb	r3, [r7, #31]
 800ebd8:	e150      	b.n	800ee7c <UART_SetConfig+0x348>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	77fb      	strb	r3, [r7, #31]
 800ebde:	e14d      	b.n	800ee7c <UART_SetConfig+0x348>
 800ebe0:	2304      	movs	r3, #4
 800ebe2:	77fb      	strb	r3, [r7, #31]
 800ebe4:	e14a      	b.n	800ee7c <UART_SetConfig+0x348>
 800ebe6:	2308      	movs	r3, #8
 800ebe8:	77fb      	strb	r3, [r7, #31]
 800ebea:	e147      	b.n	800ee7c <UART_SetConfig+0x348>
 800ebec:	2310      	movs	r3, #16
 800ebee:	77fb      	strb	r3, [r7, #31]
 800ebf0:	e144      	b.n	800ee7c <UART_SetConfig+0x348>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a83      	ldr	r2, [pc, #524]	@ (800ee04 <UART_SetConfig+0x2d0>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d132      	bne.n	800ec62 <UART_SetConfig+0x12e>
 800ebfc:	4b80      	ldr	r3, [pc, #512]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ebfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec02:	f003 030c 	and.w	r3, r3, #12
 800ec06:	2b0c      	cmp	r3, #12
 800ec08:	d828      	bhi.n	800ec5c <UART_SetConfig+0x128>
 800ec0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec10 <UART_SetConfig+0xdc>)
 800ec0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec10:	0800ec45 	.word	0x0800ec45
 800ec14:	0800ec5d 	.word	0x0800ec5d
 800ec18:	0800ec5d 	.word	0x0800ec5d
 800ec1c:	0800ec5d 	.word	0x0800ec5d
 800ec20:	0800ec51 	.word	0x0800ec51
 800ec24:	0800ec5d 	.word	0x0800ec5d
 800ec28:	0800ec5d 	.word	0x0800ec5d
 800ec2c:	0800ec5d 	.word	0x0800ec5d
 800ec30:	0800ec4b 	.word	0x0800ec4b
 800ec34:	0800ec5d 	.word	0x0800ec5d
 800ec38:	0800ec5d 	.word	0x0800ec5d
 800ec3c:	0800ec5d 	.word	0x0800ec5d
 800ec40:	0800ec57 	.word	0x0800ec57
 800ec44:	2300      	movs	r3, #0
 800ec46:	77fb      	strb	r3, [r7, #31]
 800ec48:	e118      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	77fb      	strb	r3, [r7, #31]
 800ec4e:	e115      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec50:	2304      	movs	r3, #4
 800ec52:	77fb      	strb	r3, [r7, #31]
 800ec54:	e112      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec56:	2308      	movs	r3, #8
 800ec58:	77fb      	strb	r3, [r7, #31]
 800ec5a:	e10f      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec5c:	2310      	movs	r3, #16
 800ec5e:	77fb      	strb	r3, [r7, #31]
 800ec60:	e10c      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a68      	ldr	r2, [pc, #416]	@ (800ee08 <UART_SetConfig+0x2d4>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d120      	bne.n	800ecae <UART_SetConfig+0x17a>
 800ec6c:	4b64      	ldr	r3, [pc, #400]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ec6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ec76:	2b30      	cmp	r3, #48	@ 0x30
 800ec78:	d013      	beq.n	800eca2 <UART_SetConfig+0x16e>
 800ec7a:	2b30      	cmp	r3, #48	@ 0x30
 800ec7c:	d814      	bhi.n	800eca8 <UART_SetConfig+0x174>
 800ec7e:	2b20      	cmp	r3, #32
 800ec80:	d009      	beq.n	800ec96 <UART_SetConfig+0x162>
 800ec82:	2b20      	cmp	r3, #32
 800ec84:	d810      	bhi.n	800eca8 <UART_SetConfig+0x174>
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <UART_SetConfig+0x15c>
 800ec8a:	2b10      	cmp	r3, #16
 800ec8c:	d006      	beq.n	800ec9c <UART_SetConfig+0x168>
 800ec8e:	e00b      	b.n	800eca8 <UART_SetConfig+0x174>
 800ec90:	2300      	movs	r3, #0
 800ec92:	77fb      	strb	r3, [r7, #31]
 800ec94:	e0f2      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec96:	2302      	movs	r3, #2
 800ec98:	77fb      	strb	r3, [r7, #31]
 800ec9a:	e0ef      	b.n	800ee7c <UART_SetConfig+0x348>
 800ec9c:	2304      	movs	r3, #4
 800ec9e:	77fb      	strb	r3, [r7, #31]
 800eca0:	e0ec      	b.n	800ee7c <UART_SetConfig+0x348>
 800eca2:	2308      	movs	r3, #8
 800eca4:	77fb      	strb	r3, [r7, #31]
 800eca6:	e0e9      	b.n	800ee7c <UART_SetConfig+0x348>
 800eca8:	2310      	movs	r3, #16
 800ecaa:	77fb      	strb	r3, [r7, #31]
 800ecac:	e0e6      	b.n	800ee7c <UART_SetConfig+0x348>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a56      	ldr	r2, [pc, #344]	@ (800ee0c <UART_SetConfig+0x2d8>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d120      	bne.n	800ecfa <UART_SetConfig+0x1c6>
 800ecb8:	4b51      	ldr	r3, [pc, #324]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ecba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ecc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800ecc4:	d013      	beq.n	800ecee <UART_SetConfig+0x1ba>
 800ecc6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ecc8:	d814      	bhi.n	800ecf4 <UART_SetConfig+0x1c0>
 800ecca:	2b80      	cmp	r3, #128	@ 0x80
 800eccc:	d009      	beq.n	800ece2 <UART_SetConfig+0x1ae>
 800ecce:	2b80      	cmp	r3, #128	@ 0x80
 800ecd0:	d810      	bhi.n	800ecf4 <UART_SetConfig+0x1c0>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d002      	beq.n	800ecdc <UART_SetConfig+0x1a8>
 800ecd6:	2b40      	cmp	r3, #64	@ 0x40
 800ecd8:	d006      	beq.n	800ece8 <UART_SetConfig+0x1b4>
 800ecda:	e00b      	b.n	800ecf4 <UART_SetConfig+0x1c0>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	77fb      	strb	r3, [r7, #31]
 800ece0:	e0cc      	b.n	800ee7c <UART_SetConfig+0x348>
 800ece2:	2302      	movs	r3, #2
 800ece4:	77fb      	strb	r3, [r7, #31]
 800ece6:	e0c9      	b.n	800ee7c <UART_SetConfig+0x348>
 800ece8:	2304      	movs	r3, #4
 800ecea:	77fb      	strb	r3, [r7, #31]
 800ecec:	e0c6      	b.n	800ee7c <UART_SetConfig+0x348>
 800ecee:	2308      	movs	r3, #8
 800ecf0:	77fb      	strb	r3, [r7, #31]
 800ecf2:	e0c3      	b.n	800ee7c <UART_SetConfig+0x348>
 800ecf4:	2310      	movs	r3, #16
 800ecf6:	77fb      	strb	r3, [r7, #31]
 800ecf8:	e0c0      	b.n	800ee7c <UART_SetConfig+0x348>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a44      	ldr	r2, [pc, #272]	@ (800ee10 <UART_SetConfig+0x2dc>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d125      	bne.n	800ed50 <UART_SetConfig+0x21c>
 800ed04:	4b3e      	ldr	r3, [pc, #248]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ed06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed12:	d017      	beq.n	800ed44 <UART_SetConfig+0x210>
 800ed14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed18:	d817      	bhi.n	800ed4a <UART_SetConfig+0x216>
 800ed1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed1e:	d00b      	beq.n	800ed38 <UART_SetConfig+0x204>
 800ed20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed24:	d811      	bhi.n	800ed4a <UART_SetConfig+0x216>
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <UART_SetConfig+0x1fe>
 800ed2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed2e:	d006      	beq.n	800ed3e <UART_SetConfig+0x20a>
 800ed30:	e00b      	b.n	800ed4a <UART_SetConfig+0x216>
 800ed32:	2300      	movs	r3, #0
 800ed34:	77fb      	strb	r3, [r7, #31]
 800ed36:	e0a1      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed38:	2302      	movs	r3, #2
 800ed3a:	77fb      	strb	r3, [r7, #31]
 800ed3c:	e09e      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed3e:	2304      	movs	r3, #4
 800ed40:	77fb      	strb	r3, [r7, #31]
 800ed42:	e09b      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed44:	2308      	movs	r3, #8
 800ed46:	77fb      	strb	r3, [r7, #31]
 800ed48:	e098      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed4a:	2310      	movs	r3, #16
 800ed4c:	77fb      	strb	r3, [r7, #31]
 800ed4e:	e095      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a2f      	ldr	r2, [pc, #188]	@ (800ee14 <UART_SetConfig+0x2e0>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d125      	bne.n	800eda6 <UART_SetConfig+0x272>
 800ed5a:	4b29      	ldr	r3, [pc, #164]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800ed5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ed64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed68:	d017      	beq.n	800ed9a <UART_SetConfig+0x266>
 800ed6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed6e:	d817      	bhi.n	800eda0 <UART_SetConfig+0x26c>
 800ed70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed74:	d00b      	beq.n	800ed8e <UART_SetConfig+0x25a>
 800ed76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed7a:	d811      	bhi.n	800eda0 <UART_SetConfig+0x26c>
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <UART_SetConfig+0x254>
 800ed80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed84:	d006      	beq.n	800ed94 <UART_SetConfig+0x260>
 800ed86:	e00b      	b.n	800eda0 <UART_SetConfig+0x26c>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	77fb      	strb	r3, [r7, #31]
 800ed8c:	e076      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed8e:	2302      	movs	r3, #2
 800ed90:	77fb      	strb	r3, [r7, #31]
 800ed92:	e073      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed94:	2304      	movs	r3, #4
 800ed96:	77fb      	strb	r3, [r7, #31]
 800ed98:	e070      	b.n	800ee7c <UART_SetConfig+0x348>
 800ed9a:	2308      	movs	r3, #8
 800ed9c:	77fb      	strb	r3, [r7, #31]
 800ed9e:	e06d      	b.n	800ee7c <UART_SetConfig+0x348>
 800eda0:	2310      	movs	r3, #16
 800eda2:	77fb      	strb	r3, [r7, #31]
 800eda4:	e06a      	b.n	800ee7c <UART_SetConfig+0x348>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ee18 <UART_SetConfig+0x2e4>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d138      	bne.n	800ee22 <UART_SetConfig+0x2ee>
 800edb0:	4b13      	ldr	r3, [pc, #76]	@ (800ee00 <UART_SetConfig+0x2cc>)
 800edb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800edba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800edbe:	d017      	beq.n	800edf0 <UART_SetConfig+0x2bc>
 800edc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800edc4:	d82a      	bhi.n	800ee1c <UART_SetConfig+0x2e8>
 800edc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edca:	d00b      	beq.n	800ede4 <UART_SetConfig+0x2b0>
 800edcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edd0:	d824      	bhi.n	800ee1c <UART_SetConfig+0x2e8>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d003      	beq.n	800edde <UART_SetConfig+0x2aa>
 800edd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edda:	d006      	beq.n	800edea <UART_SetConfig+0x2b6>
 800eddc:	e01e      	b.n	800ee1c <UART_SetConfig+0x2e8>
 800edde:	2300      	movs	r3, #0
 800ede0:	77fb      	strb	r3, [r7, #31]
 800ede2:	e04b      	b.n	800ee7c <UART_SetConfig+0x348>
 800ede4:	2302      	movs	r3, #2
 800ede6:	77fb      	strb	r3, [r7, #31]
 800ede8:	e048      	b.n	800ee7c <UART_SetConfig+0x348>
 800edea:	2304      	movs	r3, #4
 800edec:	77fb      	strb	r3, [r7, #31]
 800edee:	e045      	b.n	800ee7c <UART_SetConfig+0x348>
 800edf0:	2308      	movs	r3, #8
 800edf2:	77fb      	strb	r3, [r7, #31]
 800edf4:	e042      	b.n	800ee7c <UART_SetConfig+0x348>
 800edf6:	bf00      	nop
 800edf8:	efff69f3 	.word	0xefff69f3
 800edfc:	40011000 	.word	0x40011000
 800ee00:	40023800 	.word	0x40023800
 800ee04:	40004400 	.word	0x40004400
 800ee08:	40004800 	.word	0x40004800
 800ee0c:	40004c00 	.word	0x40004c00
 800ee10:	40005000 	.word	0x40005000
 800ee14:	40011400 	.word	0x40011400
 800ee18:	40007800 	.word	0x40007800
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	77fb      	strb	r3, [r7, #31]
 800ee20:	e02c      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a72      	ldr	r2, [pc, #456]	@ (800eff0 <UART_SetConfig+0x4bc>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d125      	bne.n	800ee78 <UART_SetConfig+0x344>
 800ee2c:	4b71      	ldr	r3, [pc, #452]	@ (800eff4 <UART_SetConfig+0x4c0>)
 800ee2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ee36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ee3a:	d017      	beq.n	800ee6c <UART_SetConfig+0x338>
 800ee3c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ee40:	d817      	bhi.n	800ee72 <UART_SetConfig+0x33e>
 800ee42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee46:	d00b      	beq.n	800ee60 <UART_SetConfig+0x32c>
 800ee48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee4c:	d811      	bhi.n	800ee72 <UART_SetConfig+0x33e>
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <UART_SetConfig+0x326>
 800ee52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee56:	d006      	beq.n	800ee66 <UART_SetConfig+0x332>
 800ee58:	e00b      	b.n	800ee72 <UART_SetConfig+0x33e>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	77fb      	strb	r3, [r7, #31]
 800ee5e:	e00d      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee60:	2302      	movs	r3, #2
 800ee62:	77fb      	strb	r3, [r7, #31]
 800ee64:	e00a      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee66:	2304      	movs	r3, #4
 800ee68:	77fb      	strb	r3, [r7, #31]
 800ee6a:	e007      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee6c:	2308      	movs	r3, #8
 800ee6e:	77fb      	strb	r3, [r7, #31]
 800ee70:	e004      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee72:	2310      	movs	r3, #16
 800ee74:	77fb      	strb	r3, [r7, #31]
 800ee76:	e001      	b.n	800ee7c <UART_SetConfig+0x348>
 800ee78:	2310      	movs	r3, #16
 800ee7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee84:	d15b      	bne.n	800ef3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ee86:	7ffb      	ldrb	r3, [r7, #31]
 800ee88:	2b08      	cmp	r3, #8
 800ee8a:	d828      	bhi.n	800eede <UART_SetConfig+0x3aa>
 800ee8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ee94 <UART_SetConfig+0x360>)
 800ee8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee92:	bf00      	nop
 800ee94:	0800eeb9 	.word	0x0800eeb9
 800ee98:	0800eec1 	.word	0x0800eec1
 800ee9c:	0800eec9 	.word	0x0800eec9
 800eea0:	0800eedf 	.word	0x0800eedf
 800eea4:	0800eecf 	.word	0x0800eecf
 800eea8:	0800eedf 	.word	0x0800eedf
 800eeac:	0800eedf 	.word	0x0800eedf
 800eeb0:	0800eedf 	.word	0x0800eedf
 800eeb4:	0800eed7 	.word	0x0800eed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eeb8:	f7fc feb2 	bl	800bc20 <HAL_RCC_GetPCLK1Freq>
 800eebc:	61b8      	str	r0, [r7, #24]
        break;
 800eebe:	e013      	b.n	800eee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eec0:	f7fc fec2 	bl	800bc48 <HAL_RCC_GetPCLK2Freq>
 800eec4:	61b8      	str	r0, [r7, #24]
        break;
 800eec6:	e00f      	b.n	800eee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eec8:	4b4b      	ldr	r3, [pc, #300]	@ (800eff8 <UART_SetConfig+0x4c4>)
 800eeca:	61bb      	str	r3, [r7, #24]
        break;
 800eecc:	e00c      	b.n	800eee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eece:	f7fc fd95 	bl	800b9fc <HAL_RCC_GetSysClockFreq>
 800eed2:	61b8      	str	r0, [r7, #24]
        break;
 800eed4:	e008      	b.n	800eee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eeda:	61bb      	str	r3, [r7, #24]
        break;
 800eedc:	e004      	b.n	800eee8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800eede:	2300      	movs	r3, #0
 800eee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	77bb      	strb	r3, [r7, #30]
        break;
 800eee6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d074      	beq.n	800efd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	005a      	lsls	r2, r3, #1
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	085b      	lsrs	r3, r3, #1
 800eef8:	441a      	add	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	2b0f      	cmp	r3, #15
 800ef08:	d916      	bls.n	800ef38 <UART_SetConfig+0x404>
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef10:	d212      	bcs.n	800ef38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f023 030f 	bic.w	r3, r3, #15
 800ef1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	085b      	lsrs	r3, r3, #1
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	f003 0307 	and.w	r3, r3, #7
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	89fb      	ldrh	r3, [r7, #14]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	89fa      	ldrh	r2, [r7, #14]
 800ef34:	60da      	str	r2, [r3, #12]
 800ef36:	e04f      	b.n	800efd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	77bb      	strb	r3, [r7, #30]
 800ef3c:	e04c      	b.n	800efd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ef3e:	7ffb      	ldrb	r3, [r7, #31]
 800ef40:	2b08      	cmp	r3, #8
 800ef42:	d828      	bhi.n	800ef96 <UART_SetConfig+0x462>
 800ef44:	a201      	add	r2, pc, #4	@ (adr r2, 800ef4c <UART_SetConfig+0x418>)
 800ef46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4a:	bf00      	nop
 800ef4c:	0800ef71 	.word	0x0800ef71
 800ef50:	0800ef79 	.word	0x0800ef79
 800ef54:	0800ef81 	.word	0x0800ef81
 800ef58:	0800ef97 	.word	0x0800ef97
 800ef5c:	0800ef87 	.word	0x0800ef87
 800ef60:	0800ef97 	.word	0x0800ef97
 800ef64:	0800ef97 	.word	0x0800ef97
 800ef68:	0800ef97 	.word	0x0800ef97
 800ef6c:	0800ef8f 	.word	0x0800ef8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef70:	f7fc fe56 	bl	800bc20 <HAL_RCC_GetPCLK1Freq>
 800ef74:	61b8      	str	r0, [r7, #24]
        break;
 800ef76:	e013      	b.n	800efa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef78:	f7fc fe66 	bl	800bc48 <HAL_RCC_GetPCLK2Freq>
 800ef7c:	61b8      	str	r0, [r7, #24]
        break;
 800ef7e:	e00f      	b.n	800efa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef80:	4b1d      	ldr	r3, [pc, #116]	@ (800eff8 <UART_SetConfig+0x4c4>)
 800ef82:	61bb      	str	r3, [r7, #24]
        break;
 800ef84:	e00c      	b.n	800efa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef86:	f7fc fd39 	bl	800b9fc <HAL_RCC_GetSysClockFreq>
 800ef8a:	61b8      	str	r0, [r7, #24]
        break;
 800ef8c:	e008      	b.n	800efa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef92:	61bb      	str	r3, [r7, #24]
        break;
 800ef94:	e004      	b.n	800efa0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ef96:	2300      	movs	r3, #0
 800ef98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	77bb      	strb	r3, [r7, #30]
        break;
 800ef9e:	bf00      	nop
    }

    if (pclk != 0U)
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d018      	beq.n	800efd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	085a      	lsrs	r2, r3, #1
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	441a      	add	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800efb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2b0f      	cmp	r3, #15
 800efbe:	d909      	bls.n	800efd4 <UART_SetConfig+0x4a0>
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efc6:	d205      	bcs.n	800efd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	60da      	str	r2, [r3, #12]
 800efd2:	e001      	b.n	800efd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800efe4:	7fbb      	ldrb	r3, [r7, #30]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	40007c00 	.word	0x40007c00
 800eff4:	40023800 	.word	0x40023800
 800eff8:	00f42400 	.word	0x00f42400

0800effc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f008:	f003 0301 	and.w	r3, r3, #1
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00a      	beq.n	800f026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	430a      	orrs	r2, r1
 800f024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02a:	f003 0302 	and.w	r3, r3, #2
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00a      	beq.n	800f048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	430a      	orrs	r2, r1
 800f046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00a      	beq.n	800f06a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	430a      	orrs	r2, r1
 800f068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f06e:	f003 0308 	and.w	r3, r3, #8
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00a      	beq.n	800f08c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	430a      	orrs	r2, r1
 800f08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f090:	f003 0310 	and.w	r3, r3, #16
 800f094:	2b00      	cmp	r3, #0
 800f096:	d00a      	beq.n	800f0ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	430a      	orrs	r2, r1
 800f0ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0b2:	f003 0320 	and.w	r3, r3, #32
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00a      	beq.n	800f0d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	430a      	orrs	r2, r1
 800f0ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01a      	beq.n	800f112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	430a      	orrs	r2, r1
 800f0f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0fa:	d10a      	bne.n	800f112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	430a      	orrs	r2, r1
 800f110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00a      	beq.n	800f134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	430a      	orrs	r2, r1
 800f132:	605a      	str	r2, [r3, #4]
  }
}
 800f134:	bf00      	nop
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af02      	add	r7, sp, #8
 800f146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f150:	f7fa fad4 	bl	80096fc <HAL_GetTick>
 800f154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f003 0308 	and.w	r3, r3, #8
 800f160:	2b08      	cmp	r3, #8
 800f162:	d10e      	bne.n	800f182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f81b 	bl	800f1ae <UART_WaitOnFlagUntilTimeout>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f17e:	2303      	movs	r3, #3
 800f180:	e011      	b.n	800f1a6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2220      	movs	r2, #32
 800f186:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b09c      	sub	sp, #112	@ 0x70
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	60f8      	str	r0, [r7, #12]
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	603b      	str	r3, [r7, #0]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1be:	e0a7      	b.n	800f310 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1c6:	f000 80a3 	beq.w	800f310 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1ca:	f7fa fa97 	bl	80096fc <HAL_GetTick>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d302      	bcc.n	800f1e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800f1da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d13f      	bne.n	800f260 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1e8:	e853 3f00 	ldrex	r3, [r3]
 800f1ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f1ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800f1f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f200:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f202:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f204:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f206:	e841 2300 	strex	r3, r2, [r1]
 800f20a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800f20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1e6      	bne.n	800f1e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	3308      	adds	r3, #8
 800f218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f21c:	e853 3f00 	ldrex	r3, [r3]
 800f220:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f224:	f023 0301 	bic.w	r3, r3, #1
 800f228:	663b      	str	r3, [r7, #96]	@ 0x60
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3308      	adds	r3, #8
 800f230:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f232:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f234:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f23a:	e841 2300 	strex	r3, r2, [r1]
 800f23e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e5      	bne.n	800f212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2220      	movs	r2, #32
 800f24a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2220      	movs	r2, #32
 800f250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800f25c:	2303      	movs	r3, #3
 800f25e:	e068      	b.n	800f332 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f003 0304 	and.w	r3, r3, #4
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d050      	beq.n	800f310 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f27c:	d148      	bne.n	800f310 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f286:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f298:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800f29c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2a8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e6      	bne.n	800f288 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3308      	adds	r3, #8
 800f2c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	e853 3f00 	ldrex	r3, [r3]
 800f2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	f023 0301 	bic.w	r3, r3, #1
 800f2d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3308      	adds	r3, #8
 800f2d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f2da:	623a      	str	r2, [r7, #32]
 800f2dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2de:	69f9      	ldr	r1, [r7, #28]
 800f2e0:	6a3a      	ldr	r2, [r7, #32]
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e5      	bne.n	800f2ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2220      	movs	r2, #32
 800f2f2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2220      	movs	r2, #32
 800f2f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2220      	movs	r2, #32
 800f300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f30c:	2303      	movs	r3, #3
 800f30e:	e010      	b.n	800f332 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	69da      	ldr	r2, [r3, #28]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	4013      	ands	r3, r2
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	bf0c      	ite	eq
 800f320:	2301      	moveq	r3, #1
 800f322:	2300      	movne	r3, #0
 800f324:	b2db      	uxtb	r3, r3
 800f326:	461a      	mov	r2, r3
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	f43f af48 	beq.w	800f1c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3770      	adds	r7, #112	@ 0x70
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b096      	sub	sp, #88	@ 0x58
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4613      	mov	r3, r2
 800f348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	88fa      	ldrh	r2, [r7, #6]
 800f354:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2222      	movs	r2, #34	@ 0x22
 800f364:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d028      	beq.n	800f3c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f374:	4a3e      	ldr	r2, [pc, #248]	@ (800f470 <UART_Start_Receive_DMA+0x134>)
 800f376:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f37c:	4a3d      	ldr	r2, [pc, #244]	@ (800f474 <UART_Start_Receive_DMA+0x138>)
 800f37e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f384:	4a3c      	ldr	r2, [pc, #240]	@ (800f478 <UART_Start_Receive_DMA+0x13c>)
 800f386:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38c:	2200      	movs	r2, #0
 800f38e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3324      	adds	r3, #36	@ 0x24
 800f39a:	4619      	mov	r1, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	88fb      	ldrh	r3, [r7, #6]
 800f3a4:	f7fb f9e6 	bl	800a774 <HAL_DMA_Start_IT>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d009      	beq.n	800f3c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2210      	movs	r2, #16
 800f3b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2220      	movs	r2, #32
 800f3ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e051      	b.n	800f466 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d018      	beq.n	800f3fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d2:	e853 3f00 	ldrex	r3, [r3]
 800f3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3de:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3f0:	e841 2300 	strex	r3, r2, [r1]
 800f3f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1e6      	bne.n	800f3ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3308      	adds	r3, #8
 800f402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f406:	e853 3f00 	ldrex	r3, [r3]
 800f40a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40e:	f043 0301 	orr.w	r3, r3, #1
 800f412:	653b      	str	r3, [r7, #80]	@ 0x50
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	3308      	adds	r3, #8
 800f41a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f41c:	637a      	str	r2, [r7, #52]	@ 0x34
 800f41e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f420:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f424:	e841 2300 	strex	r3, r2, [r1]
 800f428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d1e5      	bne.n	800f3fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3308      	adds	r3, #8
 800f436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	e853 3f00 	ldrex	r3, [r3]
 800f43e:	613b      	str	r3, [r7, #16]
   return(result);
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	3308      	adds	r3, #8
 800f44e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f450:	623a      	str	r2, [r7, #32]
 800f452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f454:	69f9      	ldr	r1, [r7, #28]
 800f456:	6a3a      	ldr	r2, [r7, #32]
 800f458:	e841 2300 	strex	r3, r2, [r1]
 800f45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e5      	bne.n	800f430 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3758      	adds	r7, #88	@ 0x58
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0800f643 	.word	0x0800f643
 800f474:	0800f76b 	.word	0x0800f76b
 800f478:	0800f7a9 	.word	0x0800f7a9

0800f47c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b089      	sub	sp, #36	@ 0x24
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	60bb      	str	r3, [r7, #8]
   return(result);
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f498:	61fb      	str	r3, [r7, #28]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	61bb      	str	r3, [r7, #24]
 800f4a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a6:	6979      	ldr	r1, [r7, #20]
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	e841 2300 	strex	r3, r2, [r1]
 800f4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e6      	bne.n	800f484 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f4bc:	bf00      	nop
 800f4be:	3724      	adds	r7, #36	@ 0x24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b095      	sub	sp, #84	@ 0x54
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4d8:	e853 3f00 	ldrex	r3, [r3]
 800f4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4f6:	e841 2300 	strex	r3, r2, [r1]
 800f4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e6      	bne.n	800f4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3308      	adds	r3, #8
 800f508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	61fb      	str	r3, [r7, #28]
   return(result);
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	f023 0301 	bic.w	r3, r3, #1
 800f518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	3308      	adds	r3, #8
 800f520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f52a:	e841 2300 	strex	r3, r2, [r1]
 800f52e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1e5      	bne.n	800f502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d118      	bne.n	800f570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f023 0310 	bic.w	r3, r3, #16
 800f552:	647b      	str	r3, [r7, #68]	@ 0x44
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f55c:	61bb      	str	r3, [r7, #24]
 800f55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f560:	6979      	ldr	r1, [r7, #20]
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	e841 2300 	strex	r3, r2, [r1]
 800f568:	613b      	str	r3, [r7, #16]
   return(result);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1e6      	bne.n	800f53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f584:	bf00      	nop
 800f586:	3754      	adds	r7, #84	@ 0x54
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b090      	sub	sp, #64	@ 0x40
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	69db      	ldr	r3, [r3, #28]
 800f5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5a6:	d037      	beq.n	800f618 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3308      	adds	r3, #8
 800f5b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ba:	e853 3f00 	ldrex	r3, [r3]
 800f5be:	623b      	str	r3, [r7, #32]
   return(result);
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800f5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5d8:	e841 2300 	strex	r3, r2, [r1]
 800f5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d1e5      	bne.n	800f5b0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f602:	61fb      	str	r3, [r7, #28]
 800f604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f606:	69b9      	ldr	r1, [r7, #24]
 800f608:	69fa      	ldr	r2, [r7, #28]
 800f60a:	e841 2300 	strex	r3, r2, [r1]
 800f60e:	617b      	str	r3, [r7, #20]
   return(result);
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e6      	bne.n	800f5e4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f616:	e002      	b.n	800f61e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f618:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f61a:	f7f7 f87d 	bl	8006718 <HAL_UART_TxCpltCallback>
}
 800f61e:	bf00      	nop
 800f620:	3740      	adds	r7, #64	@ 0x40
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f626:	b580      	push	{r7, lr}
 800f628:	b084      	sub	sp, #16
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f632:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f7ff fa53 	bl	800eae0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f63a:	bf00      	nop
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b09c      	sub	sp, #112	@ 0x70
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f64e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	69db      	ldr	r3, [r3, #28]
 800f654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f658:	d071      	beq.n	800f73e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f65c:	2200      	movs	r2, #0
 800f65e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f66a:	e853 3f00 	ldrex	r3, [r3]
 800f66e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f672:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f676:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	461a      	mov	r2, r3
 800f67e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f680:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f682:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f686:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f688:	e841 2300 	strex	r3, r2, [r1]
 800f68c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f68e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e6      	bne.n	800f662 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3308      	adds	r3, #8
 800f69a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69e:	e853 3f00 	ldrex	r3, [r3]
 800f6a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6a6:	f023 0301 	bic.w	r3, r3, #1
 800f6aa:	667b      	str	r3, [r7, #100]	@ 0x64
 800f6ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f6b4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f6b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e5      	bne.n	800f694 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d2:	e853 3f00 	ldrex	r3, [r3]
 800f6d6:	623b      	str	r3, [r7, #32]
   return(result);
 800f6d8:	6a3b      	ldr	r3, [r7, #32]
 800f6da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6de:	663b      	str	r3, [r7, #96]	@ 0x60
 800f6e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3308      	adds	r3, #8
 800f6e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f6e8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6f0:	e841 2300 	strex	r3, r2, [r1]
 800f6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1e5      	bne.n	800f6c8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6fe:	2220      	movs	r2, #32
 800f700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d118      	bne.n	800f73e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f70c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	e853 3f00 	ldrex	r3, [r3]
 800f718:	60fb      	str	r3, [r7, #12]
   return(result);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f023 0310 	bic.w	r3, r3, #16
 800f720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72e:	69b9      	ldr	r1, [r7, #24]
 800f730:	69fa      	ldr	r2, [r7, #28]
 800f732:	e841 2300 	strex	r3, r2, [r1]
 800f736:	617b      	str	r3, [r7, #20]
   return(result);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e6      	bne.n	800f70c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f73e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f740:	2200      	movs	r2, #0
 800f742:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d107      	bne.n	800f75c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f74c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f74e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f752:	4619      	mov	r1, r3
 800f754:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f756:	f7ff f9e1 	bl	800eb1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f75a:	e002      	b.n	800f762 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f75c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f75e:	f7f6 fff7 	bl	8006750 <HAL_UART_RxCpltCallback>
}
 800f762:	bf00      	nop
 800f764:	3770      	adds	r7, #112	@ 0x70
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f776:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f782:	2b01      	cmp	r3, #1
 800f784:	d109      	bne.n	800f79a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f78c:	085b      	lsrs	r3, r3, #1
 800f78e:	b29b      	uxth	r3, r3
 800f790:	4619      	mov	r1, r3
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff f9c2 	bl	800eb1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f798:	e002      	b.n	800f7a0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7ff f9aa 	bl	800eaf4 <HAL_UART_RxHalfCpltCallback>
}
 800f7a0:	bf00      	nop
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7ce:	2b80      	cmp	r3, #128	@ 0x80
 800f7d0:	d109      	bne.n	800f7e6 <UART_DMAError+0x3e>
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	2b21      	cmp	r3, #33	@ 0x21
 800f7d6:	d106      	bne.n	800f7e6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f7e0:	6978      	ldr	r0, [r7, #20]
 800f7e2:	f7ff fe4b 	bl	800f47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7f0:	2b40      	cmp	r3, #64	@ 0x40
 800f7f2:	d109      	bne.n	800f808 <UART_DMAError+0x60>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b22      	cmp	r3, #34	@ 0x22
 800f7f8:	d106      	bne.n	800f808 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f802:	6978      	ldr	r0, [r7, #20]
 800f804:	f7ff fe60 	bl	800f4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f80e:	f043 0210 	orr.w	r2, r3, #16
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f818:	6978      	ldr	r0, [r7, #20]
 800f81a:	f7ff f975 	bl	800eb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f81e:	bf00      	nop
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b084      	sub	sp, #16
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2200      	movs	r2, #0
 800f838:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f7ff f95f 	bl	800eb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f84a:	bf00      	nop
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}

0800f852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b088      	sub	sp, #32
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	e853 3f00 	ldrex	r3, [r3]
 800f866:	60bb      	str	r3, [r7, #8]
   return(result);
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f86e:	61fb      	str	r3, [r7, #28]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	461a      	mov	r2, r3
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	61bb      	str	r3, [r7, #24]
 800f87a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87c:	6979      	ldr	r1, [r7, #20]
 800f87e:	69ba      	ldr	r2, [r7, #24]
 800f880:	e841 2300 	strex	r3, r2, [r1]
 800f884:	613b      	str	r3, [r7, #16]
   return(result);
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1e6      	bne.n	800f85a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2220      	movs	r2, #32
 800f890:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f7f6 ff3d 	bl	8006718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f89e:	bf00      	nop
 800f8a0:	3720      	adds	r7, #32
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f8a6:	b480      	push	{r7}
 800f8a8:	b085      	sub	sp, #20
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f8b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8b8:	2b84      	cmp	r3, #132	@ 0x84
 800f8ba:	d005      	beq.n	800f8c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f8bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	3303      	adds	r3, #3
 800f8c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3714      	adds	r7, #20
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f8da:	f000 faef 	bl	800febc <vTaskStartScheduler>
  
  return osOK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e6:	b089      	sub	sp, #36	@ 0x24
 800f8e8:	af04      	add	r7, sp, #16
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	695b      	ldr	r3, [r3, #20]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d020      	beq.n	800f938 <osThreadCreate+0x54>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d01c      	beq.n	800f938 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	685c      	ldr	r4, [r3, #4]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	691e      	ldr	r6, [r3, #16]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff ffc8 	bl	800f8a6 <makeFreeRtosPriority>
 800f916:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	695b      	ldr	r3, [r3, #20]
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f920:	9202      	str	r2, [sp, #8]
 800f922:	9301      	str	r3, [sp, #4]
 800f924:	9100      	str	r1, [sp, #0]
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	4632      	mov	r2, r6
 800f92a:	4629      	mov	r1, r5
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 f8ed 	bl	800fb0c <xTaskCreateStatic>
 800f932:	4603      	mov	r3, r0
 800f934:	60fb      	str	r3, [r7, #12]
 800f936:	e01c      	b.n	800f972 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685c      	ldr	r4, [r3, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f944:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7ff ffaa 	bl	800f8a6 <makeFreeRtosPriority>
 800f952:	4602      	mov	r2, r0
 800f954:	f107 030c 	add.w	r3, r7, #12
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	9200      	str	r2, [sp, #0]
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	4632      	mov	r2, r6
 800f960:	4629      	mov	r1, r5
 800f962:	4620      	mov	r0, r4
 800f964:	f000 f938 	bl	800fbd8 <xTaskCreate>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d001      	beq.n	800f972 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f96e:	2300      	movs	r3, #0
 800f970:	e000      	b.n	800f974 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f972:	68fb      	ldr	r3, [r7, #12]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3714      	adds	r7, #20
 800f978:	46bd      	mov	sp, r7
 800f97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f97c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <osDelay+0x16>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	e000      	b.n	800f994 <osDelay+0x18>
 800f992:	2301      	movs	r3, #1
 800f994:	4618      	mov	r0, r3
 800f996:	f000 fa59 	bl	800fe4c <vTaskDelay>
  
  return osOK;
 800f99a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f103 0208 	add.w	r2, r3, #8
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f103 0208 	add.w	r2, r3, #8
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f103 0208 	add.w	r2, r3, #8
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f9f2:	bf00      	nop
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b085      	sub	sp, #20
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
 800fa06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	689a      	ldr	r2, [r3, #8]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	683a      	ldr	r2, [r7, #0]
 800fa22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	683a      	ldr	r2, [r7, #0]
 800fa28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	601a      	str	r2, [r3, #0]
}
 800fa3a:	bf00      	nop
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa46:	b480      	push	{r7}
 800fa48:	b085      	sub	sp, #20
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa5c:	d103      	bne.n	800fa66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	e00c      	b.n	800fa80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3308      	adds	r3, #8
 800fa6a:	60fb      	str	r3, [r7, #12]
 800fa6c:	e002      	b.n	800fa74 <vListInsert+0x2e>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68ba      	ldr	r2, [r7, #8]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d2f6      	bcs.n	800fa6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	601a      	str	r2, [r3, #0]
}
 800faac:	bf00      	nop
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	6892      	ldr	r2, [r2, #8]
 800face:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	6852      	ldr	r2, [r2, #4]
 800fad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d103      	bne.n	800faec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	689a      	ldr	r2, [r3, #8]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	1e5a      	subs	r2, r3, #1
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08e      	sub	sp, #56	@ 0x38
 800fb10:	af04      	add	r7, sp, #16
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d10d      	bne.n	800fb3c <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb24:	b672      	cpsid	i
 800fb26:	f383 8811 	msr	BASEPRI, r3
 800fb2a:	f3bf 8f6f 	isb	sy
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	b662      	cpsie	i
 800fb34:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fb36:	bf00      	nop
 800fb38:	bf00      	nop
 800fb3a:	e7fd      	b.n	800fb38 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10d      	bne.n	800fb5e <xTaskCreateStatic+0x52>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb46:	b672      	cpsid	i
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	b662      	cpsie	i
 800fb56:	61fb      	str	r3, [r7, #28]
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	e7fd      	b.n	800fb5a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb5e:	2354      	movs	r3, #84	@ 0x54
 800fb60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	2b54      	cmp	r3, #84	@ 0x54
 800fb66:	d00d      	beq.n	800fb84 <xTaskCreateStatic+0x78>
	__asm volatile
 800fb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6c:	b672      	cpsid	i
 800fb6e:	f383 8811 	msr	BASEPRI, r3
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	f3bf 8f4f 	dsb	sy
 800fb7a:	b662      	cpsie	i
 800fb7c:	61bb      	str	r3, [r7, #24]
}
 800fb7e:	bf00      	nop
 800fb80:	bf00      	nop
 800fb82:	e7fd      	b.n	800fb80 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d01e      	beq.n	800fbca <xTaskCreateStatic+0xbe>
 800fb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d01b      	beq.n	800fbca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fba4:	2300      	movs	r3, #0
 800fba6:	9303      	str	r3, [sp, #12]
 800fba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbaa:	9302      	str	r3, [sp, #8]
 800fbac:	f107 0314 	add.w	r3, r7, #20
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	68b9      	ldr	r1, [r7, #8]
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f000 f850 	bl	800fc62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbc4:	f000 f8d8 	bl	800fd78 <prvAddNewTaskToReadyList>
 800fbc8:	e001      	b.n	800fbce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbce:	697b      	ldr	r3, [r7, #20]
	}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3728      	adds	r7, #40	@ 0x28
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b08c      	sub	sp, #48	@ 0x30
 800fbdc:	af04      	add	r7, sp, #16
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	603b      	str	r3, [r7, #0]
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fbe8:	88fb      	ldrh	r3, [r7, #6]
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 fec5 	bl	801097c <pvPortMalloc>
 800fbf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00e      	beq.n	800fc18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fbfa:	2054      	movs	r0, #84	@ 0x54
 800fbfc:	f000 febe 	bl	801097c <pvPortMalloc>
 800fc00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d003      	beq.n	800fc10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc0e:	e005      	b.n	800fc1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc10:	6978      	ldr	r0, [r7, #20]
 800fc12:	f000 ff81 	bl	8010b18 <vPortFree>
 800fc16:	e001      	b.n	800fc1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d017      	beq.n	800fc52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc2a:	88fa      	ldrh	r2, [r7, #6]
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9303      	str	r3, [sp, #12]
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	9302      	str	r3, [sp, #8]
 800fc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	68b9      	ldr	r1, [r7, #8]
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f000 f80e 	bl	800fc62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc46:	69f8      	ldr	r0, [r7, #28]
 800fc48:	f000 f896 	bl	800fd78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	61bb      	str	r3, [r7, #24]
 800fc50:	e002      	b.n	800fc58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc58:	69bb      	ldr	r3, [r7, #24]
	}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b088      	sub	sp, #32
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	60f8      	str	r0, [r7, #12]
 800fc6a:	60b9      	str	r1, [r7, #8]
 800fc6c:	607a      	str	r2, [r7, #4]
 800fc6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc74:	6879      	ldr	r1, [r7, #4]
 800fc76:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fc7a:	440b      	add	r3, r1
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	f023 0307 	bic.w	r3, r3, #7
 800fc88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	f003 0307 	and.w	r3, r3, #7
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00d      	beq.n	800fcb0 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800fc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc98:	b672      	cpsid	i
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	b662      	cpsie	i
 800fca8:	617b      	str	r3, [r7, #20]
}
 800fcaa:	bf00      	nop
 800fcac:	bf00      	nop
 800fcae:	e7fd      	b.n	800fcac <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d01f      	beq.n	800fcf6 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	61fb      	str	r3, [r7, #28]
 800fcba:	e012      	b.n	800fce2 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	7819      	ldrb	r1, [r3, #0]
 800fcc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	4413      	add	r3, r2
 800fcca:	3334      	adds	r3, #52	@ 0x34
 800fccc:	460a      	mov	r2, r1
 800fcce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d006      	beq.n	800fcea <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	3301      	adds	r3, #1
 800fce0:	61fb      	str	r3, [r7, #28]
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	2b0f      	cmp	r3, #15
 800fce6:	d9e9      	bls.n	800fcbc <prvInitialiseNewTask+0x5a>
 800fce8:	e000      	b.n	800fcec <prvInitialiseNewTask+0x8a>
			{
				break;
 800fcea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fcf4:	e003      	b.n	800fcfe <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fcfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd00:	2b06      	cmp	r3, #6
 800fd02:	d901      	bls.n	800fd08 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd04:	2306      	movs	r3, #6
 800fd06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd12:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd16:	2200      	movs	r2, #0
 800fd18:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff fe60 	bl	800f9e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd26:	3318      	adds	r3, #24
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fe5b 	bl	800f9e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd36:	f1c3 0207 	rsb	r2, r3, #7
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd46:	2200      	movs	r2, #0
 800fd48:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	68f9      	ldr	r1, [r7, #12]
 800fd56:	69b8      	ldr	r0, [r7, #24]
 800fd58:	f000 fc1c 	bl	8010594 <pxPortInitialiseStack>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd6e:	bf00      	nop
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
	...

0800fd78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fd80:	f000 fd14 	bl	80107ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fd84:	4b2a      	ldr	r3, [pc, #168]	@ (800fe30 <prvAddNewTaskToReadyList+0xb8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3301      	adds	r3, #1
 800fd8a:	4a29      	ldr	r2, [pc, #164]	@ (800fe30 <prvAddNewTaskToReadyList+0xb8>)
 800fd8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fd8e:	4b29      	ldr	r3, [pc, #164]	@ (800fe34 <prvAddNewTaskToReadyList+0xbc>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d109      	bne.n	800fdaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fd96:	4a27      	ldr	r2, [pc, #156]	@ (800fe34 <prvAddNewTaskToReadyList+0xbc>)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd9c:	4b24      	ldr	r3, [pc, #144]	@ (800fe30 <prvAddNewTaskToReadyList+0xb8>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d110      	bne.n	800fdc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fda4:	f000 fad0 	bl	8010348 <prvInitialiseTaskLists>
 800fda8:	e00d      	b.n	800fdc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdaa:	4b23      	ldr	r3, [pc, #140]	@ (800fe38 <prvAddNewTaskToReadyList+0xc0>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d109      	bne.n	800fdc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdb2:	4b20      	ldr	r3, [pc, #128]	@ (800fe34 <prvAddNewTaskToReadyList+0xbc>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d802      	bhi.n	800fdc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fdc0:	4a1c      	ldr	r2, [pc, #112]	@ (800fe34 <prvAddNewTaskToReadyList+0xbc>)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fdc6:	4b1d      	ldr	r3, [pc, #116]	@ (800fe3c <prvAddNewTaskToReadyList+0xc4>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	4a1b      	ldr	r2, [pc, #108]	@ (800fe3c <prvAddNewTaskToReadyList+0xc4>)
 800fdce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	409a      	lsls	r2, r3
 800fdd8:	4b19      	ldr	r3, [pc, #100]	@ (800fe40 <prvAddNewTaskToReadyList+0xc8>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4313      	orrs	r3, r2
 800fdde:	4a18      	ldr	r2, [pc, #96]	@ (800fe40 <prvAddNewTaskToReadyList+0xc8>)
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fde6:	4613      	mov	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	4413      	add	r3, r2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	4a15      	ldr	r2, [pc, #84]	@ (800fe44 <prvAddNewTaskToReadyList+0xcc>)
 800fdf0:	441a      	add	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3304      	adds	r3, #4
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	f7ff fe00 	bl	800f9fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fdfe:	f000 fd0b 	bl	8010818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe02:	4b0d      	ldr	r3, [pc, #52]	@ (800fe38 <prvAddNewTaskToReadyList+0xc0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00e      	beq.n	800fe28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fe34 <prvAddNewTaskToReadyList+0xbc>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d207      	bcs.n	800fe28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe18:	4b0b      	ldr	r3, [pc, #44]	@ (800fe48 <prvAddNewTaskToReadyList+0xd0>)
 800fe1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe1e:	601a      	str	r2, [r3, #0]
 800fe20:	f3bf 8f4f 	dsb	sy
 800fe24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe28:	bf00      	nop
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20003578 	.word	0x20003578
 800fe34:	20003478 	.word	0x20003478
 800fe38:	20003584 	.word	0x20003584
 800fe3c:	20003594 	.word	0x20003594
 800fe40:	20003580 	.word	0x20003580
 800fe44:	2000347c 	.word	0x2000347c
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe54:	2300      	movs	r3, #0
 800fe56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d01a      	beq.n	800fe94 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe5e:	4b15      	ldr	r3, [pc, #84]	@ (800feb4 <vTaskDelay+0x68>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00d      	beq.n	800fe82 <vTaskDelay+0x36>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6a:	b672      	cpsid	i
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	b662      	cpsie	i
 800fe7a:	60bb      	str	r3, [r7, #8]
}
 800fe7c:	bf00      	nop
 800fe7e:	bf00      	nop
 800fe80:	e7fd      	b.n	800fe7e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fe82:	f000 f881 	bl	800ff88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fe86:	2100      	movs	r1, #0
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fb1d 	bl	80104c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe8e:	f000 f889 	bl	800ffa4 <xTaskResumeAll>
 800fe92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d107      	bne.n	800feaa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800fe9a:	4b07      	ldr	r3, [pc, #28]	@ (800feb8 <vTaskDelay+0x6c>)
 800fe9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800feaa:	bf00      	nop
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	200035a0 	.word	0x200035a0
 800feb8:	e000ed04 	.word	0xe000ed04

0800febc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08a      	sub	sp, #40	@ 0x28
 800fec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800feca:	463a      	mov	r2, r7
 800fecc:	1d39      	adds	r1, r7, #4
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f2 f982 	bl	80021dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fed8:	6839      	ldr	r1, [r7, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	9202      	str	r2, [sp, #8]
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	2300      	movs	r3, #0
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	2300      	movs	r3, #0
 800fee8:	460a      	mov	r2, r1
 800feea:	4921      	ldr	r1, [pc, #132]	@ (800ff70 <vTaskStartScheduler+0xb4>)
 800feec:	4821      	ldr	r0, [pc, #132]	@ (800ff74 <vTaskStartScheduler+0xb8>)
 800feee:	f7ff fe0d 	bl	800fb0c <xTaskCreateStatic>
 800fef2:	4603      	mov	r3, r0
 800fef4:	4a20      	ldr	r2, [pc, #128]	@ (800ff78 <vTaskStartScheduler+0xbc>)
 800fef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fef8:	4b1f      	ldr	r3, [pc, #124]	@ (800ff78 <vTaskStartScheduler+0xbc>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d002      	beq.n	800ff06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff00:	2301      	movs	r3, #1
 800ff02:	617b      	str	r3, [r7, #20]
 800ff04:	e001      	b.n	800ff0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff06:	2300      	movs	r3, #0
 800ff08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d118      	bne.n	800ff42 <vTaskStartScheduler+0x86>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	b672      	cpsid	i
 800ff16:	f383 8811 	msr	BASEPRI, r3
 800ff1a:	f3bf 8f6f 	isb	sy
 800ff1e:	f3bf 8f4f 	dsb	sy
 800ff22:	b662      	cpsie	i
 800ff24:	613b      	str	r3, [r7, #16]
}
 800ff26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff28:	4b14      	ldr	r3, [pc, #80]	@ (800ff7c <vTaskStartScheduler+0xc0>)
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff30:	4b13      	ldr	r3, [pc, #76]	@ (800ff80 <vTaskStartScheduler+0xc4>)
 800ff32:	2201      	movs	r2, #1
 800ff34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff36:	4b13      	ldr	r3, [pc, #76]	@ (800ff84 <vTaskStartScheduler+0xc8>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff3c:	f000 fbb8 	bl	80106b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff40:	e011      	b.n	800ff66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff48:	d10d      	bne.n	800ff66 <vTaskStartScheduler+0xaa>
	__asm volatile
 800ff4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff4e:	b672      	cpsid	i
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	b662      	cpsie	i
 800ff5e:	60fb      	str	r3, [r7, #12]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <vTaskStartScheduler+0xa6>
}
 800ff66:	bf00      	nop
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	08013914 	.word	0x08013914
 800ff74:	08010319 	.word	0x08010319
 800ff78:	2000359c 	.word	0x2000359c
 800ff7c:	20003598 	.word	0x20003598
 800ff80:	20003584 	.word	0x20003584
 800ff84:	2000357c 	.word	0x2000357c

0800ff88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff88:	b480      	push	{r7}
 800ff8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ff8c:	4b04      	ldr	r3, [pc, #16]	@ (800ffa0 <vTaskSuspendAll+0x18>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3301      	adds	r3, #1
 800ff92:	4a03      	ldr	r2, [pc, #12]	@ (800ffa0 <vTaskSuspendAll+0x18>)
 800ff94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ff96:	bf00      	nop
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	200035a0 	.word	0x200035a0

0800ffa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffb2:	4b43      	ldr	r3, [pc, #268]	@ (80100c0 <xTaskResumeAll+0x11c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10d      	bne.n	800ffd6 <xTaskResumeAll+0x32>
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbe:	b672      	cpsid	i
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	b662      	cpsie	i
 800ffce:	603b      	str	r3, [r7, #0]
}
 800ffd0:	bf00      	nop
 800ffd2:	bf00      	nop
 800ffd4:	e7fd      	b.n	800ffd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ffd6:	f000 fbe9 	bl	80107ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ffda:	4b39      	ldr	r3, [pc, #228]	@ (80100c0 <xTaskResumeAll+0x11c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	4a37      	ldr	r2, [pc, #220]	@ (80100c0 <xTaskResumeAll+0x11c>)
 800ffe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffe4:	4b36      	ldr	r3, [pc, #216]	@ (80100c0 <xTaskResumeAll+0x11c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d161      	bne.n	80100b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ffec:	4b35      	ldr	r3, [pc, #212]	@ (80100c4 <xTaskResumeAll+0x120>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d05d      	beq.n	80100b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fff4:	e02e      	b.n	8010054 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fff6:	4b34      	ldr	r3, [pc, #208]	@ (80100c8 <xTaskResumeAll+0x124>)
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	3318      	adds	r3, #24
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff fd58 	bl	800fab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	3304      	adds	r3, #4
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff fd53 	bl	800fab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010016:	2201      	movs	r2, #1
 8010018:	409a      	lsls	r2, r3
 801001a:	4b2c      	ldr	r3, [pc, #176]	@ (80100cc <xTaskResumeAll+0x128>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4313      	orrs	r3, r2
 8010020:	4a2a      	ldr	r2, [pc, #168]	@ (80100cc <xTaskResumeAll+0x128>)
 8010022:	6013      	str	r3, [r2, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010028:	4613      	mov	r3, r2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4a27      	ldr	r2, [pc, #156]	@ (80100d0 <xTaskResumeAll+0x12c>)
 8010032:	441a      	add	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3304      	adds	r3, #4
 8010038:	4619      	mov	r1, r3
 801003a:	4610      	mov	r0, r2
 801003c:	f7ff fcdf 	bl	800f9fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010044:	4b23      	ldr	r3, [pc, #140]	@ (80100d4 <xTaskResumeAll+0x130>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004a:	429a      	cmp	r2, r3
 801004c:	d302      	bcc.n	8010054 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801004e:	4b22      	ldr	r3, [pc, #136]	@ (80100d8 <xTaskResumeAll+0x134>)
 8010050:	2201      	movs	r2, #1
 8010052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010054:	4b1c      	ldr	r3, [pc, #112]	@ (80100c8 <xTaskResumeAll+0x124>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1cc      	bne.n	800fff6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010062:	f000 fa11 	bl	8010488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010066:	4b1d      	ldr	r3, [pc, #116]	@ (80100dc <xTaskResumeAll+0x138>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d010      	beq.n	8010094 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010072:	f000 f837 	bl	80100e4 <xTaskIncrementTick>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 801007c:	4b16      	ldr	r3, [pc, #88]	@ (80100d8 <xTaskResumeAll+0x134>)
 801007e:	2201      	movs	r2, #1
 8010080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	3b01      	subs	r3, #1
 8010086:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1f1      	bne.n	8010072 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801008e:	4b13      	ldr	r3, [pc, #76]	@ (80100dc <xTaskResumeAll+0x138>)
 8010090:	2200      	movs	r2, #0
 8010092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010094:	4b10      	ldr	r3, [pc, #64]	@ (80100d8 <xTaskResumeAll+0x134>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d009      	beq.n	80100b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801009c:	2301      	movs	r3, #1
 801009e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100a0:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <xTaskResumeAll+0x13c>)
 80100a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100b0:	f000 fbb2 	bl	8010818 <vPortExitCritical>

	return xAlreadyYielded;
 80100b4:	68bb      	ldr	r3, [r7, #8]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	200035a0 	.word	0x200035a0
 80100c4:	20003578 	.word	0x20003578
 80100c8:	20003538 	.word	0x20003538
 80100cc:	20003580 	.word	0x20003580
 80100d0:	2000347c 	.word	0x2000347c
 80100d4:	20003478 	.word	0x20003478
 80100d8:	2000358c 	.word	0x2000358c
 80100dc:	20003588 	.word	0x20003588
 80100e0:	e000ed04 	.word	0xe000ed04

080100e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80100ea:	2300      	movs	r3, #0
 80100ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100ee:	4b50      	ldr	r3, [pc, #320]	@ (8010230 <xTaskIncrementTick+0x14c>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f040 808b 	bne.w	801020e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80100f8:	4b4e      	ldr	r3, [pc, #312]	@ (8010234 <xTaskIncrementTick+0x150>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	3301      	adds	r3, #1
 80100fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010100:	4a4c      	ldr	r2, [pc, #304]	@ (8010234 <xTaskIncrementTick+0x150>)
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d123      	bne.n	8010154 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801010c:	4b4a      	ldr	r3, [pc, #296]	@ (8010238 <xTaskIncrementTick+0x154>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00d      	beq.n	8010132 <xTaskIncrementTick+0x4e>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801011a:	b672      	cpsid	i
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	b662      	cpsie	i
 801012a:	603b      	str	r3, [r7, #0]
}
 801012c:	bf00      	nop
 801012e:	bf00      	nop
 8010130:	e7fd      	b.n	801012e <xTaskIncrementTick+0x4a>
 8010132:	4b41      	ldr	r3, [pc, #260]	@ (8010238 <xTaskIncrementTick+0x154>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	60fb      	str	r3, [r7, #12]
 8010138:	4b40      	ldr	r3, [pc, #256]	@ (801023c <xTaskIncrementTick+0x158>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a3e      	ldr	r2, [pc, #248]	@ (8010238 <xTaskIncrementTick+0x154>)
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	4a3e      	ldr	r2, [pc, #248]	@ (801023c <xTaskIncrementTick+0x158>)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	4b3e      	ldr	r3, [pc, #248]	@ (8010240 <xTaskIncrementTick+0x15c>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	4a3c      	ldr	r2, [pc, #240]	@ (8010240 <xTaskIncrementTick+0x15c>)
 801014e:	6013      	str	r3, [r2, #0]
 8010150:	f000 f99a 	bl	8010488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010154:	4b3b      	ldr	r3, [pc, #236]	@ (8010244 <xTaskIncrementTick+0x160>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	429a      	cmp	r2, r3
 801015c:	d348      	bcc.n	80101f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801015e:	4b36      	ldr	r3, [pc, #216]	@ (8010238 <xTaskIncrementTick+0x154>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d104      	bne.n	8010172 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010168:	4b36      	ldr	r3, [pc, #216]	@ (8010244 <xTaskIncrementTick+0x160>)
 801016a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801016e:	601a      	str	r2, [r3, #0]
					break;
 8010170:	e03e      	b.n	80101f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010172:	4b31      	ldr	r3, [pc, #196]	@ (8010238 <xTaskIncrementTick+0x154>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d203      	bcs.n	8010192 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801018a:	4a2e      	ldr	r2, [pc, #184]	@ (8010244 <xTaskIncrementTick+0x160>)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010190:	e02e      	b.n	80101f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	3304      	adds	r3, #4
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff fc8e 	bl	800fab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d004      	beq.n	80101ae <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	3318      	adds	r3, #24
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ff fc85 	bl	800fab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b2:	2201      	movs	r2, #1
 80101b4:	409a      	lsls	r2, r3
 80101b6:	4b24      	ldr	r3, [pc, #144]	@ (8010248 <xTaskIncrementTick+0x164>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	4a22      	ldr	r2, [pc, #136]	@ (8010248 <xTaskIncrementTick+0x164>)
 80101be:	6013      	str	r3, [r2, #0]
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101c4:	4613      	mov	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	4413      	add	r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4a1f      	ldr	r2, [pc, #124]	@ (801024c <xTaskIncrementTick+0x168>)
 80101ce:	441a      	add	r2, r3
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f7ff fc11 	bl	800f9fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e0:	4b1b      	ldr	r3, [pc, #108]	@ (8010250 <xTaskIncrementTick+0x16c>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d3b9      	bcc.n	801015e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80101ea:	2301      	movs	r3, #1
 80101ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101ee:	e7b6      	b.n	801015e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80101f0:	4b17      	ldr	r3, [pc, #92]	@ (8010250 <xTaskIncrementTick+0x16c>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f6:	4915      	ldr	r1, [pc, #84]	@ (801024c <xTaskIncrementTick+0x168>)
 80101f8:	4613      	mov	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	440b      	add	r3, r1
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d907      	bls.n	8010218 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010208:	2301      	movs	r3, #1
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	e004      	b.n	8010218 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801020e:	4b11      	ldr	r3, [pc, #68]	@ (8010254 <xTaskIncrementTick+0x170>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3301      	adds	r3, #1
 8010214:	4a0f      	ldr	r2, [pc, #60]	@ (8010254 <xTaskIncrementTick+0x170>)
 8010216:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010218:	4b0f      	ldr	r3, [pc, #60]	@ (8010258 <xTaskIncrementTick+0x174>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010220:	2301      	movs	r3, #1
 8010222:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010224:	697b      	ldr	r3, [r7, #20]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	200035a0 	.word	0x200035a0
 8010234:	2000357c 	.word	0x2000357c
 8010238:	20003530 	.word	0x20003530
 801023c:	20003534 	.word	0x20003534
 8010240:	20003590 	.word	0x20003590
 8010244:	20003598 	.word	0x20003598
 8010248:	20003580 	.word	0x20003580
 801024c:	2000347c 	.word	0x2000347c
 8010250:	20003478 	.word	0x20003478
 8010254:	20003588 	.word	0x20003588
 8010258:	2000358c 	.word	0x2000358c

0801025c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801025c:	b480      	push	{r7}
 801025e:	b087      	sub	sp, #28
 8010260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010262:	4b28      	ldr	r3, [pc, #160]	@ (8010304 <vTaskSwitchContext+0xa8>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d003      	beq.n	8010272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801026a:	4b27      	ldr	r3, [pc, #156]	@ (8010308 <vTaskSwitchContext+0xac>)
 801026c:	2201      	movs	r2, #1
 801026e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010270:	e042      	b.n	80102f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010272:	4b25      	ldr	r3, [pc, #148]	@ (8010308 <vTaskSwitchContext+0xac>)
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010278:	4b24      	ldr	r3, [pc, #144]	@ (801030c <vTaskSwitchContext+0xb0>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	fab3 f383 	clz	r3, r3
 8010284:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010286:	7afb      	ldrb	r3, [r7, #11]
 8010288:	f1c3 031f 	rsb	r3, r3, #31
 801028c:	617b      	str	r3, [r7, #20]
 801028e:	4920      	ldr	r1, [pc, #128]	@ (8010310 <vTaskSwitchContext+0xb4>)
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	4613      	mov	r3, r2
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	440b      	add	r3, r1
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10d      	bne.n	80102be <vTaskSwitchContext+0x62>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a6:	b672      	cpsid	i
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	b662      	cpsie	i
 80102b6:	607b      	str	r3, [r7, #4]
}
 80102b8:	bf00      	nop
 80102ba:	bf00      	nop
 80102bc:	e7fd      	b.n	80102ba <vTaskSwitchContext+0x5e>
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	4613      	mov	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	4a11      	ldr	r2, [pc, #68]	@ (8010310 <vTaskSwitchContext+0xb4>)
 80102ca:	4413      	add	r3, r2
 80102cc:	613b      	str	r3, [r7, #16]
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	605a      	str	r2, [r3, #4]
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	685a      	ldr	r2, [r3, #4]
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	3308      	adds	r3, #8
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d104      	bne.n	80102ee <vTaskSwitchContext+0x92>
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	685a      	ldr	r2, [r3, #4]
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	605a      	str	r2, [r3, #4]
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	4a07      	ldr	r2, [pc, #28]	@ (8010314 <vTaskSwitchContext+0xb8>)
 80102f6:	6013      	str	r3, [r2, #0]
}
 80102f8:	bf00      	nop
 80102fa:	371c      	adds	r7, #28
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr
 8010304:	200035a0 	.word	0x200035a0
 8010308:	2000358c 	.word	0x2000358c
 801030c:	20003580 	.word	0x20003580
 8010310:	2000347c 	.word	0x2000347c
 8010314:	20003478 	.word	0x20003478

08010318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010320:	f000 f852 	bl	80103c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010324:	4b06      	ldr	r3, [pc, #24]	@ (8010340 <prvIdleTask+0x28>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d9f9      	bls.n	8010320 <prvIdleTask+0x8>
			{
				taskYIELD();
 801032c:	4b05      	ldr	r3, [pc, #20]	@ (8010344 <prvIdleTask+0x2c>)
 801032e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801033c:	e7f0      	b.n	8010320 <prvIdleTask+0x8>
 801033e:	bf00      	nop
 8010340:	2000347c 	.word	0x2000347c
 8010344:	e000ed04 	.word	0xe000ed04

08010348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801034e:	2300      	movs	r3, #0
 8010350:	607b      	str	r3, [r7, #4]
 8010352:	e00c      	b.n	801036e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	4613      	mov	r3, r2
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	4413      	add	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4a12      	ldr	r2, [pc, #72]	@ (80103a8 <prvInitialiseTaskLists+0x60>)
 8010360:	4413      	add	r3, r2
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff fb1e 	bl	800f9a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3301      	adds	r3, #1
 801036c:	607b      	str	r3, [r7, #4]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2b06      	cmp	r3, #6
 8010372:	d9ef      	bls.n	8010354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010374:	480d      	ldr	r0, [pc, #52]	@ (80103ac <prvInitialiseTaskLists+0x64>)
 8010376:	f7ff fb15 	bl	800f9a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801037a:	480d      	ldr	r0, [pc, #52]	@ (80103b0 <prvInitialiseTaskLists+0x68>)
 801037c:	f7ff fb12 	bl	800f9a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010380:	480c      	ldr	r0, [pc, #48]	@ (80103b4 <prvInitialiseTaskLists+0x6c>)
 8010382:	f7ff fb0f 	bl	800f9a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010386:	480c      	ldr	r0, [pc, #48]	@ (80103b8 <prvInitialiseTaskLists+0x70>)
 8010388:	f7ff fb0c 	bl	800f9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801038c:	480b      	ldr	r0, [pc, #44]	@ (80103bc <prvInitialiseTaskLists+0x74>)
 801038e:	f7ff fb09 	bl	800f9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010392:	4b0b      	ldr	r3, [pc, #44]	@ (80103c0 <prvInitialiseTaskLists+0x78>)
 8010394:	4a05      	ldr	r2, [pc, #20]	@ (80103ac <prvInitialiseTaskLists+0x64>)
 8010396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010398:	4b0a      	ldr	r3, [pc, #40]	@ (80103c4 <prvInitialiseTaskLists+0x7c>)
 801039a:	4a05      	ldr	r2, [pc, #20]	@ (80103b0 <prvInitialiseTaskLists+0x68>)
 801039c:	601a      	str	r2, [r3, #0]
}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	2000347c 	.word	0x2000347c
 80103ac:	20003508 	.word	0x20003508
 80103b0:	2000351c 	.word	0x2000351c
 80103b4:	20003538 	.word	0x20003538
 80103b8:	2000354c 	.word	0x2000354c
 80103bc:	20003564 	.word	0x20003564
 80103c0:	20003530 	.word	0x20003530
 80103c4:	20003534 	.word	0x20003534

080103c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80103ce:	e019      	b.n	8010404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80103d0:	f000 f9ec 	bl	80107ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103d4:	4b10      	ldr	r3, [pc, #64]	@ (8010418 <prvCheckTasksWaitingTermination+0x50>)
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3304      	adds	r3, #4
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fb69 	bl	800fab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80103e6:	4b0d      	ldr	r3, [pc, #52]	@ (801041c <prvCheckTasksWaitingTermination+0x54>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	4a0b      	ldr	r2, [pc, #44]	@ (801041c <prvCheckTasksWaitingTermination+0x54>)
 80103ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80103f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010420 <prvCheckTasksWaitingTermination+0x58>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3b01      	subs	r3, #1
 80103f6:	4a0a      	ldr	r2, [pc, #40]	@ (8010420 <prvCheckTasksWaitingTermination+0x58>)
 80103f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80103fa:	f000 fa0d 	bl	8010818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f810 	bl	8010424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010404:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <prvCheckTasksWaitingTermination+0x58>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1e1      	bne.n	80103d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801040c:	bf00      	nop
 801040e:	bf00      	nop
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	2000354c 	.word	0x2000354c
 801041c:	20003578 	.word	0x20003578
 8010420:	20003560 	.word	0x20003560

08010424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010432:	2b00      	cmp	r3, #0
 8010434:	d108      	bne.n	8010448 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801043a:	4618      	mov	r0, r3
 801043c:	f000 fb6c 	bl	8010b18 <vPortFree>
				vPortFree( pxTCB );
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fb69 	bl	8010b18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010446:	e01b      	b.n	8010480 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801044e:	2b01      	cmp	r3, #1
 8010450:	d103      	bne.n	801045a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fb60 	bl	8010b18 <vPortFree>
	}
 8010458:	e012      	b.n	8010480 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010460:	2b02      	cmp	r3, #2
 8010462:	d00d      	beq.n	8010480 <prvDeleteTCB+0x5c>
	__asm volatile
 8010464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010468:	b672      	cpsid	i
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	b662      	cpsie	i
 8010478:	60fb      	str	r3, [r7, #12]
}
 801047a:	bf00      	nop
 801047c:	bf00      	nop
 801047e:	e7fd      	b.n	801047c <prvDeleteTCB+0x58>
	}
 8010480:	bf00      	nop
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801048e:	4b0c      	ldr	r3, [pc, #48]	@ (80104c0 <prvResetNextTaskUnblockTime+0x38>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d104      	bne.n	80104a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010498:	4b0a      	ldr	r3, [pc, #40]	@ (80104c4 <prvResetNextTaskUnblockTime+0x3c>)
 801049a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801049e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80104a0:	e008      	b.n	80104b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104a2:	4b07      	ldr	r3, [pc, #28]	@ (80104c0 <prvResetNextTaskUnblockTime+0x38>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4a04      	ldr	r2, [pc, #16]	@ (80104c4 <prvResetNextTaskUnblockTime+0x3c>)
 80104b2:	6013      	str	r3, [r2, #0]
}
 80104b4:	bf00      	nop
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	20003530 	.word	0x20003530
 80104c4:	20003598 	.word	0x20003598

080104c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80104d2:	4b29      	ldr	r3, [pc, #164]	@ (8010578 <prvAddCurrentTaskToDelayedList+0xb0>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104d8:	4b28      	ldr	r3, [pc, #160]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3304      	adds	r3, #4
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff faea 	bl	800fab8 <uxListRemove>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d10b      	bne.n	8010502 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80104ea:	4b24      	ldr	r3, [pc, #144]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f0:	2201      	movs	r2, #1
 80104f2:	fa02 f303 	lsl.w	r3, r2, r3
 80104f6:	43da      	mvns	r2, r3
 80104f8:	4b21      	ldr	r3, [pc, #132]	@ (8010580 <prvAddCurrentTaskToDelayedList+0xb8>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4013      	ands	r3, r2
 80104fe:	4a20      	ldr	r2, [pc, #128]	@ (8010580 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010500:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010508:	d10a      	bne.n	8010520 <prvAddCurrentTaskToDelayedList+0x58>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d007      	beq.n	8010520 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010510:	4b1a      	ldr	r3, [pc, #104]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	3304      	adds	r3, #4
 8010516:	4619      	mov	r1, r3
 8010518:	481a      	ldr	r0, [pc, #104]	@ (8010584 <prvAddCurrentTaskToDelayedList+0xbc>)
 801051a:	f7ff fa70 	bl	800f9fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801051e:	e026      	b.n	801056e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4413      	add	r3, r2
 8010526:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010528:	4b14      	ldr	r3, [pc, #80]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	429a      	cmp	r2, r3
 8010536:	d209      	bcs.n	801054c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010538:	4b13      	ldr	r3, [pc, #76]	@ (8010588 <prvAddCurrentTaskToDelayedList+0xc0>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	4b0f      	ldr	r3, [pc, #60]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	3304      	adds	r3, #4
 8010542:	4619      	mov	r1, r3
 8010544:	4610      	mov	r0, r2
 8010546:	f7ff fa7e 	bl	800fa46 <vListInsert>
}
 801054a:	e010      	b.n	801056e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801054c:	4b0f      	ldr	r3, [pc, #60]	@ (801058c <prvAddCurrentTaskToDelayedList+0xc4>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	4b0a      	ldr	r3, [pc, #40]	@ (801057c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	3304      	adds	r3, #4
 8010556:	4619      	mov	r1, r3
 8010558:	4610      	mov	r0, r2
 801055a:	f7ff fa74 	bl	800fa46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801055e:	4b0c      	ldr	r3, [pc, #48]	@ (8010590 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	429a      	cmp	r2, r3
 8010566:	d202      	bcs.n	801056e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010568:	4a09      	ldr	r2, [pc, #36]	@ (8010590 <prvAddCurrentTaskToDelayedList+0xc8>)
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	6013      	str	r3, [r2, #0]
}
 801056e:	bf00      	nop
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	2000357c 	.word	0x2000357c
 801057c:	20003478 	.word	0x20003478
 8010580:	20003580 	.word	0x20003580
 8010584:	20003564 	.word	0x20003564
 8010588:	20003534 	.word	0x20003534
 801058c:	20003530 	.word	0x20003530
 8010590:	20003598 	.word	0x20003598

08010594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3b04      	subs	r3, #4
 80105a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80105ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3b04      	subs	r3, #4
 80105b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	f023 0201 	bic.w	r2, r3, #1
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3b04      	subs	r3, #4
 80105c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105c4:	4a0c      	ldr	r2, [pc, #48]	@ (80105f8 <pxPortInitialiseStack+0x64>)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	3b14      	subs	r3, #20
 80105ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	3b04      	subs	r3, #4
 80105da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f06f 0202 	mvn.w	r2, #2
 80105e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3b20      	subs	r3, #32
 80105e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80105ea:	68fb      	ldr	r3, [r7, #12]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3714      	adds	r7, #20
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	080105fd 	.word	0x080105fd

080105fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010606:	4b15      	ldr	r3, [pc, #84]	@ (801065c <prvTaskExitError+0x60>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801060e:	d00d      	beq.n	801062c <prvTaskExitError+0x30>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010614:	b672      	cpsid	i
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	b662      	cpsie	i
 8010624:	60fb      	str	r3, [r7, #12]
}
 8010626:	bf00      	nop
 8010628:	bf00      	nop
 801062a:	e7fd      	b.n	8010628 <prvTaskExitError+0x2c>
	__asm volatile
 801062c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010630:	b672      	cpsid	i
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	b662      	cpsie	i
 8010640:	60bb      	str	r3, [r7, #8]
}
 8010642:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010644:	bf00      	nop
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d0fc      	beq.n	8010646 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801064c:	bf00      	nop
 801064e:	bf00      	nop
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	2000006c 	.word	0x2000006c

08010660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010660:	4b07      	ldr	r3, [pc, #28]	@ (8010680 <pxCurrentTCBConst2>)
 8010662:	6819      	ldr	r1, [r3, #0]
 8010664:	6808      	ldr	r0, [r1, #0]
 8010666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066a:	f380 8809 	msr	PSP, r0
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f04f 0000 	mov.w	r0, #0
 8010676:	f380 8811 	msr	BASEPRI, r0
 801067a:	4770      	bx	lr
 801067c:	f3af 8000 	nop.w

08010680 <pxCurrentTCBConst2>:
 8010680:	20003478 	.word	0x20003478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010684:	bf00      	nop
 8010686:	bf00      	nop

08010688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010688:	4808      	ldr	r0, [pc, #32]	@ (80106ac <prvPortStartFirstTask+0x24>)
 801068a:	6800      	ldr	r0, [r0, #0]
 801068c:	6800      	ldr	r0, [r0, #0]
 801068e:	f380 8808 	msr	MSP, r0
 8010692:	f04f 0000 	mov.w	r0, #0
 8010696:	f380 8814 	msr	CONTROL, r0
 801069a:	b662      	cpsie	i
 801069c:	b661      	cpsie	f
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	df00      	svc	0
 80106a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80106aa:	bf00      	nop
 80106ac:	e000ed08 	.word	0xe000ed08

080106b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80106b6:	4b37      	ldr	r3, [pc, #220]	@ (8010794 <xPortStartScheduler+0xe4>)
 80106b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	22ff      	movs	r2, #255	@ 0xff
 80106c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80106d0:	78fb      	ldrb	r3, [r7, #3]
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	4b2f      	ldr	r3, [pc, #188]	@ (8010798 <xPortStartScheduler+0xe8>)
 80106dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80106de:	4b2f      	ldr	r3, [pc, #188]	@ (801079c <xPortStartScheduler+0xec>)
 80106e0:	2207      	movs	r2, #7
 80106e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106e4:	e009      	b.n	80106fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80106e6:	4b2d      	ldr	r3, [pc, #180]	@ (801079c <xPortStartScheduler+0xec>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	4a2b      	ldr	r2, [pc, #172]	@ (801079c <xPortStartScheduler+0xec>)
 80106ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106f0:	78fb      	ldrb	r3, [r7, #3]
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106fa:	78fb      	ldrb	r3, [r7, #3]
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010702:	2b80      	cmp	r3, #128	@ 0x80
 8010704:	d0ef      	beq.n	80106e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010706:	4b25      	ldr	r3, [pc, #148]	@ (801079c <xPortStartScheduler+0xec>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f1c3 0307 	rsb	r3, r3, #7
 801070e:	2b04      	cmp	r3, #4
 8010710:	d00d      	beq.n	801072e <xPortStartScheduler+0x7e>
	__asm volatile
 8010712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010716:	b672      	cpsid	i
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	b662      	cpsie	i
 8010726:	60bb      	str	r3, [r7, #8]
}
 8010728:	bf00      	nop
 801072a:	bf00      	nop
 801072c:	e7fd      	b.n	801072a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801072e:	4b1b      	ldr	r3, [pc, #108]	@ (801079c <xPortStartScheduler+0xec>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	021b      	lsls	r3, r3, #8
 8010734:	4a19      	ldr	r2, [pc, #100]	@ (801079c <xPortStartScheduler+0xec>)
 8010736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010738:	4b18      	ldr	r3, [pc, #96]	@ (801079c <xPortStartScheduler+0xec>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010740:	4a16      	ldr	r2, [pc, #88]	@ (801079c <xPortStartScheduler+0xec>)
 8010742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	b2da      	uxtb	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801074c:	4b14      	ldr	r3, [pc, #80]	@ (80107a0 <xPortStartScheduler+0xf0>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a13      	ldr	r2, [pc, #76]	@ (80107a0 <xPortStartScheduler+0xf0>)
 8010752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010758:	4b11      	ldr	r3, [pc, #68]	@ (80107a0 <xPortStartScheduler+0xf0>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a10      	ldr	r2, [pc, #64]	@ (80107a0 <xPortStartScheduler+0xf0>)
 801075e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010764:	f000 f8dc 	bl	8010920 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010768:	4b0e      	ldr	r3, [pc, #56]	@ (80107a4 <xPortStartScheduler+0xf4>)
 801076a:	2200      	movs	r2, #0
 801076c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801076e:	f000 f8fb 	bl	8010968 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010772:	4b0d      	ldr	r3, [pc, #52]	@ (80107a8 <xPortStartScheduler+0xf8>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a0c      	ldr	r2, [pc, #48]	@ (80107a8 <xPortStartScheduler+0xf8>)
 8010778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801077c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801077e:	f7ff ff83 	bl	8010688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010782:	f7ff fd6b 	bl	801025c <vTaskSwitchContext>
	prvTaskExitError();
 8010786:	f7ff ff39 	bl	80105fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	e000e400 	.word	0xe000e400
 8010798:	200035a4 	.word	0x200035a4
 801079c:	200035a8 	.word	0x200035a8
 80107a0:	e000ed20 	.word	0xe000ed20
 80107a4:	2000006c 	.word	0x2000006c
 80107a8:	e000ef34 	.word	0xe000ef34

080107ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107b6:	b672      	cpsid	i
 80107b8:	f383 8811 	msr	BASEPRI, r3
 80107bc:	f3bf 8f6f 	isb	sy
 80107c0:	f3bf 8f4f 	dsb	sy
 80107c4:	b662      	cpsie	i
 80107c6:	607b      	str	r3, [r7, #4]
}
 80107c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107ca:	4b11      	ldr	r3, [pc, #68]	@ (8010810 <vPortEnterCritical+0x64>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3301      	adds	r3, #1
 80107d0:	4a0f      	ldr	r2, [pc, #60]	@ (8010810 <vPortEnterCritical+0x64>)
 80107d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80107d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010810 <vPortEnterCritical+0x64>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d112      	bne.n	8010802 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80107dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010814 <vPortEnterCritical+0x68>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00d      	beq.n	8010802 <vPortEnterCritical+0x56>
	__asm volatile
 80107e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ea:	b672      	cpsid	i
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	b662      	cpsie	i
 80107fa:	603b      	str	r3, [r7, #0]
}
 80107fc:	bf00      	nop
 80107fe:	bf00      	nop
 8010800:	e7fd      	b.n	80107fe <vPortEnterCritical+0x52>
	}
}
 8010802:	bf00      	nop
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	2000006c 	.word	0x2000006c
 8010814:	e000ed04 	.word	0xe000ed04

08010818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801081e:	4b13      	ldr	r3, [pc, #76]	@ (801086c <vPortExitCritical+0x54>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10d      	bne.n	8010842 <vPortExitCritical+0x2a>
	__asm volatile
 8010826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801082a:	b672      	cpsid	i
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	b662      	cpsie	i
 801083a:	607b      	str	r3, [r7, #4]
}
 801083c:	bf00      	nop
 801083e:	bf00      	nop
 8010840:	e7fd      	b.n	801083e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010842:	4b0a      	ldr	r3, [pc, #40]	@ (801086c <vPortExitCritical+0x54>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3b01      	subs	r3, #1
 8010848:	4a08      	ldr	r2, [pc, #32]	@ (801086c <vPortExitCritical+0x54>)
 801084a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801084c:	4b07      	ldr	r3, [pc, #28]	@ (801086c <vPortExitCritical+0x54>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d105      	bne.n	8010860 <vPortExitCritical+0x48>
 8010854:	2300      	movs	r3, #0
 8010856:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801085e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010860:	bf00      	nop
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	2000006c 	.word	0x2000006c

08010870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010870:	f3ef 8009 	mrs	r0, PSP
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	4b15      	ldr	r3, [pc, #84]	@ (80108d0 <pxCurrentTCBConst>)
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	f01e 0f10 	tst.w	lr, #16
 8010880:	bf08      	it	eq
 8010882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088a:	6010      	str	r0, [r2, #0]
 801088c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010894:	b672      	cpsid	i
 8010896:	f380 8811 	msr	BASEPRI, r0
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	b662      	cpsie	i
 80108a4:	f7ff fcda 	bl	801025c <vTaskSwitchContext>
 80108a8:	f04f 0000 	mov.w	r0, #0
 80108ac:	f380 8811 	msr	BASEPRI, r0
 80108b0:	bc09      	pop	{r0, r3}
 80108b2:	6819      	ldr	r1, [r3, #0]
 80108b4:	6808      	ldr	r0, [r1, #0]
 80108b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ba:	f01e 0f10 	tst.w	lr, #16
 80108be:	bf08      	it	eq
 80108c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80108c4:	f380 8809 	msr	PSP, r0
 80108c8:	f3bf 8f6f 	isb	sy
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop

080108d0 <pxCurrentTCBConst>:
 80108d0:	20003478 	.word	0x20003478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop

080108d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	b672      	cpsid	i
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	b662      	cpsie	i
 80108f2:	607b      	str	r3, [r7, #4]
}
 80108f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108f6:	f7ff fbf5 	bl	80100e4 <xTaskIncrementTick>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d003      	beq.n	8010908 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010900:	4b06      	ldr	r3, [pc, #24]	@ (801091c <SysTick_Handler+0x44>)
 8010902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	2300      	movs	r3, #0
 801090a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	f383 8811 	msr	BASEPRI, r3
}
 8010912:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010914:	bf00      	nop
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	e000ed04 	.word	0xe000ed04

08010920 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010920:	b480      	push	{r7}
 8010922:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010924:	4b0b      	ldr	r3, [pc, #44]	@ (8010954 <vPortSetupTimerInterrupt+0x34>)
 8010926:	2200      	movs	r2, #0
 8010928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801092a:	4b0b      	ldr	r3, [pc, #44]	@ (8010958 <vPortSetupTimerInterrupt+0x38>)
 801092c:	2200      	movs	r2, #0
 801092e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010930:	4b0a      	ldr	r3, [pc, #40]	@ (801095c <vPortSetupTimerInterrupt+0x3c>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a0a      	ldr	r2, [pc, #40]	@ (8010960 <vPortSetupTimerInterrupt+0x40>)
 8010936:	fba2 2303 	umull	r2, r3, r2, r3
 801093a:	099b      	lsrs	r3, r3, #6
 801093c:	4a09      	ldr	r2, [pc, #36]	@ (8010964 <vPortSetupTimerInterrupt+0x44>)
 801093e:	3b01      	subs	r3, #1
 8010940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010942:	4b04      	ldr	r3, [pc, #16]	@ (8010954 <vPortSetupTimerInterrupt+0x34>)
 8010944:	2207      	movs	r2, #7
 8010946:	601a      	str	r2, [r3, #0]
}
 8010948:	bf00      	nop
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	e000e010 	.word	0xe000e010
 8010958:	e000e018 	.word	0xe000e018
 801095c:	20000060 	.word	0x20000060
 8010960:	10624dd3 	.word	0x10624dd3
 8010964:	e000e014 	.word	0xe000e014

08010968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010968:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010978 <vPortEnableVFP+0x10>
 801096c:	6801      	ldr	r1, [r0, #0]
 801096e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010972:	6001      	str	r1, [r0, #0]
 8010974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010976:	bf00      	nop
 8010978:	e000ed88 	.word	0xe000ed88

0801097c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	@ 0x28
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010984:	2300      	movs	r3, #0
 8010986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010988:	f7ff fafe 	bl	800ff88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801098c:	4b5d      	ldr	r3, [pc, #372]	@ (8010b04 <pvPortMalloc+0x188>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010994:	f000 f920 	bl	8010bd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010998:	4b5b      	ldr	r3, [pc, #364]	@ (8010b08 <pvPortMalloc+0x18c>)
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4013      	ands	r3, r2
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f040 8094 	bne.w	8010ace <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d020      	beq.n	80109ee <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80109ac:	2208      	movs	r2, #8
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4413      	add	r3, r2
 80109b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f003 0307 	and.w	r3, r3, #7
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d017      	beq.n	80109ee <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f023 0307 	bic.w	r3, r3, #7
 80109c4:	3308      	adds	r3, #8
 80109c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f003 0307 	and.w	r3, r3, #7
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00d      	beq.n	80109ee <pvPortMalloc+0x72>
	__asm volatile
 80109d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d6:	b672      	cpsid	i
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	b662      	cpsie	i
 80109e6:	617b      	str	r3, [r7, #20]
}
 80109e8:	bf00      	nop
 80109ea:	bf00      	nop
 80109ec:	e7fd      	b.n	80109ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d06c      	beq.n	8010ace <pvPortMalloc+0x152>
 80109f4:	4b45      	ldr	r3, [pc, #276]	@ (8010b0c <pvPortMalloc+0x190>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d867      	bhi.n	8010ace <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109fe:	4b44      	ldr	r3, [pc, #272]	@ (8010b10 <pvPortMalloc+0x194>)
 8010a00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a02:	4b43      	ldr	r3, [pc, #268]	@ (8010b10 <pvPortMalloc+0x194>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a08:	e004      	b.n	8010a14 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d903      	bls.n	8010a26 <pvPortMalloc+0xaa>
 8010a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1f1      	bne.n	8010a0a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a26:	4b37      	ldr	r3, [pc, #220]	@ (8010b04 <pvPortMalloc+0x188>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d04e      	beq.n	8010ace <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2208      	movs	r2, #8
 8010a36:	4413      	add	r3, r2
 8010a38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	1ad2      	subs	r2, r2, r3
 8010a4a:	2308      	movs	r3, #8
 8010a4c:	005b      	lsls	r3, r3, #1
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d922      	bls.n	8010a98 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	4413      	add	r3, r2
 8010a58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	f003 0307 	and.w	r3, r3, #7
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00d      	beq.n	8010a80 <pvPortMalloc+0x104>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a68:	b672      	cpsid	i
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	b662      	cpsie	i
 8010a78:	613b      	str	r3, [r7, #16]
}
 8010a7a:	bf00      	nop
 8010a7c:	bf00      	nop
 8010a7e:	e7fd      	b.n	8010a7c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	685a      	ldr	r2, [r3, #4]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	1ad2      	subs	r2, r2, r3
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a92:	69b8      	ldr	r0, [r7, #24]
 8010a94:	f000 f902 	bl	8010c9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a98:	4b1c      	ldr	r3, [pc, #112]	@ (8010b0c <pvPortMalloc+0x190>)
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	1ad3      	subs	r3, r2, r3
 8010aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8010b0c <pvPortMalloc+0x190>)
 8010aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010aa6:	4b19      	ldr	r3, [pc, #100]	@ (8010b0c <pvPortMalloc+0x190>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8010b14 <pvPortMalloc+0x198>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d203      	bcs.n	8010aba <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ab2:	4b16      	ldr	r3, [pc, #88]	@ (8010b0c <pvPortMalloc+0x190>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	4a17      	ldr	r2, [pc, #92]	@ (8010b14 <pvPortMalloc+0x198>)
 8010ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010abc:	685a      	ldr	r2, [r3, #4]
 8010abe:	4b12      	ldr	r3, [pc, #72]	@ (8010b08 <pvPortMalloc+0x18c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	431a      	orrs	r2, r3
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ace:	f7ff fa69 	bl	800ffa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	f003 0307 	and.w	r3, r3, #7
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00d      	beq.n	8010af8 <pvPortMalloc+0x17c>
	__asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae0:	b672      	cpsid	i
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	b662      	cpsie	i
 8010af0:	60fb      	str	r3, [r7, #12]
}
 8010af2:	bf00      	nop
 8010af4:	bf00      	nop
 8010af6:	e7fd      	b.n	8010af4 <pvPortMalloc+0x178>
	return pvReturn;
 8010af8:	69fb      	ldr	r3, [r7, #28]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3728      	adds	r7, #40	@ 0x28
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200083d4 	.word	0x200083d4
 8010b08:	200083e0 	.word	0x200083e0
 8010b0c:	200083d8 	.word	0x200083d8
 8010b10:	200083cc 	.word	0x200083cc
 8010b14:	200083dc 	.word	0x200083dc

08010b18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d04e      	beq.n	8010bc8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b2a:	2308      	movs	r3, #8
 8010b2c:	425b      	negs	r3, r3
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	4413      	add	r3, r2
 8010b32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	4b24      	ldr	r3, [pc, #144]	@ (8010bd0 <vPortFree+0xb8>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4013      	ands	r3, r2
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10d      	bne.n	8010b62 <vPortFree+0x4a>
	__asm volatile
 8010b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	60fb      	str	r3, [r7, #12]
}
 8010b5c:	bf00      	nop
 8010b5e:	bf00      	nop
 8010b60:	e7fd      	b.n	8010b5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00d      	beq.n	8010b86 <vPortFree+0x6e>
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b6e:	b672      	cpsid	i
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	b662      	cpsie	i
 8010b7e:	60bb      	str	r3, [r7, #8]
}
 8010b80:	bf00      	nop
 8010b82:	bf00      	nop
 8010b84:	e7fd      	b.n	8010b82 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	4b11      	ldr	r3, [pc, #68]	@ (8010bd0 <vPortFree+0xb8>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4013      	ands	r3, r2
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d019      	beq.n	8010bc8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d115      	bne.n	8010bc8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	685a      	ldr	r2, [r3, #4]
 8010ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8010bd0 <vPortFree+0xb8>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	43db      	mvns	r3, r3
 8010ba6:	401a      	ands	r2, r3
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010bac:	f7ff f9ec 	bl	800ff88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	685a      	ldr	r2, [r3, #4]
 8010bb4:	4b07      	ldr	r3, [pc, #28]	@ (8010bd4 <vPortFree+0xbc>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4413      	add	r3, r2
 8010bba:	4a06      	ldr	r2, [pc, #24]	@ (8010bd4 <vPortFree+0xbc>)
 8010bbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010bbe:	6938      	ldr	r0, [r7, #16]
 8010bc0:	f000 f86c 	bl	8010c9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010bc4:	f7ff f9ee 	bl	800ffa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010bc8:	bf00      	nop
 8010bca:	3718      	adds	r7, #24
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	200083e0 	.word	0x200083e0
 8010bd4:	200083d8 	.word	0x200083d8

08010bd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010bde:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010be2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010be4:	4b27      	ldr	r3, [pc, #156]	@ (8010c84 <prvHeapInit+0xac>)
 8010be6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f003 0307 	and.w	r3, r3, #7
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00c      	beq.n	8010c0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	3307      	adds	r3, #7
 8010bf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f023 0307 	bic.w	r3, r3, #7
 8010bfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c00:	68ba      	ldr	r2, [r7, #8]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	4a1f      	ldr	r2, [pc, #124]	@ (8010c84 <prvHeapInit+0xac>)
 8010c08:	4413      	add	r3, r2
 8010c0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c10:	4a1d      	ldr	r2, [pc, #116]	@ (8010c88 <prvHeapInit+0xb0>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c16:	4b1c      	ldr	r3, [pc, #112]	@ (8010c88 <prvHeapInit+0xb0>)
 8010c18:	2200      	movs	r2, #0
 8010c1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	4413      	add	r3, r2
 8010c22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c24:	2208      	movs	r2, #8
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	1a9b      	subs	r3, r3, r2
 8010c2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f023 0307 	bic.w	r3, r3, #7
 8010c32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	4a15      	ldr	r2, [pc, #84]	@ (8010c8c <prvHeapInit+0xb4>)
 8010c38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c3a:	4b14      	ldr	r3, [pc, #80]	@ (8010c8c <prvHeapInit+0xb4>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c42:	4b12      	ldr	r3, [pc, #72]	@ (8010c8c <prvHeapInit+0xb4>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2200      	movs	r2, #0
 8010c48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	1ad2      	subs	r2, r2, r3
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c58:	4b0c      	ldr	r3, [pc, #48]	@ (8010c8c <prvHeapInit+0xb4>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	4a0a      	ldr	r2, [pc, #40]	@ (8010c90 <prvHeapInit+0xb8>)
 8010c66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	4a09      	ldr	r2, [pc, #36]	@ (8010c94 <prvHeapInit+0xbc>)
 8010c6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c70:	4b09      	ldr	r3, [pc, #36]	@ (8010c98 <prvHeapInit+0xc0>)
 8010c72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c76:	601a      	str	r2, [r3, #0]
}
 8010c78:	bf00      	nop
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr
 8010c84:	200035ac 	.word	0x200035ac
 8010c88:	200083cc 	.word	0x200083cc
 8010c8c:	200083d4 	.word	0x200083d4
 8010c90:	200083dc 	.word	0x200083dc
 8010c94:	200083d8 	.word	0x200083d8
 8010c98:	200083e0 	.word	0x200083e0

08010c9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ca4:	4b28      	ldr	r3, [pc, #160]	@ (8010d48 <prvInsertBlockIntoFreeList+0xac>)
 8010ca6:	60fb      	str	r3, [r7, #12]
 8010ca8:	e002      	b.n	8010cb0 <prvInsertBlockIntoFreeList+0x14>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d8f7      	bhi.n	8010caa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d108      	bne.n	8010cde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	441a      	add	r2, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	68ba      	ldr	r2, [r7, #8]
 8010ce8:	441a      	add	r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d118      	bne.n	8010d24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	4b15      	ldr	r3, [pc, #84]	@ (8010d4c <prvInsertBlockIntoFreeList+0xb0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d00d      	beq.n	8010d1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	441a      	add	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	601a      	str	r2, [r3, #0]
 8010d18:	e008      	b.n	8010d2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d4c <prvInsertBlockIntoFreeList+0xb0>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	601a      	str	r2, [r3, #0]
 8010d22:	e003      	b.n	8010d2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d002      	beq.n	8010d3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d3a:	bf00      	nop
 8010d3c:	3714      	adds	r7, #20
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop
 8010d48:	200083cc 	.word	0x200083cc
 8010d4c:	200083d4 	.word	0x200083d4

08010d50 <atan2>:
 8010d50:	f000 b836 	b.w	8010dc0 <__ieee754_atan2>
 8010d54:	0000      	movs	r0, r0
	...

08010d58 <hypot>:
 8010d58:	b508      	push	{r3, lr}
 8010d5a:	ed2d 8b06 	vpush	{d8-d10}
 8010d5e:	eeb0 aa40 	vmov.f32	s20, s0
 8010d62:	eef0 aa60 	vmov.f32	s21, s1
 8010d66:	eeb0 9a41 	vmov.f32	s18, s2
 8010d6a:	eef0 9a61 	vmov.f32	s19, s3
 8010d6e:	f000 fb43 	bl	80113f8 <__ieee754_hypot>
 8010d72:	eeb0 8a40 	vmov.f32	s16, s0
 8010d76:	eef0 8a60 	vmov.f32	s17, s1
 8010d7a:	f000 fadd 	bl	8011338 <finite>
 8010d7e:	b998      	cbnz	r0, 8010da8 <hypot+0x50>
 8010d80:	eeb0 0a4a 	vmov.f32	s0, s20
 8010d84:	eef0 0a6a 	vmov.f32	s1, s21
 8010d88:	f000 fad6 	bl	8011338 <finite>
 8010d8c:	b160      	cbz	r0, 8010da8 <hypot+0x50>
 8010d8e:	eeb0 0a49 	vmov.f32	s0, s18
 8010d92:	eef0 0a69 	vmov.f32	s1, s19
 8010d96:	f000 facf 	bl	8011338 <finite>
 8010d9a:	b128      	cbz	r0, 8010da8 <hypot+0x50>
 8010d9c:	f001 fed0 	bl	8012b40 <__errno>
 8010da0:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8010db8 <hypot+0x60>
 8010da4:	2322      	movs	r3, #34	@ 0x22
 8010da6:	6003      	str	r3, [r0, #0]
 8010da8:	eeb0 0a48 	vmov.f32	s0, s16
 8010dac:	eef0 0a68 	vmov.f32	s1, s17
 8010db0:	ecbd 8b06 	vpop	{d8-d10}
 8010db4:	bd08      	pop	{r3, pc}
 8010db6:	bf00      	nop
 8010db8:	00000000 	.word	0x00000000
 8010dbc:	7ff00000 	.word	0x7ff00000

08010dc0 <__ieee754_atan2>:
 8010dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc4:	ec57 6b11 	vmov	r6, r7, d1
 8010dc8:	4273      	negs	r3, r6
 8010dca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010f48 <__ieee754_atan2+0x188>
 8010dce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010dd2:	4333      	orrs	r3, r6
 8010dd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010dd8:	4543      	cmp	r3, r8
 8010dda:	ec51 0b10 	vmov	r0, r1, d0
 8010dde:	4635      	mov	r5, r6
 8010de0:	d809      	bhi.n	8010df6 <__ieee754_atan2+0x36>
 8010de2:	4244      	negs	r4, r0
 8010de4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010de8:	4304      	orrs	r4, r0
 8010dea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010dee:	4544      	cmp	r4, r8
 8010df0:	468e      	mov	lr, r1
 8010df2:	4681      	mov	r9, r0
 8010df4:	d907      	bls.n	8010e06 <__ieee754_atan2+0x46>
 8010df6:	4632      	mov	r2, r6
 8010df8:	463b      	mov	r3, r7
 8010dfa:	f7ef fa67 	bl	80002cc <__adddf3>
 8010dfe:	ec41 0b10 	vmov	d0, r0, r1
 8010e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e06:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010e0a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010e0e:	4334      	orrs	r4, r6
 8010e10:	d103      	bne.n	8010e1a <__ieee754_atan2+0x5a>
 8010e12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e16:	f000 b89b 	b.w	8010f50 <atan>
 8010e1a:	17bc      	asrs	r4, r7, #30
 8010e1c:	f004 0402 	and.w	r4, r4, #2
 8010e20:	ea53 0909 	orrs.w	r9, r3, r9
 8010e24:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010e28:	d107      	bne.n	8010e3a <__ieee754_atan2+0x7a>
 8010e2a:	2c02      	cmp	r4, #2
 8010e2c:	d05f      	beq.n	8010eee <__ieee754_atan2+0x12e>
 8010e2e:	2c03      	cmp	r4, #3
 8010e30:	d1e5      	bne.n	8010dfe <__ieee754_atan2+0x3e>
 8010e32:	a141      	add	r1, pc, #260	@ (adr r1, 8010f38 <__ieee754_atan2+0x178>)
 8010e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e38:	e7e1      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010e3a:	4315      	orrs	r5, r2
 8010e3c:	d106      	bne.n	8010e4c <__ieee754_atan2+0x8c>
 8010e3e:	f1be 0f00 	cmp.w	lr, #0
 8010e42:	da5f      	bge.n	8010f04 <__ieee754_atan2+0x144>
 8010e44:	a13e      	add	r1, pc, #248	@ (adr r1, 8010f40 <__ieee754_atan2+0x180>)
 8010e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e4a:	e7d8      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010e4c:	4542      	cmp	r2, r8
 8010e4e:	d10f      	bne.n	8010e70 <__ieee754_atan2+0xb0>
 8010e50:	4293      	cmp	r3, r2
 8010e52:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8010e56:	d107      	bne.n	8010e68 <__ieee754_atan2+0xa8>
 8010e58:	2c02      	cmp	r4, #2
 8010e5a:	d84c      	bhi.n	8010ef6 <__ieee754_atan2+0x136>
 8010e5c:	4b34      	ldr	r3, [pc, #208]	@ (8010f30 <__ieee754_atan2+0x170>)
 8010e5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e66:	e7ca      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010e68:	2c02      	cmp	r4, #2
 8010e6a:	d848      	bhi.n	8010efe <__ieee754_atan2+0x13e>
 8010e6c:	4b31      	ldr	r3, [pc, #196]	@ (8010f34 <__ieee754_atan2+0x174>)
 8010e6e:	e7f6      	b.n	8010e5e <__ieee754_atan2+0x9e>
 8010e70:	4543      	cmp	r3, r8
 8010e72:	d0e4      	beq.n	8010e3e <__ieee754_atan2+0x7e>
 8010e74:	1a9b      	subs	r3, r3, r2
 8010e76:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010e7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e7e:	da1e      	bge.n	8010ebe <__ieee754_atan2+0xfe>
 8010e80:	2f00      	cmp	r7, #0
 8010e82:	da01      	bge.n	8010e88 <__ieee754_atan2+0xc8>
 8010e84:	323c      	adds	r2, #60	@ 0x3c
 8010e86:	db1e      	blt.n	8010ec6 <__ieee754_atan2+0x106>
 8010e88:	4632      	mov	r2, r6
 8010e8a:	463b      	mov	r3, r7
 8010e8c:	f7ef fcfe 	bl	800088c <__aeabi_ddiv>
 8010e90:	ec41 0b10 	vmov	d0, r0, r1
 8010e94:	f000 fa48 	bl	8011328 <fabs>
 8010e98:	f000 f85a 	bl	8010f50 <atan>
 8010e9c:	ec51 0b10 	vmov	r0, r1, d0
 8010ea0:	2c01      	cmp	r4, #1
 8010ea2:	d013      	beq.n	8010ecc <__ieee754_atan2+0x10c>
 8010ea4:	2c02      	cmp	r4, #2
 8010ea6:	d015      	beq.n	8010ed4 <__ieee754_atan2+0x114>
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	d0a8      	beq.n	8010dfe <__ieee754_atan2+0x3e>
 8010eac:	a318      	add	r3, pc, #96	@ (adr r3, 8010f10 <__ieee754_atan2+0x150>)
 8010eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb2:	f7ef fa09 	bl	80002c8 <__aeabi_dsub>
 8010eb6:	a318      	add	r3, pc, #96	@ (adr r3, 8010f18 <__ieee754_atan2+0x158>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	e014      	b.n	8010ee8 <__ieee754_atan2+0x128>
 8010ebe:	a118      	add	r1, pc, #96	@ (adr r1, 8010f20 <__ieee754_atan2+0x160>)
 8010ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec4:	e7ec      	b.n	8010ea0 <__ieee754_atan2+0xe0>
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	2100      	movs	r1, #0
 8010eca:	e7e9      	b.n	8010ea0 <__ieee754_atan2+0xe0>
 8010ecc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	e794      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010ed4:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f10 <__ieee754_atan2+0x150>)
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	f7ef f9f5 	bl	80002c8 <__aeabi_dsub>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	a10d      	add	r1, pc, #52	@ (adr r1, 8010f18 <__ieee754_atan2+0x158>)
 8010ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ee8:	f7ef f9ee 	bl	80002c8 <__aeabi_dsub>
 8010eec:	e787      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010eee:	a10a      	add	r1, pc, #40	@ (adr r1, 8010f18 <__ieee754_atan2+0x158>)
 8010ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ef4:	e783      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010ef6:	a10c      	add	r1, pc, #48	@ (adr r1, 8010f28 <__ieee754_atan2+0x168>)
 8010ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010efc:	e77f      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010efe:	2000      	movs	r0, #0
 8010f00:	2100      	movs	r1, #0
 8010f02:	e77c      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010f04:	a106      	add	r1, pc, #24	@ (adr r1, 8010f20 <__ieee754_atan2+0x160>)
 8010f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f0a:	e778      	b.n	8010dfe <__ieee754_atan2+0x3e>
 8010f0c:	f3af 8000 	nop.w
 8010f10:	33145c07 	.word	0x33145c07
 8010f14:	3ca1a626 	.word	0x3ca1a626
 8010f18:	54442d18 	.word	0x54442d18
 8010f1c:	400921fb 	.word	0x400921fb
 8010f20:	54442d18 	.word	0x54442d18
 8010f24:	3ff921fb 	.word	0x3ff921fb
 8010f28:	54442d18 	.word	0x54442d18
 8010f2c:	3fe921fb 	.word	0x3fe921fb
 8010f30:	08015a18 	.word	0x08015a18
 8010f34:	08015a00 	.word	0x08015a00
 8010f38:	54442d18 	.word	0x54442d18
 8010f3c:	c00921fb 	.word	0xc00921fb
 8010f40:	54442d18 	.word	0x54442d18
 8010f44:	bff921fb 	.word	0xbff921fb
 8010f48:	7ff00000 	.word	0x7ff00000
 8010f4c:	00000000 	.word	0x00000000

08010f50 <atan>:
 8010f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	ec55 4b10 	vmov	r4, r5, d0
 8010f58:	4bbf      	ldr	r3, [pc, #764]	@ (8011258 <atan+0x308>)
 8010f5a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010f5e:	429e      	cmp	r6, r3
 8010f60:	46ab      	mov	fp, r5
 8010f62:	d918      	bls.n	8010f96 <atan+0x46>
 8010f64:	4bbd      	ldr	r3, [pc, #756]	@ (801125c <atan+0x30c>)
 8010f66:	429e      	cmp	r6, r3
 8010f68:	d801      	bhi.n	8010f6e <atan+0x1e>
 8010f6a:	d109      	bne.n	8010f80 <atan+0x30>
 8010f6c:	b144      	cbz	r4, 8010f80 <atan+0x30>
 8010f6e:	4622      	mov	r2, r4
 8010f70:	462b      	mov	r3, r5
 8010f72:	4620      	mov	r0, r4
 8010f74:	4629      	mov	r1, r5
 8010f76:	f7ef f9a9 	bl	80002cc <__adddf3>
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	460d      	mov	r5, r1
 8010f7e:	e006      	b.n	8010f8e <atan+0x3e>
 8010f80:	f1bb 0f00 	cmp.w	fp, #0
 8010f84:	f340 812b 	ble.w	80111de <atan+0x28e>
 8010f88:	a597      	add	r5, pc, #604	@ (adr r5, 80111e8 <atan+0x298>)
 8010f8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f8e:	ec45 4b10 	vmov	d0, r4, r5
 8010f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f96:	4bb2      	ldr	r3, [pc, #712]	@ (8011260 <atan+0x310>)
 8010f98:	429e      	cmp	r6, r3
 8010f9a:	d813      	bhi.n	8010fc4 <atan+0x74>
 8010f9c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010fa0:	429e      	cmp	r6, r3
 8010fa2:	d80c      	bhi.n	8010fbe <atan+0x6e>
 8010fa4:	a392      	add	r3, pc, #584	@ (adr r3, 80111f0 <atan+0x2a0>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	4620      	mov	r0, r4
 8010fac:	4629      	mov	r1, r5
 8010fae:	f7ef f98d 	bl	80002cc <__adddf3>
 8010fb2:	4bac      	ldr	r3, [pc, #688]	@ (8011264 <atan+0x314>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f7ef fdcf 	bl	8000b58 <__aeabi_dcmpgt>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d1e7      	bne.n	8010f8e <atan+0x3e>
 8010fbe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010fc2:	e029      	b.n	8011018 <atan+0xc8>
 8010fc4:	f000 f9b0 	bl	8011328 <fabs>
 8010fc8:	4ba7      	ldr	r3, [pc, #668]	@ (8011268 <atan+0x318>)
 8010fca:	429e      	cmp	r6, r3
 8010fcc:	ec55 4b10 	vmov	r4, r5, d0
 8010fd0:	f200 80bc 	bhi.w	801114c <atan+0x1fc>
 8010fd4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010fd8:	429e      	cmp	r6, r3
 8010fda:	f200 809e 	bhi.w	801111a <atan+0x1ca>
 8010fde:	4622      	mov	r2, r4
 8010fe0:	462b      	mov	r3, r5
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef f971 	bl	80002cc <__adddf3>
 8010fea:	4b9e      	ldr	r3, [pc, #632]	@ (8011264 <atan+0x314>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	f7ef f96b 	bl	80002c8 <__aeabi_dsub>
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	460f      	mov	r7, r1
 8010ff8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	4629      	mov	r1, r5
 8011000:	f7ef f964 	bl	80002cc <__adddf3>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	4630      	mov	r0, r6
 801100a:	4639      	mov	r1, r7
 801100c:	f7ef fc3e 	bl	800088c <__aeabi_ddiv>
 8011010:	f04f 0a00 	mov.w	sl, #0
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	4622      	mov	r2, r4
 801101a:	462b      	mov	r3, r5
 801101c:	4620      	mov	r0, r4
 801101e:	4629      	mov	r1, r5
 8011020:	f7ef fb0a 	bl	8000638 <__aeabi_dmul>
 8011024:	4602      	mov	r2, r0
 8011026:	460b      	mov	r3, r1
 8011028:	4680      	mov	r8, r0
 801102a:	4689      	mov	r9, r1
 801102c:	f7ef fb04 	bl	8000638 <__aeabi_dmul>
 8011030:	a371      	add	r3, pc, #452	@ (adr r3, 80111f8 <atan+0x2a8>)
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	4606      	mov	r6, r0
 8011038:	460f      	mov	r7, r1
 801103a:	f7ef fafd 	bl	8000638 <__aeabi_dmul>
 801103e:	a370      	add	r3, pc, #448	@ (adr r3, 8011200 <atan+0x2b0>)
 8011040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011044:	f7ef f942 	bl	80002cc <__adddf3>
 8011048:	4632      	mov	r2, r6
 801104a:	463b      	mov	r3, r7
 801104c:	f7ef faf4 	bl	8000638 <__aeabi_dmul>
 8011050:	a36d      	add	r3, pc, #436	@ (adr r3, 8011208 <atan+0x2b8>)
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	f7ef f939 	bl	80002cc <__adddf3>
 801105a:	4632      	mov	r2, r6
 801105c:	463b      	mov	r3, r7
 801105e:	f7ef faeb 	bl	8000638 <__aeabi_dmul>
 8011062:	a36b      	add	r3, pc, #428	@ (adr r3, 8011210 <atan+0x2c0>)
 8011064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011068:	f7ef f930 	bl	80002cc <__adddf3>
 801106c:	4632      	mov	r2, r6
 801106e:	463b      	mov	r3, r7
 8011070:	f7ef fae2 	bl	8000638 <__aeabi_dmul>
 8011074:	a368      	add	r3, pc, #416	@ (adr r3, 8011218 <atan+0x2c8>)
 8011076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107a:	f7ef f927 	bl	80002cc <__adddf3>
 801107e:	4632      	mov	r2, r6
 8011080:	463b      	mov	r3, r7
 8011082:	f7ef fad9 	bl	8000638 <__aeabi_dmul>
 8011086:	a366      	add	r3, pc, #408	@ (adr r3, 8011220 <atan+0x2d0>)
 8011088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108c:	f7ef f91e 	bl	80002cc <__adddf3>
 8011090:	4642      	mov	r2, r8
 8011092:	464b      	mov	r3, r9
 8011094:	f7ef fad0 	bl	8000638 <__aeabi_dmul>
 8011098:	a363      	add	r3, pc, #396	@ (adr r3, 8011228 <atan+0x2d8>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	4680      	mov	r8, r0
 80110a0:	4689      	mov	r9, r1
 80110a2:	4630      	mov	r0, r6
 80110a4:	4639      	mov	r1, r7
 80110a6:	f7ef fac7 	bl	8000638 <__aeabi_dmul>
 80110aa:	a361      	add	r3, pc, #388	@ (adr r3, 8011230 <atan+0x2e0>)
 80110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b0:	f7ef f90a 	bl	80002c8 <__aeabi_dsub>
 80110b4:	4632      	mov	r2, r6
 80110b6:	463b      	mov	r3, r7
 80110b8:	f7ef fabe 	bl	8000638 <__aeabi_dmul>
 80110bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8011238 <atan+0x2e8>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	f7ef f901 	bl	80002c8 <__aeabi_dsub>
 80110c6:	4632      	mov	r2, r6
 80110c8:	463b      	mov	r3, r7
 80110ca:	f7ef fab5 	bl	8000638 <__aeabi_dmul>
 80110ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8011240 <atan+0x2f0>)
 80110d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d4:	f7ef f8f8 	bl	80002c8 <__aeabi_dsub>
 80110d8:	4632      	mov	r2, r6
 80110da:	463b      	mov	r3, r7
 80110dc:	f7ef faac 	bl	8000638 <__aeabi_dmul>
 80110e0:	a359      	add	r3, pc, #356	@ (adr r3, 8011248 <atan+0x2f8>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	f7ef f8ef 	bl	80002c8 <__aeabi_dsub>
 80110ea:	4632      	mov	r2, r6
 80110ec:	463b      	mov	r3, r7
 80110ee:	f7ef faa3 	bl	8000638 <__aeabi_dmul>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4640      	mov	r0, r8
 80110f8:	4649      	mov	r1, r9
 80110fa:	f7ef f8e7 	bl	80002cc <__adddf3>
 80110fe:	4622      	mov	r2, r4
 8011100:	462b      	mov	r3, r5
 8011102:	f7ef fa99 	bl	8000638 <__aeabi_dmul>
 8011106:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	d148      	bne.n	80111a2 <atan+0x252>
 8011110:	4620      	mov	r0, r4
 8011112:	4629      	mov	r1, r5
 8011114:	f7ef f8d8 	bl	80002c8 <__aeabi_dsub>
 8011118:	e72f      	b.n	8010f7a <atan+0x2a>
 801111a:	4b52      	ldr	r3, [pc, #328]	@ (8011264 <atan+0x314>)
 801111c:	2200      	movs	r2, #0
 801111e:	4620      	mov	r0, r4
 8011120:	4629      	mov	r1, r5
 8011122:	f7ef f8d1 	bl	80002c8 <__aeabi_dsub>
 8011126:	4b4f      	ldr	r3, [pc, #316]	@ (8011264 <atan+0x314>)
 8011128:	4606      	mov	r6, r0
 801112a:	460f      	mov	r7, r1
 801112c:	2200      	movs	r2, #0
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef f8cb 	bl	80002cc <__adddf3>
 8011136:	4602      	mov	r2, r0
 8011138:	460b      	mov	r3, r1
 801113a:	4630      	mov	r0, r6
 801113c:	4639      	mov	r1, r7
 801113e:	f7ef fba5 	bl	800088c <__aeabi_ddiv>
 8011142:	f04f 0a01 	mov.w	sl, #1
 8011146:	4604      	mov	r4, r0
 8011148:	460d      	mov	r5, r1
 801114a:	e765      	b.n	8011018 <atan+0xc8>
 801114c:	4b47      	ldr	r3, [pc, #284]	@ (801126c <atan+0x31c>)
 801114e:	429e      	cmp	r6, r3
 8011150:	d21c      	bcs.n	801118c <atan+0x23c>
 8011152:	4b47      	ldr	r3, [pc, #284]	@ (8011270 <atan+0x320>)
 8011154:	2200      	movs	r2, #0
 8011156:	4620      	mov	r0, r4
 8011158:	4629      	mov	r1, r5
 801115a:	f7ef f8b5 	bl	80002c8 <__aeabi_dsub>
 801115e:	4b44      	ldr	r3, [pc, #272]	@ (8011270 <atan+0x320>)
 8011160:	4606      	mov	r6, r0
 8011162:	460f      	mov	r7, r1
 8011164:	2200      	movs	r2, #0
 8011166:	4620      	mov	r0, r4
 8011168:	4629      	mov	r1, r5
 801116a:	f7ef fa65 	bl	8000638 <__aeabi_dmul>
 801116e:	4b3d      	ldr	r3, [pc, #244]	@ (8011264 <atan+0x314>)
 8011170:	2200      	movs	r2, #0
 8011172:	f7ef f8ab 	bl	80002cc <__adddf3>
 8011176:	4602      	mov	r2, r0
 8011178:	460b      	mov	r3, r1
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef fb85 	bl	800088c <__aeabi_ddiv>
 8011182:	f04f 0a02 	mov.w	sl, #2
 8011186:	4604      	mov	r4, r0
 8011188:	460d      	mov	r5, r1
 801118a:	e745      	b.n	8011018 <atan+0xc8>
 801118c:	4622      	mov	r2, r4
 801118e:	462b      	mov	r3, r5
 8011190:	4938      	ldr	r1, [pc, #224]	@ (8011274 <atan+0x324>)
 8011192:	2000      	movs	r0, #0
 8011194:	f7ef fb7a 	bl	800088c <__aeabi_ddiv>
 8011198:	f04f 0a03 	mov.w	sl, #3
 801119c:	4604      	mov	r4, r0
 801119e:	460d      	mov	r5, r1
 80111a0:	e73a      	b.n	8011018 <atan+0xc8>
 80111a2:	4b35      	ldr	r3, [pc, #212]	@ (8011278 <atan+0x328>)
 80111a4:	4e35      	ldr	r6, [pc, #212]	@ (801127c <atan+0x32c>)
 80111a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	f7ef f88b 	bl	80002c8 <__aeabi_dsub>
 80111b2:	4622      	mov	r2, r4
 80111b4:	462b      	mov	r3, r5
 80111b6:	f7ef f887 	bl	80002c8 <__aeabi_dsub>
 80111ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80111be:	4602      	mov	r2, r0
 80111c0:	460b      	mov	r3, r1
 80111c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80111c6:	f7ef f87f 	bl	80002c8 <__aeabi_dsub>
 80111ca:	f1bb 0f00 	cmp.w	fp, #0
 80111ce:	4604      	mov	r4, r0
 80111d0:	460d      	mov	r5, r1
 80111d2:	f6bf aedc 	bge.w	8010f8e <atan+0x3e>
 80111d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111da:	461d      	mov	r5, r3
 80111dc:	e6d7      	b.n	8010f8e <atan+0x3e>
 80111de:	a51c      	add	r5, pc, #112	@ (adr r5, 8011250 <atan+0x300>)
 80111e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80111e4:	e6d3      	b.n	8010f8e <atan+0x3e>
 80111e6:	bf00      	nop
 80111e8:	54442d18 	.word	0x54442d18
 80111ec:	3ff921fb 	.word	0x3ff921fb
 80111f0:	8800759c 	.word	0x8800759c
 80111f4:	7e37e43c 	.word	0x7e37e43c
 80111f8:	e322da11 	.word	0xe322da11
 80111fc:	3f90ad3a 	.word	0x3f90ad3a
 8011200:	24760deb 	.word	0x24760deb
 8011204:	3fa97b4b 	.word	0x3fa97b4b
 8011208:	a0d03d51 	.word	0xa0d03d51
 801120c:	3fb10d66 	.word	0x3fb10d66
 8011210:	c54c206e 	.word	0xc54c206e
 8011214:	3fb745cd 	.word	0x3fb745cd
 8011218:	920083ff 	.word	0x920083ff
 801121c:	3fc24924 	.word	0x3fc24924
 8011220:	5555550d 	.word	0x5555550d
 8011224:	3fd55555 	.word	0x3fd55555
 8011228:	2c6a6c2f 	.word	0x2c6a6c2f
 801122c:	bfa2b444 	.word	0xbfa2b444
 8011230:	52defd9a 	.word	0x52defd9a
 8011234:	3fadde2d 	.word	0x3fadde2d
 8011238:	af749a6d 	.word	0xaf749a6d
 801123c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011240:	fe231671 	.word	0xfe231671
 8011244:	3fbc71c6 	.word	0x3fbc71c6
 8011248:	9998ebc4 	.word	0x9998ebc4
 801124c:	3fc99999 	.word	0x3fc99999
 8011250:	54442d18 	.word	0x54442d18
 8011254:	bff921fb 	.word	0xbff921fb
 8011258:	440fffff 	.word	0x440fffff
 801125c:	7ff00000 	.word	0x7ff00000
 8011260:	3fdbffff 	.word	0x3fdbffff
 8011264:	3ff00000 	.word	0x3ff00000
 8011268:	3ff2ffff 	.word	0x3ff2ffff
 801126c:	40038000 	.word	0x40038000
 8011270:	3ff80000 	.word	0x3ff80000
 8011274:	bff00000 	.word	0xbff00000
 8011278:	08015a30 	.word	0x08015a30
 801127c:	08015a50 	.word	0x08015a50

08011280 <cos>:
 8011280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011282:	ec53 2b10 	vmov	r2, r3, d0
 8011286:	4826      	ldr	r0, [pc, #152]	@ (8011320 <cos+0xa0>)
 8011288:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801128c:	4281      	cmp	r1, r0
 801128e:	d806      	bhi.n	801129e <cos+0x1e>
 8011290:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011318 <cos+0x98>
 8011294:	b005      	add	sp, #20
 8011296:	f85d eb04 	ldr.w	lr, [sp], #4
 801129a:	f000 bf19 	b.w	80120d0 <__kernel_cos>
 801129e:	4821      	ldr	r0, [pc, #132]	@ (8011324 <cos+0xa4>)
 80112a0:	4281      	cmp	r1, r0
 80112a2:	d908      	bls.n	80112b6 <cos+0x36>
 80112a4:	4610      	mov	r0, r2
 80112a6:	4619      	mov	r1, r3
 80112a8:	f7ef f80e 	bl	80002c8 <__aeabi_dsub>
 80112ac:	ec41 0b10 	vmov	d0, r0, r1
 80112b0:	b005      	add	sp, #20
 80112b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80112b6:	4668      	mov	r0, sp
 80112b8:	f000 f9b6 	bl	8011628 <__ieee754_rem_pio2>
 80112bc:	f000 0003 	and.w	r0, r0, #3
 80112c0:	2801      	cmp	r0, #1
 80112c2:	d00b      	beq.n	80112dc <cos+0x5c>
 80112c4:	2802      	cmp	r0, #2
 80112c6:	d015      	beq.n	80112f4 <cos+0x74>
 80112c8:	b9d8      	cbnz	r0, 8011302 <cos+0x82>
 80112ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112ce:	ed9d 0b00 	vldr	d0, [sp]
 80112d2:	f000 fefd 	bl	80120d0 <__kernel_cos>
 80112d6:	ec51 0b10 	vmov	r0, r1, d0
 80112da:	e7e7      	b.n	80112ac <cos+0x2c>
 80112dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112e0:	ed9d 0b00 	vldr	d0, [sp]
 80112e4:	f000 ffbc 	bl	8012260 <__kernel_sin>
 80112e8:	ec53 2b10 	vmov	r2, r3, d0
 80112ec:	4610      	mov	r0, r2
 80112ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80112f2:	e7db      	b.n	80112ac <cos+0x2c>
 80112f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112f8:	ed9d 0b00 	vldr	d0, [sp]
 80112fc:	f000 fee8 	bl	80120d0 <__kernel_cos>
 8011300:	e7f2      	b.n	80112e8 <cos+0x68>
 8011302:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011306:	ed9d 0b00 	vldr	d0, [sp]
 801130a:	2001      	movs	r0, #1
 801130c:	f000 ffa8 	bl	8012260 <__kernel_sin>
 8011310:	e7e1      	b.n	80112d6 <cos+0x56>
 8011312:	bf00      	nop
 8011314:	f3af 8000 	nop.w
	...
 8011320:	3fe921fb 	.word	0x3fe921fb
 8011324:	7fefffff 	.word	0x7fefffff

08011328 <fabs>:
 8011328:	ec51 0b10 	vmov	r0, r1, d0
 801132c:	4602      	mov	r2, r0
 801132e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011332:	ec43 2b10 	vmov	d0, r2, r3
 8011336:	4770      	bx	lr

08011338 <finite>:
 8011338:	b082      	sub	sp, #8
 801133a:	ed8d 0b00 	vstr	d0, [sp]
 801133e:	9801      	ldr	r0, [sp, #4]
 8011340:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011344:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011348:	0fc0      	lsrs	r0, r0, #31
 801134a:	b002      	add	sp, #8
 801134c:	4770      	bx	lr
	...

08011350 <sin>:
 8011350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011352:	ec53 2b10 	vmov	r2, r3, d0
 8011356:	4826      	ldr	r0, [pc, #152]	@ (80113f0 <sin+0xa0>)
 8011358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801135c:	4281      	cmp	r1, r0
 801135e:	d807      	bhi.n	8011370 <sin+0x20>
 8011360:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80113e8 <sin+0x98>
 8011364:	2000      	movs	r0, #0
 8011366:	b005      	add	sp, #20
 8011368:	f85d eb04 	ldr.w	lr, [sp], #4
 801136c:	f000 bf78 	b.w	8012260 <__kernel_sin>
 8011370:	4820      	ldr	r0, [pc, #128]	@ (80113f4 <sin+0xa4>)
 8011372:	4281      	cmp	r1, r0
 8011374:	d908      	bls.n	8011388 <sin+0x38>
 8011376:	4610      	mov	r0, r2
 8011378:	4619      	mov	r1, r3
 801137a:	f7ee ffa5 	bl	80002c8 <__aeabi_dsub>
 801137e:	ec41 0b10 	vmov	d0, r0, r1
 8011382:	b005      	add	sp, #20
 8011384:	f85d fb04 	ldr.w	pc, [sp], #4
 8011388:	4668      	mov	r0, sp
 801138a:	f000 f94d 	bl	8011628 <__ieee754_rem_pio2>
 801138e:	f000 0003 	and.w	r0, r0, #3
 8011392:	2801      	cmp	r0, #1
 8011394:	d00c      	beq.n	80113b0 <sin+0x60>
 8011396:	2802      	cmp	r0, #2
 8011398:	d011      	beq.n	80113be <sin+0x6e>
 801139a:	b9e8      	cbnz	r0, 80113d8 <sin+0x88>
 801139c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113a0:	ed9d 0b00 	vldr	d0, [sp]
 80113a4:	2001      	movs	r0, #1
 80113a6:	f000 ff5b 	bl	8012260 <__kernel_sin>
 80113aa:	ec51 0b10 	vmov	r0, r1, d0
 80113ae:	e7e6      	b.n	801137e <sin+0x2e>
 80113b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113b4:	ed9d 0b00 	vldr	d0, [sp]
 80113b8:	f000 fe8a 	bl	80120d0 <__kernel_cos>
 80113bc:	e7f5      	b.n	80113aa <sin+0x5a>
 80113be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113c2:	ed9d 0b00 	vldr	d0, [sp]
 80113c6:	2001      	movs	r0, #1
 80113c8:	f000 ff4a 	bl	8012260 <__kernel_sin>
 80113cc:	ec53 2b10 	vmov	r2, r3, d0
 80113d0:	4610      	mov	r0, r2
 80113d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80113d6:	e7d2      	b.n	801137e <sin+0x2e>
 80113d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113dc:	ed9d 0b00 	vldr	d0, [sp]
 80113e0:	f000 fe76 	bl	80120d0 <__kernel_cos>
 80113e4:	e7f2      	b.n	80113cc <sin+0x7c>
 80113e6:	bf00      	nop
	...
 80113f0:	3fe921fb 	.word	0x3fe921fb
 80113f4:	7fefffff 	.word	0x7fefffff

080113f8 <__ieee754_hypot>:
 80113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fc:	ec51 0b10 	vmov	r0, r1, d0
 8011400:	ec53 2b11 	vmov	r2, r3, d1
 8011404:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8011408:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801140c:	42a5      	cmp	r5, r4
 801140e:	b087      	sub	sp, #28
 8011410:	da05      	bge.n	801141e <__ieee754_hypot+0x26>
 8011412:	462e      	mov	r6, r5
 8011414:	4625      	mov	r5, r4
 8011416:	4634      	mov	r4, r6
 8011418:	4606      	mov	r6, r0
 801141a:	4610      	mov	r0, r2
 801141c:	4632      	mov	r2, r6
 801141e:	1b2b      	subs	r3, r5, r4
 8011420:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8011424:	4629      	mov	r1, r5
 8011426:	4682      	mov	sl, r0
 8011428:	46ab      	mov	fp, r5
 801142a:	4616      	mov	r6, r2
 801142c:	4627      	mov	r7, r4
 801142e:	dd05      	ble.n	801143c <__ieee754_hypot+0x44>
 8011430:	4623      	mov	r3, r4
 8011432:	f7ee ff4b 	bl	80002cc <__adddf3>
 8011436:	4682      	mov	sl, r0
 8011438:	468b      	mov	fp, r1
 801143a:	e016      	b.n	801146a <__ieee754_hypot+0x72>
 801143c:	4b75      	ldr	r3, [pc, #468]	@ (8011614 <__ieee754_hypot+0x21c>)
 801143e:	429d      	cmp	r5, r3
 8011440:	f340 8096 	ble.w	8011570 <__ieee754_hypot+0x178>
 8011444:	4b74      	ldr	r3, [pc, #464]	@ (8011618 <__ieee754_hypot+0x220>)
 8011446:	429d      	cmp	r5, r3
 8011448:	dd14      	ble.n	8011474 <__ieee754_hypot+0x7c>
 801144a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801144e:	4305      	orrs	r5, r0
 8011450:	d004      	beq.n	801145c <__ieee754_hypot+0x64>
 8011452:	4623      	mov	r3, r4
 8011454:	f7ee ff3a 	bl	80002cc <__adddf3>
 8011458:	4682      	mov	sl, r0
 801145a:	468b      	mov	fp, r1
 801145c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8011460:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8011464:	4334      	orrs	r4, r6
 8011466:	f000 80d2 	beq.w	801160e <__ieee754_hypot+0x216>
 801146a:	ec4b ab10 	vmov	d0, sl, fp
 801146e:	b007      	add	sp, #28
 8011470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011474:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8011478:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 801147c:	46ab      	mov	fp, r5
 801147e:	4627      	mov	r7, r4
 8011480:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8011484:	9301      	str	r3, [sp, #4]
 8011486:	4b65      	ldr	r3, [pc, #404]	@ (801161c <__ieee754_hypot+0x224>)
 8011488:	429c      	cmp	r4, r3
 801148a:	dc19      	bgt.n	80114c0 <__ieee754_hypot+0xc8>
 801148c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8011490:	da70      	bge.n	8011574 <__ieee754_hypot+0x17c>
 8011492:	4633      	mov	r3, r6
 8011494:	4323      	orrs	r3, r4
 8011496:	d0e8      	beq.n	801146a <__ieee754_hypot+0x72>
 8011498:	4b61      	ldr	r3, [pc, #388]	@ (8011620 <__ieee754_hypot+0x228>)
 801149a:	2200      	movs	r2, #0
 801149c:	4630      	mov	r0, r6
 801149e:	4639      	mov	r1, r7
 80114a0:	f7ef f8ca 	bl	8000638 <__aeabi_dmul>
 80114a4:	4b5e      	ldr	r3, [pc, #376]	@ (8011620 <__ieee754_hypot+0x228>)
 80114a6:	4606      	mov	r6, r0
 80114a8:	460f      	mov	r7, r1
 80114aa:	4650      	mov	r0, sl
 80114ac:	4659      	mov	r1, fp
 80114ae:	2200      	movs	r2, #0
 80114b0:	f7ef f8c2 	bl	8000638 <__aeabi_dmul>
 80114b4:	9b01      	ldr	r3, [sp, #4]
 80114b6:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80114ba:	4682      	mov	sl, r0
 80114bc:	468b      	mov	fp, r1
 80114be:	9301      	str	r3, [sp, #4]
 80114c0:	4632      	mov	r2, r6
 80114c2:	463b      	mov	r3, r7
 80114c4:	4650      	mov	r0, sl
 80114c6:	4659      	mov	r1, fp
 80114c8:	f7ee fefe 	bl	80002c8 <__aeabi_dsub>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4680      	mov	r8, r0
 80114d2:	4689      	mov	r9, r1
 80114d4:	4630      	mov	r0, r6
 80114d6:	4639      	mov	r1, r7
 80114d8:	f7ef fb20 	bl	8000b1c <__aeabi_dcmplt>
 80114dc:	2200      	movs	r2, #0
 80114de:	2800      	cmp	r0, #0
 80114e0:	d053      	beq.n	801158a <__ieee754_hypot+0x192>
 80114e2:	462b      	mov	r3, r5
 80114e4:	4610      	mov	r0, r2
 80114e6:	4629      	mov	r1, r5
 80114e8:	4614      	mov	r4, r2
 80114ea:	f7ef f8a5 	bl	8000638 <__aeabi_dmul>
 80114ee:	4632      	mov	r2, r6
 80114f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f4:	463b      	mov	r3, r7
 80114f6:	4630      	mov	r0, r6
 80114f8:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80114fc:	f7ef f89c 	bl	8000638 <__aeabi_dmul>
 8011500:	4622      	mov	r2, r4
 8011502:	4606      	mov	r6, r0
 8011504:	460f      	mov	r7, r1
 8011506:	462b      	mov	r3, r5
 8011508:	4650      	mov	r0, sl
 801150a:	4659      	mov	r1, fp
 801150c:	f7ee fede 	bl	80002cc <__adddf3>
 8011510:	4622      	mov	r2, r4
 8011512:	4680      	mov	r8, r0
 8011514:	4689      	mov	r9, r1
 8011516:	462b      	mov	r3, r5
 8011518:	4650      	mov	r0, sl
 801151a:	4659      	mov	r1, fp
 801151c:	f7ee fed4 	bl	80002c8 <__aeabi_dsub>
 8011520:	4602      	mov	r2, r0
 8011522:	460b      	mov	r3, r1
 8011524:	4640      	mov	r0, r8
 8011526:	4649      	mov	r1, r9
 8011528:	f7ef f886 	bl	8000638 <__aeabi_dmul>
 801152c:	4602      	mov	r2, r0
 801152e:	460b      	mov	r3, r1
 8011530:	4630      	mov	r0, r6
 8011532:	4639      	mov	r1, r7
 8011534:	f7ee fec8 	bl	80002c8 <__aeabi_dsub>
 8011538:	4602      	mov	r2, r0
 801153a:	460b      	mov	r3, r1
 801153c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011540:	f7ee fec2 	bl	80002c8 <__aeabi_dsub>
 8011544:	ec41 0b10 	vmov	d0, r0, r1
 8011548:	f000 ffc4 	bl	80124d4 <__ieee754_sqrt>
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	ec5b ab10 	vmov	sl, fp, d0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d089      	beq.n	801146a <__ieee754_hypot+0x72>
 8011556:	051b      	lsls	r3, r3, #20
 8011558:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801155c:	2000      	movs	r0, #0
 801155e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	4650      	mov	r0, sl
 8011568:	4659      	mov	r1, fp
 801156a:	f7ef f865 	bl	8000638 <__aeabi_dmul>
 801156e:	e762      	b.n	8011436 <__ieee754_hypot+0x3e>
 8011570:	2300      	movs	r3, #0
 8011572:	e787      	b.n	8011484 <__ieee754_hypot+0x8c>
 8011574:	9b01      	ldr	r3, [sp, #4]
 8011576:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 801157a:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801157e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	46ab      	mov	fp, r5
 8011586:	4627      	mov	r7, r4
 8011588:	e79a      	b.n	80114c0 <__ieee754_hypot+0xc8>
 801158a:	4623      	mov	r3, r4
 801158c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011594:	2200      	movs	r2, #0
 8011596:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801159a:	4614      	mov	r4, r2
 801159c:	461d      	mov	r5, r3
 801159e:	f7ef f84b 	bl	8000638 <__aeabi_dmul>
 80115a2:	4642      	mov	r2, r8
 80115a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115a8:	464b      	mov	r3, r9
 80115aa:	4640      	mov	r0, r8
 80115ac:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 80115b0:	f7ef f842 	bl	8000638 <__aeabi_dmul>
 80115b4:	4652      	mov	r2, sl
 80115b6:	465b      	mov	r3, fp
 80115b8:	4680      	mov	r8, r0
 80115ba:	4689      	mov	r9, r1
 80115bc:	4650      	mov	r0, sl
 80115be:	4659      	mov	r1, fp
 80115c0:	f7ee fe84 	bl	80002cc <__adddf3>
 80115c4:	4622      	mov	r2, r4
 80115c6:	462b      	mov	r3, r5
 80115c8:	f7ee fe7e 	bl	80002c8 <__aeabi_dsub>
 80115cc:	4632      	mov	r2, r6
 80115ce:	463b      	mov	r3, r7
 80115d0:	f7ef f832 	bl	8000638 <__aeabi_dmul>
 80115d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115d8:	4682      	mov	sl, r0
 80115da:	468b      	mov	fp, r1
 80115dc:	4630      	mov	r0, r6
 80115de:	4639      	mov	r1, r7
 80115e0:	f7ee fe72 	bl	80002c8 <__aeabi_dsub>
 80115e4:	4622      	mov	r2, r4
 80115e6:	462b      	mov	r3, r5
 80115e8:	f7ef f826 	bl	8000638 <__aeabi_dmul>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	4650      	mov	r0, sl
 80115f2:	4659      	mov	r1, fp
 80115f4:	f7ee fe6a 	bl	80002cc <__adddf3>
 80115f8:	4602      	mov	r2, r0
 80115fa:	460b      	mov	r3, r1
 80115fc:	4640      	mov	r0, r8
 80115fe:	4649      	mov	r1, r9
 8011600:	f7ee fe62 	bl	80002c8 <__aeabi_dsub>
 8011604:	4602      	mov	r2, r0
 8011606:	460b      	mov	r3, r1
 8011608:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801160c:	e798      	b.n	8011540 <__ieee754_hypot+0x148>
 801160e:	46b2      	mov	sl, r6
 8011610:	46bb      	mov	fp, r7
 8011612:	e72a      	b.n	801146a <__ieee754_hypot+0x72>
 8011614:	5f300000 	.word	0x5f300000
 8011618:	7fefffff 	.word	0x7fefffff
 801161c:	20afffff 	.word	0x20afffff
 8011620:	7fd00000 	.word	0x7fd00000
 8011624:	00000000 	.word	0x00000000

08011628 <__ieee754_rem_pio2>:
 8011628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162c:	ec57 6b10 	vmov	r6, r7, d0
 8011630:	4bc5      	ldr	r3, [pc, #788]	@ (8011948 <__ieee754_rem_pio2+0x320>)
 8011632:	b08d      	sub	sp, #52	@ 0x34
 8011634:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011638:	4598      	cmp	r8, r3
 801163a:	4604      	mov	r4, r0
 801163c:	9704      	str	r7, [sp, #16]
 801163e:	d807      	bhi.n	8011650 <__ieee754_rem_pio2+0x28>
 8011640:	2200      	movs	r2, #0
 8011642:	2300      	movs	r3, #0
 8011644:	ed80 0b00 	vstr	d0, [r0]
 8011648:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801164c:	2500      	movs	r5, #0
 801164e:	e028      	b.n	80116a2 <__ieee754_rem_pio2+0x7a>
 8011650:	4bbe      	ldr	r3, [pc, #760]	@ (801194c <__ieee754_rem_pio2+0x324>)
 8011652:	4598      	cmp	r8, r3
 8011654:	d878      	bhi.n	8011748 <__ieee754_rem_pio2+0x120>
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	4dbd      	ldr	r5, [pc, #756]	@ (8011950 <__ieee754_rem_pio2+0x328>)
 801165a:	2b00      	cmp	r3, #0
 801165c:	4630      	mov	r0, r6
 801165e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011910 <__ieee754_rem_pio2+0x2e8>)
 8011660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011664:	4639      	mov	r1, r7
 8011666:	dd38      	ble.n	80116da <__ieee754_rem_pio2+0xb2>
 8011668:	f7ee fe2e 	bl	80002c8 <__aeabi_dsub>
 801166c:	45a8      	cmp	r8, r5
 801166e:	4606      	mov	r6, r0
 8011670:	460f      	mov	r7, r1
 8011672:	d01a      	beq.n	80116aa <__ieee754_rem_pio2+0x82>
 8011674:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011918 <__ieee754_rem_pio2+0x2f0>)
 8011676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167a:	f7ee fe25 	bl	80002c8 <__aeabi_dsub>
 801167e:	4602      	mov	r2, r0
 8011680:	460b      	mov	r3, r1
 8011682:	4680      	mov	r8, r0
 8011684:	4689      	mov	r9, r1
 8011686:	4630      	mov	r0, r6
 8011688:	4639      	mov	r1, r7
 801168a:	f7ee fe1d 	bl	80002c8 <__aeabi_dsub>
 801168e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011918 <__ieee754_rem_pio2+0x2f0>)
 8011690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011694:	f7ee fe18 	bl	80002c8 <__aeabi_dsub>
 8011698:	e9c4 8900 	strd	r8, r9, [r4]
 801169c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80116a0:	2501      	movs	r5, #1
 80116a2:	4628      	mov	r0, r5
 80116a4:	b00d      	add	sp, #52	@ 0x34
 80116a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116aa:	a39d      	add	r3, pc, #628	@ (adr r3, 8011920 <__ieee754_rem_pio2+0x2f8>)
 80116ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b0:	f7ee fe0a 	bl	80002c8 <__aeabi_dsub>
 80116b4:	a39c      	add	r3, pc, #624	@ (adr r3, 8011928 <__ieee754_rem_pio2+0x300>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	4606      	mov	r6, r0
 80116bc:	460f      	mov	r7, r1
 80116be:	f7ee fe03 	bl	80002c8 <__aeabi_dsub>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4680      	mov	r8, r0
 80116c8:	4689      	mov	r9, r1
 80116ca:	4630      	mov	r0, r6
 80116cc:	4639      	mov	r1, r7
 80116ce:	f7ee fdfb 	bl	80002c8 <__aeabi_dsub>
 80116d2:	a395      	add	r3, pc, #596	@ (adr r3, 8011928 <__ieee754_rem_pio2+0x300>)
 80116d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d8:	e7dc      	b.n	8011694 <__ieee754_rem_pio2+0x6c>
 80116da:	f7ee fdf7 	bl	80002cc <__adddf3>
 80116de:	45a8      	cmp	r8, r5
 80116e0:	4606      	mov	r6, r0
 80116e2:	460f      	mov	r7, r1
 80116e4:	d018      	beq.n	8011718 <__ieee754_rem_pio2+0xf0>
 80116e6:	a38c      	add	r3, pc, #560	@ (adr r3, 8011918 <__ieee754_rem_pio2+0x2f0>)
 80116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ec:	f7ee fdee 	bl	80002cc <__adddf3>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4680      	mov	r8, r0
 80116f6:	4689      	mov	r9, r1
 80116f8:	4630      	mov	r0, r6
 80116fa:	4639      	mov	r1, r7
 80116fc:	f7ee fde4 	bl	80002c8 <__aeabi_dsub>
 8011700:	a385      	add	r3, pc, #532	@ (adr r3, 8011918 <__ieee754_rem_pio2+0x2f0>)
 8011702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011706:	f7ee fde1 	bl	80002cc <__adddf3>
 801170a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801170e:	e9c4 8900 	strd	r8, r9, [r4]
 8011712:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011716:	e7c4      	b.n	80116a2 <__ieee754_rem_pio2+0x7a>
 8011718:	a381      	add	r3, pc, #516	@ (adr r3, 8011920 <__ieee754_rem_pio2+0x2f8>)
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	f7ee fdd5 	bl	80002cc <__adddf3>
 8011722:	a381      	add	r3, pc, #516	@ (adr r3, 8011928 <__ieee754_rem_pio2+0x300>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	4606      	mov	r6, r0
 801172a:	460f      	mov	r7, r1
 801172c:	f7ee fdce 	bl	80002cc <__adddf3>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	4680      	mov	r8, r0
 8011736:	4689      	mov	r9, r1
 8011738:	4630      	mov	r0, r6
 801173a:	4639      	mov	r1, r7
 801173c:	f7ee fdc4 	bl	80002c8 <__aeabi_dsub>
 8011740:	a379      	add	r3, pc, #484	@ (adr r3, 8011928 <__ieee754_rem_pio2+0x300>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	e7de      	b.n	8011706 <__ieee754_rem_pio2+0xde>
 8011748:	4b82      	ldr	r3, [pc, #520]	@ (8011954 <__ieee754_rem_pio2+0x32c>)
 801174a:	4598      	cmp	r8, r3
 801174c:	f200 80d1 	bhi.w	80118f2 <__ieee754_rem_pio2+0x2ca>
 8011750:	f7ff fdea 	bl	8011328 <fabs>
 8011754:	ec57 6b10 	vmov	r6, r7, d0
 8011758:	a375      	add	r3, pc, #468	@ (adr r3, 8011930 <__ieee754_rem_pio2+0x308>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	4630      	mov	r0, r6
 8011760:	4639      	mov	r1, r7
 8011762:	f7ee ff69 	bl	8000638 <__aeabi_dmul>
 8011766:	4b7c      	ldr	r3, [pc, #496]	@ (8011958 <__ieee754_rem_pio2+0x330>)
 8011768:	2200      	movs	r2, #0
 801176a:	f7ee fdaf 	bl	80002cc <__adddf3>
 801176e:	f7ef f9fd 	bl	8000b6c <__aeabi_d2iz>
 8011772:	4605      	mov	r5, r0
 8011774:	f7ee fef6 	bl	8000564 <__aeabi_i2d>
 8011778:	4602      	mov	r2, r0
 801177a:	460b      	mov	r3, r1
 801177c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011780:	a363      	add	r3, pc, #396	@ (adr r3, 8011910 <__ieee754_rem_pio2+0x2e8>)
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	f7ee ff57 	bl	8000638 <__aeabi_dmul>
 801178a:	4602      	mov	r2, r0
 801178c:	460b      	mov	r3, r1
 801178e:	4630      	mov	r0, r6
 8011790:	4639      	mov	r1, r7
 8011792:	f7ee fd99 	bl	80002c8 <__aeabi_dsub>
 8011796:	a360      	add	r3, pc, #384	@ (adr r3, 8011918 <__ieee754_rem_pio2+0x2f0>)
 8011798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179c:	4682      	mov	sl, r0
 801179e:	468b      	mov	fp, r1
 80117a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117a4:	f7ee ff48 	bl	8000638 <__aeabi_dmul>
 80117a8:	2d1f      	cmp	r5, #31
 80117aa:	4606      	mov	r6, r0
 80117ac:	460f      	mov	r7, r1
 80117ae:	dc0c      	bgt.n	80117ca <__ieee754_rem_pio2+0x1a2>
 80117b0:	4b6a      	ldr	r3, [pc, #424]	@ (801195c <__ieee754_rem_pio2+0x334>)
 80117b2:	1e6a      	subs	r2, r5, #1
 80117b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b8:	4543      	cmp	r3, r8
 80117ba:	d006      	beq.n	80117ca <__ieee754_rem_pio2+0x1a2>
 80117bc:	4632      	mov	r2, r6
 80117be:	463b      	mov	r3, r7
 80117c0:	4650      	mov	r0, sl
 80117c2:	4659      	mov	r1, fp
 80117c4:	f7ee fd80 	bl	80002c8 <__aeabi_dsub>
 80117c8:	e00e      	b.n	80117e8 <__ieee754_rem_pio2+0x1c0>
 80117ca:	463b      	mov	r3, r7
 80117cc:	4632      	mov	r2, r6
 80117ce:	4650      	mov	r0, sl
 80117d0:	4659      	mov	r1, fp
 80117d2:	f7ee fd79 	bl	80002c8 <__aeabi_dsub>
 80117d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80117da:	9305      	str	r3, [sp, #20]
 80117dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80117e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80117e4:	2b10      	cmp	r3, #16
 80117e6:	dc02      	bgt.n	80117ee <__ieee754_rem_pio2+0x1c6>
 80117e8:	e9c4 0100 	strd	r0, r1, [r4]
 80117ec:	e039      	b.n	8011862 <__ieee754_rem_pio2+0x23a>
 80117ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8011920 <__ieee754_rem_pio2+0x2f8>)
 80117f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117f8:	f7ee ff1e 	bl	8000638 <__aeabi_dmul>
 80117fc:	4606      	mov	r6, r0
 80117fe:	460f      	mov	r7, r1
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	4650      	mov	r0, sl
 8011806:	4659      	mov	r1, fp
 8011808:	f7ee fd5e 	bl	80002c8 <__aeabi_dsub>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	4680      	mov	r8, r0
 8011812:	4689      	mov	r9, r1
 8011814:	4650      	mov	r0, sl
 8011816:	4659      	mov	r1, fp
 8011818:	f7ee fd56 	bl	80002c8 <__aeabi_dsub>
 801181c:	4632      	mov	r2, r6
 801181e:	463b      	mov	r3, r7
 8011820:	f7ee fd52 	bl	80002c8 <__aeabi_dsub>
 8011824:	a340      	add	r3, pc, #256	@ (adr r3, 8011928 <__ieee754_rem_pio2+0x300>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	4606      	mov	r6, r0
 801182c:	460f      	mov	r7, r1
 801182e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011832:	f7ee ff01 	bl	8000638 <__aeabi_dmul>
 8011836:	4632      	mov	r2, r6
 8011838:	463b      	mov	r3, r7
 801183a:	f7ee fd45 	bl	80002c8 <__aeabi_dsub>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	4606      	mov	r6, r0
 8011844:	460f      	mov	r7, r1
 8011846:	4640      	mov	r0, r8
 8011848:	4649      	mov	r1, r9
 801184a:	f7ee fd3d 	bl	80002c8 <__aeabi_dsub>
 801184e:	9a05      	ldr	r2, [sp, #20]
 8011850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	2b31      	cmp	r3, #49	@ 0x31
 8011858:	dc20      	bgt.n	801189c <__ieee754_rem_pio2+0x274>
 801185a:	e9c4 0100 	strd	r0, r1, [r4]
 801185e:	46c2      	mov	sl, r8
 8011860:	46cb      	mov	fp, r9
 8011862:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011866:	4650      	mov	r0, sl
 8011868:	4642      	mov	r2, r8
 801186a:	464b      	mov	r3, r9
 801186c:	4659      	mov	r1, fp
 801186e:	f7ee fd2b 	bl	80002c8 <__aeabi_dsub>
 8011872:	463b      	mov	r3, r7
 8011874:	4632      	mov	r2, r6
 8011876:	f7ee fd27 	bl	80002c8 <__aeabi_dsub>
 801187a:	9b04      	ldr	r3, [sp, #16]
 801187c:	2b00      	cmp	r3, #0
 801187e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011882:	f6bf af0e 	bge.w	80116a2 <__ieee754_rem_pio2+0x7a>
 8011886:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801188a:	6063      	str	r3, [r4, #4]
 801188c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011890:	f8c4 8000 	str.w	r8, [r4]
 8011894:	60a0      	str	r0, [r4, #8]
 8011896:	60e3      	str	r3, [r4, #12]
 8011898:	426d      	negs	r5, r5
 801189a:	e702      	b.n	80116a2 <__ieee754_rem_pio2+0x7a>
 801189c:	a326      	add	r3, pc, #152	@ (adr r3, 8011938 <__ieee754_rem_pio2+0x310>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118a6:	f7ee fec7 	bl	8000638 <__aeabi_dmul>
 80118aa:	4606      	mov	r6, r0
 80118ac:	460f      	mov	r7, r1
 80118ae:	4602      	mov	r2, r0
 80118b0:	460b      	mov	r3, r1
 80118b2:	4640      	mov	r0, r8
 80118b4:	4649      	mov	r1, r9
 80118b6:	f7ee fd07 	bl	80002c8 <__aeabi_dsub>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	4682      	mov	sl, r0
 80118c0:	468b      	mov	fp, r1
 80118c2:	4640      	mov	r0, r8
 80118c4:	4649      	mov	r1, r9
 80118c6:	f7ee fcff 	bl	80002c8 <__aeabi_dsub>
 80118ca:	4632      	mov	r2, r6
 80118cc:	463b      	mov	r3, r7
 80118ce:	f7ee fcfb 	bl	80002c8 <__aeabi_dsub>
 80118d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x318>)
 80118d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d8:	4606      	mov	r6, r0
 80118da:	460f      	mov	r7, r1
 80118dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118e0:	f7ee feaa 	bl	8000638 <__aeabi_dmul>
 80118e4:	4632      	mov	r2, r6
 80118e6:	463b      	mov	r3, r7
 80118e8:	f7ee fcee 	bl	80002c8 <__aeabi_dsub>
 80118ec:	4606      	mov	r6, r0
 80118ee:	460f      	mov	r7, r1
 80118f0:	e764      	b.n	80117bc <__ieee754_rem_pio2+0x194>
 80118f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011960 <__ieee754_rem_pio2+0x338>)
 80118f4:	4598      	cmp	r8, r3
 80118f6:	d935      	bls.n	8011964 <__ieee754_rem_pio2+0x33c>
 80118f8:	4632      	mov	r2, r6
 80118fa:	463b      	mov	r3, r7
 80118fc:	4630      	mov	r0, r6
 80118fe:	4639      	mov	r1, r7
 8011900:	f7ee fce2 	bl	80002c8 <__aeabi_dsub>
 8011904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011908:	e9c4 0100 	strd	r0, r1, [r4]
 801190c:	e69e      	b.n	801164c <__ieee754_rem_pio2+0x24>
 801190e:	bf00      	nop
 8011910:	54400000 	.word	0x54400000
 8011914:	3ff921fb 	.word	0x3ff921fb
 8011918:	1a626331 	.word	0x1a626331
 801191c:	3dd0b461 	.word	0x3dd0b461
 8011920:	1a600000 	.word	0x1a600000
 8011924:	3dd0b461 	.word	0x3dd0b461
 8011928:	2e037073 	.word	0x2e037073
 801192c:	3ba3198a 	.word	0x3ba3198a
 8011930:	6dc9c883 	.word	0x6dc9c883
 8011934:	3fe45f30 	.word	0x3fe45f30
 8011938:	2e000000 	.word	0x2e000000
 801193c:	3ba3198a 	.word	0x3ba3198a
 8011940:	252049c1 	.word	0x252049c1
 8011944:	397b839a 	.word	0x397b839a
 8011948:	3fe921fb 	.word	0x3fe921fb
 801194c:	4002d97b 	.word	0x4002d97b
 8011950:	3ff921fb 	.word	0x3ff921fb
 8011954:	413921fb 	.word	0x413921fb
 8011958:	3fe00000 	.word	0x3fe00000
 801195c:	08015a70 	.word	0x08015a70
 8011960:	7fefffff 	.word	0x7fefffff
 8011964:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011968:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801196c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011970:	4630      	mov	r0, r6
 8011972:	460f      	mov	r7, r1
 8011974:	f7ef f8fa 	bl	8000b6c <__aeabi_d2iz>
 8011978:	f7ee fdf4 	bl	8000564 <__aeabi_i2d>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4630      	mov	r0, r6
 8011982:	4639      	mov	r1, r7
 8011984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011988:	f7ee fc9e 	bl	80002c8 <__aeabi_dsub>
 801198c:	4b22      	ldr	r3, [pc, #136]	@ (8011a18 <__ieee754_rem_pio2+0x3f0>)
 801198e:	2200      	movs	r2, #0
 8011990:	f7ee fe52 	bl	8000638 <__aeabi_dmul>
 8011994:	460f      	mov	r7, r1
 8011996:	4606      	mov	r6, r0
 8011998:	f7ef f8e8 	bl	8000b6c <__aeabi_d2iz>
 801199c:	f7ee fde2 	bl	8000564 <__aeabi_i2d>
 80119a0:	4602      	mov	r2, r0
 80119a2:	460b      	mov	r3, r1
 80119a4:	4630      	mov	r0, r6
 80119a6:	4639      	mov	r1, r7
 80119a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80119ac:	f7ee fc8c 	bl	80002c8 <__aeabi_dsub>
 80119b0:	4b19      	ldr	r3, [pc, #100]	@ (8011a18 <__ieee754_rem_pio2+0x3f0>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	f7ee fe40 	bl	8000638 <__aeabi_dmul>
 80119b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80119bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80119c0:	f04f 0803 	mov.w	r8, #3
 80119c4:	2600      	movs	r6, #0
 80119c6:	2700      	movs	r7, #0
 80119c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80119cc:	4632      	mov	r2, r6
 80119ce:	463b      	mov	r3, r7
 80119d0:	46c2      	mov	sl, r8
 80119d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80119d6:	f7ef f897 	bl	8000b08 <__aeabi_dcmpeq>
 80119da:	2800      	cmp	r0, #0
 80119dc:	d1f4      	bne.n	80119c8 <__ieee754_rem_pio2+0x3a0>
 80119de:	4b0f      	ldr	r3, [pc, #60]	@ (8011a1c <__ieee754_rem_pio2+0x3f4>)
 80119e0:	9301      	str	r3, [sp, #4]
 80119e2:	2302      	movs	r3, #2
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	462a      	mov	r2, r5
 80119e8:	4653      	mov	r3, sl
 80119ea:	4621      	mov	r1, r4
 80119ec:	a806      	add	r0, sp, #24
 80119ee:	f000 f817 	bl	8011a20 <__kernel_rem_pio2>
 80119f2:	9b04      	ldr	r3, [sp, #16]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	4605      	mov	r5, r0
 80119f8:	f6bf ae53 	bge.w	80116a2 <__ieee754_rem_pio2+0x7a>
 80119fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011a00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a04:	e9c4 2300 	strd	r2, r3, [r4]
 8011a08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011a0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011a14:	e740      	b.n	8011898 <__ieee754_rem_pio2+0x270>
 8011a16:	bf00      	nop
 8011a18:	41700000 	.word	0x41700000
 8011a1c:	08015af0 	.word	0x08015af0

08011a20 <__kernel_rem_pio2>:
 8011a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a24:	ed2d 8b02 	vpush	{d8}
 8011a28:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011a2c:	f112 0f14 	cmn.w	r2, #20
 8011a30:	9306      	str	r3, [sp, #24]
 8011a32:	9104      	str	r1, [sp, #16]
 8011a34:	4bbe      	ldr	r3, [pc, #760]	@ (8011d30 <__kernel_rem_pio2+0x310>)
 8011a36:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011a38:	9008      	str	r0, [sp, #32]
 8011a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	9b06      	ldr	r3, [sp, #24]
 8011a42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011a46:	bfa8      	it	ge
 8011a48:	1ed4      	subge	r4, r2, #3
 8011a4a:	9305      	str	r3, [sp, #20]
 8011a4c:	bfb2      	itee	lt
 8011a4e:	2400      	movlt	r4, #0
 8011a50:	2318      	movge	r3, #24
 8011a52:	fb94 f4f3 	sdivge	r4, r4, r3
 8011a56:	f06f 0317 	mvn.w	r3, #23
 8011a5a:	fb04 3303 	mla	r3, r4, r3, r3
 8011a5e:	eb03 0b02 	add.w	fp, r3, r2
 8011a62:	9b00      	ldr	r3, [sp, #0]
 8011a64:	9a05      	ldr	r2, [sp, #20]
 8011a66:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011d20 <__kernel_rem_pio2+0x300>
 8011a6a:	eb03 0802 	add.w	r8, r3, r2
 8011a6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011a70:	1aa7      	subs	r7, r4, r2
 8011a72:	ae20      	add	r6, sp, #128	@ 0x80
 8011a74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011a78:	2500      	movs	r5, #0
 8011a7a:	4545      	cmp	r5, r8
 8011a7c:	dd13      	ble.n	8011aa6 <__kernel_rem_pio2+0x86>
 8011a7e:	9b06      	ldr	r3, [sp, #24]
 8011a80:	aa20      	add	r2, sp, #128	@ 0x80
 8011a82:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011a86:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011a8a:	f04f 0800 	mov.w	r8, #0
 8011a8e:	9b00      	ldr	r3, [sp, #0]
 8011a90:	4598      	cmp	r8, r3
 8011a92:	dc31      	bgt.n	8011af8 <__kernel_rem_pio2+0xd8>
 8011a94:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011d20 <__kernel_rem_pio2+0x300>
 8011a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011aa0:	462f      	mov	r7, r5
 8011aa2:	2600      	movs	r6, #0
 8011aa4:	e01b      	b.n	8011ade <__kernel_rem_pio2+0xbe>
 8011aa6:	42ef      	cmn	r7, r5
 8011aa8:	d407      	bmi.n	8011aba <__kernel_rem_pio2+0x9a>
 8011aaa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011aae:	f7ee fd59 	bl	8000564 <__aeabi_i2d>
 8011ab2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ab6:	3501      	adds	r5, #1
 8011ab8:	e7df      	b.n	8011a7a <__kernel_rem_pio2+0x5a>
 8011aba:	ec51 0b18 	vmov	r0, r1, d8
 8011abe:	e7f8      	b.n	8011ab2 <__kernel_rem_pio2+0x92>
 8011ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ac4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011ac8:	f7ee fdb6 	bl	8000638 <__aeabi_dmul>
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ad4:	f7ee fbfa 	bl	80002cc <__adddf3>
 8011ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011adc:	3601      	adds	r6, #1
 8011ade:	9b05      	ldr	r3, [sp, #20]
 8011ae0:	429e      	cmp	r6, r3
 8011ae2:	f1a7 0708 	sub.w	r7, r7, #8
 8011ae6:	ddeb      	ble.n	8011ac0 <__kernel_rem_pio2+0xa0>
 8011ae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011aec:	f108 0801 	add.w	r8, r8, #1
 8011af0:	ecaa 7b02 	vstmia	sl!, {d7}
 8011af4:	3508      	adds	r5, #8
 8011af6:	e7ca      	b.n	8011a8e <__kernel_rem_pio2+0x6e>
 8011af8:	9b00      	ldr	r3, [sp, #0]
 8011afa:	f8dd 8000 	ldr.w	r8, [sp]
 8011afe:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b04:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b06:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011b08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b0e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011b12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b14:	ab98      	add	r3, sp, #608	@ 0x260
 8011b16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b1a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011b1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b22:	ac0c      	add	r4, sp, #48	@ 0x30
 8011b24:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011b26:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011b2a:	46a1      	mov	r9, r4
 8011b2c:	46c2      	mov	sl, r8
 8011b2e:	f1ba 0f00 	cmp.w	sl, #0
 8011b32:	f1a5 0508 	sub.w	r5, r5, #8
 8011b36:	dc77      	bgt.n	8011c28 <__kernel_rem_pio2+0x208>
 8011b38:	4658      	mov	r0, fp
 8011b3a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011b3e:	f000 fc4b 	bl	80123d8 <scalbn>
 8011b42:	ec57 6b10 	vmov	r6, r7, d0
 8011b46:	2200      	movs	r2, #0
 8011b48:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	4639      	mov	r1, r7
 8011b50:	f7ee fd72 	bl	8000638 <__aeabi_dmul>
 8011b54:	ec41 0b10 	vmov	d0, r0, r1
 8011b58:	f000 fd96 	bl	8012688 <floor>
 8011b5c:	4b75      	ldr	r3, [pc, #468]	@ (8011d34 <__kernel_rem_pio2+0x314>)
 8011b5e:	ec51 0b10 	vmov	r0, r1, d0
 8011b62:	2200      	movs	r2, #0
 8011b64:	f7ee fd68 	bl	8000638 <__aeabi_dmul>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	f7ee fbaa 	bl	80002c8 <__aeabi_dsub>
 8011b74:	460f      	mov	r7, r1
 8011b76:	4606      	mov	r6, r0
 8011b78:	f7ee fff8 	bl	8000b6c <__aeabi_d2iz>
 8011b7c:	9002      	str	r0, [sp, #8]
 8011b7e:	f7ee fcf1 	bl	8000564 <__aeabi_i2d>
 8011b82:	4602      	mov	r2, r0
 8011b84:	460b      	mov	r3, r1
 8011b86:	4630      	mov	r0, r6
 8011b88:	4639      	mov	r1, r7
 8011b8a:	f7ee fb9d 	bl	80002c8 <__aeabi_dsub>
 8011b8e:	f1bb 0f00 	cmp.w	fp, #0
 8011b92:	4606      	mov	r6, r0
 8011b94:	460f      	mov	r7, r1
 8011b96:	dd6c      	ble.n	8011c72 <__kernel_rem_pio2+0x252>
 8011b98:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011b9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b9e:	9d02      	ldr	r5, [sp, #8]
 8011ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ba4:	f1cb 0018 	rsb	r0, fp, #24
 8011ba8:	fa43 f200 	asr.w	r2, r3, r0
 8011bac:	4415      	add	r5, r2
 8011bae:	4082      	lsls	r2, r0
 8011bb0:	1a9b      	subs	r3, r3, r2
 8011bb2:	aa0c      	add	r2, sp, #48	@ 0x30
 8011bb4:	9502      	str	r5, [sp, #8]
 8011bb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011bba:	f1cb 0217 	rsb	r2, fp, #23
 8011bbe:	fa43 f902 	asr.w	r9, r3, r2
 8011bc2:	f1b9 0f00 	cmp.w	r9, #0
 8011bc6:	dd64      	ble.n	8011c92 <__kernel_rem_pio2+0x272>
 8011bc8:	9b02      	ldr	r3, [sp, #8]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	3301      	adds	r3, #1
 8011bce:	9302      	str	r3, [sp, #8]
 8011bd0:	4615      	mov	r5, r2
 8011bd2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011bd6:	4590      	cmp	r8, r2
 8011bd8:	f300 80b8 	bgt.w	8011d4c <__kernel_rem_pio2+0x32c>
 8011bdc:	f1bb 0f00 	cmp.w	fp, #0
 8011be0:	dd07      	ble.n	8011bf2 <__kernel_rem_pio2+0x1d2>
 8011be2:	f1bb 0f01 	cmp.w	fp, #1
 8011be6:	f000 80bf 	beq.w	8011d68 <__kernel_rem_pio2+0x348>
 8011bea:	f1bb 0f02 	cmp.w	fp, #2
 8011bee:	f000 80c6 	beq.w	8011d7e <__kernel_rem_pio2+0x35e>
 8011bf2:	f1b9 0f02 	cmp.w	r9, #2
 8011bf6:	d14c      	bne.n	8011c92 <__kernel_rem_pio2+0x272>
 8011bf8:	4632      	mov	r2, r6
 8011bfa:	463b      	mov	r3, r7
 8011bfc:	494e      	ldr	r1, [pc, #312]	@ (8011d38 <__kernel_rem_pio2+0x318>)
 8011bfe:	2000      	movs	r0, #0
 8011c00:	f7ee fb62 	bl	80002c8 <__aeabi_dsub>
 8011c04:	4606      	mov	r6, r0
 8011c06:	460f      	mov	r7, r1
 8011c08:	2d00      	cmp	r5, #0
 8011c0a:	d042      	beq.n	8011c92 <__kernel_rem_pio2+0x272>
 8011c0c:	4658      	mov	r0, fp
 8011c0e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011d28 <__kernel_rem_pio2+0x308>
 8011c12:	f000 fbe1 	bl	80123d8 <scalbn>
 8011c16:	4630      	mov	r0, r6
 8011c18:	4639      	mov	r1, r7
 8011c1a:	ec53 2b10 	vmov	r2, r3, d0
 8011c1e:	f7ee fb53 	bl	80002c8 <__aeabi_dsub>
 8011c22:	4606      	mov	r6, r0
 8011c24:	460f      	mov	r7, r1
 8011c26:	e034      	b.n	8011c92 <__kernel_rem_pio2+0x272>
 8011c28:	4b44      	ldr	r3, [pc, #272]	@ (8011d3c <__kernel_rem_pio2+0x31c>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c30:	f7ee fd02 	bl	8000638 <__aeabi_dmul>
 8011c34:	f7ee ff9a 	bl	8000b6c <__aeabi_d2iz>
 8011c38:	f7ee fc94 	bl	8000564 <__aeabi_i2d>
 8011c3c:	4b40      	ldr	r3, [pc, #256]	@ (8011d40 <__kernel_rem_pio2+0x320>)
 8011c3e:	2200      	movs	r2, #0
 8011c40:	4606      	mov	r6, r0
 8011c42:	460f      	mov	r7, r1
 8011c44:	f7ee fcf8 	bl	8000638 <__aeabi_dmul>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c50:	f7ee fb3a 	bl	80002c8 <__aeabi_dsub>
 8011c54:	f7ee ff8a 	bl	8000b6c <__aeabi_d2iz>
 8011c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c5c:	f849 0b04 	str.w	r0, [r9], #4
 8011c60:	4639      	mov	r1, r7
 8011c62:	4630      	mov	r0, r6
 8011c64:	f7ee fb32 	bl	80002cc <__adddf3>
 8011c68:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c70:	e75d      	b.n	8011b2e <__kernel_rem_pio2+0x10e>
 8011c72:	d107      	bne.n	8011c84 <__kernel_rem_pio2+0x264>
 8011c74:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011c78:	aa0c      	add	r2, sp, #48	@ 0x30
 8011c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c7e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011c82:	e79e      	b.n	8011bc2 <__kernel_rem_pio2+0x1a2>
 8011c84:	4b2f      	ldr	r3, [pc, #188]	@ (8011d44 <__kernel_rem_pio2+0x324>)
 8011c86:	2200      	movs	r2, #0
 8011c88:	f7ee ff5c 	bl	8000b44 <__aeabi_dcmpge>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d143      	bne.n	8011d18 <__kernel_rem_pio2+0x2f8>
 8011c90:	4681      	mov	r9, r0
 8011c92:	2200      	movs	r2, #0
 8011c94:	2300      	movs	r3, #0
 8011c96:	4630      	mov	r0, r6
 8011c98:	4639      	mov	r1, r7
 8011c9a:	f7ee ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	f000 80bf 	beq.w	8011e22 <__kernel_rem_pio2+0x402>
 8011ca4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011ca8:	2200      	movs	r2, #0
 8011caa:	9900      	ldr	r1, [sp, #0]
 8011cac:	428b      	cmp	r3, r1
 8011cae:	da6e      	bge.n	8011d8e <__kernel_rem_pio2+0x36e>
 8011cb0:	2a00      	cmp	r2, #0
 8011cb2:	f000 8089 	beq.w	8011dc8 <__kernel_rem_pio2+0x3a8>
 8011cb6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011cba:	ab0c      	add	r3, sp, #48	@ 0x30
 8011cbc:	f1ab 0b18 	sub.w	fp, fp, #24
 8011cc0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d0f6      	beq.n	8011cb6 <__kernel_rem_pio2+0x296>
 8011cc8:	4658      	mov	r0, fp
 8011cca:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011d28 <__kernel_rem_pio2+0x308>
 8011cce:	f000 fb83 	bl	80123d8 <scalbn>
 8011cd2:	f108 0301 	add.w	r3, r8, #1
 8011cd6:	00da      	lsls	r2, r3, #3
 8011cd8:	9205      	str	r2, [sp, #20]
 8011cda:	ec55 4b10 	vmov	r4, r5, d0
 8011cde:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011ce0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011d3c <__kernel_rem_pio2+0x31c>
 8011ce4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011ce8:	4646      	mov	r6, r8
 8011cea:	f04f 0a00 	mov.w	sl, #0
 8011cee:	2e00      	cmp	r6, #0
 8011cf0:	f280 80cf 	bge.w	8011e92 <__kernel_rem_pio2+0x472>
 8011cf4:	4644      	mov	r4, r8
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	f2c0 80fd 	blt.w	8011ef6 <__kernel_rem_pio2+0x4d6>
 8011cfc:	4b12      	ldr	r3, [pc, #72]	@ (8011d48 <__kernel_rem_pio2+0x328>)
 8011cfe:	461f      	mov	r7, r3
 8011d00:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011d02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d06:	9306      	str	r3, [sp, #24]
 8011d08:	f04f 0a00 	mov.w	sl, #0
 8011d0c:	f04f 0b00 	mov.w	fp, #0
 8011d10:	2600      	movs	r6, #0
 8011d12:	eba8 0504 	sub.w	r5, r8, r4
 8011d16:	e0e2      	b.n	8011ede <__kernel_rem_pio2+0x4be>
 8011d18:	f04f 0902 	mov.w	r9, #2
 8011d1c:	e754      	b.n	8011bc8 <__kernel_rem_pio2+0x1a8>
 8011d1e:	bf00      	nop
	...
 8011d2c:	3ff00000 	.word	0x3ff00000
 8011d30:	08015c38 	.word	0x08015c38
 8011d34:	40200000 	.word	0x40200000
 8011d38:	3ff00000 	.word	0x3ff00000
 8011d3c:	3e700000 	.word	0x3e700000
 8011d40:	41700000 	.word	0x41700000
 8011d44:	3fe00000 	.word	0x3fe00000
 8011d48:	08015bf8 	.word	0x08015bf8
 8011d4c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011d50:	b945      	cbnz	r5, 8011d64 <__kernel_rem_pio2+0x344>
 8011d52:	b123      	cbz	r3, 8011d5e <__kernel_rem_pio2+0x33e>
 8011d54:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011d58:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	3201      	adds	r2, #1
 8011d60:	461d      	mov	r5, r3
 8011d62:	e738      	b.n	8011bd6 <__kernel_rem_pio2+0x1b6>
 8011d64:	1acb      	subs	r3, r1, r3
 8011d66:	e7f7      	b.n	8011d58 <__kernel_rem_pio2+0x338>
 8011d68:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011d6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d72:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011d76:	a90c      	add	r1, sp, #48	@ 0x30
 8011d78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011d7c:	e739      	b.n	8011bf2 <__kernel_rem_pio2+0x1d2>
 8011d7e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011d82:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011d8c:	e7f3      	b.n	8011d76 <__kernel_rem_pio2+0x356>
 8011d8e:	a90c      	add	r1, sp, #48	@ 0x30
 8011d90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011d94:	3b01      	subs	r3, #1
 8011d96:	430a      	orrs	r2, r1
 8011d98:	e787      	b.n	8011caa <__kernel_rem_pio2+0x28a>
 8011d9a:	3401      	adds	r4, #1
 8011d9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	d0fa      	beq.n	8011d9a <__kernel_rem_pio2+0x37a>
 8011da4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011da6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011daa:	eb0d 0503 	add.w	r5, sp, r3
 8011dae:	9b06      	ldr	r3, [sp, #24]
 8011db0:	aa20      	add	r2, sp, #128	@ 0x80
 8011db2:	4443      	add	r3, r8
 8011db4:	f108 0701 	add.w	r7, r8, #1
 8011db8:	3d98      	subs	r5, #152	@ 0x98
 8011dba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011dbe:	4444      	add	r4, r8
 8011dc0:	42bc      	cmp	r4, r7
 8011dc2:	da04      	bge.n	8011dce <__kernel_rem_pio2+0x3ae>
 8011dc4:	46a0      	mov	r8, r4
 8011dc6:	e6a2      	b.n	8011b0e <__kernel_rem_pio2+0xee>
 8011dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dca:	2401      	movs	r4, #1
 8011dcc:	e7e6      	b.n	8011d9c <__kernel_rem_pio2+0x37c>
 8011dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011dd4:	f7ee fbc6 	bl	8000564 <__aeabi_i2d>
 8011dd8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80120a0 <__kernel_rem_pio2+0x680>
 8011ddc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011de0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011de8:	46b2      	mov	sl, r6
 8011dea:	f04f 0800 	mov.w	r8, #0
 8011dee:	9b05      	ldr	r3, [sp, #20]
 8011df0:	4598      	cmp	r8, r3
 8011df2:	dd05      	ble.n	8011e00 <__kernel_rem_pio2+0x3e0>
 8011df4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011df8:	3701      	adds	r7, #1
 8011dfa:	eca5 7b02 	vstmia	r5!, {d7}
 8011dfe:	e7df      	b.n	8011dc0 <__kernel_rem_pio2+0x3a0>
 8011e00:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011e04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011e08:	f7ee fc16 	bl	8000638 <__aeabi_dmul>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e14:	f7ee fa5a 	bl	80002cc <__adddf3>
 8011e18:	f108 0801 	add.w	r8, r8, #1
 8011e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e20:	e7e5      	b.n	8011dee <__kernel_rem_pio2+0x3ce>
 8011e22:	f1cb 0000 	rsb	r0, fp, #0
 8011e26:	ec47 6b10 	vmov	d0, r6, r7
 8011e2a:	f000 fad5 	bl	80123d8 <scalbn>
 8011e2e:	ec55 4b10 	vmov	r4, r5, d0
 8011e32:	4b9d      	ldr	r3, [pc, #628]	@ (80120a8 <__kernel_rem_pio2+0x688>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	f7ee fe83 	bl	8000b44 <__aeabi_dcmpge>
 8011e3e:	b300      	cbz	r0, 8011e82 <__kernel_rem_pio2+0x462>
 8011e40:	4b9a      	ldr	r3, [pc, #616]	@ (80120ac <__kernel_rem_pio2+0x68c>)
 8011e42:	2200      	movs	r2, #0
 8011e44:	4620      	mov	r0, r4
 8011e46:	4629      	mov	r1, r5
 8011e48:	f7ee fbf6 	bl	8000638 <__aeabi_dmul>
 8011e4c:	f7ee fe8e 	bl	8000b6c <__aeabi_d2iz>
 8011e50:	4606      	mov	r6, r0
 8011e52:	f7ee fb87 	bl	8000564 <__aeabi_i2d>
 8011e56:	4b94      	ldr	r3, [pc, #592]	@ (80120a8 <__kernel_rem_pio2+0x688>)
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f7ee fbed 	bl	8000638 <__aeabi_dmul>
 8011e5e:	460b      	mov	r3, r1
 8011e60:	4602      	mov	r2, r0
 8011e62:	4629      	mov	r1, r5
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ee fa2f 	bl	80002c8 <__aeabi_dsub>
 8011e6a:	f7ee fe7f 	bl	8000b6c <__aeabi_d2iz>
 8011e6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e70:	f10b 0b18 	add.w	fp, fp, #24
 8011e74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011e78:	f108 0801 	add.w	r8, r8, #1
 8011e7c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011e80:	e722      	b.n	8011cc8 <__kernel_rem_pio2+0x2a8>
 8011e82:	4620      	mov	r0, r4
 8011e84:	4629      	mov	r1, r5
 8011e86:	f7ee fe71 	bl	8000b6c <__aeabi_d2iz>
 8011e8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011e90:	e71a      	b.n	8011cc8 <__kernel_rem_pio2+0x2a8>
 8011e92:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011e98:	f7ee fb64 	bl	8000564 <__aeabi_i2d>
 8011e9c:	4622      	mov	r2, r4
 8011e9e:	462b      	mov	r3, r5
 8011ea0:	f7ee fbca 	bl	8000638 <__aeabi_dmul>
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011eaa:	465b      	mov	r3, fp
 8011eac:	4620      	mov	r0, r4
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f7ee fbc2 	bl	8000638 <__aeabi_dmul>
 8011eb4:	3e01      	subs	r6, #1
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	460d      	mov	r5, r1
 8011eba:	e718      	b.n	8011cee <__kernel_rem_pio2+0x2ce>
 8011ebc:	9906      	ldr	r1, [sp, #24]
 8011ebe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011ec2:	9106      	str	r1, [sp, #24]
 8011ec4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011ec8:	f7ee fbb6 	bl	8000638 <__aeabi_dmul>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	4650      	mov	r0, sl
 8011ed2:	4659      	mov	r1, fp
 8011ed4:	f7ee f9fa 	bl	80002cc <__adddf3>
 8011ed8:	3601      	adds	r6, #1
 8011eda:	4682      	mov	sl, r0
 8011edc:	468b      	mov	fp, r1
 8011ede:	9b00      	ldr	r3, [sp, #0]
 8011ee0:	429e      	cmp	r6, r3
 8011ee2:	dc01      	bgt.n	8011ee8 <__kernel_rem_pio2+0x4c8>
 8011ee4:	42b5      	cmp	r5, r6
 8011ee6:	dae9      	bge.n	8011ebc <__kernel_rem_pio2+0x49c>
 8011ee8:	ab48      	add	r3, sp, #288	@ 0x120
 8011eea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011eee:	e9c5 ab00 	strd	sl, fp, [r5]
 8011ef2:	3c01      	subs	r4, #1
 8011ef4:	e6ff      	b.n	8011cf6 <__kernel_rem_pio2+0x2d6>
 8011ef6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	dc0b      	bgt.n	8011f14 <__kernel_rem_pio2+0x4f4>
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	dc39      	bgt.n	8011f74 <__kernel_rem_pio2+0x554>
 8011f00:	d05d      	beq.n	8011fbe <__kernel_rem_pio2+0x59e>
 8011f02:	9b02      	ldr	r3, [sp, #8]
 8011f04:	f003 0007 	and.w	r0, r3, #7
 8011f08:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011f0c:	ecbd 8b02 	vpop	{d8}
 8011f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f14:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011f16:	2b03      	cmp	r3, #3
 8011f18:	d1f3      	bne.n	8011f02 <__kernel_rem_pio2+0x4e2>
 8011f1a:	9b05      	ldr	r3, [sp, #20]
 8011f1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011f20:	eb0d 0403 	add.w	r4, sp, r3
 8011f24:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011f28:	4625      	mov	r5, r4
 8011f2a:	46c2      	mov	sl, r8
 8011f2c:	f1ba 0f00 	cmp.w	sl, #0
 8011f30:	f1a5 0508 	sub.w	r5, r5, #8
 8011f34:	dc6b      	bgt.n	801200e <__kernel_rem_pio2+0x5ee>
 8011f36:	4645      	mov	r5, r8
 8011f38:	2d01      	cmp	r5, #1
 8011f3a:	f1a4 0408 	sub.w	r4, r4, #8
 8011f3e:	f300 8087 	bgt.w	8012050 <__kernel_rem_pio2+0x630>
 8011f42:	9c05      	ldr	r4, [sp, #20]
 8011f44:	ab48      	add	r3, sp, #288	@ 0x120
 8011f46:	441c      	add	r4, r3
 8011f48:	2000      	movs	r0, #0
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	f1b8 0f01 	cmp.w	r8, #1
 8011f50:	f300 809c 	bgt.w	801208c <__kernel_rem_pio2+0x66c>
 8011f54:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011f58:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8011f5c:	f1b9 0f00 	cmp.w	r9, #0
 8011f60:	f040 80a6 	bne.w	80120b0 <__kernel_rem_pio2+0x690>
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	e9c3 7800 	strd	r7, r8, [r3]
 8011f6a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011f6e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011f72:	e7c6      	b.n	8011f02 <__kernel_rem_pio2+0x4e2>
 8011f74:	9d05      	ldr	r5, [sp, #20]
 8011f76:	ab48      	add	r3, sp, #288	@ 0x120
 8011f78:	441d      	add	r5, r3
 8011f7a:	4644      	mov	r4, r8
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	2100      	movs	r1, #0
 8011f80:	2c00      	cmp	r4, #0
 8011f82:	da35      	bge.n	8011ff0 <__kernel_rem_pio2+0x5d0>
 8011f84:	f1b9 0f00 	cmp.w	r9, #0
 8011f88:	d038      	beq.n	8011ffc <__kernel_rem_pio2+0x5dc>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f90:	9c04      	ldr	r4, [sp, #16]
 8011f92:	e9c4 2300 	strd	r2, r3, [r4]
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011f9e:	f7ee f993 	bl	80002c8 <__aeabi_dsub>
 8011fa2:	ad4a      	add	r5, sp, #296	@ 0x128
 8011fa4:	2401      	movs	r4, #1
 8011fa6:	45a0      	cmp	r8, r4
 8011fa8:	da2b      	bge.n	8012002 <__kernel_rem_pio2+0x5e2>
 8011faa:	f1b9 0f00 	cmp.w	r9, #0
 8011fae:	d002      	beq.n	8011fb6 <__kernel_rem_pio2+0x596>
 8011fb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	9b04      	ldr	r3, [sp, #16]
 8011fb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011fbc:	e7a1      	b.n	8011f02 <__kernel_rem_pio2+0x4e2>
 8011fbe:	9c05      	ldr	r4, [sp, #20]
 8011fc0:	ab48      	add	r3, sp, #288	@ 0x120
 8011fc2:	441c      	add	r4, r3
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	f1b8 0f00 	cmp.w	r8, #0
 8011fcc:	da09      	bge.n	8011fe2 <__kernel_rem_pio2+0x5c2>
 8011fce:	f1b9 0f00 	cmp.w	r9, #0
 8011fd2:	d002      	beq.n	8011fda <__kernel_rem_pio2+0x5ba>
 8011fd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011fd8:	4619      	mov	r1, r3
 8011fda:	9b04      	ldr	r3, [sp, #16]
 8011fdc:	e9c3 0100 	strd	r0, r1, [r3]
 8011fe0:	e78f      	b.n	8011f02 <__kernel_rem_pio2+0x4e2>
 8011fe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011fe6:	f7ee f971 	bl	80002cc <__adddf3>
 8011fea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011fee:	e7eb      	b.n	8011fc8 <__kernel_rem_pio2+0x5a8>
 8011ff0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011ff4:	f7ee f96a 	bl	80002cc <__adddf3>
 8011ff8:	3c01      	subs	r4, #1
 8011ffa:	e7c1      	b.n	8011f80 <__kernel_rem_pio2+0x560>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	e7c6      	b.n	8011f90 <__kernel_rem_pio2+0x570>
 8012002:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012006:	f7ee f961 	bl	80002cc <__adddf3>
 801200a:	3401      	adds	r4, #1
 801200c:	e7cb      	b.n	8011fa6 <__kernel_rem_pio2+0x586>
 801200e:	ed95 7b00 	vldr	d7, [r5]
 8012012:	ed8d 7b00 	vstr	d7, [sp]
 8012016:	ed95 7b02 	vldr	d7, [r5, #8]
 801201a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801201e:	ec53 2b17 	vmov	r2, r3, d7
 8012022:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012026:	f7ee f951 	bl	80002cc <__adddf3>
 801202a:	4602      	mov	r2, r0
 801202c:	460b      	mov	r3, r1
 801202e:	4606      	mov	r6, r0
 8012030:	460f      	mov	r7, r1
 8012032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012036:	f7ee f947 	bl	80002c8 <__aeabi_dsub>
 801203a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801203e:	f7ee f945 	bl	80002cc <__adddf3>
 8012042:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012046:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801204a:	e9c5 6700 	strd	r6, r7, [r5]
 801204e:	e76d      	b.n	8011f2c <__kernel_rem_pio2+0x50c>
 8012050:	ed94 7b00 	vldr	d7, [r4]
 8012054:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012058:	ec51 0b17 	vmov	r0, r1, d7
 801205c:	4652      	mov	r2, sl
 801205e:	465b      	mov	r3, fp
 8012060:	ed8d 7b00 	vstr	d7, [sp]
 8012064:	f7ee f932 	bl	80002cc <__adddf3>
 8012068:	4602      	mov	r2, r0
 801206a:	460b      	mov	r3, r1
 801206c:	4606      	mov	r6, r0
 801206e:	460f      	mov	r7, r1
 8012070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012074:	f7ee f928 	bl	80002c8 <__aeabi_dsub>
 8012078:	4652      	mov	r2, sl
 801207a:	465b      	mov	r3, fp
 801207c:	f7ee f926 	bl	80002cc <__adddf3>
 8012080:	3d01      	subs	r5, #1
 8012082:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012086:	e9c4 6700 	strd	r6, r7, [r4]
 801208a:	e755      	b.n	8011f38 <__kernel_rem_pio2+0x518>
 801208c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012090:	f7ee f91c 	bl	80002cc <__adddf3>
 8012094:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012098:	e758      	b.n	8011f4c <__kernel_rem_pio2+0x52c>
 801209a:	bf00      	nop
 801209c:	f3af 8000 	nop.w
	...
 80120a8:	41700000 	.word	0x41700000
 80120ac:	3e700000 	.word	0x3e700000
 80120b0:	9b04      	ldr	r3, [sp, #16]
 80120b2:	9a04      	ldr	r2, [sp, #16]
 80120b4:	601f      	str	r7, [r3, #0]
 80120b6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80120ba:	605c      	str	r4, [r3, #4]
 80120bc:	609d      	str	r5, [r3, #8]
 80120be:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80120c2:	60d3      	str	r3, [r2, #12]
 80120c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80120c8:	6110      	str	r0, [r2, #16]
 80120ca:	6153      	str	r3, [r2, #20]
 80120cc:	e719      	b.n	8011f02 <__kernel_rem_pio2+0x4e2>
 80120ce:	bf00      	nop

080120d0 <__kernel_cos>:
 80120d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	ec57 6b10 	vmov	r6, r7, d0
 80120d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80120dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80120e0:	ed8d 1b00 	vstr	d1, [sp]
 80120e4:	d206      	bcs.n	80120f4 <__kernel_cos+0x24>
 80120e6:	4630      	mov	r0, r6
 80120e8:	4639      	mov	r1, r7
 80120ea:	f7ee fd3f 	bl	8000b6c <__aeabi_d2iz>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	f000 8088 	beq.w	8012204 <__kernel_cos+0x134>
 80120f4:	4632      	mov	r2, r6
 80120f6:	463b      	mov	r3, r7
 80120f8:	4630      	mov	r0, r6
 80120fa:	4639      	mov	r1, r7
 80120fc:	f7ee fa9c 	bl	8000638 <__aeabi_dmul>
 8012100:	4b51      	ldr	r3, [pc, #324]	@ (8012248 <__kernel_cos+0x178>)
 8012102:	2200      	movs	r2, #0
 8012104:	4604      	mov	r4, r0
 8012106:	460d      	mov	r5, r1
 8012108:	f7ee fa96 	bl	8000638 <__aeabi_dmul>
 801210c:	a340      	add	r3, pc, #256	@ (adr r3, 8012210 <__kernel_cos+0x140>)
 801210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012112:	4682      	mov	sl, r0
 8012114:	468b      	mov	fp, r1
 8012116:	4620      	mov	r0, r4
 8012118:	4629      	mov	r1, r5
 801211a:	f7ee fa8d 	bl	8000638 <__aeabi_dmul>
 801211e:	a33e      	add	r3, pc, #248	@ (adr r3, 8012218 <__kernel_cos+0x148>)
 8012120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012124:	f7ee f8d2 	bl	80002cc <__adddf3>
 8012128:	4622      	mov	r2, r4
 801212a:	462b      	mov	r3, r5
 801212c:	f7ee fa84 	bl	8000638 <__aeabi_dmul>
 8012130:	a33b      	add	r3, pc, #236	@ (adr r3, 8012220 <__kernel_cos+0x150>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	f7ee f8c7 	bl	80002c8 <__aeabi_dsub>
 801213a:	4622      	mov	r2, r4
 801213c:	462b      	mov	r3, r5
 801213e:	f7ee fa7b 	bl	8000638 <__aeabi_dmul>
 8012142:	a339      	add	r3, pc, #228	@ (adr r3, 8012228 <__kernel_cos+0x158>)
 8012144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012148:	f7ee f8c0 	bl	80002cc <__adddf3>
 801214c:	4622      	mov	r2, r4
 801214e:	462b      	mov	r3, r5
 8012150:	f7ee fa72 	bl	8000638 <__aeabi_dmul>
 8012154:	a336      	add	r3, pc, #216	@ (adr r3, 8012230 <__kernel_cos+0x160>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	f7ee f8b5 	bl	80002c8 <__aeabi_dsub>
 801215e:	4622      	mov	r2, r4
 8012160:	462b      	mov	r3, r5
 8012162:	f7ee fa69 	bl	8000638 <__aeabi_dmul>
 8012166:	a334      	add	r3, pc, #208	@ (adr r3, 8012238 <__kernel_cos+0x168>)
 8012168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216c:	f7ee f8ae 	bl	80002cc <__adddf3>
 8012170:	4622      	mov	r2, r4
 8012172:	462b      	mov	r3, r5
 8012174:	f7ee fa60 	bl	8000638 <__aeabi_dmul>
 8012178:	4622      	mov	r2, r4
 801217a:	462b      	mov	r3, r5
 801217c:	f7ee fa5c 	bl	8000638 <__aeabi_dmul>
 8012180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012184:	4604      	mov	r4, r0
 8012186:	460d      	mov	r5, r1
 8012188:	4630      	mov	r0, r6
 801218a:	4639      	mov	r1, r7
 801218c:	f7ee fa54 	bl	8000638 <__aeabi_dmul>
 8012190:	460b      	mov	r3, r1
 8012192:	4602      	mov	r2, r0
 8012194:	4629      	mov	r1, r5
 8012196:	4620      	mov	r0, r4
 8012198:	f7ee f896 	bl	80002c8 <__aeabi_dsub>
 801219c:	4b2b      	ldr	r3, [pc, #172]	@ (801224c <__kernel_cos+0x17c>)
 801219e:	4598      	cmp	r8, r3
 80121a0:	4606      	mov	r6, r0
 80121a2:	460f      	mov	r7, r1
 80121a4:	d810      	bhi.n	80121c8 <__kernel_cos+0xf8>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4650      	mov	r0, sl
 80121ac:	4659      	mov	r1, fp
 80121ae:	f7ee f88b 	bl	80002c8 <__aeabi_dsub>
 80121b2:	460b      	mov	r3, r1
 80121b4:	4926      	ldr	r1, [pc, #152]	@ (8012250 <__kernel_cos+0x180>)
 80121b6:	4602      	mov	r2, r0
 80121b8:	2000      	movs	r0, #0
 80121ba:	f7ee f885 	bl	80002c8 <__aeabi_dsub>
 80121be:	ec41 0b10 	vmov	d0, r0, r1
 80121c2:	b003      	add	sp, #12
 80121c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c8:	4b22      	ldr	r3, [pc, #136]	@ (8012254 <__kernel_cos+0x184>)
 80121ca:	4921      	ldr	r1, [pc, #132]	@ (8012250 <__kernel_cos+0x180>)
 80121cc:	4598      	cmp	r8, r3
 80121ce:	bf8c      	ite	hi
 80121d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8012258 <__kernel_cos+0x188>)
 80121d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80121d6:	2400      	movs	r4, #0
 80121d8:	4622      	mov	r2, r4
 80121da:	462b      	mov	r3, r5
 80121dc:	2000      	movs	r0, #0
 80121de:	f7ee f873 	bl	80002c8 <__aeabi_dsub>
 80121e2:	4622      	mov	r2, r4
 80121e4:	4680      	mov	r8, r0
 80121e6:	4689      	mov	r9, r1
 80121e8:	462b      	mov	r3, r5
 80121ea:	4650      	mov	r0, sl
 80121ec:	4659      	mov	r1, fp
 80121ee:	f7ee f86b 	bl	80002c8 <__aeabi_dsub>
 80121f2:	4632      	mov	r2, r6
 80121f4:	463b      	mov	r3, r7
 80121f6:	f7ee f867 	bl	80002c8 <__aeabi_dsub>
 80121fa:	4602      	mov	r2, r0
 80121fc:	460b      	mov	r3, r1
 80121fe:	4640      	mov	r0, r8
 8012200:	4649      	mov	r1, r9
 8012202:	e7da      	b.n	80121ba <__kernel_cos+0xea>
 8012204:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012240 <__kernel_cos+0x170>
 8012208:	e7db      	b.n	80121c2 <__kernel_cos+0xf2>
 801220a:	bf00      	nop
 801220c:	f3af 8000 	nop.w
 8012210:	be8838d4 	.word	0xbe8838d4
 8012214:	bda8fae9 	.word	0xbda8fae9
 8012218:	bdb4b1c4 	.word	0xbdb4b1c4
 801221c:	3e21ee9e 	.word	0x3e21ee9e
 8012220:	809c52ad 	.word	0x809c52ad
 8012224:	3e927e4f 	.word	0x3e927e4f
 8012228:	19cb1590 	.word	0x19cb1590
 801222c:	3efa01a0 	.word	0x3efa01a0
 8012230:	16c15177 	.word	0x16c15177
 8012234:	3f56c16c 	.word	0x3f56c16c
 8012238:	5555554c 	.word	0x5555554c
 801223c:	3fa55555 	.word	0x3fa55555
 8012240:	00000000 	.word	0x00000000
 8012244:	3ff00000 	.word	0x3ff00000
 8012248:	3fe00000 	.word	0x3fe00000
 801224c:	3fd33332 	.word	0x3fd33332
 8012250:	3ff00000 	.word	0x3ff00000
 8012254:	3fe90000 	.word	0x3fe90000
 8012258:	3fd20000 	.word	0x3fd20000
 801225c:	00000000 	.word	0x00000000

08012260 <__kernel_sin>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	ec55 4b10 	vmov	r4, r5, d0
 8012268:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801226c:	b085      	sub	sp, #20
 801226e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012272:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012276:	4680      	mov	r8, r0
 8012278:	d205      	bcs.n	8012286 <__kernel_sin+0x26>
 801227a:	4620      	mov	r0, r4
 801227c:	4629      	mov	r1, r5
 801227e:	f7ee fc75 	bl	8000b6c <__aeabi_d2iz>
 8012282:	2800      	cmp	r0, #0
 8012284:	d052      	beq.n	801232c <__kernel_sin+0xcc>
 8012286:	4622      	mov	r2, r4
 8012288:	462b      	mov	r3, r5
 801228a:	4620      	mov	r0, r4
 801228c:	4629      	mov	r1, r5
 801228e:	f7ee f9d3 	bl	8000638 <__aeabi_dmul>
 8012292:	4682      	mov	sl, r0
 8012294:	468b      	mov	fp, r1
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	4620      	mov	r0, r4
 801229c:	4629      	mov	r1, r5
 801229e:	f7ee f9cb 	bl	8000638 <__aeabi_dmul>
 80122a2:	a342      	add	r3, pc, #264	@ (adr r3, 80123ac <__kernel_sin+0x14c>)
 80122a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a8:	e9cd 0100 	strd	r0, r1, [sp]
 80122ac:	4650      	mov	r0, sl
 80122ae:	4659      	mov	r1, fp
 80122b0:	f7ee f9c2 	bl	8000638 <__aeabi_dmul>
 80122b4:	a33f      	add	r3, pc, #252	@ (adr r3, 80123b4 <__kernel_sin+0x154>)
 80122b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ba:	f7ee f805 	bl	80002c8 <__aeabi_dsub>
 80122be:	4652      	mov	r2, sl
 80122c0:	465b      	mov	r3, fp
 80122c2:	f7ee f9b9 	bl	8000638 <__aeabi_dmul>
 80122c6:	a33d      	add	r3, pc, #244	@ (adr r3, 80123bc <__kernel_sin+0x15c>)
 80122c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122cc:	f7ed fffe 	bl	80002cc <__adddf3>
 80122d0:	4652      	mov	r2, sl
 80122d2:	465b      	mov	r3, fp
 80122d4:	f7ee f9b0 	bl	8000638 <__aeabi_dmul>
 80122d8:	a33a      	add	r3, pc, #232	@ (adr r3, 80123c4 <__kernel_sin+0x164>)
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ed fff3 	bl	80002c8 <__aeabi_dsub>
 80122e2:	4652      	mov	r2, sl
 80122e4:	465b      	mov	r3, fp
 80122e6:	f7ee f9a7 	bl	8000638 <__aeabi_dmul>
 80122ea:	a338      	add	r3, pc, #224	@ (adr r3, 80123cc <__kernel_sin+0x16c>)
 80122ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f0:	f7ed ffec 	bl	80002cc <__adddf3>
 80122f4:	4606      	mov	r6, r0
 80122f6:	460f      	mov	r7, r1
 80122f8:	f1b8 0f00 	cmp.w	r8, #0
 80122fc:	d11b      	bne.n	8012336 <__kernel_sin+0xd6>
 80122fe:	4602      	mov	r2, r0
 8012300:	460b      	mov	r3, r1
 8012302:	4650      	mov	r0, sl
 8012304:	4659      	mov	r1, fp
 8012306:	f7ee f997 	bl	8000638 <__aeabi_dmul>
 801230a:	a325      	add	r3, pc, #148	@ (adr r3, 80123a0 <__kernel_sin+0x140>)
 801230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012310:	f7ed ffda 	bl	80002c8 <__aeabi_dsub>
 8012314:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012318:	f7ee f98e 	bl	8000638 <__aeabi_dmul>
 801231c:	4602      	mov	r2, r0
 801231e:	460b      	mov	r3, r1
 8012320:	4620      	mov	r0, r4
 8012322:	4629      	mov	r1, r5
 8012324:	f7ed ffd2 	bl	80002cc <__adddf3>
 8012328:	4604      	mov	r4, r0
 801232a:	460d      	mov	r5, r1
 801232c:	ec45 4b10 	vmov	d0, r4, r5
 8012330:	b005      	add	sp, #20
 8012332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801233a:	4b1b      	ldr	r3, [pc, #108]	@ (80123a8 <__kernel_sin+0x148>)
 801233c:	2200      	movs	r2, #0
 801233e:	f7ee f97b 	bl	8000638 <__aeabi_dmul>
 8012342:	4632      	mov	r2, r6
 8012344:	4680      	mov	r8, r0
 8012346:	4689      	mov	r9, r1
 8012348:	463b      	mov	r3, r7
 801234a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801234e:	f7ee f973 	bl	8000638 <__aeabi_dmul>
 8012352:	4602      	mov	r2, r0
 8012354:	460b      	mov	r3, r1
 8012356:	4640      	mov	r0, r8
 8012358:	4649      	mov	r1, r9
 801235a:	f7ed ffb5 	bl	80002c8 <__aeabi_dsub>
 801235e:	4652      	mov	r2, sl
 8012360:	465b      	mov	r3, fp
 8012362:	f7ee f969 	bl	8000638 <__aeabi_dmul>
 8012366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801236a:	f7ed ffad 	bl	80002c8 <__aeabi_dsub>
 801236e:	a30c      	add	r3, pc, #48	@ (adr r3, 80123a0 <__kernel_sin+0x140>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	4606      	mov	r6, r0
 8012376:	460f      	mov	r7, r1
 8012378:	e9dd 0100 	ldrd	r0, r1, [sp]
 801237c:	f7ee f95c 	bl	8000638 <__aeabi_dmul>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4630      	mov	r0, r6
 8012386:	4639      	mov	r1, r7
 8012388:	f7ed ffa0 	bl	80002cc <__adddf3>
 801238c:	4602      	mov	r2, r0
 801238e:	460b      	mov	r3, r1
 8012390:	4620      	mov	r0, r4
 8012392:	4629      	mov	r1, r5
 8012394:	f7ed ff98 	bl	80002c8 <__aeabi_dsub>
 8012398:	e7c6      	b.n	8012328 <__kernel_sin+0xc8>
 801239a:	bf00      	nop
 801239c:	f3af 8000 	nop.w
 80123a0:	55555549 	.word	0x55555549
 80123a4:	3fc55555 	.word	0x3fc55555
 80123a8:	3fe00000 	.word	0x3fe00000
 80123ac:	5acfd57c 	.word	0x5acfd57c
 80123b0:	3de5d93a 	.word	0x3de5d93a
 80123b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80123b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80123bc:	57b1fe7d 	.word	0x57b1fe7d
 80123c0:	3ec71de3 	.word	0x3ec71de3
 80123c4:	19c161d5 	.word	0x19c161d5
 80123c8:	3f2a01a0 	.word	0x3f2a01a0
 80123cc:	1110f8a6 	.word	0x1110f8a6
 80123d0:	3f811111 	.word	0x3f811111
 80123d4:	00000000 	.word	0x00000000

080123d8 <scalbn>:
 80123d8:	b570      	push	{r4, r5, r6, lr}
 80123da:	ec55 4b10 	vmov	r4, r5, d0
 80123de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80123e2:	4606      	mov	r6, r0
 80123e4:	462b      	mov	r3, r5
 80123e6:	b991      	cbnz	r1, 801240e <scalbn+0x36>
 80123e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80123ec:	4323      	orrs	r3, r4
 80123ee:	d03d      	beq.n	801246c <scalbn+0x94>
 80123f0:	4b35      	ldr	r3, [pc, #212]	@ (80124c8 <scalbn+0xf0>)
 80123f2:	4620      	mov	r0, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	2200      	movs	r2, #0
 80123f8:	f7ee f91e 	bl	8000638 <__aeabi_dmul>
 80123fc:	4b33      	ldr	r3, [pc, #204]	@ (80124cc <scalbn+0xf4>)
 80123fe:	429e      	cmp	r6, r3
 8012400:	4604      	mov	r4, r0
 8012402:	460d      	mov	r5, r1
 8012404:	da0f      	bge.n	8012426 <scalbn+0x4e>
 8012406:	a328      	add	r3, pc, #160	@ (adr r3, 80124a8 <scalbn+0xd0>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	e01e      	b.n	801244c <scalbn+0x74>
 801240e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012412:	4291      	cmp	r1, r2
 8012414:	d10b      	bne.n	801242e <scalbn+0x56>
 8012416:	4622      	mov	r2, r4
 8012418:	4620      	mov	r0, r4
 801241a:	4629      	mov	r1, r5
 801241c:	f7ed ff56 	bl	80002cc <__adddf3>
 8012420:	4604      	mov	r4, r0
 8012422:	460d      	mov	r5, r1
 8012424:	e022      	b.n	801246c <scalbn+0x94>
 8012426:	460b      	mov	r3, r1
 8012428:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801242c:	3936      	subs	r1, #54	@ 0x36
 801242e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012432:	4296      	cmp	r6, r2
 8012434:	dd0d      	ble.n	8012452 <scalbn+0x7a>
 8012436:	2d00      	cmp	r5, #0
 8012438:	a11d      	add	r1, pc, #116	@ (adr r1, 80124b0 <scalbn+0xd8>)
 801243a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243e:	da02      	bge.n	8012446 <scalbn+0x6e>
 8012440:	a11d      	add	r1, pc, #116	@ (adr r1, 80124b8 <scalbn+0xe0>)
 8012442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012446:	a31a      	add	r3, pc, #104	@ (adr r3, 80124b0 <scalbn+0xd8>)
 8012448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244c:	f7ee f8f4 	bl	8000638 <__aeabi_dmul>
 8012450:	e7e6      	b.n	8012420 <scalbn+0x48>
 8012452:	1872      	adds	r2, r6, r1
 8012454:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012458:	428a      	cmp	r2, r1
 801245a:	dcec      	bgt.n	8012436 <scalbn+0x5e>
 801245c:	2a00      	cmp	r2, #0
 801245e:	dd08      	ble.n	8012472 <scalbn+0x9a>
 8012460:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012464:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012468:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801246c:	ec45 4b10 	vmov	d0, r4, r5
 8012470:	bd70      	pop	{r4, r5, r6, pc}
 8012472:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012476:	da08      	bge.n	801248a <scalbn+0xb2>
 8012478:	2d00      	cmp	r5, #0
 801247a:	a10b      	add	r1, pc, #44	@ (adr r1, 80124a8 <scalbn+0xd0>)
 801247c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012480:	dac1      	bge.n	8012406 <scalbn+0x2e>
 8012482:	a10f      	add	r1, pc, #60	@ (adr r1, 80124c0 <scalbn+0xe8>)
 8012484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012488:	e7bd      	b.n	8012406 <scalbn+0x2e>
 801248a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801248e:	3236      	adds	r2, #54	@ 0x36
 8012490:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012494:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012498:	4620      	mov	r0, r4
 801249a:	4b0d      	ldr	r3, [pc, #52]	@ (80124d0 <scalbn+0xf8>)
 801249c:	4629      	mov	r1, r5
 801249e:	2200      	movs	r2, #0
 80124a0:	e7d4      	b.n	801244c <scalbn+0x74>
 80124a2:	bf00      	nop
 80124a4:	f3af 8000 	nop.w
 80124a8:	c2f8f359 	.word	0xc2f8f359
 80124ac:	01a56e1f 	.word	0x01a56e1f
 80124b0:	8800759c 	.word	0x8800759c
 80124b4:	7e37e43c 	.word	0x7e37e43c
 80124b8:	8800759c 	.word	0x8800759c
 80124bc:	fe37e43c 	.word	0xfe37e43c
 80124c0:	c2f8f359 	.word	0xc2f8f359
 80124c4:	81a56e1f 	.word	0x81a56e1f
 80124c8:	43500000 	.word	0x43500000
 80124cc:	ffff3cb0 	.word	0xffff3cb0
 80124d0:	3c900000 	.word	0x3c900000

080124d4 <__ieee754_sqrt>:
 80124d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	4a68      	ldr	r2, [pc, #416]	@ (801267c <__ieee754_sqrt+0x1a8>)
 80124da:	ec55 4b10 	vmov	r4, r5, d0
 80124de:	43aa      	bics	r2, r5
 80124e0:	462b      	mov	r3, r5
 80124e2:	4621      	mov	r1, r4
 80124e4:	d110      	bne.n	8012508 <__ieee754_sqrt+0x34>
 80124e6:	4622      	mov	r2, r4
 80124e8:	4620      	mov	r0, r4
 80124ea:	4629      	mov	r1, r5
 80124ec:	f7ee f8a4 	bl	8000638 <__aeabi_dmul>
 80124f0:	4602      	mov	r2, r0
 80124f2:	460b      	mov	r3, r1
 80124f4:	4620      	mov	r0, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	f7ed fee8 	bl	80002cc <__adddf3>
 80124fc:	4604      	mov	r4, r0
 80124fe:	460d      	mov	r5, r1
 8012500:	ec45 4b10 	vmov	d0, r4, r5
 8012504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012508:	2d00      	cmp	r5, #0
 801250a:	dc0e      	bgt.n	801252a <__ieee754_sqrt+0x56>
 801250c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012510:	4322      	orrs	r2, r4
 8012512:	d0f5      	beq.n	8012500 <__ieee754_sqrt+0x2c>
 8012514:	b19d      	cbz	r5, 801253e <__ieee754_sqrt+0x6a>
 8012516:	4622      	mov	r2, r4
 8012518:	4620      	mov	r0, r4
 801251a:	4629      	mov	r1, r5
 801251c:	f7ed fed4 	bl	80002c8 <__aeabi_dsub>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	f7ee f9b2 	bl	800088c <__aeabi_ddiv>
 8012528:	e7e8      	b.n	80124fc <__ieee754_sqrt+0x28>
 801252a:	152a      	asrs	r2, r5, #20
 801252c:	d115      	bne.n	801255a <__ieee754_sqrt+0x86>
 801252e:	2000      	movs	r0, #0
 8012530:	e009      	b.n	8012546 <__ieee754_sqrt+0x72>
 8012532:	0acb      	lsrs	r3, r1, #11
 8012534:	3a15      	subs	r2, #21
 8012536:	0549      	lsls	r1, r1, #21
 8012538:	2b00      	cmp	r3, #0
 801253a:	d0fa      	beq.n	8012532 <__ieee754_sqrt+0x5e>
 801253c:	e7f7      	b.n	801252e <__ieee754_sqrt+0x5a>
 801253e:	462a      	mov	r2, r5
 8012540:	e7fa      	b.n	8012538 <__ieee754_sqrt+0x64>
 8012542:	005b      	lsls	r3, r3, #1
 8012544:	3001      	adds	r0, #1
 8012546:	02dc      	lsls	r4, r3, #11
 8012548:	d5fb      	bpl.n	8012542 <__ieee754_sqrt+0x6e>
 801254a:	1e44      	subs	r4, r0, #1
 801254c:	1b12      	subs	r2, r2, r4
 801254e:	f1c0 0420 	rsb	r4, r0, #32
 8012552:	fa21 f404 	lsr.w	r4, r1, r4
 8012556:	4323      	orrs	r3, r4
 8012558:	4081      	lsls	r1, r0
 801255a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801255e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012566:	07d2      	lsls	r2, r2, #31
 8012568:	bf5c      	itt	pl
 801256a:	005b      	lslpl	r3, r3, #1
 801256c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012570:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012574:	bf58      	it	pl
 8012576:	0049      	lslpl	r1, r1, #1
 8012578:	2600      	movs	r6, #0
 801257a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801257e:	106d      	asrs	r5, r5, #1
 8012580:	0049      	lsls	r1, r1, #1
 8012582:	2016      	movs	r0, #22
 8012584:	4632      	mov	r2, r6
 8012586:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801258a:	1917      	adds	r7, r2, r4
 801258c:	429f      	cmp	r7, r3
 801258e:	bfde      	ittt	le
 8012590:	193a      	addle	r2, r7, r4
 8012592:	1bdb      	suble	r3, r3, r7
 8012594:	1936      	addle	r6, r6, r4
 8012596:	0fcf      	lsrs	r7, r1, #31
 8012598:	3801      	subs	r0, #1
 801259a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801259e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80125a6:	d1f0      	bne.n	801258a <__ieee754_sqrt+0xb6>
 80125a8:	4604      	mov	r4, r0
 80125aa:	2720      	movs	r7, #32
 80125ac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80125b0:	429a      	cmp	r2, r3
 80125b2:	eb00 0e0c 	add.w	lr, r0, ip
 80125b6:	db02      	blt.n	80125be <__ieee754_sqrt+0xea>
 80125b8:	d113      	bne.n	80125e2 <__ieee754_sqrt+0x10e>
 80125ba:	458e      	cmp	lr, r1
 80125bc:	d811      	bhi.n	80125e2 <__ieee754_sqrt+0x10e>
 80125be:	f1be 0f00 	cmp.w	lr, #0
 80125c2:	eb0e 000c 	add.w	r0, lr, ip
 80125c6:	da42      	bge.n	801264e <__ieee754_sqrt+0x17a>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	db40      	blt.n	801264e <__ieee754_sqrt+0x17a>
 80125cc:	f102 0801 	add.w	r8, r2, #1
 80125d0:	1a9b      	subs	r3, r3, r2
 80125d2:	458e      	cmp	lr, r1
 80125d4:	bf88      	it	hi
 80125d6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80125da:	eba1 010e 	sub.w	r1, r1, lr
 80125de:	4464      	add	r4, ip
 80125e0:	4642      	mov	r2, r8
 80125e2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80125e6:	3f01      	subs	r7, #1
 80125e8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80125ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125f0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80125f4:	d1dc      	bne.n	80125b0 <__ieee754_sqrt+0xdc>
 80125f6:	4319      	orrs	r1, r3
 80125f8:	d01b      	beq.n	8012632 <__ieee754_sqrt+0x15e>
 80125fa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012680 <__ieee754_sqrt+0x1ac>
 80125fe:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012684 <__ieee754_sqrt+0x1b0>
 8012602:	e9da 0100 	ldrd	r0, r1, [sl]
 8012606:	e9db 2300 	ldrd	r2, r3, [fp]
 801260a:	f7ed fe5d 	bl	80002c8 <__aeabi_dsub>
 801260e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012612:	4602      	mov	r2, r0
 8012614:	460b      	mov	r3, r1
 8012616:	4640      	mov	r0, r8
 8012618:	4649      	mov	r1, r9
 801261a:	f7ee fa89 	bl	8000b30 <__aeabi_dcmple>
 801261e:	b140      	cbz	r0, 8012632 <__ieee754_sqrt+0x15e>
 8012620:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8012624:	e9da 0100 	ldrd	r0, r1, [sl]
 8012628:	e9db 2300 	ldrd	r2, r3, [fp]
 801262c:	d111      	bne.n	8012652 <__ieee754_sqrt+0x17e>
 801262e:	3601      	adds	r6, #1
 8012630:	463c      	mov	r4, r7
 8012632:	1072      	asrs	r2, r6, #1
 8012634:	0863      	lsrs	r3, r4, #1
 8012636:	07f1      	lsls	r1, r6, #31
 8012638:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801263c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012640:	bf48      	it	mi
 8012642:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012646:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801264a:	4618      	mov	r0, r3
 801264c:	e756      	b.n	80124fc <__ieee754_sqrt+0x28>
 801264e:	4690      	mov	r8, r2
 8012650:	e7be      	b.n	80125d0 <__ieee754_sqrt+0xfc>
 8012652:	f7ed fe3b 	bl	80002cc <__adddf3>
 8012656:	e9da 8900 	ldrd	r8, r9, [sl]
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	4640      	mov	r0, r8
 8012660:	4649      	mov	r1, r9
 8012662:	f7ee fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8012666:	b120      	cbz	r0, 8012672 <__ieee754_sqrt+0x19e>
 8012668:	1ca0      	adds	r0, r4, #2
 801266a:	bf08      	it	eq
 801266c:	3601      	addeq	r6, #1
 801266e:	3402      	adds	r4, #2
 8012670:	e7df      	b.n	8012632 <__ieee754_sqrt+0x15e>
 8012672:	1c63      	adds	r3, r4, #1
 8012674:	f023 0401 	bic.w	r4, r3, #1
 8012678:	e7db      	b.n	8012632 <__ieee754_sqrt+0x15e>
 801267a:	bf00      	nop
 801267c:	7ff00000 	.word	0x7ff00000
 8012680:	20000078 	.word	0x20000078
 8012684:	20000070 	.word	0x20000070

08012688 <floor>:
 8012688:	ec51 0b10 	vmov	r0, r1, d0
 801268c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012694:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012698:	2e13      	cmp	r6, #19
 801269a:	460c      	mov	r4, r1
 801269c:	4605      	mov	r5, r0
 801269e:	4680      	mov	r8, r0
 80126a0:	dc34      	bgt.n	801270c <floor+0x84>
 80126a2:	2e00      	cmp	r6, #0
 80126a4:	da17      	bge.n	80126d6 <floor+0x4e>
 80126a6:	a332      	add	r3, pc, #200	@ (adr r3, 8012770 <floor+0xe8>)
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	f7ed fe0e 	bl	80002cc <__adddf3>
 80126b0:	2200      	movs	r2, #0
 80126b2:	2300      	movs	r3, #0
 80126b4:	f7ee fa50 	bl	8000b58 <__aeabi_dcmpgt>
 80126b8:	b150      	cbz	r0, 80126d0 <floor+0x48>
 80126ba:	2c00      	cmp	r4, #0
 80126bc:	da55      	bge.n	801276a <floor+0xe2>
 80126be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80126c2:	432c      	orrs	r4, r5
 80126c4:	2500      	movs	r5, #0
 80126c6:	42ac      	cmp	r4, r5
 80126c8:	4c2b      	ldr	r4, [pc, #172]	@ (8012778 <floor+0xf0>)
 80126ca:	bf08      	it	eq
 80126cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80126d0:	4621      	mov	r1, r4
 80126d2:	4628      	mov	r0, r5
 80126d4:	e023      	b.n	801271e <floor+0x96>
 80126d6:	4f29      	ldr	r7, [pc, #164]	@ (801277c <floor+0xf4>)
 80126d8:	4137      	asrs	r7, r6
 80126da:	ea01 0307 	and.w	r3, r1, r7
 80126de:	4303      	orrs	r3, r0
 80126e0:	d01d      	beq.n	801271e <floor+0x96>
 80126e2:	a323      	add	r3, pc, #140	@ (adr r3, 8012770 <floor+0xe8>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	f7ed fdf0 	bl	80002cc <__adddf3>
 80126ec:	2200      	movs	r2, #0
 80126ee:	2300      	movs	r3, #0
 80126f0:	f7ee fa32 	bl	8000b58 <__aeabi_dcmpgt>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d0eb      	beq.n	80126d0 <floor+0x48>
 80126f8:	2c00      	cmp	r4, #0
 80126fa:	bfbe      	ittt	lt
 80126fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012700:	4133      	asrlt	r3, r6
 8012702:	18e4      	addlt	r4, r4, r3
 8012704:	ea24 0407 	bic.w	r4, r4, r7
 8012708:	2500      	movs	r5, #0
 801270a:	e7e1      	b.n	80126d0 <floor+0x48>
 801270c:	2e33      	cmp	r6, #51	@ 0x33
 801270e:	dd0a      	ble.n	8012726 <floor+0x9e>
 8012710:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012714:	d103      	bne.n	801271e <floor+0x96>
 8012716:	4602      	mov	r2, r0
 8012718:	460b      	mov	r3, r1
 801271a:	f7ed fdd7 	bl	80002cc <__adddf3>
 801271e:	ec41 0b10 	vmov	d0, r0, r1
 8012722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012726:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801272a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801272e:	40df      	lsrs	r7, r3
 8012730:	4207      	tst	r7, r0
 8012732:	d0f4      	beq.n	801271e <floor+0x96>
 8012734:	a30e      	add	r3, pc, #56	@ (adr r3, 8012770 <floor+0xe8>)
 8012736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273a:	f7ed fdc7 	bl	80002cc <__adddf3>
 801273e:	2200      	movs	r2, #0
 8012740:	2300      	movs	r3, #0
 8012742:	f7ee fa09 	bl	8000b58 <__aeabi_dcmpgt>
 8012746:	2800      	cmp	r0, #0
 8012748:	d0c2      	beq.n	80126d0 <floor+0x48>
 801274a:	2c00      	cmp	r4, #0
 801274c:	da0a      	bge.n	8012764 <floor+0xdc>
 801274e:	2e14      	cmp	r6, #20
 8012750:	d101      	bne.n	8012756 <floor+0xce>
 8012752:	3401      	adds	r4, #1
 8012754:	e006      	b.n	8012764 <floor+0xdc>
 8012756:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801275a:	2301      	movs	r3, #1
 801275c:	40b3      	lsls	r3, r6
 801275e:	441d      	add	r5, r3
 8012760:	4545      	cmp	r5, r8
 8012762:	d3f6      	bcc.n	8012752 <floor+0xca>
 8012764:	ea25 0507 	bic.w	r5, r5, r7
 8012768:	e7b2      	b.n	80126d0 <floor+0x48>
 801276a:	2500      	movs	r5, #0
 801276c:	462c      	mov	r4, r5
 801276e:	e7af      	b.n	80126d0 <floor+0x48>
 8012770:	8800759c 	.word	0x8800759c
 8012774:	7e37e43c 	.word	0x7e37e43c
 8012778:	bff00000 	.word	0xbff00000
 801277c:	000fffff 	.word	0x000fffff

08012780 <__sflush_r>:
 8012780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012788:	0716      	lsls	r6, r2, #28
 801278a:	4605      	mov	r5, r0
 801278c:	460c      	mov	r4, r1
 801278e:	d454      	bmi.n	801283a <__sflush_r+0xba>
 8012790:	684b      	ldr	r3, [r1, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	dc02      	bgt.n	801279c <__sflush_r+0x1c>
 8012796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012798:	2b00      	cmp	r3, #0
 801279a:	dd48      	ble.n	801282e <__sflush_r+0xae>
 801279c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801279e:	2e00      	cmp	r6, #0
 80127a0:	d045      	beq.n	801282e <__sflush_r+0xae>
 80127a2:	2300      	movs	r3, #0
 80127a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80127a8:	682f      	ldr	r7, [r5, #0]
 80127aa:	6a21      	ldr	r1, [r4, #32]
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	d030      	beq.n	8012812 <__sflush_r+0x92>
 80127b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	0759      	lsls	r1, r3, #29
 80127b6:	d505      	bpl.n	80127c4 <__sflush_r+0x44>
 80127b8:	6863      	ldr	r3, [r4, #4]
 80127ba:	1ad2      	subs	r2, r2, r3
 80127bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80127be:	b10b      	cbz	r3, 80127c4 <__sflush_r+0x44>
 80127c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127c2:	1ad2      	subs	r2, r2, r3
 80127c4:	2300      	movs	r3, #0
 80127c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127c8:	6a21      	ldr	r1, [r4, #32]
 80127ca:	4628      	mov	r0, r5
 80127cc:	47b0      	blx	r6
 80127ce:	1c43      	adds	r3, r0, #1
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	d106      	bne.n	80127e2 <__sflush_r+0x62>
 80127d4:	6829      	ldr	r1, [r5, #0]
 80127d6:	291d      	cmp	r1, #29
 80127d8:	d82b      	bhi.n	8012832 <__sflush_r+0xb2>
 80127da:	4a2a      	ldr	r2, [pc, #168]	@ (8012884 <__sflush_r+0x104>)
 80127dc:	410a      	asrs	r2, r1
 80127de:	07d6      	lsls	r6, r2, #31
 80127e0:	d427      	bmi.n	8012832 <__sflush_r+0xb2>
 80127e2:	2200      	movs	r2, #0
 80127e4:	6062      	str	r2, [r4, #4]
 80127e6:	04d9      	lsls	r1, r3, #19
 80127e8:	6922      	ldr	r2, [r4, #16]
 80127ea:	6022      	str	r2, [r4, #0]
 80127ec:	d504      	bpl.n	80127f8 <__sflush_r+0x78>
 80127ee:	1c42      	adds	r2, r0, #1
 80127f0:	d101      	bne.n	80127f6 <__sflush_r+0x76>
 80127f2:	682b      	ldr	r3, [r5, #0]
 80127f4:	b903      	cbnz	r3, 80127f8 <__sflush_r+0x78>
 80127f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80127f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127fa:	602f      	str	r7, [r5, #0]
 80127fc:	b1b9      	cbz	r1, 801282e <__sflush_r+0xae>
 80127fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012802:	4299      	cmp	r1, r3
 8012804:	d002      	beq.n	801280c <__sflush_r+0x8c>
 8012806:	4628      	mov	r0, r5
 8012808:	f000 f9d6 	bl	8012bb8 <_free_r>
 801280c:	2300      	movs	r3, #0
 801280e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012810:	e00d      	b.n	801282e <__sflush_r+0xae>
 8012812:	2301      	movs	r3, #1
 8012814:	4628      	mov	r0, r5
 8012816:	47b0      	blx	r6
 8012818:	4602      	mov	r2, r0
 801281a:	1c50      	adds	r0, r2, #1
 801281c:	d1c9      	bne.n	80127b2 <__sflush_r+0x32>
 801281e:	682b      	ldr	r3, [r5, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d0c6      	beq.n	80127b2 <__sflush_r+0x32>
 8012824:	2b1d      	cmp	r3, #29
 8012826:	d001      	beq.n	801282c <__sflush_r+0xac>
 8012828:	2b16      	cmp	r3, #22
 801282a:	d11e      	bne.n	801286a <__sflush_r+0xea>
 801282c:	602f      	str	r7, [r5, #0]
 801282e:	2000      	movs	r0, #0
 8012830:	e022      	b.n	8012878 <__sflush_r+0xf8>
 8012832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012836:	b21b      	sxth	r3, r3
 8012838:	e01b      	b.n	8012872 <__sflush_r+0xf2>
 801283a:	690f      	ldr	r7, [r1, #16]
 801283c:	2f00      	cmp	r7, #0
 801283e:	d0f6      	beq.n	801282e <__sflush_r+0xae>
 8012840:	0793      	lsls	r3, r2, #30
 8012842:	680e      	ldr	r6, [r1, #0]
 8012844:	bf08      	it	eq
 8012846:	694b      	ldreq	r3, [r1, #20]
 8012848:	600f      	str	r7, [r1, #0]
 801284a:	bf18      	it	ne
 801284c:	2300      	movne	r3, #0
 801284e:	eba6 0807 	sub.w	r8, r6, r7
 8012852:	608b      	str	r3, [r1, #8]
 8012854:	f1b8 0f00 	cmp.w	r8, #0
 8012858:	dde9      	ble.n	801282e <__sflush_r+0xae>
 801285a:	6a21      	ldr	r1, [r4, #32]
 801285c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801285e:	4643      	mov	r3, r8
 8012860:	463a      	mov	r2, r7
 8012862:	4628      	mov	r0, r5
 8012864:	47b0      	blx	r6
 8012866:	2800      	cmp	r0, #0
 8012868:	dc08      	bgt.n	801287c <__sflush_r+0xfc>
 801286a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801286e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012872:	81a3      	strh	r3, [r4, #12]
 8012874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801287c:	4407      	add	r7, r0
 801287e:	eba8 0800 	sub.w	r8, r8, r0
 8012882:	e7e7      	b.n	8012854 <__sflush_r+0xd4>
 8012884:	dfbffffe 	.word	0xdfbffffe

08012888 <_fflush_r>:
 8012888:	b538      	push	{r3, r4, r5, lr}
 801288a:	690b      	ldr	r3, [r1, #16]
 801288c:	4605      	mov	r5, r0
 801288e:	460c      	mov	r4, r1
 8012890:	b913      	cbnz	r3, 8012898 <_fflush_r+0x10>
 8012892:	2500      	movs	r5, #0
 8012894:	4628      	mov	r0, r5
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	b118      	cbz	r0, 80128a2 <_fflush_r+0x1a>
 801289a:	6a03      	ldr	r3, [r0, #32]
 801289c:	b90b      	cbnz	r3, 80128a2 <_fflush_r+0x1a>
 801289e:	f000 f8e3 	bl	8012a68 <__sinit>
 80128a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d0f3      	beq.n	8012892 <_fflush_r+0xa>
 80128aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80128ac:	07d0      	lsls	r0, r2, #31
 80128ae:	d404      	bmi.n	80128ba <_fflush_r+0x32>
 80128b0:	0599      	lsls	r1, r3, #22
 80128b2:	d402      	bmi.n	80128ba <_fflush_r+0x32>
 80128b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128b6:	f000 f96e 	bl	8012b96 <__retarget_lock_acquire_recursive>
 80128ba:	4628      	mov	r0, r5
 80128bc:	4621      	mov	r1, r4
 80128be:	f7ff ff5f 	bl	8012780 <__sflush_r>
 80128c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128c4:	07da      	lsls	r2, r3, #31
 80128c6:	4605      	mov	r5, r0
 80128c8:	d4e4      	bmi.n	8012894 <_fflush_r+0xc>
 80128ca:	89a3      	ldrh	r3, [r4, #12]
 80128cc:	059b      	lsls	r3, r3, #22
 80128ce:	d4e1      	bmi.n	8012894 <_fflush_r+0xc>
 80128d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128d2:	f000 f961 	bl	8012b98 <__retarget_lock_release_recursive>
 80128d6:	e7dd      	b.n	8012894 <_fflush_r+0xc>

080128d8 <fflush>:
 80128d8:	4601      	mov	r1, r0
 80128da:	b920      	cbnz	r0, 80128e6 <fflush+0xe>
 80128dc:	4a04      	ldr	r2, [pc, #16]	@ (80128f0 <fflush+0x18>)
 80128de:	4905      	ldr	r1, [pc, #20]	@ (80128f4 <fflush+0x1c>)
 80128e0:	4805      	ldr	r0, [pc, #20]	@ (80128f8 <fflush+0x20>)
 80128e2:	f000 b907 	b.w	8012af4 <_fwalk_sglue>
 80128e6:	4b05      	ldr	r3, [pc, #20]	@ (80128fc <fflush+0x24>)
 80128e8:	6818      	ldr	r0, [r3, #0]
 80128ea:	f7ff bfcd 	b.w	8012888 <_fflush_r>
 80128ee:	bf00      	nop
 80128f0:	20000080 	.word	0x20000080
 80128f4:	08012889 	.word	0x08012889
 80128f8:	20000090 	.word	0x20000090
 80128fc:	2000008c 	.word	0x2000008c

08012900 <siprintf>:
 8012900:	b40e      	push	{r1, r2, r3}
 8012902:	b500      	push	{lr}
 8012904:	b09c      	sub	sp, #112	@ 0x70
 8012906:	ab1d      	add	r3, sp, #116	@ 0x74
 8012908:	9002      	str	r0, [sp, #8]
 801290a:	9006      	str	r0, [sp, #24]
 801290c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012910:	4809      	ldr	r0, [pc, #36]	@ (8012938 <siprintf+0x38>)
 8012912:	9107      	str	r1, [sp, #28]
 8012914:	9104      	str	r1, [sp, #16]
 8012916:	4909      	ldr	r1, [pc, #36]	@ (801293c <siprintf+0x3c>)
 8012918:	f853 2b04 	ldr.w	r2, [r3], #4
 801291c:	9105      	str	r1, [sp, #20]
 801291e:	6800      	ldr	r0, [r0, #0]
 8012920:	9301      	str	r3, [sp, #4]
 8012922:	a902      	add	r1, sp, #8
 8012924:	f000 f9ee 	bl	8012d04 <_svfiprintf_r>
 8012928:	9b02      	ldr	r3, [sp, #8]
 801292a:	2200      	movs	r2, #0
 801292c:	701a      	strb	r2, [r3, #0]
 801292e:	b01c      	add	sp, #112	@ 0x70
 8012930:	f85d eb04 	ldr.w	lr, [sp], #4
 8012934:	b003      	add	sp, #12
 8012936:	4770      	bx	lr
 8012938:	2000008c 	.word	0x2000008c
 801293c:	ffff0208 	.word	0xffff0208

08012940 <realloc>:
 8012940:	4b02      	ldr	r3, [pc, #8]	@ (801294c <realloc+0xc>)
 8012942:	460a      	mov	r2, r1
 8012944:	4601      	mov	r1, r0
 8012946:	6818      	ldr	r0, [r3, #0]
 8012948:	f000 b8a6 	b.w	8012a98 <_realloc_r>
 801294c:	2000008c 	.word	0x2000008c

08012950 <std>:
 8012950:	2300      	movs	r3, #0
 8012952:	b510      	push	{r4, lr}
 8012954:	4604      	mov	r4, r0
 8012956:	e9c0 3300 	strd	r3, r3, [r0]
 801295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801295e:	6083      	str	r3, [r0, #8]
 8012960:	8181      	strh	r1, [r0, #12]
 8012962:	6643      	str	r3, [r0, #100]	@ 0x64
 8012964:	81c2      	strh	r2, [r0, #14]
 8012966:	6183      	str	r3, [r0, #24]
 8012968:	4619      	mov	r1, r3
 801296a:	2208      	movs	r2, #8
 801296c:	305c      	adds	r0, #92	@ 0x5c
 801296e:	f000 f8df 	bl	8012b30 <memset>
 8012972:	4b0d      	ldr	r3, [pc, #52]	@ (80129a8 <std+0x58>)
 8012974:	6263      	str	r3, [r4, #36]	@ 0x24
 8012976:	4b0d      	ldr	r3, [pc, #52]	@ (80129ac <std+0x5c>)
 8012978:	62a3      	str	r3, [r4, #40]	@ 0x28
 801297a:	4b0d      	ldr	r3, [pc, #52]	@ (80129b0 <std+0x60>)
 801297c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801297e:	4b0d      	ldr	r3, [pc, #52]	@ (80129b4 <std+0x64>)
 8012980:	6323      	str	r3, [r4, #48]	@ 0x30
 8012982:	4b0d      	ldr	r3, [pc, #52]	@ (80129b8 <std+0x68>)
 8012984:	6224      	str	r4, [r4, #32]
 8012986:	429c      	cmp	r4, r3
 8012988:	d006      	beq.n	8012998 <std+0x48>
 801298a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801298e:	4294      	cmp	r4, r2
 8012990:	d002      	beq.n	8012998 <std+0x48>
 8012992:	33d0      	adds	r3, #208	@ 0xd0
 8012994:	429c      	cmp	r4, r3
 8012996:	d105      	bne.n	80129a4 <std+0x54>
 8012998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129a0:	f000 b8f8 	b.w	8012b94 <__retarget_lock_init_recursive>
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	bf00      	nop
 80129a8:	08013385 	.word	0x08013385
 80129ac:	080133a7 	.word	0x080133a7
 80129b0:	080133df 	.word	0x080133df
 80129b4:	08013403 	.word	0x08013403
 80129b8:	200083e4 	.word	0x200083e4

080129bc <stdio_exit_handler>:
 80129bc:	4a02      	ldr	r2, [pc, #8]	@ (80129c8 <stdio_exit_handler+0xc>)
 80129be:	4903      	ldr	r1, [pc, #12]	@ (80129cc <stdio_exit_handler+0x10>)
 80129c0:	4803      	ldr	r0, [pc, #12]	@ (80129d0 <stdio_exit_handler+0x14>)
 80129c2:	f000 b897 	b.w	8012af4 <_fwalk_sglue>
 80129c6:	bf00      	nop
 80129c8:	20000080 	.word	0x20000080
 80129cc:	08012889 	.word	0x08012889
 80129d0:	20000090 	.word	0x20000090

080129d4 <cleanup_stdio>:
 80129d4:	6841      	ldr	r1, [r0, #4]
 80129d6:	4b0c      	ldr	r3, [pc, #48]	@ (8012a08 <cleanup_stdio+0x34>)
 80129d8:	4299      	cmp	r1, r3
 80129da:	b510      	push	{r4, lr}
 80129dc:	4604      	mov	r4, r0
 80129de:	d001      	beq.n	80129e4 <cleanup_stdio+0x10>
 80129e0:	f7ff ff52 	bl	8012888 <_fflush_r>
 80129e4:	68a1      	ldr	r1, [r4, #8]
 80129e6:	4b09      	ldr	r3, [pc, #36]	@ (8012a0c <cleanup_stdio+0x38>)
 80129e8:	4299      	cmp	r1, r3
 80129ea:	d002      	beq.n	80129f2 <cleanup_stdio+0x1e>
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7ff ff4b 	bl	8012888 <_fflush_r>
 80129f2:	68e1      	ldr	r1, [r4, #12]
 80129f4:	4b06      	ldr	r3, [pc, #24]	@ (8012a10 <cleanup_stdio+0x3c>)
 80129f6:	4299      	cmp	r1, r3
 80129f8:	d004      	beq.n	8012a04 <cleanup_stdio+0x30>
 80129fa:	4620      	mov	r0, r4
 80129fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a00:	f7ff bf42 	b.w	8012888 <_fflush_r>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	bf00      	nop
 8012a08:	200083e4 	.word	0x200083e4
 8012a0c:	2000844c 	.word	0x2000844c
 8012a10:	200084b4 	.word	0x200084b4

08012a14 <global_stdio_init.part.0>:
 8012a14:	b510      	push	{r4, lr}
 8012a16:	4b0b      	ldr	r3, [pc, #44]	@ (8012a44 <global_stdio_init.part.0+0x30>)
 8012a18:	4c0b      	ldr	r4, [pc, #44]	@ (8012a48 <global_stdio_init.part.0+0x34>)
 8012a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8012a4c <global_stdio_init.part.0+0x38>)
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	4620      	mov	r0, r4
 8012a20:	2200      	movs	r2, #0
 8012a22:	2104      	movs	r1, #4
 8012a24:	f7ff ff94 	bl	8012950 <std>
 8012a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	2109      	movs	r1, #9
 8012a30:	f7ff ff8e 	bl	8012950 <std>
 8012a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012a38:	2202      	movs	r2, #2
 8012a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a3e:	2112      	movs	r1, #18
 8012a40:	f7ff bf86 	b.w	8012950 <std>
 8012a44:	2000851c 	.word	0x2000851c
 8012a48:	200083e4 	.word	0x200083e4
 8012a4c:	080129bd 	.word	0x080129bd

08012a50 <__sfp_lock_acquire>:
 8012a50:	4801      	ldr	r0, [pc, #4]	@ (8012a58 <__sfp_lock_acquire+0x8>)
 8012a52:	f000 b8a0 	b.w	8012b96 <__retarget_lock_acquire_recursive>
 8012a56:	bf00      	nop
 8012a58:	20008521 	.word	0x20008521

08012a5c <__sfp_lock_release>:
 8012a5c:	4801      	ldr	r0, [pc, #4]	@ (8012a64 <__sfp_lock_release+0x8>)
 8012a5e:	f000 b89b 	b.w	8012b98 <__retarget_lock_release_recursive>
 8012a62:	bf00      	nop
 8012a64:	20008521 	.word	0x20008521

08012a68 <__sinit>:
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	f7ff fff0 	bl	8012a50 <__sfp_lock_acquire>
 8012a70:	6a23      	ldr	r3, [r4, #32]
 8012a72:	b11b      	cbz	r3, 8012a7c <__sinit+0x14>
 8012a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a78:	f7ff bff0 	b.w	8012a5c <__sfp_lock_release>
 8012a7c:	4b04      	ldr	r3, [pc, #16]	@ (8012a90 <__sinit+0x28>)
 8012a7e:	6223      	str	r3, [r4, #32]
 8012a80:	4b04      	ldr	r3, [pc, #16]	@ (8012a94 <__sinit+0x2c>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1f5      	bne.n	8012a74 <__sinit+0xc>
 8012a88:	f7ff ffc4 	bl	8012a14 <global_stdio_init.part.0>
 8012a8c:	e7f2      	b.n	8012a74 <__sinit+0xc>
 8012a8e:	bf00      	nop
 8012a90:	080129d5 	.word	0x080129d5
 8012a94:	2000851c 	.word	0x2000851c

08012a98 <_realloc_r>:
 8012a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	4680      	mov	r8, r0
 8012a9e:	4615      	mov	r5, r2
 8012aa0:	460c      	mov	r4, r1
 8012aa2:	b921      	cbnz	r1, 8012aae <_realloc_r+0x16>
 8012aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	f000 ba49 	b.w	8012f40 <_malloc_r>
 8012aae:	b92a      	cbnz	r2, 8012abc <_realloc_r+0x24>
 8012ab0:	f000 f882 	bl	8012bb8 <_free_r>
 8012ab4:	2400      	movs	r4, #0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012abc:	f000 fc5a 	bl	8013374 <_malloc_usable_size_r>
 8012ac0:	4285      	cmp	r5, r0
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	d802      	bhi.n	8012acc <_realloc_r+0x34>
 8012ac6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012aca:	d8f4      	bhi.n	8012ab6 <_realloc_r+0x1e>
 8012acc:	4629      	mov	r1, r5
 8012ace:	4640      	mov	r0, r8
 8012ad0:	f000 fa36 	bl	8012f40 <_malloc_r>
 8012ad4:	4607      	mov	r7, r0
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d0ec      	beq.n	8012ab4 <_realloc_r+0x1c>
 8012ada:	42b5      	cmp	r5, r6
 8012adc:	462a      	mov	r2, r5
 8012ade:	4621      	mov	r1, r4
 8012ae0:	bf28      	it	cs
 8012ae2:	4632      	movcs	r2, r6
 8012ae4:	f000 f859 	bl	8012b9a <memcpy>
 8012ae8:	4621      	mov	r1, r4
 8012aea:	4640      	mov	r0, r8
 8012aec:	f000 f864 	bl	8012bb8 <_free_r>
 8012af0:	463c      	mov	r4, r7
 8012af2:	e7e0      	b.n	8012ab6 <_realloc_r+0x1e>

08012af4 <_fwalk_sglue>:
 8012af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012af8:	4607      	mov	r7, r0
 8012afa:	4688      	mov	r8, r1
 8012afc:	4614      	mov	r4, r2
 8012afe:	2600      	movs	r6, #0
 8012b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b04:	f1b9 0901 	subs.w	r9, r9, #1
 8012b08:	d505      	bpl.n	8012b16 <_fwalk_sglue+0x22>
 8012b0a:	6824      	ldr	r4, [r4, #0]
 8012b0c:	2c00      	cmp	r4, #0
 8012b0e:	d1f7      	bne.n	8012b00 <_fwalk_sglue+0xc>
 8012b10:	4630      	mov	r0, r6
 8012b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b16:	89ab      	ldrh	r3, [r5, #12]
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d907      	bls.n	8012b2c <_fwalk_sglue+0x38>
 8012b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b20:	3301      	adds	r3, #1
 8012b22:	d003      	beq.n	8012b2c <_fwalk_sglue+0x38>
 8012b24:	4629      	mov	r1, r5
 8012b26:	4638      	mov	r0, r7
 8012b28:	47c0      	blx	r8
 8012b2a:	4306      	orrs	r6, r0
 8012b2c:	3568      	adds	r5, #104	@ 0x68
 8012b2e:	e7e9      	b.n	8012b04 <_fwalk_sglue+0x10>

08012b30 <memset>:
 8012b30:	4402      	add	r2, r0
 8012b32:	4603      	mov	r3, r0
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d100      	bne.n	8012b3a <memset+0xa>
 8012b38:	4770      	bx	lr
 8012b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8012b3e:	e7f9      	b.n	8012b34 <memset+0x4>

08012b40 <__errno>:
 8012b40:	4b01      	ldr	r3, [pc, #4]	@ (8012b48 <__errno+0x8>)
 8012b42:	6818      	ldr	r0, [r3, #0]
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	2000008c 	.word	0x2000008c

08012b4c <__libc_init_array>:
 8012b4c:	b570      	push	{r4, r5, r6, lr}
 8012b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8012b84 <__libc_init_array+0x38>)
 8012b50:	4c0d      	ldr	r4, [pc, #52]	@ (8012b88 <__libc_init_array+0x3c>)
 8012b52:	1b64      	subs	r4, r4, r5
 8012b54:	10a4      	asrs	r4, r4, #2
 8012b56:	2600      	movs	r6, #0
 8012b58:	42a6      	cmp	r6, r4
 8012b5a:	d109      	bne.n	8012b70 <__libc_init_array+0x24>
 8012b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8012b8c <__libc_init_array+0x40>)
 8012b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8012b90 <__libc_init_array+0x44>)
 8012b60:	f000 fcc4 	bl	80134ec <_init>
 8012b64:	1b64      	subs	r4, r4, r5
 8012b66:	10a4      	asrs	r4, r4, #2
 8012b68:	2600      	movs	r6, #0
 8012b6a:	42a6      	cmp	r6, r4
 8012b6c:	d105      	bne.n	8012b7a <__libc_init_array+0x2e>
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b74:	4798      	blx	r3
 8012b76:	3601      	adds	r6, #1
 8012b78:	e7ee      	b.n	8012b58 <__libc_init_array+0xc>
 8012b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b7e:	4798      	blx	r3
 8012b80:	3601      	adds	r6, #1
 8012b82:	e7f2      	b.n	8012b6a <__libc_init_array+0x1e>
 8012b84:	08015c84 	.word	0x08015c84
 8012b88:	08015c84 	.word	0x08015c84
 8012b8c:	08015c84 	.word	0x08015c84
 8012b90:	08015c8c 	.word	0x08015c8c

08012b94 <__retarget_lock_init_recursive>:
 8012b94:	4770      	bx	lr

08012b96 <__retarget_lock_acquire_recursive>:
 8012b96:	4770      	bx	lr

08012b98 <__retarget_lock_release_recursive>:
 8012b98:	4770      	bx	lr

08012b9a <memcpy>:
 8012b9a:	440a      	add	r2, r1
 8012b9c:	4291      	cmp	r1, r2
 8012b9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012ba2:	d100      	bne.n	8012ba6 <memcpy+0xc>
 8012ba4:	4770      	bx	lr
 8012ba6:	b510      	push	{r4, lr}
 8012ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bb0:	4291      	cmp	r1, r2
 8012bb2:	d1f9      	bne.n	8012ba8 <memcpy+0xe>
 8012bb4:	bd10      	pop	{r4, pc}
	...

08012bb8 <_free_r>:
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	4605      	mov	r5, r0
 8012bbc:	2900      	cmp	r1, #0
 8012bbe:	d041      	beq.n	8012c44 <_free_r+0x8c>
 8012bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bc4:	1f0c      	subs	r4, r1, #4
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	bfb8      	it	lt
 8012bca:	18e4      	addlt	r4, r4, r3
 8012bcc:	f000 fbc6 	bl	801335c <__malloc_lock>
 8012bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8012c48 <_free_r+0x90>)
 8012bd2:	6813      	ldr	r3, [r2, #0]
 8012bd4:	b933      	cbnz	r3, 8012be4 <_free_r+0x2c>
 8012bd6:	6063      	str	r3, [r4, #4]
 8012bd8:	6014      	str	r4, [r2, #0]
 8012bda:	4628      	mov	r0, r5
 8012bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be0:	f000 bbc2 	b.w	8013368 <__malloc_unlock>
 8012be4:	42a3      	cmp	r3, r4
 8012be6:	d908      	bls.n	8012bfa <_free_r+0x42>
 8012be8:	6820      	ldr	r0, [r4, #0]
 8012bea:	1821      	adds	r1, r4, r0
 8012bec:	428b      	cmp	r3, r1
 8012bee:	bf01      	itttt	eq
 8012bf0:	6819      	ldreq	r1, [r3, #0]
 8012bf2:	685b      	ldreq	r3, [r3, #4]
 8012bf4:	1809      	addeq	r1, r1, r0
 8012bf6:	6021      	streq	r1, [r4, #0]
 8012bf8:	e7ed      	b.n	8012bd6 <_free_r+0x1e>
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	b10b      	cbz	r3, 8012c04 <_free_r+0x4c>
 8012c00:	42a3      	cmp	r3, r4
 8012c02:	d9fa      	bls.n	8012bfa <_free_r+0x42>
 8012c04:	6811      	ldr	r1, [r2, #0]
 8012c06:	1850      	adds	r0, r2, r1
 8012c08:	42a0      	cmp	r0, r4
 8012c0a:	d10b      	bne.n	8012c24 <_free_r+0x6c>
 8012c0c:	6820      	ldr	r0, [r4, #0]
 8012c0e:	4401      	add	r1, r0
 8012c10:	1850      	adds	r0, r2, r1
 8012c12:	4283      	cmp	r3, r0
 8012c14:	6011      	str	r1, [r2, #0]
 8012c16:	d1e0      	bne.n	8012bda <_free_r+0x22>
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	6053      	str	r3, [r2, #4]
 8012c1e:	4408      	add	r0, r1
 8012c20:	6010      	str	r0, [r2, #0]
 8012c22:	e7da      	b.n	8012bda <_free_r+0x22>
 8012c24:	d902      	bls.n	8012c2c <_free_r+0x74>
 8012c26:	230c      	movs	r3, #12
 8012c28:	602b      	str	r3, [r5, #0]
 8012c2a:	e7d6      	b.n	8012bda <_free_r+0x22>
 8012c2c:	6820      	ldr	r0, [r4, #0]
 8012c2e:	1821      	adds	r1, r4, r0
 8012c30:	428b      	cmp	r3, r1
 8012c32:	bf04      	itt	eq
 8012c34:	6819      	ldreq	r1, [r3, #0]
 8012c36:	685b      	ldreq	r3, [r3, #4]
 8012c38:	6063      	str	r3, [r4, #4]
 8012c3a:	bf04      	itt	eq
 8012c3c:	1809      	addeq	r1, r1, r0
 8012c3e:	6021      	streq	r1, [r4, #0]
 8012c40:	6054      	str	r4, [r2, #4]
 8012c42:	e7ca      	b.n	8012bda <_free_r+0x22>
 8012c44:	bd38      	pop	{r3, r4, r5, pc}
 8012c46:	bf00      	nop
 8012c48:	20008528 	.word	0x20008528

08012c4c <__ssputs_r>:
 8012c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c50:	688e      	ldr	r6, [r1, #8]
 8012c52:	461f      	mov	r7, r3
 8012c54:	42be      	cmp	r6, r7
 8012c56:	680b      	ldr	r3, [r1, #0]
 8012c58:	4682      	mov	sl, r0
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	4690      	mov	r8, r2
 8012c5e:	d82d      	bhi.n	8012cbc <__ssputs_r+0x70>
 8012c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012c68:	d026      	beq.n	8012cb8 <__ssputs_r+0x6c>
 8012c6a:	6965      	ldr	r5, [r4, #20]
 8012c6c:	6909      	ldr	r1, [r1, #16]
 8012c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c72:	eba3 0901 	sub.w	r9, r3, r1
 8012c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c7a:	1c7b      	adds	r3, r7, #1
 8012c7c:	444b      	add	r3, r9
 8012c7e:	106d      	asrs	r5, r5, #1
 8012c80:	429d      	cmp	r5, r3
 8012c82:	bf38      	it	cc
 8012c84:	461d      	movcc	r5, r3
 8012c86:	0553      	lsls	r3, r2, #21
 8012c88:	d527      	bpl.n	8012cda <__ssputs_r+0x8e>
 8012c8a:	4629      	mov	r1, r5
 8012c8c:	f000 f958 	bl	8012f40 <_malloc_r>
 8012c90:	4606      	mov	r6, r0
 8012c92:	b360      	cbz	r0, 8012cee <__ssputs_r+0xa2>
 8012c94:	6921      	ldr	r1, [r4, #16]
 8012c96:	464a      	mov	r2, r9
 8012c98:	f7ff ff7f 	bl	8012b9a <memcpy>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	6126      	str	r6, [r4, #16]
 8012caa:	6165      	str	r5, [r4, #20]
 8012cac:	444e      	add	r6, r9
 8012cae:	eba5 0509 	sub.w	r5, r5, r9
 8012cb2:	6026      	str	r6, [r4, #0]
 8012cb4:	60a5      	str	r5, [r4, #8]
 8012cb6:	463e      	mov	r6, r7
 8012cb8:	42be      	cmp	r6, r7
 8012cba:	d900      	bls.n	8012cbe <__ssputs_r+0x72>
 8012cbc:	463e      	mov	r6, r7
 8012cbe:	6820      	ldr	r0, [r4, #0]
 8012cc0:	4632      	mov	r2, r6
 8012cc2:	4641      	mov	r1, r8
 8012cc4:	f000 fba1 	bl	801340a <memmove>
 8012cc8:	68a3      	ldr	r3, [r4, #8]
 8012cca:	1b9b      	subs	r3, r3, r6
 8012ccc:	60a3      	str	r3, [r4, #8]
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	4433      	add	r3, r6
 8012cd2:	6023      	str	r3, [r4, #0]
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cda:	462a      	mov	r2, r5
 8012cdc:	f7ff fedc 	bl	8012a98 <_realloc_r>
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d1e0      	bne.n	8012ca8 <__ssputs_r+0x5c>
 8012ce6:	6921      	ldr	r1, [r4, #16]
 8012ce8:	4650      	mov	r0, sl
 8012cea:	f7ff ff65 	bl	8012bb8 <_free_r>
 8012cee:	230c      	movs	r3, #12
 8012cf0:	f8ca 3000 	str.w	r3, [sl]
 8012cf4:	89a3      	ldrh	r3, [r4, #12]
 8012cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cfa:	81a3      	strh	r3, [r4, #12]
 8012cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d00:	e7e9      	b.n	8012cd6 <__ssputs_r+0x8a>
	...

08012d04 <_svfiprintf_r>:
 8012d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d08:	4698      	mov	r8, r3
 8012d0a:	898b      	ldrh	r3, [r1, #12]
 8012d0c:	061b      	lsls	r3, r3, #24
 8012d0e:	b09d      	sub	sp, #116	@ 0x74
 8012d10:	4607      	mov	r7, r0
 8012d12:	460d      	mov	r5, r1
 8012d14:	4614      	mov	r4, r2
 8012d16:	d510      	bpl.n	8012d3a <_svfiprintf_r+0x36>
 8012d18:	690b      	ldr	r3, [r1, #16]
 8012d1a:	b973      	cbnz	r3, 8012d3a <_svfiprintf_r+0x36>
 8012d1c:	2140      	movs	r1, #64	@ 0x40
 8012d1e:	f000 f90f 	bl	8012f40 <_malloc_r>
 8012d22:	6028      	str	r0, [r5, #0]
 8012d24:	6128      	str	r0, [r5, #16]
 8012d26:	b930      	cbnz	r0, 8012d36 <_svfiprintf_r+0x32>
 8012d28:	230c      	movs	r3, #12
 8012d2a:	603b      	str	r3, [r7, #0]
 8012d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d30:	b01d      	add	sp, #116	@ 0x74
 8012d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d36:	2340      	movs	r3, #64	@ 0x40
 8012d38:	616b      	str	r3, [r5, #20]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d3e:	2320      	movs	r3, #32
 8012d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d48:	2330      	movs	r3, #48	@ 0x30
 8012d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012ee8 <_svfiprintf_r+0x1e4>
 8012d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d52:	f04f 0901 	mov.w	r9, #1
 8012d56:	4623      	mov	r3, r4
 8012d58:	469a      	mov	sl, r3
 8012d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d5e:	b10a      	cbz	r2, 8012d64 <_svfiprintf_r+0x60>
 8012d60:	2a25      	cmp	r2, #37	@ 0x25
 8012d62:	d1f9      	bne.n	8012d58 <_svfiprintf_r+0x54>
 8012d64:	ebba 0b04 	subs.w	fp, sl, r4
 8012d68:	d00b      	beq.n	8012d82 <_svfiprintf_r+0x7e>
 8012d6a:	465b      	mov	r3, fp
 8012d6c:	4622      	mov	r2, r4
 8012d6e:	4629      	mov	r1, r5
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff ff6b 	bl	8012c4c <__ssputs_r>
 8012d76:	3001      	adds	r0, #1
 8012d78:	f000 80a7 	beq.w	8012eca <_svfiprintf_r+0x1c6>
 8012d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d7e:	445a      	add	r2, fp
 8012d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d82:	f89a 3000 	ldrb.w	r3, [sl]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	f000 809f 	beq.w	8012eca <_svfiprintf_r+0x1c6>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d96:	f10a 0a01 	add.w	sl, sl, #1
 8012d9a:	9304      	str	r3, [sp, #16]
 8012d9c:	9307      	str	r3, [sp, #28]
 8012d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012da4:	4654      	mov	r4, sl
 8012da6:	2205      	movs	r2, #5
 8012da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dac:	484e      	ldr	r0, [pc, #312]	@ (8012ee8 <_svfiprintf_r+0x1e4>)
 8012dae:	f7ed fa37 	bl	8000220 <memchr>
 8012db2:	9a04      	ldr	r2, [sp, #16]
 8012db4:	b9d8      	cbnz	r0, 8012dee <_svfiprintf_r+0xea>
 8012db6:	06d0      	lsls	r0, r2, #27
 8012db8:	bf44      	itt	mi
 8012dba:	2320      	movmi	r3, #32
 8012dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dc0:	0711      	lsls	r1, r2, #28
 8012dc2:	bf44      	itt	mi
 8012dc4:	232b      	movmi	r3, #43	@ 0x2b
 8012dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dca:	f89a 3000 	ldrb.w	r3, [sl]
 8012dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dd0:	d015      	beq.n	8012dfe <_svfiprintf_r+0xfa>
 8012dd2:	9a07      	ldr	r2, [sp, #28]
 8012dd4:	4654      	mov	r4, sl
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	f04f 0c0a 	mov.w	ip, #10
 8012ddc:	4621      	mov	r1, r4
 8012dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012de2:	3b30      	subs	r3, #48	@ 0x30
 8012de4:	2b09      	cmp	r3, #9
 8012de6:	d94b      	bls.n	8012e80 <_svfiprintf_r+0x17c>
 8012de8:	b1b0      	cbz	r0, 8012e18 <_svfiprintf_r+0x114>
 8012dea:	9207      	str	r2, [sp, #28]
 8012dec:	e014      	b.n	8012e18 <_svfiprintf_r+0x114>
 8012dee:	eba0 0308 	sub.w	r3, r0, r8
 8012df2:	fa09 f303 	lsl.w	r3, r9, r3
 8012df6:	4313      	orrs	r3, r2
 8012df8:	9304      	str	r3, [sp, #16]
 8012dfa:	46a2      	mov	sl, r4
 8012dfc:	e7d2      	b.n	8012da4 <_svfiprintf_r+0xa0>
 8012dfe:	9b03      	ldr	r3, [sp, #12]
 8012e00:	1d19      	adds	r1, r3, #4
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	9103      	str	r1, [sp, #12]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	bfbb      	ittet	lt
 8012e0a:	425b      	neglt	r3, r3
 8012e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e10:	9307      	strge	r3, [sp, #28]
 8012e12:	9307      	strlt	r3, [sp, #28]
 8012e14:	bfb8      	it	lt
 8012e16:	9204      	strlt	r2, [sp, #16]
 8012e18:	7823      	ldrb	r3, [r4, #0]
 8012e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e1c:	d10a      	bne.n	8012e34 <_svfiprintf_r+0x130>
 8012e1e:	7863      	ldrb	r3, [r4, #1]
 8012e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e22:	d132      	bne.n	8012e8a <_svfiprintf_r+0x186>
 8012e24:	9b03      	ldr	r3, [sp, #12]
 8012e26:	1d1a      	adds	r2, r3, #4
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	9203      	str	r2, [sp, #12]
 8012e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e30:	3402      	adds	r4, #2
 8012e32:	9305      	str	r3, [sp, #20]
 8012e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ef8 <_svfiprintf_r+0x1f4>
 8012e38:	7821      	ldrb	r1, [r4, #0]
 8012e3a:	2203      	movs	r2, #3
 8012e3c:	4650      	mov	r0, sl
 8012e3e:	f7ed f9ef 	bl	8000220 <memchr>
 8012e42:	b138      	cbz	r0, 8012e54 <_svfiprintf_r+0x150>
 8012e44:	9b04      	ldr	r3, [sp, #16]
 8012e46:	eba0 000a 	sub.w	r0, r0, sl
 8012e4a:	2240      	movs	r2, #64	@ 0x40
 8012e4c:	4082      	lsls	r2, r0
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	3401      	adds	r4, #1
 8012e52:	9304      	str	r3, [sp, #16]
 8012e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e58:	4824      	ldr	r0, [pc, #144]	@ (8012eec <_svfiprintf_r+0x1e8>)
 8012e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e5e:	2206      	movs	r2, #6
 8012e60:	f7ed f9de 	bl	8000220 <memchr>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d036      	beq.n	8012ed6 <_svfiprintf_r+0x1d2>
 8012e68:	4b21      	ldr	r3, [pc, #132]	@ (8012ef0 <_svfiprintf_r+0x1ec>)
 8012e6a:	bb1b      	cbnz	r3, 8012eb4 <_svfiprintf_r+0x1b0>
 8012e6c:	9b03      	ldr	r3, [sp, #12]
 8012e6e:	3307      	adds	r3, #7
 8012e70:	f023 0307 	bic.w	r3, r3, #7
 8012e74:	3308      	adds	r3, #8
 8012e76:	9303      	str	r3, [sp, #12]
 8012e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e7a:	4433      	add	r3, r6
 8012e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e7e:	e76a      	b.n	8012d56 <_svfiprintf_r+0x52>
 8012e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e84:	460c      	mov	r4, r1
 8012e86:	2001      	movs	r0, #1
 8012e88:	e7a8      	b.n	8012ddc <_svfiprintf_r+0xd8>
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	3401      	adds	r4, #1
 8012e8e:	9305      	str	r3, [sp, #20]
 8012e90:	4619      	mov	r1, r3
 8012e92:	f04f 0c0a 	mov.w	ip, #10
 8012e96:	4620      	mov	r0, r4
 8012e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e9c:	3a30      	subs	r2, #48	@ 0x30
 8012e9e:	2a09      	cmp	r2, #9
 8012ea0:	d903      	bls.n	8012eaa <_svfiprintf_r+0x1a6>
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d0c6      	beq.n	8012e34 <_svfiprintf_r+0x130>
 8012ea6:	9105      	str	r1, [sp, #20]
 8012ea8:	e7c4      	b.n	8012e34 <_svfiprintf_r+0x130>
 8012eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eae:	4604      	mov	r4, r0
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e7f0      	b.n	8012e96 <_svfiprintf_r+0x192>
 8012eb4:	ab03      	add	r3, sp, #12
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	462a      	mov	r2, r5
 8012eba:	4b0e      	ldr	r3, [pc, #56]	@ (8012ef4 <_svfiprintf_r+0x1f0>)
 8012ebc:	a904      	add	r1, sp, #16
 8012ebe:	4638      	mov	r0, r7
 8012ec0:	f3af 8000 	nop.w
 8012ec4:	1c42      	adds	r2, r0, #1
 8012ec6:	4606      	mov	r6, r0
 8012ec8:	d1d6      	bne.n	8012e78 <_svfiprintf_r+0x174>
 8012eca:	89ab      	ldrh	r3, [r5, #12]
 8012ecc:	065b      	lsls	r3, r3, #25
 8012ece:	f53f af2d 	bmi.w	8012d2c <_svfiprintf_r+0x28>
 8012ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ed4:	e72c      	b.n	8012d30 <_svfiprintf_r+0x2c>
 8012ed6:	ab03      	add	r3, sp, #12
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	462a      	mov	r2, r5
 8012edc:	4b05      	ldr	r3, [pc, #20]	@ (8012ef4 <_svfiprintf_r+0x1f0>)
 8012ede:	a904      	add	r1, sp, #16
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	f000 f91b 	bl	801311c <_printf_i>
 8012ee6:	e7ed      	b.n	8012ec4 <_svfiprintf_r+0x1c0>
 8012ee8:	08015c48 	.word	0x08015c48
 8012eec:	08015c52 	.word	0x08015c52
 8012ef0:	00000000 	.word	0x00000000
 8012ef4:	08012c4d 	.word	0x08012c4d
 8012ef8:	08015c4e 	.word	0x08015c4e

08012efc <sbrk_aligned>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	4e0f      	ldr	r6, [pc, #60]	@ (8012f3c <sbrk_aligned+0x40>)
 8012f00:	460c      	mov	r4, r1
 8012f02:	6831      	ldr	r1, [r6, #0]
 8012f04:	4605      	mov	r5, r0
 8012f06:	b911      	cbnz	r1, 8012f0e <sbrk_aligned+0x12>
 8012f08:	f000 face 	bl	80134a8 <_sbrk_r>
 8012f0c:	6030      	str	r0, [r6, #0]
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	f000 fac9 	bl	80134a8 <_sbrk_r>
 8012f16:	1c43      	adds	r3, r0, #1
 8012f18:	d103      	bne.n	8012f22 <sbrk_aligned+0x26>
 8012f1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012f1e:	4620      	mov	r0, r4
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	1cc4      	adds	r4, r0, #3
 8012f24:	f024 0403 	bic.w	r4, r4, #3
 8012f28:	42a0      	cmp	r0, r4
 8012f2a:	d0f8      	beq.n	8012f1e <sbrk_aligned+0x22>
 8012f2c:	1a21      	subs	r1, r4, r0
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f000 faba 	bl	80134a8 <_sbrk_r>
 8012f34:	3001      	adds	r0, #1
 8012f36:	d1f2      	bne.n	8012f1e <sbrk_aligned+0x22>
 8012f38:	e7ef      	b.n	8012f1a <sbrk_aligned+0x1e>
 8012f3a:	bf00      	nop
 8012f3c:	20008524 	.word	0x20008524

08012f40 <_malloc_r>:
 8012f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f44:	1ccd      	adds	r5, r1, #3
 8012f46:	f025 0503 	bic.w	r5, r5, #3
 8012f4a:	3508      	adds	r5, #8
 8012f4c:	2d0c      	cmp	r5, #12
 8012f4e:	bf38      	it	cc
 8012f50:	250c      	movcc	r5, #12
 8012f52:	2d00      	cmp	r5, #0
 8012f54:	4606      	mov	r6, r0
 8012f56:	db01      	blt.n	8012f5c <_malloc_r+0x1c>
 8012f58:	42a9      	cmp	r1, r5
 8012f5a:	d904      	bls.n	8012f66 <_malloc_r+0x26>
 8012f5c:	230c      	movs	r3, #12
 8012f5e:	6033      	str	r3, [r6, #0]
 8012f60:	2000      	movs	r0, #0
 8012f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801303c <_malloc_r+0xfc>
 8012f6a:	f000 f9f7 	bl	801335c <__malloc_lock>
 8012f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8012f72:	461c      	mov	r4, r3
 8012f74:	bb44      	cbnz	r4, 8012fc8 <_malloc_r+0x88>
 8012f76:	4629      	mov	r1, r5
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7ff ffbf 	bl	8012efc <sbrk_aligned>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	4604      	mov	r4, r0
 8012f82:	d158      	bne.n	8013036 <_malloc_r+0xf6>
 8012f84:	f8d8 4000 	ldr.w	r4, [r8]
 8012f88:	4627      	mov	r7, r4
 8012f8a:	2f00      	cmp	r7, #0
 8012f8c:	d143      	bne.n	8013016 <_malloc_r+0xd6>
 8012f8e:	2c00      	cmp	r4, #0
 8012f90:	d04b      	beq.n	801302a <_malloc_r+0xea>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	4639      	mov	r1, r7
 8012f96:	4630      	mov	r0, r6
 8012f98:	eb04 0903 	add.w	r9, r4, r3
 8012f9c:	f000 fa84 	bl	80134a8 <_sbrk_r>
 8012fa0:	4581      	cmp	r9, r0
 8012fa2:	d142      	bne.n	801302a <_malloc_r+0xea>
 8012fa4:	6821      	ldr	r1, [r4, #0]
 8012fa6:	1a6d      	subs	r5, r5, r1
 8012fa8:	4629      	mov	r1, r5
 8012faa:	4630      	mov	r0, r6
 8012fac:	f7ff ffa6 	bl	8012efc <sbrk_aligned>
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	d03a      	beq.n	801302a <_malloc_r+0xea>
 8012fb4:	6823      	ldr	r3, [r4, #0]
 8012fb6:	442b      	add	r3, r5
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	f8d8 3000 	ldr.w	r3, [r8]
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	bb62      	cbnz	r2, 801301c <_malloc_r+0xdc>
 8012fc2:	f8c8 7000 	str.w	r7, [r8]
 8012fc6:	e00f      	b.n	8012fe8 <_malloc_r+0xa8>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	1b52      	subs	r2, r2, r5
 8012fcc:	d420      	bmi.n	8013010 <_malloc_r+0xd0>
 8012fce:	2a0b      	cmp	r2, #11
 8012fd0:	d917      	bls.n	8013002 <_malloc_r+0xc2>
 8012fd2:	1961      	adds	r1, r4, r5
 8012fd4:	42a3      	cmp	r3, r4
 8012fd6:	6025      	str	r5, [r4, #0]
 8012fd8:	bf18      	it	ne
 8012fda:	6059      	strne	r1, [r3, #4]
 8012fdc:	6863      	ldr	r3, [r4, #4]
 8012fde:	bf08      	it	eq
 8012fe0:	f8c8 1000 	streq.w	r1, [r8]
 8012fe4:	5162      	str	r2, [r4, r5]
 8012fe6:	604b      	str	r3, [r1, #4]
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f000 f9bd 	bl	8013368 <__malloc_unlock>
 8012fee:	f104 000b 	add.w	r0, r4, #11
 8012ff2:	1d23      	adds	r3, r4, #4
 8012ff4:	f020 0007 	bic.w	r0, r0, #7
 8012ff8:	1ac2      	subs	r2, r0, r3
 8012ffa:	bf1c      	itt	ne
 8012ffc:	1a1b      	subne	r3, r3, r0
 8012ffe:	50a3      	strne	r3, [r4, r2]
 8013000:	e7af      	b.n	8012f62 <_malloc_r+0x22>
 8013002:	6862      	ldr	r2, [r4, #4]
 8013004:	42a3      	cmp	r3, r4
 8013006:	bf0c      	ite	eq
 8013008:	f8c8 2000 	streq.w	r2, [r8]
 801300c:	605a      	strne	r2, [r3, #4]
 801300e:	e7eb      	b.n	8012fe8 <_malloc_r+0xa8>
 8013010:	4623      	mov	r3, r4
 8013012:	6864      	ldr	r4, [r4, #4]
 8013014:	e7ae      	b.n	8012f74 <_malloc_r+0x34>
 8013016:	463c      	mov	r4, r7
 8013018:	687f      	ldr	r7, [r7, #4]
 801301a:	e7b6      	b.n	8012f8a <_malloc_r+0x4a>
 801301c:	461a      	mov	r2, r3
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	42a3      	cmp	r3, r4
 8013022:	d1fb      	bne.n	801301c <_malloc_r+0xdc>
 8013024:	2300      	movs	r3, #0
 8013026:	6053      	str	r3, [r2, #4]
 8013028:	e7de      	b.n	8012fe8 <_malloc_r+0xa8>
 801302a:	230c      	movs	r3, #12
 801302c:	6033      	str	r3, [r6, #0]
 801302e:	4630      	mov	r0, r6
 8013030:	f000 f99a 	bl	8013368 <__malloc_unlock>
 8013034:	e794      	b.n	8012f60 <_malloc_r+0x20>
 8013036:	6005      	str	r5, [r0, #0]
 8013038:	e7d6      	b.n	8012fe8 <_malloc_r+0xa8>
 801303a:	bf00      	nop
 801303c:	20008528 	.word	0x20008528

08013040 <_printf_common>:
 8013040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013044:	4616      	mov	r6, r2
 8013046:	4698      	mov	r8, r3
 8013048:	688a      	ldr	r2, [r1, #8]
 801304a:	690b      	ldr	r3, [r1, #16]
 801304c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013050:	4293      	cmp	r3, r2
 8013052:	bfb8      	it	lt
 8013054:	4613      	movlt	r3, r2
 8013056:	6033      	str	r3, [r6, #0]
 8013058:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801305c:	4607      	mov	r7, r0
 801305e:	460c      	mov	r4, r1
 8013060:	b10a      	cbz	r2, 8013066 <_printf_common+0x26>
 8013062:	3301      	adds	r3, #1
 8013064:	6033      	str	r3, [r6, #0]
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	0699      	lsls	r1, r3, #26
 801306a:	bf42      	ittt	mi
 801306c:	6833      	ldrmi	r3, [r6, #0]
 801306e:	3302      	addmi	r3, #2
 8013070:	6033      	strmi	r3, [r6, #0]
 8013072:	6825      	ldr	r5, [r4, #0]
 8013074:	f015 0506 	ands.w	r5, r5, #6
 8013078:	d106      	bne.n	8013088 <_printf_common+0x48>
 801307a:	f104 0a19 	add.w	sl, r4, #25
 801307e:	68e3      	ldr	r3, [r4, #12]
 8013080:	6832      	ldr	r2, [r6, #0]
 8013082:	1a9b      	subs	r3, r3, r2
 8013084:	42ab      	cmp	r3, r5
 8013086:	dc26      	bgt.n	80130d6 <_printf_common+0x96>
 8013088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801308c:	6822      	ldr	r2, [r4, #0]
 801308e:	3b00      	subs	r3, #0
 8013090:	bf18      	it	ne
 8013092:	2301      	movne	r3, #1
 8013094:	0692      	lsls	r2, r2, #26
 8013096:	d42b      	bmi.n	80130f0 <_printf_common+0xb0>
 8013098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801309c:	4641      	mov	r1, r8
 801309e:	4638      	mov	r0, r7
 80130a0:	47c8      	blx	r9
 80130a2:	3001      	adds	r0, #1
 80130a4:	d01e      	beq.n	80130e4 <_printf_common+0xa4>
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	6922      	ldr	r2, [r4, #16]
 80130aa:	f003 0306 	and.w	r3, r3, #6
 80130ae:	2b04      	cmp	r3, #4
 80130b0:	bf02      	ittt	eq
 80130b2:	68e5      	ldreq	r5, [r4, #12]
 80130b4:	6833      	ldreq	r3, [r6, #0]
 80130b6:	1aed      	subeq	r5, r5, r3
 80130b8:	68a3      	ldr	r3, [r4, #8]
 80130ba:	bf0c      	ite	eq
 80130bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130c0:	2500      	movne	r5, #0
 80130c2:	4293      	cmp	r3, r2
 80130c4:	bfc4      	itt	gt
 80130c6:	1a9b      	subgt	r3, r3, r2
 80130c8:	18ed      	addgt	r5, r5, r3
 80130ca:	2600      	movs	r6, #0
 80130cc:	341a      	adds	r4, #26
 80130ce:	42b5      	cmp	r5, r6
 80130d0:	d11a      	bne.n	8013108 <_printf_common+0xc8>
 80130d2:	2000      	movs	r0, #0
 80130d4:	e008      	b.n	80130e8 <_printf_common+0xa8>
 80130d6:	2301      	movs	r3, #1
 80130d8:	4652      	mov	r2, sl
 80130da:	4641      	mov	r1, r8
 80130dc:	4638      	mov	r0, r7
 80130de:	47c8      	blx	r9
 80130e0:	3001      	adds	r0, #1
 80130e2:	d103      	bne.n	80130ec <_printf_common+0xac>
 80130e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ec:	3501      	adds	r5, #1
 80130ee:	e7c6      	b.n	801307e <_printf_common+0x3e>
 80130f0:	18e1      	adds	r1, r4, r3
 80130f2:	1c5a      	adds	r2, r3, #1
 80130f4:	2030      	movs	r0, #48	@ 0x30
 80130f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80130fa:	4422      	add	r2, r4
 80130fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013104:	3302      	adds	r3, #2
 8013106:	e7c7      	b.n	8013098 <_printf_common+0x58>
 8013108:	2301      	movs	r3, #1
 801310a:	4622      	mov	r2, r4
 801310c:	4641      	mov	r1, r8
 801310e:	4638      	mov	r0, r7
 8013110:	47c8      	blx	r9
 8013112:	3001      	adds	r0, #1
 8013114:	d0e6      	beq.n	80130e4 <_printf_common+0xa4>
 8013116:	3601      	adds	r6, #1
 8013118:	e7d9      	b.n	80130ce <_printf_common+0x8e>
	...

0801311c <_printf_i>:
 801311c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013120:	7e0f      	ldrb	r7, [r1, #24]
 8013122:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013124:	2f78      	cmp	r7, #120	@ 0x78
 8013126:	4691      	mov	r9, r2
 8013128:	4680      	mov	r8, r0
 801312a:	460c      	mov	r4, r1
 801312c:	469a      	mov	sl, r3
 801312e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013132:	d807      	bhi.n	8013144 <_printf_i+0x28>
 8013134:	2f62      	cmp	r7, #98	@ 0x62
 8013136:	d80a      	bhi.n	801314e <_printf_i+0x32>
 8013138:	2f00      	cmp	r7, #0
 801313a:	f000 80d2 	beq.w	80132e2 <_printf_i+0x1c6>
 801313e:	2f58      	cmp	r7, #88	@ 0x58
 8013140:	f000 80b9 	beq.w	80132b6 <_printf_i+0x19a>
 8013144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801314c:	e03a      	b.n	80131c4 <_printf_i+0xa8>
 801314e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013152:	2b15      	cmp	r3, #21
 8013154:	d8f6      	bhi.n	8013144 <_printf_i+0x28>
 8013156:	a101      	add	r1, pc, #4	@ (adr r1, 801315c <_printf_i+0x40>)
 8013158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801315c:	080131b5 	.word	0x080131b5
 8013160:	080131c9 	.word	0x080131c9
 8013164:	08013145 	.word	0x08013145
 8013168:	08013145 	.word	0x08013145
 801316c:	08013145 	.word	0x08013145
 8013170:	08013145 	.word	0x08013145
 8013174:	080131c9 	.word	0x080131c9
 8013178:	08013145 	.word	0x08013145
 801317c:	08013145 	.word	0x08013145
 8013180:	08013145 	.word	0x08013145
 8013184:	08013145 	.word	0x08013145
 8013188:	080132c9 	.word	0x080132c9
 801318c:	080131f3 	.word	0x080131f3
 8013190:	08013283 	.word	0x08013283
 8013194:	08013145 	.word	0x08013145
 8013198:	08013145 	.word	0x08013145
 801319c:	080132eb 	.word	0x080132eb
 80131a0:	08013145 	.word	0x08013145
 80131a4:	080131f3 	.word	0x080131f3
 80131a8:	08013145 	.word	0x08013145
 80131ac:	08013145 	.word	0x08013145
 80131b0:	0801328b 	.word	0x0801328b
 80131b4:	6833      	ldr	r3, [r6, #0]
 80131b6:	1d1a      	adds	r2, r3, #4
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	6032      	str	r2, [r6, #0]
 80131bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80131c4:	2301      	movs	r3, #1
 80131c6:	e09d      	b.n	8013304 <_printf_i+0x1e8>
 80131c8:	6833      	ldr	r3, [r6, #0]
 80131ca:	6820      	ldr	r0, [r4, #0]
 80131cc:	1d19      	adds	r1, r3, #4
 80131ce:	6031      	str	r1, [r6, #0]
 80131d0:	0606      	lsls	r6, r0, #24
 80131d2:	d501      	bpl.n	80131d8 <_printf_i+0xbc>
 80131d4:	681d      	ldr	r5, [r3, #0]
 80131d6:	e003      	b.n	80131e0 <_printf_i+0xc4>
 80131d8:	0645      	lsls	r5, r0, #25
 80131da:	d5fb      	bpl.n	80131d4 <_printf_i+0xb8>
 80131dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80131e0:	2d00      	cmp	r5, #0
 80131e2:	da03      	bge.n	80131ec <_printf_i+0xd0>
 80131e4:	232d      	movs	r3, #45	@ 0x2d
 80131e6:	426d      	negs	r5, r5
 80131e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131ec:	4859      	ldr	r0, [pc, #356]	@ (8013354 <_printf_i+0x238>)
 80131ee:	230a      	movs	r3, #10
 80131f0:	e011      	b.n	8013216 <_printf_i+0xfa>
 80131f2:	6821      	ldr	r1, [r4, #0]
 80131f4:	6833      	ldr	r3, [r6, #0]
 80131f6:	0608      	lsls	r0, r1, #24
 80131f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80131fc:	d402      	bmi.n	8013204 <_printf_i+0xe8>
 80131fe:	0649      	lsls	r1, r1, #25
 8013200:	bf48      	it	mi
 8013202:	b2ad      	uxthmi	r5, r5
 8013204:	2f6f      	cmp	r7, #111	@ 0x6f
 8013206:	4853      	ldr	r0, [pc, #332]	@ (8013354 <_printf_i+0x238>)
 8013208:	6033      	str	r3, [r6, #0]
 801320a:	bf14      	ite	ne
 801320c:	230a      	movne	r3, #10
 801320e:	2308      	moveq	r3, #8
 8013210:	2100      	movs	r1, #0
 8013212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013216:	6866      	ldr	r6, [r4, #4]
 8013218:	60a6      	str	r6, [r4, #8]
 801321a:	2e00      	cmp	r6, #0
 801321c:	bfa2      	ittt	ge
 801321e:	6821      	ldrge	r1, [r4, #0]
 8013220:	f021 0104 	bicge.w	r1, r1, #4
 8013224:	6021      	strge	r1, [r4, #0]
 8013226:	b90d      	cbnz	r5, 801322c <_printf_i+0x110>
 8013228:	2e00      	cmp	r6, #0
 801322a:	d04b      	beq.n	80132c4 <_printf_i+0x1a8>
 801322c:	4616      	mov	r6, r2
 801322e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013232:	fb03 5711 	mls	r7, r3, r1, r5
 8013236:	5dc7      	ldrb	r7, [r0, r7]
 8013238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801323c:	462f      	mov	r7, r5
 801323e:	42bb      	cmp	r3, r7
 8013240:	460d      	mov	r5, r1
 8013242:	d9f4      	bls.n	801322e <_printf_i+0x112>
 8013244:	2b08      	cmp	r3, #8
 8013246:	d10b      	bne.n	8013260 <_printf_i+0x144>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	07df      	lsls	r7, r3, #31
 801324c:	d508      	bpl.n	8013260 <_printf_i+0x144>
 801324e:	6923      	ldr	r3, [r4, #16]
 8013250:	6861      	ldr	r1, [r4, #4]
 8013252:	4299      	cmp	r1, r3
 8013254:	bfde      	ittt	le
 8013256:	2330      	movle	r3, #48	@ 0x30
 8013258:	f806 3c01 	strble.w	r3, [r6, #-1]
 801325c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013260:	1b92      	subs	r2, r2, r6
 8013262:	6122      	str	r2, [r4, #16]
 8013264:	f8cd a000 	str.w	sl, [sp]
 8013268:	464b      	mov	r3, r9
 801326a:	aa03      	add	r2, sp, #12
 801326c:	4621      	mov	r1, r4
 801326e:	4640      	mov	r0, r8
 8013270:	f7ff fee6 	bl	8013040 <_printf_common>
 8013274:	3001      	adds	r0, #1
 8013276:	d14a      	bne.n	801330e <_printf_i+0x1f2>
 8013278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801327c:	b004      	add	sp, #16
 801327e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	f043 0320 	orr.w	r3, r3, #32
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	4833      	ldr	r0, [pc, #204]	@ (8013358 <_printf_i+0x23c>)
 801328c:	2778      	movs	r7, #120	@ 0x78
 801328e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	6831      	ldr	r1, [r6, #0]
 8013296:	061f      	lsls	r7, r3, #24
 8013298:	f851 5b04 	ldr.w	r5, [r1], #4
 801329c:	d402      	bmi.n	80132a4 <_printf_i+0x188>
 801329e:	065f      	lsls	r7, r3, #25
 80132a0:	bf48      	it	mi
 80132a2:	b2ad      	uxthmi	r5, r5
 80132a4:	6031      	str	r1, [r6, #0]
 80132a6:	07d9      	lsls	r1, r3, #31
 80132a8:	bf44      	itt	mi
 80132aa:	f043 0320 	orrmi.w	r3, r3, #32
 80132ae:	6023      	strmi	r3, [r4, #0]
 80132b0:	b11d      	cbz	r5, 80132ba <_printf_i+0x19e>
 80132b2:	2310      	movs	r3, #16
 80132b4:	e7ac      	b.n	8013210 <_printf_i+0xf4>
 80132b6:	4827      	ldr	r0, [pc, #156]	@ (8013354 <_printf_i+0x238>)
 80132b8:	e7e9      	b.n	801328e <_printf_i+0x172>
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	f023 0320 	bic.w	r3, r3, #32
 80132c0:	6023      	str	r3, [r4, #0]
 80132c2:	e7f6      	b.n	80132b2 <_printf_i+0x196>
 80132c4:	4616      	mov	r6, r2
 80132c6:	e7bd      	b.n	8013244 <_printf_i+0x128>
 80132c8:	6833      	ldr	r3, [r6, #0]
 80132ca:	6825      	ldr	r5, [r4, #0]
 80132cc:	6961      	ldr	r1, [r4, #20]
 80132ce:	1d18      	adds	r0, r3, #4
 80132d0:	6030      	str	r0, [r6, #0]
 80132d2:	062e      	lsls	r6, r5, #24
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	d501      	bpl.n	80132dc <_printf_i+0x1c0>
 80132d8:	6019      	str	r1, [r3, #0]
 80132da:	e002      	b.n	80132e2 <_printf_i+0x1c6>
 80132dc:	0668      	lsls	r0, r5, #25
 80132de:	d5fb      	bpl.n	80132d8 <_printf_i+0x1bc>
 80132e0:	8019      	strh	r1, [r3, #0]
 80132e2:	2300      	movs	r3, #0
 80132e4:	6123      	str	r3, [r4, #16]
 80132e6:	4616      	mov	r6, r2
 80132e8:	e7bc      	b.n	8013264 <_printf_i+0x148>
 80132ea:	6833      	ldr	r3, [r6, #0]
 80132ec:	1d1a      	adds	r2, r3, #4
 80132ee:	6032      	str	r2, [r6, #0]
 80132f0:	681e      	ldr	r6, [r3, #0]
 80132f2:	6862      	ldr	r2, [r4, #4]
 80132f4:	2100      	movs	r1, #0
 80132f6:	4630      	mov	r0, r6
 80132f8:	f7ec ff92 	bl	8000220 <memchr>
 80132fc:	b108      	cbz	r0, 8013302 <_printf_i+0x1e6>
 80132fe:	1b80      	subs	r0, r0, r6
 8013300:	6060      	str	r0, [r4, #4]
 8013302:	6863      	ldr	r3, [r4, #4]
 8013304:	6123      	str	r3, [r4, #16]
 8013306:	2300      	movs	r3, #0
 8013308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801330c:	e7aa      	b.n	8013264 <_printf_i+0x148>
 801330e:	6923      	ldr	r3, [r4, #16]
 8013310:	4632      	mov	r2, r6
 8013312:	4649      	mov	r1, r9
 8013314:	4640      	mov	r0, r8
 8013316:	47d0      	blx	sl
 8013318:	3001      	adds	r0, #1
 801331a:	d0ad      	beq.n	8013278 <_printf_i+0x15c>
 801331c:	6823      	ldr	r3, [r4, #0]
 801331e:	079b      	lsls	r3, r3, #30
 8013320:	d413      	bmi.n	801334a <_printf_i+0x22e>
 8013322:	68e0      	ldr	r0, [r4, #12]
 8013324:	9b03      	ldr	r3, [sp, #12]
 8013326:	4298      	cmp	r0, r3
 8013328:	bfb8      	it	lt
 801332a:	4618      	movlt	r0, r3
 801332c:	e7a6      	b.n	801327c <_printf_i+0x160>
 801332e:	2301      	movs	r3, #1
 8013330:	4632      	mov	r2, r6
 8013332:	4649      	mov	r1, r9
 8013334:	4640      	mov	r0, r8
 8013336:	47d0      	blx	sl
 8013338:	3001      	adds	r0, #1
 801333a:	d09d      	beq.n	8013278 <_printf_i+0x15c>
 801333c:	3501      	adds	r5, #1
 801333e:	68e3      	ldr	r3, [r4, #12]
 8013340:	9903      	ldr	r1, [sp, #12]
 8013342:	1a5b      	subs	r3, r3, r1
 8013344:	42ab      	cmp	r3, r5
 8013346:	dcf2      	bgt.n	801332e <_printf_i+0x212>
 8013348:	e7eb      	b.n	8013322 <_printf_i+0x206>
 801334a:	2500      	movs	r5, #0
 801334c:	f104 0619 	add.w	r6, r4, #25
 8013350:	e7f5      	b.n	801333e <_printf_i+0x222>
 8013352:	bf00      	nop
 8013354:	08015c59 	.word	0x08015c59
 8013358:	08015c6a 	.word	0x08015c6a

0801335c <__malloc_lock>:
 801335c:	4801      	ldr	r0, [pc, #4]	@ (8013364 <__malloc_lock+0x8>)
 801335e:	f7ff bc1a 	b.w	8012b96 <__retarget_lock_acquire_recursive>
 8013362:	bf00      	nop
 8013364:	20008520 	.word	0x20008520

08013368 <__malloc_unlock>:
 8013368:	4801      	ldr	r0, [pc, #4]	@ (8013370 <__malloc_unlock+0x8>)
 801336a:	f7ff bc15 	b.w	8012b98 <__retarget_lock_release_recursive>
 801336e:	bf00      	nop
 8013370:	20008520 	.word	0x20008520

08013374 <_malloc_usable_size_r>:
 8013374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013378:	1f18      	subs	r0, r3, #4
 801337a:	2b00      	cmp	r3, #0
 801337c:	bfbc      	itt	lt
 801337e:	580b      	ldrlt	r3, [r1, r0]
 8013380:	18c0      	addlt	r0, r0, r3
 8013382:	4770      	bx	lr

08013384 <__sread>:
 8013384:	b510      	push	{r4, lr}
 8013386:	460c      	mov	r4, r1
 8013388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801338c:	f000 f87a 	bl	8013484 <_read_r>
 8013390:	2800      	cmp	r0, #0
 8013392:	bfab      	itete	ge
 8013394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013396:	89a3      	ldrhlt	r3, [r4, #12]
 8013398:	181b      	addge	r3, r3, r0
 801339a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801339e:	bfac      	ite	ge
 80133a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80133a2:	81a3      	strhlt	r3, [r4, #12]
 80133a4:	bd10      	pop	{r4, pc}

080133a6 <__swrite>:
 80133a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133aa:	461f      	mov	r7, r3
 80133ac:	898b      	ldrh	r3, [r1, #12]
 80133ae:	05db      	lsls	r3, r3, #23
 80133b0:	4605      	mov	r5, r0
 80133b2:	460c      	mov	r4, r1
 80133b4:	4616      	mov	r6, r2
 80133b6:	d505      	bpl.n	80133c4 <__swrite+0x1e>
 80133b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133bc:	2302      	movs	r3, #2
 80133be:	2200      	movs	r2, #0
 80133c0:	f000 f84e 	bl	8013460 <_lseek_r>
 80133c4:	89a3      	ldrh	r3, [r4, #12]
 80133c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80133ce:	81a3      	strh	r3, [r4, #12]
 80133d0:	4632      	mov	r2, r6
 80133d2:	463b      	mov	r3, r7
 80133d4:	4628      	mov	r0, r5
 80133d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133da:	f000 b875 	b.w	80134c8 <_write_r>

080133de <__sseek>:
 80133de:	b510      	push	{r4, lr}
 80133e0:	460c      	mov	r4, r1
 80133e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e6:	f000 f83b 	bl	8013460 <_lseek_r>
 80133ea:	1c43      	adds	r3, r0, #1
 80133ec:	89a3      	ldrh	r3, [r4, #12]
 80133ee:	bf15      	itete	ne
 80133f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80133f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80133f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80133fa:	81a3      	strheq	r3, [r4, #12]
 80133fc:	bf18      	it	ne
 80133fe:	81a3      	strhne	r3, [r4, #12]
 8013400:	bd10      	pop	{r4, pc}

08013402 <__sclose>:
 8013402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013406:	f000 b81b 	b.w	8013440 <_close_r>

0801340a <memmove>:
 801340a:	4288      	cmp	r0, r1
 801340c:	b510      	push	{r4, lr}
 801340e:	eb01 0402 	add.w	r4, r1, r2
 8013412:	d902      	bls.n	801341a <memmove+0x10>
 8013414:	4284      	cmp	r4, r0
 8013416:	4623      	mov	r3, r4
 8013418:	d807      	bhi.n	801342a <memmove+0x20>
 801341a:	1e43      	subs	r3, r0, #1
 801341c:	42a1      	cmp	r1, r4
 801341e:	d008      	beq.n	8013432 <memmove+0x28>
 8013420:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013424:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013428:	e7f8      	b.n	801341c <memmove+0x12>
 801342a:	4402      	add	r2, r0
 801342c:	4601      	mov	r1, r0
 801342e:	428a      	cmp	r2, r1
 8013430:	d100      	bne.n	8013434 <memmove+0x2a>
 8013432:	bd10      	pop	{r4, pc}
 8013434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013438:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801343c:	e7f7      	b.n	801342e <memmove+0x24>
	...

08013440 <_close_r>:
 8013440:	b538      	push	{r3, r4, r5, lr}
 8013442:	4d06      	ldr	r5, [pc, #24]	@ (801345c <_close_r+0x1c>)
 8013444:	2300      	movs	r3, #0
 8013446:	4604      	mov	r4, r0
 8013448:	4608      	mov	r0, r1
 801344a:	602b      	str	r3, [r5, #0]
 801344c:	f7f6 f87f 	bl	800954e <_close>
 8013450:	1c43      	adds	r3, r0, #1
 8013452:	d102      	bne.n	801345a <_close_r+0x1a>
 8013454:	682b      	ldr	r3, [r5, #0]
 8013456:	b103      	cbz	r3, 801345a <_close_r+0x1a>
 8013458:	6023      	str	r3, [r4, #0]
 801345a:	bd38      	pop	{r3, r4, r5, pc}
 801345c:	2000852c 	.word	0x2000852c

08013460 <_lseek_r>:
 8013460:	b538      	push	{r3, r4, r5, lr}
 8013462:	4d07      	ldr	r5, [pc, #28]	@ (8013480 <_lseek_r+0x20>)
 8013464:	4604      	mov	r4, r0
 8013466:	4608      	mov	r0, r1
 8013468:	4611      	mov	r1, r2
 801346a:	2200      	movs	r2, #0
 801346c:	602a      	str	r2, [r5, #0]
 801346e:	461a      	mov	r2, r3
 8013470:	f7f6 f879 	bl	8009566 <_lseek>
 8013474:	1c43      	adds	r3, r0, #1
 8013476:	d102      	bne.n	801347e <_lseek_r+0x1e>
 8013478:	682b      	ldr	r3, [r5, #0]
 801347a:	b103      	cbz	r3, 801347e <_lseek_r+0x1e>
 801347c:	6023      	str	r3, [r4, #0]
 801347e:	bd38      	pop	{r3, r4, r5, pc}
 8013480:	2000852c 	.word	0x2000852c

08013484 <_read_r>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4d07      	ldr	r5, [pc, #28]	@ (80134a4 <_read_r+0x20>)
 8013488:	4604      	mov	r4, r0
 801348a:	4608      	mov	r0, r1
 801348c:	4611      	mov	r1, r2
 801348e:	2200      	movs	r2, #0
 8013490:	602a      	str	r2, [r5, #0]
 8013492:	461a      	mov	r2, r3
 8013494:	f7f6 f822 	bl	80094dc <_read>
 8013498:	1c43      	adds	r3, r0, #1
 801349a:	d102      	bne.n	80134a2 <_read_r+0x1e>
 801349c:	682b      	ldr	r3, [r5, #0]
 801349e:	b103      	cbz	r3, 80134a2 <_read_r+0x1e>
 80134a0:	6023      	str	r3, [r4, #0]
 80134a2:	bd38      	pop	{r3, r4, r5, pc}
 80134a4:	2000852c 	.word	0x2000852c

080134a8 <_sbrk_r>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	4d06      	ldr	r5, [pc, #24]	@ (80134c4 <_sbrk_r+0x1c>)
 80134ac:	2300      	movs	r3, #0
 80134ae:	4604      	mov	r4, r0
 80134b0:	4608      	mov	r0, r1
 80134b2:	602b      	str	r3, [r5, #0]
 80134b4:	f7f6 f864 	bl	8009580 <_sbrk>
 80134b8:	1c43      	adds	r3, r0, #1
 80134ba:	d102      	bne.n	80134c2 <_sbrk_r+0x1a>
 80134bc:	682b      	ldr	r3, [r5, #0]
 80134be:	b103      	cbz	r3, 80134c2 <_sbrk_r+0x1a>
 80134c0:	6023      	str	r3, [r4, #0]
 80134c2:	bd38      	pop	{r3, r4, r5, pc}
 80134c4:	2000852c 	.word	0x2000852c

080134c8 <_write_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4d07      	ldr	r5, [pc, #28]	@ (80134e8 <_write_r+0x20>)
 80134cc:	4604      	mov	r4, r0
 80134ce:	4608      	mov	r0, r1
 80134d0:	4611      	mov	r1, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	602a      	str	r2, [r5, #0]
 80134d6:	461a      	mov	r2, r3
 80134d8:	f7f6 f81d 	bl	8009516 <_write>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_write_r+0x1e>
 80134e0:	682b      	ldr	r3, [r5, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_write_r+0x1e>
 80134e4:	6023      	str	r3, [r4, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	2000852c 	.word	0x2000852c

080134ec <_init>:
 80134ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ee:	bf00      	nop
 80134f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134f2:	bc08      	pop	{r3}
 80134f4:	469e      	mov	lr, r3
 80134f6:	4770      	bx	lr

080134f8 <_fini>:
 80134f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fa:	bf00      	nop
 80134fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134fe:	bc08      	pop	{r3}
 8013500:	469e      	mov	lr, r3
 8013502:	4770      	bx	lr
