
2024_03_08-Manual-robot-code_FREERTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011194  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138b4  080138b4  000150b8  2**0
                  CONTENTS
  4 .ARM          00000008  080138b4  080138b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138bc  080138bc  000150b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080138bc  080138bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138c4  080138c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080138c8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008488  200000b8  08013980  000150b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008540  08013980  00015540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002509c  00000000  00000000  000150e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e3  00000000  00000000  0003a184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  0003ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001620  00000000  00000000  000406d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc11  00000000  00000000  00041cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201d2  00000000  00000000  0006d901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010896f  00000000  00000000  0008dad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000801c  00000000  00000000  00196488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0019e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801134c 	.word	0x0801134c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0801134c 	.word	0x0801134c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <Driver_Delay_ms>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
void Driver_Delay_ms(unsigned long xms)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f008 fb27 	bl	80093f8 <HAL_Delay>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <LCD_Reset>:
  for (int j = xus; j > 0; j--);
}


static void LCD_Reset(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <LCD_Reset+0x40>)
 8000dc0:	f00a f86a 	bl	800ae98 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000dc4:	2032      	movs	r0, #50	@ 0x32
 8000dc6:	f7ff ffe9 	bl	8000d9c <Driver_Delay_ms>
    LCD_RST_0;
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <LCD_Reset+0x40>)
 8000dd2:	f00a f861 	bl	800ae98 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000dd6:	2032      	movs	r0, #50	@ 0x32
 8000dd8:	f7ff ffe0 	bl	8000d9c <Driver_Delay_ms>
    LCD_RST_1;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <LCD_Reset+0x40>)
 8000de4:	f00a f858 	bl	800ae98 <HAL_GPIO_WritePin>
    Driver_Delay_ms(50);
 8000de8:	2032      	movs	r0, #50	@ 0x32
 8000dea:	f7ff ffd7 	bl	8000d9c <Driver_Delay_ms>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021400 	.word	0x40021400

08000df8 <LCD_SetBackLight>:

 void LCD_SetBackLight()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2108      	movs	r1, #8
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <LCD_SetBackLight+0x14>)
 8000e02:	f00a f849 	bl	800ae98 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <LCD_WriteReg+0x3c>)
 8000e20:	f00a f83a 	bl	800ae98 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <LCD_WriteReg+0x40>)
 8000e2a:	f00a f835 	bl	800ae98 <HAL_GPIO_WritePin>
//    SPI4W_Write_Byte(Reg);
    HAL_SPI_Transmit(&hspi4, &Reg, 1U, 100U);
 8000e2e:	1df9      	adds	r1, r7, #7
 8000e30:	2364      	movs	r3, #100	@ 0x64
 8000e32:	2201      	movs	r2, #1
 8000e34:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <LCD_WriteReg+0x44>)
 8000e36:	f00b fa40 	bl	800c2ba <HAL_SPI_Transmit>
    LCD_CS_1;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <LCD_WriteReg+0x40>)
 8000e40:	f00a f82a 	bl	800ae98 <HAL_GPIO_WritePin>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	200005dc 	.word	0x200005dc

08000e58 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <LCD_WriteData+0x3c>)
 8000e68:	f00a f816 	bl	800ae98 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <LCD_WriteData+0x40>)
 8000e72:	f00a f811 	bl	800ae98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, &Data, 1U, 100U);
 8000e76:	1df9      	adds	r1, r7, #7
 8000e78:	2364      	movs	r3, #100	@ 0x64
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <LCD_WriteData+0x44>)
 8000e7e:	f00b fa1c 	bl	800c2ba <HAL_SPI_Transmit>
//    HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//    SPI4W_Write_Byte(Data >> 8);
//    SPI4W_Write_Byte(Data & 0XFF);
    LCD_CS_1;
 8000e82:	2201      	movs	r2, #1
 8000e84:	2110      	movs	r1, #16
 8000e86:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <LCD_WriteData+0x40>)
 8000e88:	f00a f806 	bl	800ae98 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021400 	.word	0x40021400
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	200005dc 	.word	0x200005dc

08000ea0 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8000eac:	2201      	movs	r2, #1
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	4815      	ldr	r0, [pc, #84]	@ (8000f08 <LCD_Write_AllData+0x68>)
 8000eb2:	f009 fff1 	bl	800ae98 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <LCD_Write_AllData+0x6c>)
 8000ebc:	f009 ffec 	bl	800ae98 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e012      	b.n	8000eec <LCD_Write_AllData+0x4c>
//        HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);

    	uint8_t data[2];
    	data[0] = Data >> 8;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	723b      	strb	r3, [r7, #8]
    	data[1] = Data;
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	727b      	strb	r3, [r7, #9]

        HAL_SPI_Transmit(&hspi4, (uint8_t *)&data, 2, 1000);
 8000ed6:	f107 0108 	add.w	r1, r7, #8
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	2202      	movs	r2, #2
 8000ee0:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <LCD_Write_AllData+0x70>)
 8000ee2:	f00b f9ea 	bl	800c2ba <HAL_SPI_Transmit>
    for(i = 0; i < DataLen; i++) {
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3e8      	bcc.n	8000ec6 <LCD_Write_AllData+0x26>
//        HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 1000);
//        HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//        SPI4W_Write_Byte(Data >> 8);
//        SPI4W_Write_Byte(Data & 0XFF);
    }
    LCD_CS_1;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <LCD_Write_AllData+0x6c>)
 8000efa:	f009 ffcd 	bl	800ae98 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	200005dc 	.word	0x200005dc

08000f14 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8000f18:	20f9      	movs	r0, #249	@ 0xf9
 8000f1a:	f7ff ff79 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ff9a 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x08);
 8000f24:	2008      	movs	r0, #8
 8000f26:	f7ff ff97 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8000f2a:	20c0      	movs	r0, #192	@ 0xc0
 8000f2c:	f7ff ff70 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8000f30:	2019      	movs	r0, #25
 8000f32:	f7ff ff91 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8000f36:	201a      	movs	r0, #26
 8000f38:	f7ff ff8e 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8000f3c:	20c1      	movs	r0, #193	@ 0xc1
 8000f3e:	f7ff ff67 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8000f42:	2045      	movs	r0, #69	@ 0x45
 8000f44:	f7ff ff88 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ff85 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8000f4e:	20c2      	movs	r0, #194	@ 0xc2
 8000f50:	f7ff ff5e 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x33);
 8000f54:	2033      	movs	r0, #51	@ 0x33
 8000f56:	f7ff ff7f 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8000f5a:	20c5      	movs	r0, #197	@ 0xc5
 8000f5c:	f7ff ff58 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ff79 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8000f66:	2028      	movs	r0, #40	@ 0x28
 8000f68:	f7ff ff76 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8000f6c:	20b1      	movs	r0, #177	@ 0xb1
 8000f6e:	f7ff ff4f 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8000f72:	20a0      	movs	r0, #160	@ 0xa0
 8000f74:	f7ff ff70 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x11);
 8000f78:	2011      	movs	r0, #17
 8000f7a:	f7ff ff6d 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8000f7e:	20b4      	movs	r0, #180	@ 0xb4
 8000f80:	f7ff ff46 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff67 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8000f8a:	20b6      	movs	r0, #182	@ 0xb6
 8000f8c:	f7ff ff40 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff61 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8000f96:	2042      	movs	r0, #66	@ 0x42
 8000f98:	f7ff ff5e 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x3B);
 8000f9c:	203b      	movs	r0, #59	@ 0x3b
 8000f9e:	f7ff ff5b 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8000fa2:	20b7      	movs	r0, #183	@ 0xb7
 8000fa4:	f7ff ff34 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8000fa8:	2007      	movs	r0, #7
 8000faa:	f7ff ff55 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8000fae:	20e0      	movs	r0, #224	@ 0xe0
 8000fb0:	f7ff ff2e 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8000fb4:	201f      	movs	r0, #31
 8000fb6:	f7ff ff4f 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x25);
 8000fba:	2025      	movs	r0, #37	@ 0x25
 8000fbc:	f7ff ff4c 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x22);
 8000fc0:	2022      	movs	r0, #34	@ 0x22
 8000fc2:	f7ff ff49 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8000fc6:	200b      	movs	r0, #11
 8000fc8:	f7ff ff46 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x06);
 8000fcc:	2006      	movs	r0, #6
 8000fce:	f7ff ff43 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0A);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f7ff ff40 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8000fd8:	204e      	movs	r0, #78	@ 0x4e
 8000fda:	f7ff ff3d 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0xC6);
 8000fde:	20c6      	movs	r0, #198	@ 0xc6
 8000fe0:	f7ff ff3a 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x39);
 8000fe4:	2039      	movs	r0, #57	@ 0x39
 8000fe6:	f7ff ff37 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff ff34 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ff31 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff ff2e 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ff2b 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff28 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ff25 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 800100e:	20e1      	movs	r0, #225	@ 0xe1
 8001010:	f7ff fefe 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8001014:	201f      	movs	r0, #31
 8001016:	f7ff ff1f 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800101a:	203f      	movs	r0, #63	@ 0x3f
 800101c:	f7ff ff1c 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8001020:	203f      	movs	r0, #63	@ 0x3f
 8001022:	f7ff ff19 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8001026:	200f      	movs	r0, #15
 8001028:	f7ff ff16 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800102c:	201f      	movs	r0, #31
 800102e:	f7ff ff13 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff ff10 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x46);
 8001038:	2046      	movs	r0, #70	@ 0x46
 800103a:	f7ff ff0d 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x49);
 800103e:	2049      	movs	r0, #73	@ 0x49
 8001040:	f7ff ff0a 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x31);
 8001044:	2031      	movs	r0, #49	@ 0x31
 8001046:	f7ff ff07 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x05);
 800104a:	2005      	movs	r0, #5
 800104c:	f7ff ff04 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x09);
 8001050:	2009      	movs	r0, #9
 8001052:	f7ff ff01 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x03);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff fefe 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x1C);
 800105c:	201c      	movs	r0, #28
 800105e:	f7ff fefb 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x1A);
 8001062:	201a      	movs	r0, #26
 8001064:	f7ff fef8 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fef5 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 800106e:	20f1      	movs	r0, #241	@ 0xf1
 8001070:	f7ff fece 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x36);
 8001074:	2036      	movs	r0, #54	@ 0x36
 8001076:	f7ff feef 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x04);
 800107a:	2004      	movs	r0, #4
 800107c:	f7ff feec 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fee9 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x3C);
 8001086:	203c      	movs	r0, #60	@ 0x3c
 8001088:	f7ff fee6 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0F);
 800108c:	200f      	movs	r0, #15
 800108e:	f7ff fee3 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8001092:	200f      	movs	r0, #15
 8001094:	f7ff fee0 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0xA4);
 8001098:	20a4      	movs	r0, #164	@ 0xa4
 800109a:	f7ff fedd 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x02);
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff feda 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80010a4:	20f2      	movs	r0, #242	@ 0xf2
 80010a6:	f7ff feb3 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x18);
 80010aa:	2018      	movs	r0, #24
 80010ac:	f7ff fed4 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0xA3);
 80010b0:	20a3      	movs	r0, #163	@ 0xa3
 80010b2:	f7ff fed1 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x12);
 80010b6:	2012      	movs	r0, #18
 80010b8:	f7ff fece 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x02);
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fecb 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x32);
 80010c2:	2032      	movs	r0, #50	@ 0x32
 80010c4:	f7ff fec8 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x12);
 80010c8:	2012      	movs	r0, #18
 80010ca:	f7ff fec5 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0xFF);
 80010ce:	20ff      	movs	r0, #255	@ 0xff
 80010d0:	f7ff fec2 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x32);
 80010d4:	2032      	movs	r0, #50	@ 0x32
 80010d6:	f7ff febf 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff febc 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 80010e0:	20f4      	movs	r0, #244	@ 0xf4
 80010e2:	f7ff fe95 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x40);
 80010e6:	2040      	movs	r0, #64	@ 0x40
 80010e8:	f7ff feb6 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x00);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff feb3 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x08);
 80010f2:	2008      	movs	r0, #8
 80010f4:	f7ff feb0 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x91);
 80010f8:	2091      	movs	r0, #145	@ 0x91
 80010fa:	f7ff fead 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x04);
 80010fe:	2004      	movs	r0, #4
 8001100:	f7ff feaa 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8001104:	20f8      	movs	r0, #248	@ 0xf8
 8001106:	f7ff fe83 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x21);
 800110a:	2021      	movs	r0, #33	@ 0x21
 800110c:	f7ff fea4 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(0x04);
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fea1 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8001116:	203a      	movs	r0, #58	@ 0x3a
 8001118:	f7ff fe7a 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0x55);
 800111c:	2055      	movs	r0, #85	@ 0x55
 800111e:	f7ff fe9b 	bl	8000e58 <LCD_WriteData>

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8001132:	2300      	movs	r3, #0
 8001134:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8001136:	2300      	movs	r3, #0
 8001138:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d83b      	bhi.n	80011b8 <LCD_SetGramScanWay+0x90>
 8001140:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <LCD_SetGramScanWay+0x20>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001169 	.word	0x08001169
 800114c:	08001173 	.word	0x08001173
 8001150:	0800117d 	.word	0x0800117d
 8001154:	08001187 	.word	0x08001187
 8001158:	08001191 	.word	0x08001191
 800115c:	0800119b 	.word	0x0800119b
 8001160:	080011a5 	.word	0x080011a5
 8001164:	080011af 	.word	0x080011af
    case L2R_U2D:                       // Rotation=        0
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8001168:	2308      	movs	r3, #8
 800116a:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=1, GS=0
 800116c:	2322      	movs	r3, #34	@ 0x22
 800116e:	81bb      	strh	r3, [r7, #12]
        break;
 8001170:	e022      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8001172:	2308      	movs	r3, #8
 8001174:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8001176:	2362      	movs	r3, #98	@ 0x62
 8001178:	81bb      	strh	r3, [r7, #12]
        break;
 800117a:	e01d      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 800117c:	2308      	movs	r3, #8
 800117e:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8001180:	2302      	movs	r3, #2
 8001182:	81bb      	strh	r3, [r7, #12]
        break;
 8001184:	e018      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC                 // Rotation=        2
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8001186:	2308      	movs	r3, #8
 8001188:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=1
 800118a:	2342      	movs	r3, #66	@ 0x42
 800118c:	81bb      	strh	r3, [r7, #12]
        break;
 800118e:	e013      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 8001190:	2328      	movs	r3, #40	@ 0x28
 8001192:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8001194:	2322      	movs	r3, #34	@ 0x22
 8001196:	81bb      	strh	r3, [r7, #12]
        break;
 8001198:	e00e      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6                 // Rotation=        1
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 800119a:	2328      	movs	r3, #40	@ 0x28
 800119c:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=0
 800119e:	2302      	movs	r3, #2
 80011a0:	81bb      	strh	r3, [r7, #12]
        break;
 80011a2:	e009      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA                 // Rotation=        3
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80011a4:	2328      	movs	r3, #40	@ 0x28
 80011a6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;          // DISPFUNCCTRL:    ISC='b0010, SM=0, SS=1, GS=1
 80011a8:	2362      	movs	r3, #98	@ 0x62
 80011aa:	81bb      	strh	r3, [r7, #12]
        break;
 80011ac:	e004      	b.n	80011b8 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;    // MADCTL: BGR | MV
 80011ae:	2328      	movs	r3, #40	@ 0x28
 80011b0:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 80011b2:	2342      	movs	r3, #66	@ 0x42
 80011b4:	81bb      	strh	r3, [r7, #12]
        break;
 80011b6:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <LCD_SetGramScanWay+0x100>)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <LCD_SetGramScanWay+0xae>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <LCD_SetGramScanWay+0xae>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d002      	beq.n	80011d6 <LCD_SetGramScanWay+0xae>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d108      	bne.n	80011e8 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <LCD_SetGramScanWay+0x100>)
 80011d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011dc:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <LCD_SetGramScanWay+0x100>)
 80011e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e4:	805a      	strh	r2, [r3, #2]
 80011e6:	e007      	b.n	80011f8 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <LCD_SetGramScanWay+0x100>)
 80011ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011ee:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <LCD_SetGramScanWay+0x100>)
 80011f2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011f6:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 80011f8:	20b6      	movs	r0, #182	@ 0xb6
 80011fa:	f7ff fe09 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(0X00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fe2a 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe25 	bl	8000e58 <LCD_WriteData>

    LCD_WriteReg(0x36);
 800120e:	2036      	movs	r0, #54	@ 0x36
 8001210:	f7ff fdfe 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe1d 	bl	8000e58 <LCD_WriteData>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000d4 	.word	0x200000d4

0800122c <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 800123c:	f7ff fdba 	bl	8000db4 <LCD_Reset>
    
    if(LCD_BLval > 255)
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	2bff      	cmp	r3, #255	@ 0xff
 8001244:	d901      	bls.n	800124a <LCD_Init+0x1e>
        LCD_BLval = 255;
 8001246:	23ff      	movs	r3, #255	@ 0xff
 8001248:	80bb      	strh	r3, [r7, #4]
    LCD_SetBackLight(LCD_BLval);
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fdd3 	bl	8000df8 <LCD_SetBackLight>
    
    //Set the initialization register
    LCD_InitReg();
 8001252:	f7ff fe5f 	bl	8000f14 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff65 	bl	8001128 <LCD_SetGramScanWay>
    Driver_Delay_ms(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fd9c 	bl	8000d9c <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 8001264:	2011      	movs	r0, #17
 8001266:	f7ff fdd3 	bl	8000e10 <LCD_WriteReg>
    Driver_Delay_ms(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff fd96 	bl	8000d9c <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 8001270:	2029      	movs	r0, #41	@ 0x29
 8001272:	f7ff fdcd 	bl	8000e10 <LCD_WriteReg>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4623      	mov	r3, r4
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	4603      	mov	r3, r0
 8001292:	80bb      	strh	r3, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 800129c:	202a      	movs	r0, #42	@ 0x2a
 800129e:	f7ff fdb7 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fdd4 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdcf 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	3b01      	subs	r3, #1
 80012be:	121b      	asrs	r3, r3, #8
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fdc8 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fdc1 	bl	8000e58 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 80012d6:	202b      	movs	r0, #43	@ 0x2b
 80012d8:	f7ff fd9a 	bl	8000e10 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fdb7 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fdb2 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 80012f4:	883b      	ldrh	r3, [r7, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	121b      	asrs	r3, r3, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fdab 	bl	8000e58 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fda4 	bl	8000e58 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8001310:	202c      	movs	r0, #44	@ 0x2c
 8001312:	f7ff fd7d 	bl	8000e10 <LCD_WriteReg>
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}

0800131e <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	460a      	mov	r2, r1
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	88b9      	ldrh	r1, [r7, #4]
 8001334:	88f8      	ldrh	r0, [r7, #6]
 8001336:	f7ff ffa2 	bl	800127e <LCD_SetWindow>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	460b      	mov	r3, r1
 800134e:	80bb      	strh	r3, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	fb03 f202 	mul.w	r2, r3, r2
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fd9d 	bl	8000ea0 <LCD_Write_AllData>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	460b      	mov	r3, r1
 800137c:	80bb      	strh	r3, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <LCD_SetPointlColor+0x48>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	88fa      	ldrh	r2, [r7, #6]
 8001388:	429a      	cmp	r2, r3
 800138a:	d810      	bhi.n	80013ae <LCD_SetPointlColor+0x3e>
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <LCD_SetPointlColor+0x48>)
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	88ba      	ldrh	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d80b      	bhi.n	80013ae <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 8001396:	88ba      	ldrh	r2, [r7, #4]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ffbe 	bl	800131e <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffca 	bl	8001342 <LCD_SetColor>
    }
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000d4 	.word	0x200000d4

080013bc <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d915      	bls.n	800140e <LCD_SetArealColor+0x52>
 80013e2:	883a      	ldrh	r2, [r7, #0]
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d911      	bls.n	800140e <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 80013ea:	883b      	ldrh	r3, [r7, #0]
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	88b9      	ldrh	r1, [r7, #4]
 80013f0:	88f8      	ldrh	r0, [r7, #6]
 80013f2:	f7ff ff44 	bl	800127e <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b299      	uxth	r1, r3
 80013fe:	883a      	ldrh	r2, [r7, #0]
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	8b3b      	ldrh	r3, [r7, #24]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff9a 	bl	8001342 <LCD_SetColor>
    }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
	...

08001418 <LCD_Clear>:

void LCD_Clear(COLOR  Color)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <LCD_Clear+0x28>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <LCD_Clear+0x28>)
 8001428:	8859      	ldrh	r1, [r3, #2]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	460b      	mov	r3, r1
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ffc2 	bl	80013bc <LCD_SetArealColor>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000d4 	.word	0x200000d4

08001444 <GUI_Swop>:
/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
  POINT Temp;
  Temp = Point1;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	81fb      	strh	r3, [r7, #14]
  Point1 = Point2;
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	80fb      	strh	r3, [r7, #6]
  Point2 = Temp;
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	80bb      	strh	r3, [r7, #4]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <GUI_DrawPoint>:
  Color     :   Set color
  Dot_Pixel :   point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	707b      	strb	r3, [r7, #1]
  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800148a:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <GUI_DrawPoint+0x108>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	429a      	cmp	r2, r3
 8001492:	d86a      	bhi.n	800156a <GUI_DrawPoint+0xfe>
 8001494:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <GUI_DrawPoint+0x108>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	88ba      	ldrh	r2, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	d865      	bhi.n	800156a <GUI_DrawPoint+0xfe>
//    DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
    return;
  }

  int16_t XDir_Num , YDir_Num;
  if (DOT_STYLE == DOT_STYLE_DFT) {
 800149e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d138      	bne.n	8001518 <GUI_DrawPoint+0xac>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	e02d      	b.n	8001508 <GUI_DrawPoint+0x9c>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	81bb      	strh	r3, [r7, #12]
 80014b0:	e01d      	b.n	80014ee <GUI_DrawPoint+0x82>
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel + 1, Ypoint + YDir_Num - Dot_Pixel + 1, Color);
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	787b      	ldrb	r3, [r7, #1]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	b298      	uxth	r0, r3
 80014c6:	89ba      	ldrh	r2, [r7, #12]
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	787b      	ldrb	r3, [r7, #1]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff ff47 	bl	8001370 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80014e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	81bb      	strh	r3, [r7, #12]
 80014ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014f2:	787b      	ldrb	r3, [r7, #1]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbda      	blt.n	80014b2 <GUI_DrawPoint+0x46>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	3b01      	subs	r3, #1
 8001512:	429a      	cmp	r2, r3
 8001514:	dbca      	blt.n	80014ac <GUI_DrawPoint+0x40>
 8001516:	e029      	b.n	800156c <GUI_DrawPoint+0x100>
      }
    }
  } else {
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001518:	2300      	movs	r3, #0
 800151a:	81fb      	strh	r3, [r7, #14]
 800151c:	e01f      	b.n	800155e <GUI_DrawPoint+0xf2>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800151e:	2300      	movs	r3, #0
 8001520:	81bb      	strh	r3, [r7, #12]
 8001522:	e011      	b.n	8001548 <GUI_DrawPoint+0xdc>
        //CAL! The following appears to have a bug that causes the Xpoint to be
        //CAL! shifted by -1 and the Ypoint to be shifted by -1. The net result
        //CAL! is that attempts to write to X=0 or Y=0 will cause an underflow,
        //CAL! leading to a Column/Page Address out of bounds.
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
 8001524:	89fa      	ldrh	r2, [r7, #14]
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4413      	add	r3, r2
 800152a:	b298      	uxth	r0, r3
 800152c:	89ba      	ldrh	r2, [r7, #12]
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff ff1a 	bl	8001370 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800153c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81bb      	strh	r3, [r7, #12]
 8001548:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbe8      	blt.n	8001524 <GUI_DrawPoint+0xb8>
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	b29b      	uxth	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbda      	blt.n	800151e <GUI_DrawPoint+0xb2>
 8001568:	e000      	b.n	800156c <GUI_DrawPoint+0x100>
    return;
 800156a:	bf00      	nop
      }
    }
  }
}
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	200000d4 	.word	0x200000d4

08001578 <GUI_DrawLine>:
  Yend   ：End point y coordinate
  Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08d      	sub	sp, #52	@ 0x34
 800157c:	af02      	add	r7, sp, #8
 800157e:	4604      	mov	r4, r0
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4623      	mov	r3, r4
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	4603      	mov	r3, r0
 800158c:	80bb      	strh	r3, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	807b      	strh	r3, [r7, #2]
 8001592:	4613      	mov	r3, r2
 8001594:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8001596:	4b56      	ldr	r3, [pc, #344]	@ (80016f0 <GUI_DrawLine+0x178>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	88fa      	ldrh	r2, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	f200 809e 	bhi.w	80016de <GUI_DrawLine+0x166>
 80015a2:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <GUI_DrawLine+0x178>)
 80015a4:	885b      	ldrh	r3, [r3, #2]
 80015a6:	88ba      	ldrh	r2, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f200 8098 	bhi.w	80016de <GUI_DrawLine+0x166>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80015ae:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <GUI_DrawLine+0x178>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f200 8092 	bhi.w	80016de <GUI_DrawLine+0x166>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80015ba:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <GUI_DrawLine+0x178>)
 80015bc:	885b      	ldrh	r3, [r3, #2]
 80015be:	883a      	ldrh	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f200 808c 	bhi.w	80016de <GUI_DrawLine+0x166>
//    DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d905      	bls.n	80015da <GUI_DrawLine+0x62>
    GUI_Swop(Xstart, Xend);
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff35 	bl	8001444 <GUI_Swop>
  if (Ystart > Yend)
 80015da:	88ba      	ldrh	r2, [r7, #4]
 80015dc:	883b      	ldrh	r3, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d905      	bls.n	80015ee <GUI_DrawLine+0x76>
    GUI_Swop(Ystart, Yend);
 80015e2:	883a      	ldrh	r2, [r7, #0]
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff2b 	bl	8001444 <GUI_Swop>

  POINT Xpoint = Xstart;
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  POINT Ypoint = Ystart;
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	61bb      	str	r3, [r7, #24]
  int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001604:	883a      	ldrh	r2, [r7, #0]
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	bfb8      	it	lt
 800160e:	425b      	neglt	r3, r3
 8001610:	425b      	negs	r3, r3
 8001612:	617b      	str	r3, [r7, #20]

  // Increment direction, 1 is positive, -1 is counter;
  int XAddway = Xstart < Xend ? 1 : -1;
 8001614:	88fa      	ldrh	r2, [r7, #6]
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	429a      	cmp	r2, r3
 800161a:	d201      	bcs.n	8001620 <GUI_DrawLine+0xa8>
 800161c:	2301      	movs	r3, #1
 800161e:	e001      	b.n	8001624 <GUI_DrawLine+0xac>
 8001620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001624:	613b      	str	r3, [r7, #16]
  int YAddway = Ystart < Yend ? 1 : -1;
 8001626:	88ba      	ldrh	r2, [r7, #4]
 8001628:	883b      	ldrh	r3, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d201      	bcs.n	8001632 <GUI_DrawLine+0xba>
 800162e:	2301      	movs	r3, #1
 8001630:	e001      	b.n	8001636 <GUI_DrawLine+0xbe>
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	60fb      	str	r3, [r7, #12]

  //Cumulative error
  int Esp = dx + dy;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	623b      	str	r3, [r7, #32]
  char Line_Style_Temp = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]

  for (;;) {
    Line_Style_Temp++;
 8001644:	7ffb      	ldrb	r3, [r7, #31]
 8001646:	3301      	adds	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]
    //Painted dotted line, 2 point is really virtual
    if (Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 800164a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800164e:	2b01      	cmp	r3, #1
 8001650:	d117      	bne.n	8001682 <GUI_DrawLine+0x10a>
 8001652:	7ffa      	ldrb	r2, [r7, #31]
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <GUI_DrawLine+0x17c>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	0859      	lsrs	r1, r3, #1
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10b      	bne.n	8001682 <GUI_DrawLine+0x10a>
      //DEBUG("LINE_DOTTED\r\n");
      GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 800166a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800166e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001670:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001672:	2201      	movs	r2, #1
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	f7ff fef8 	bl	800146c <GUI_DrawPoint>
      Line_Style_Temp = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
 8001680:	e008      	b.n	8001694 <GUI_DrawLine+0x11c>
    } else {
      GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8001682:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001686:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001688:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800168a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800168c:	2401      	movs	r4, #1
 800168e:	9400      	str	r4, [sp, #0]
 8001690:	f7ff feec 	bl	800146c <GUI_DrawPoint>
    }
    if (2 * Esp >= dy) {
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	429a      	cmp	r2, r3
 800169c:	dc0c      	bgt.n	80016b8 <GUI_DrawLine+0x140>
      if (Xpoint == Xend) break;
 800169e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d01d      	beq.n	80016e2 <GUI_DrawLine+0x16a>
      Esp += dy;
 80016a6:	6a3a      	ldr	r2, [r7, #32]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016b4:	4413      	add	r3, r2
 80016b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx) {
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbc0      	blt.n	8001644 <GUI_DrawLine+0xcc>
      if (Ypoint == Yend) break;
 80016c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016c4:	883b      	ldrh	r3, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d00d      	beq.n	80016e6 <GUI_DrawLine+0x16e>
      Esp += dx;
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016d8:	4413      	add	r3, r2
 80016da:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Line_Style_Temp++;
 80016dc:	e7b2      	b.n	8001644 <GUI_DrawLine+0xcc>
    return;
 80016de:	bf00      	nop
 80016e0:	e002      	b.n	80016e8 <GUI_DrawLine+0x170>
      if (Xpoint == Xend) break;
 80016e2:	bf00      	nop
 80016e4:	e000      	b.n	80016e8 <GUI_DrawLine+0x170>
      if (Ypoint == Yend) break;
 80016e6:	bf00      	nop
    }
  }
}
 80016e8:	372c      	adds	r7, #44	@ 0x2c
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000d4 	.word	0x200000d4
 80016f4:	aaaaaaab 	.word	0xaaaaaaab

080016f8 <GUI_DrawRectangle>:
  Color  ：The color of the Rectangular segment
  Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8001716:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <GUI_DrawRectangle+0x104>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	88fa      	ldrh	r2, [r7, #6]
 800171c:	429a      	cmp	r2, r3
 800171e:	d868      	bhi.n	80017f2 <GUI_DrawRectangle+0xfa>
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <GUI_DrawRectangle+0x104>)
 8001722:	885b      	ldrh	r3, [r3, #2]
 8001724:	88ba      	ldrh	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d863      	bhi.n	80017f2 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <GUI_DrawRectangle+0x104>)
 800172c:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	429a      	cmp	r2, r3
 8001732:	d85e      	bhi.n	80017f2 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8001734:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <GUI_DrawRectangle+0x104>)
 8001736:	885b      	ldrh	r3, [r3, #2]
 8001738:	883a      	ldrh	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d859      	bhi.n	80017f2 <GUI_DrawRectangle+0xfa>
//    DEBUG("Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	429a      	cmp	r2, r3
 8001744:	d905      	bls.n	8001752 <GUI_DrawRectangle+0x5a>
    GUI_Swop(Xstart, Xend);
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe79 	bl	8001444 <GUI_Swop>
  if (Ystart > Yend)
 8001752:	88ba      	ldrh	r2, [r7, #4]
 8001754:	883b      	ldrh	r3, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d905      	bls.n	8001766 <GUI_DrawRectangle+0x6e>
    GUI_Swop(Ystart, Yend);
 800175a:	883a      	ldrh	r2, [r7, #0]
 800175c:	88bb      	ldrh	r3, [r7, #4]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe6f 	bl	8001444 <GUI_Swop>

  if (Filled ) {
 8001766:	7f3b      	ldrb	r3, [r7, #28]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <GUI_DrawRectangle+0x88>
    POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
  #elif HIGH_Speed_Show
    LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 800176c:	883c      	ldrh	r4, [r7, #0]
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	88b9      	ldrh	r1, [r7, #4]
 8001772:	88f8      	ldrh	r0, [r7, #6]
 8001774:	8b3b      	ldrh	r3, [r7, #24]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4623      	mov	r3, r4
 800177a:	f7ff fe1f 	bl	80013bc <LCD_SetArealColor>
 800177e:	e039      	b.n	80017f4 <GUI_DrawRectangle+0xfc>
  #endif
  } else {
    GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001780:	88bc      	ldrh	r4, [r7, #4]
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	88b9      	ldrh	r1, [r7, #4]
 8001786:	88f8      	ldrh	r0, [r7, #6]
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	8b3b      	ldrh	r3, [r7, #24]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4623      	mov	r3, r4
 8001798:	f7ff feee 	bl	8001578 <GUI_DrawLine>
    GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800179c:	883c      	ldrh	r4, [r7, #0]
 800179e:	88fa      	ldrh	r2, [r7, #6]
 80017a0:	88b9      	ldrh	r1, [r7, #4]
 80017a2:	88f8      	ldrh	r0, [r7, #6]
 80017a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	8b3b      	ldrh	r3, [r7, #24]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff fee0 	bl	8001578 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80017b8:	88bc      	ldrh	r4, [r7, #4]
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	8839      	ldrh	r1, [r7, #0]
 80017be:	8878      	ldrh	r0, [r7, #2]
 80017c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	8b3b      	ldrh	r3, [r7, #24]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7ff fed2 	bl	8001578 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 80017d4:	883c      	ldrh	r4, [r7, #0]
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	8839      	ldrh	r1, [r7, #0]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	8b3b      	ldrh	r3, [r7, #24]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4623      	mov	r3, r4
 80017ec:	f7ff fec4 	bl	8001578 <GUI_DrawLine>
 80017f0:	e000      	b.n	80017f4 <GUI_DrawRectangle+0xfc>
    return;
 80017f2:	bf00      	nop
  }
}
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000d4 	.word	0x200000d4

08001800 <GUI_DrawCircle>:
  Color     : The color of the ：circle segment
  Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void GUI_DrawCircle(POINT X_Center, POINT Y_Center, LENGTH Radius,
                    COLOR Color, DRAW_FILL  Draw_Fill , DOT_PIXEL Dot_Pixel)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af02      	add	r7, sp, #8
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	4603      	mov	r3, r0
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
 800181a:	4613      	mov	r3, r2
 800181c:	803b      	strh	r3, [r7, #0]
  if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 800181e:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <GUI_DrawCircle+0x1b8>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	429a      	cmp	r2, r3
 8001826:	f200 8171 	bhi.w	8001b0c <GUI_DrawCircle+0x30c>
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <GUI_DrawCircle+0x1b8>)
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	88ba      	ldrh	r2, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	f080 816b 	bcs.w	8001b0c <GUI_DrawCircle+0x30c>
    return;
  }

  //Draw a circle from(0, R) as a starting point
  int16_t XCurrent, YCurrent;
  XCurrent = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	81fb      	strh	r3, [r7, #14]
  YCurrent = Radius;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	81bb      	strh	r3, [r7, #12]

  //Cumulative error,judge the next point of the logo
  int16_t Esp = 3 - (Radius << 1 );
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	f1c3 0303 	rsb	r3, r3, #3
 8001848:	b29b      	uxth	r3, r3
 800184a:	817b      	strh	r3, [r7, #10]

  int16_t sCountY;
  if (Draw_Fill == DRAW_FULL) {
 800184c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 8153 	bne.w	8001afc <GUI_DrawCircle+0x2fc>
    while (XCurrent <= YCurrent ) { //Realistic circles
 8001856:	e0a6      	b.n	80019a6 <GUI_DrawCircle+0x1a6>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	813b      	strh	r3, [r7, #8]
 800185c:	e075      	b.n	800194a <GUI_DrawCircle+0x14a>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//1
 800185e:	89fa      	ldrh	r2, [r7, #14]
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4413      	add	r3, r2
 8001864:	b298      	uxth	r0, r3
 8001866:	893a      	ldrh	r2, [r7, #8]
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	b299      	uxth	r1, r3
 800186e:	883a      	ldrh	r2, [r7, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	f7ff fdf9 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//2
 800187a:	89fb      	ldrh	r3, [r7, #14]
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b298      	uxth	r0, r3
 8001882:	893a      	ldrh	r2, [r7, #8]
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	b299      	uxth	r1, r3
 800188a:	883a      	ldrh	r2, [r7, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	f7ff fdeb 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//3
 8001896:	893b      	ldrh	r3, [r7, #8]
 8001898:	88fa      	ldrh	r2, [r7, #6]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b298      	uxth	r0, r3
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	b299      	uxth	r1, r3
 80018a6:	883a      	ldrh	r2, [r7, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	f7ff fddd 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//4
 80018b2:	893b      	ldrh	r3, [r7, #8]
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b298      	uxth	r0, r3
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b299      	uxth	r1, r3
 80018c2:	883a      	ldrh	r2, [r7, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	f7ff fdcf 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//5
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	b298      	uxth	r0, r3
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	88ba      	ldrh	r2, [r7, #4]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b299      	uxth	r1, r3
 80018de:	883a      	ldrh	r2, [r7, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	f7ff fdc1 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//6
 80018ea:	89fa      	ldrh	r2, [r7, #14]
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4413      	add	r3, r2
 80018f0:	b298      	uxth	r0, r3
 80018f2:	893b      	ldrh	r3, [r7, #8]
 80018f4:	88ba      	ldrh	r2, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b299      	uxth	r1, r3
 80018fa:	883a      	ldrh	r2, [r7, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	f7ff fdb3 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//7
 8001906:	893a      	ldrh	r2, [r7, #8]
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4413      	add	r3, r2
 800190c:	b298      	uxth	r0, r3
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b299      	uxth	r1, r3
 8001916:	883a      	ldrh	r2, [r7, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2301      	movs	r3, #1
 800191e:	f7ff fda5 	bl	800146c <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );
 8001922:	893a      	ldrh	r2, [r7, #8]
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4413      	add	r3, r2
 8001928:	b298      	uxth	r0, r3
 800192a:	89fa      	ldrh	r2, [r7, #14]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	b299      	uxth	r1, r3
 8001932:	883a      	ldrh	r2, [r7, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	f7ff fd97 	bl	800146c <GUI_DrawPoint>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800193e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001942:	b29b      	uxth	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	b29b      	uxth	r3, r3
 8001948:	813b      	strh	r3, [r7, #8]
 800194a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800194e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001952:	429a      	cmp	r2, r3
 8001954:	dd83      	ble.n	800185e <GUI_DrawCircle+0x5e>
      }
      if (Esp < 0 )
 8001956:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da09      	bge.n	8001972 <GUI_DrawCircle+0x172>
        Esp += 4 * XCurrent + 6;
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	b29a      	uxth	r2, r3
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	3306      	adds	r3, #6
 800196c:	b29b      	uxth	r3, r3
 800196e:	817b      	strh	r3, [r7, #10]
 8001970:	e013      	b.n	800199a <GUI_DrawCircle+0x19a>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 8001972:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	b29a      	uxth	r2, r3
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	4413      	add	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	330a      	adds	r3, #10
 800198a:	b29b      	uxth	r3, r3
 800198c:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 800198e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) { //Realistic circles
 80019a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f77f af52 	ble.w	8001858 <GUI_DrawCircle+0x58>
 80019b4:	e0ab      	b.n	8001b0e <GUI_DrawCircle+0x30e>
 80019b6:	bf00      	nop
 80019b8:	200000d4 	.word	0x200000d4
    }
  } else { //Draw a hollow circle
    while (XCurrent <= YCurrent ) {
      GUI_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//1
 80019bc:	89fa      	ldrh	r2, [r7, #14]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4413      	add	r3, r2
 80019c2:	b298      	uxth	r0, r3
 80019c4:	89ba      	ldrh	r2, [r7, #12]
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019d0:	883a      	ldrh	r2, [r7, #0]
 80019d2:	2401      	movs	r4, #1
 80019d4:	9400      	str	r4, [sp, #0]
 80019d6:	f7ff fd49 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//2
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b298      	uxth	r0, r3
 80019e2:	89ba      	ldrh	r2, [r7, #12]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	b299      	uxth	r1, r3
 80019ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019ee:	883a      	ldrh	r2, [r7, #0]
 80019f0:	2401      	movs	r4, #1
 80019f2:	9400      	str	r4, [sp, #0]
 80019f4:	f7ff fd3a 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//3
 80019f8:	89bb      	ldrh	r3, [r7, #12]
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b298      	uxth	r0, r3
 8001a00:	89fa      	ldrh	r2, [r7, #14]
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	b299      	uxth	r1, r3
 8001a08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a0c:	883a      	ldrh	r2, [r7, #0]
 8001a0e:	2401      	movs	r4, #1
 8001a10:	9400      	str	r4, [sp, #0]
 8001a12:	f7ff fd2b 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//4
 8001a16:	89bb      	ldrh	r3, [r7, #12]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	88ba      	ldrh	r2, [r7, #4]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b299      	uxth	r1, r3
 8001a26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a2a:	883a      	ldrh	r2, [r7, #0]
 8001a2c:	2401      	movs	r4, #1
 8001a2e:	9400      	str	r4, [sp, #0]
 8001a30:	f7ff fd1c 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//5
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b298      	uxth	r0, r3
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	88ba      	ldrh	r2, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	b299      	uxth	r1, r3
 8001a44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	2401      	movs	r4, #1
 8001a4c:	9400      	str	r4, [sp, #0]
 8001a4e:	f7ff fd0d 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//6
 8001a52:	89fa      	ldrh	r2, [r7, #14]
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	4413      	add	r3, r2
 8001a58:	b298      	uxth	r0, r3
 8001a5a:	89bb      	ldrh	r3, [r7, #12]
 8001a5c:	88ba      	ldrh	r2, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b299      	uxth	r1, r3
 8001a62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a66:	883a      	ldrh	r2, [r7, #0]
 8001a68:	2401      	movs	r4, #1
 8001a6a:	9400      	str	r4, [sp, #0]
 8001a6c:	f7ff fcfe 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//7
 8001a70:	89ba      	ldrh	r2, [r7, #12]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4413      	add	r3, r2
 8001a76:	b298      	uxth	r0, r3
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	88ba      	ldrh	r2, [r7, #4]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b299      	uxth	r1, r3
 8001a80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	2401      	movs	r4, #1
 8001a88:	9400      	str	r4, [sp, #0]
 8001a8a:	f7ff fcef 	bl	800146c <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//0
 8001a8e:	89ba      	ldrh	r2, [r7, #12]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4413      	add	r3, r2
 8001a94:	b298      	uxth	r0, r3
 8001a96:	89fa      	ldrh	r2, [r7, #14]
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001aa2:	883a      	ldrh	r2, [r7, #0]
 8001aa4:	2401      	movs	r4, #1
 8001aa6:	9400      	str	r4, [sp, #0]
 8001aa8:	f7ff fce0 	bl	800146c <GUI_DrawPoint>

      if (Esp < 0 )
 8001aac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da09      	bge.n	8001ac8 <GUI_DrawCircle+0x2c8>
        Esp += 4 * XCurrent + 6;
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	4413      	add	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3306      	adds	r3, #6
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	817b      	strh	r3, [r7, #10]
 8001ac6:	e013      	b.n	8001af0 <GUI_DrawCircle+0x2f0>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 8001ac8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	330a      	adds	r3, #10
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 8001af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) {
 8001afc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f77f af59 	ble.w	80019bc <GUI_DrawCircle+0x1bc>
 8001b0a:	e000      	b.n	8001b0e <GUI_DrawCircle+0x30e>
    return;
 8001b0c:	bf00      	nop
    }
  }
}
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <GUI_DisChar>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	81fb      	strh	r3, [r7, #14]
 8001b20:	460b      	mov	r3, r1
 8001b22:	81bb      	strh	r3, [r7, #12]
 8001b24:	4613      	mov	r3, r2
 8001b26:	72fb      	strb	r3, [r7, #11]
  POINT Page, Column;

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8001b28:	4b50      	ldr	r3, [pc, #320]	@ (8001c6c <GUI_DisChar+0x158>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	89fa      	ldrh	r2, [r7, #14]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	f200 8097 	bhi.w	8001c62 <GUI_DisChar+0x14e>
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <GUI_DisChar+0x158>)
 8001b36:	885b      	ldrh	r3, [r3, #2]
 8001b38:	89ba      	ldrh	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	f200 8091 	bhi.w	8001c62 <GUI_DisChar+0x14e>
//    DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
    return;
  }

  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	3b20      	subs	r3, #32
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	88d2      	ldrh	r2, [r2, #6]
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	8892      	ldrh	r2, [r2, #4]
 8001b50:	08d2      	lsrs	r2, r2, #3
 8001b52:	b292      	uxth	r2, r2
 8001b54:	4611      	mov	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	8892      	ldrh	r2, [r2, #4]
 8001b5a:	f002 0207 	and.w	r2, r2, #7
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	2a00      	cmp	r2, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2201      	movne	r2, #1
 8001b66:	2200      	moveq	r2, #0
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440a      	add	r2, r1
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
  const unsigned char *ptr = &Font->table[Char_Offset];
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4413      	add	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]

  for (Page = 0; Page < Font->Height; Page ++ ) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	83fb      	strh	r3, [r7, #30]
 8001b80:	e069      	b.n	8001c56 <GUI_DisChar+0x142>
    for (Column = 0; Column < Font->Width; Column ++ ) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	83bb      	strh	r3, [r7, #28]
 8001b86:	e054      	b.n	8001c32 <GUI_DisChar+0x11e>

      //To determine whether the font background color and screen background color is consistent
      if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001b88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d11a      	bne.n	8001bc8 <GUI_DisChar+0xb4>
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8)))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	8bbb      	ldrh	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	fa42 f303 	asr.w	r3, r2, r3
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d037      	beq.n	8001c1a <GUI_DisChar+0x106>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001baa:	89fa      	ldrh	r2, [r7, #14]
 8001bac:	8bbb      	ldrh	r3, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	89ba      	ldrh	r2, [r7, #12]
 8001bb4:	8bfb      	ldrh	r3, [r7, #30]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f7ff fc53 	bl	800146c <GUI_DrawPoint>
 8001bc6:	e028      	b.n	8001c1a <GUI_DisChar+0x106>
      } else {
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8))) {
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	8bbb      	ldrh	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	fa42 f303 	asr.w	r3, r2, r3
 8001bda:	400b      	ands	r3, r1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <GUI_DisChar+0xea>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001be0:	89fa      	ldrh	r2, [r7, #14]
 8001be2:	8bbb      	ldrh	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	b298      	uxth	r0, r3
 8001be8:	89ba      	ldrh	r2, [r7, #12]
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	4413      	add	r3, r2
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f7ff fc38 	bl	800146c <GUI_DrawPoint>
 8001bfc:	e00d      	b.n	8001c1a <GUI_DisChar+0x106>
        } else {
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001bfe:	89fa      	ldrh	r2, [r7, #14]
 8001c00:	8bbb      	ldrh	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	b298      	uxth	r0, r3
 8001c06:	89ba      	ldrh	r2, [r7, #12]
 8001c08:	8bfb      	ldrh	r3, [r7, #30]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c10:	2301      	movs	r3, #1
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	f7ff fc29 	bl	800146c <GUI_DrawPoint>
        }
      }
      //One pixel is 8 bits
      if (Column % 8 == 7)
 8001c1a:	8bbb      	ldrh	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d102      	bne.n	8001c2c <GUI_DisChar+0x118>
        ptr++;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
    for (Column = 0; Column < Font->Width; Column ++ ) {
 8001c2c:	8bbb      	ldrh	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	83bb      	strh	r3, [r7, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	889b      	ldrh	r3, [r3, #4]
 8001c36:	8bba      	ldrh	r2, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3a5      	bcc.n	8001b88 <GUI_DisChar+0x74>
    }/* Write a line */
    if (Font->Width % 8 != 0)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <GUI_DisChar+0x13c>
      ptr++;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
  for (Page = 0; Page < Font->Height; Page ++ ) {
 8001c50:	8bfb      	ldrh	r3, [r7, #30]
 8001c52:	3301      	adds	r3, #1
 8001c54:	83fb      	strh	r3, [r7, #30]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	88db      	ldrh	r3, [r3, #6]
 8001c5a:	8bfa      	ldrh	r2, [r7, #30]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d390      	bcc.n	8001b82 <GUI_DisChar+0x6e>
 8001c60:	e000      	b.n	8001c64 <GUI_DisChar+0x150>
    return;
 8001c62:	bf00      	nop
  }/* Write all */
}
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200000d4 	.word	0x200000d4

08001c70 <GUI_DisString_EN>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	81bb      	strh	r3, [r7, #12]
  POINT Xpoint = Xstart;
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	82fb      	strh	r3, [r7, #22]
  POINT Ypoint = Ystart;
 8001c86:	89bb      	ldrh	r3, [r7, #12]
 8001c88:	82bb      	strh	r3, [r7, #20]

  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <GUI_DisString_EN+0xa0>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d838      	bhi.n	8001d06 <GUI_DisString_EN+0x96>
 8001c94:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <GUI_DisString_EN+0xa0>)
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	89ba      	ldrh	r2, [r7, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d833      	bhi.n	8001d06 <GUI_DisString_EN+0x96>
//    DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
    return;
  }

  while (* pString != '\0') {
 8001c9e:	e02d      	b.n	8001cfc <GUI_DisString_EN+0x8c>
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
    if ((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	8892      	ldrh	r2, [r2, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <GUI_DisString_EN+0xa0>)
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	4293      	cmp	r3, r2
 8001cae:	dd06      	ble.n	8001cbe <GUI_DisString_EN+0x4e>
      Xpoint = Xstart;
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	82fb      	strh	r3, [r7, #22]
      Ypoint += Font->Height;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	88da      	ldrh	r2, [r3, #6]
 8001cb8:	8abb      	ldrh	r3, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	82bb      	strh	r3, [r7, #20]
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8001cbe:	8abb      	ldrh	r3, [r7, #20]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	88d2      	ldrh	r2, [r2, #6]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <GUI_DisString_EN+0xa0>)
 8001cc8:	8852      	ldrh	r2, [r2, #2]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	dd03      	ble.n	8001cd6 <GUI_DisString_EN+0x66>
      Xpoint = Xstart;
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	82fb      	strh	r3, [r7, #22]
      Ypoint = Ystart;
 8001cd2:	89bb      	ldrh	r3, [r7, #12]
 8001cd4:	82bb      	strh	r3, [r7, #20]
    }
    GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	8ab9      	ldrh	r1, [r7, #20]
 8001cdc:	8af8      	ldrh	r0, [r7, #22]
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	8c3b      	ldrh	r3, [r7, #32]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f7ff ff14 	bl	8001b14 <GUI_DisChar>

    //The next character of the address
    pString ++;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	889a      	ldrh	r2, [r3, #4]
 8001cf6:	8afb      	ldrh	r3, [r7, #22]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	82fb      	strh	r3, [r7, #22]
  while (* pString != '\0') {
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1cd      	bne.n	8001ca0 <GUI_DisString_EN+0x30>
 8001d04:	e000      	b.n	8001d08 <GUI_DisString_EN+0x98>
    return;
 8001d06:	bf00      	nop
  }
}
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000d4 	.word	0x200000d4

08001d14 <GUI_display>:
//}
//void GUI_joystick(void)
//{
//	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[2]+space, "Joystick holbogdoh", &Font16, LCD_BACKGROUND, WHITE);
//}
void GUI_display(void){
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af04      	add	r7, sp, #16
	GUI_DisString_EN(x_g[0], y_g[0], "SWITCH", &Font20, LCD_BACKGROUND, WHITE);
 8001d1a:	4b99      	ldr	r3, [pc, #612]	@ (8001f80 <GUI_display+0x26c>)
 8001d1c:	8818      	ldrh	r0, [r3, #0]
 8001d1e:	4b99      	ldr	r3, [pc, #612]	@ (8001f84 <GUI_display+0x270>)
 8001d20:	8819      	ldrh	r1, [r3, #0]
 8001d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4b96      	ldr	r3, [pc, #600]	@ (8001f88 <GUI_display+0x274>)
 8001d2e:	4a97      	ldr	r2, [pc, #604]	@ (8001f8c <GUI_display+0x278>)
 8001d30:	f7ff ff9e 	bl	8001c70 <GUI_DisString_EN>

	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[0], "RELAY", &Font20, LCD_BACKGROUND, WHITE);
 8001d34:	4b92      	ldr	r3, [pc, #584]	@ (8001f80 <GUI_display+0x26c>)
 8001d36:	891b      	ldrh	r3, [r3, #8]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b91      	ldr	r3, [pc, #580]	@ (8001f80 <GUI_display+0x26c>)
 8001d3c:	895b      	ldrh	r3, [r3, #10]
 8001d3e:	4413      	add	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da00      	bge.n	8001d46 <GUI_display+0x32>
 8001d44:	3301      	adds	r3, #1
 8001d46:	105b      	asrs	r3, r3, #1
 8001d48:	b298      	uxth	r0, r3
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f84 <GUI_display+0x270>)
 8001d4c:	8819      	ldrh	r1, [r3, #0]
 8001d4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4b8b      	ldr	r3, [pc, #556]	@ (8001f88 <GUI_display+0x274>)
 8001d5a:	4a8d      	ldr	r2, [pc, #564]	@ (8001f90 <GUI_display+0x27c>)
 8001d5c:	f7ff ff88 	bl	8001c70 <GUI_DisString_EN>
	GUI_DisString_EN(x_g[0], y_g[3], "ROBOT", &Font20, LCD_BACKGROUND, WHITE);
 8001d60:	4b87      	ldr	r3, [pc, #540]	@ (8001f80 <GUI_display+0x26c>)
 8001d62:	8818      	ldrh	r0, [r3, #0]
 8001d64:	4b87      	ldr	r3, [pc, #540]	@ (8001f84 <GUI_display+0x270>)
 8001d66:	88d9      	ldrh	r1, [r3, #6]
 8001d68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4b85      	ldr	r3, [pc, #532]	@ (8001f88 <GUI_display+0x274>)
 8001d74:	4a87      	ldr	r2, [pc, #540]	@ (8001f94 <GUI_display+0x280>)
 8001d76:	f7ff ff7b 	bl	8001c70 <GUI_DisString_EN>
	GUI_DisString_EN((x_g[4]+x_g[5])/2, y_g[2]+space, "Joystick", &Font16, LCD_BACKGROUND, WHITE);
 8001d7a:	4b81      	ldr	r3, [pc, #516]	@ (8001f80 <GUI_display+0x26c>)
 8001d7c:	891b      	ldrh	r3, [r3, #8]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <GUI_display+0x26c>)
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	4413      	add	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da00      	bge.n	8001d8c <GUI_display+0x78>
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	105b      	asrs	r3, r3, #1
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <GUI_display+0x270>)
 8001d92:	889a      	ldrh	r2, [r3, #4]
 8001d94:	4b80      	ldr	r3, [pc, #512]	@ (8001f98 <GUI_display+0x284>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <GUI_display+0x288>)
 8001daa:	4a7d      	ldr	r2, [pc, #500]	@ (8001fa0 <GUI_display+0x28c>)
 8001dac:	f7ff ff60 	bl	8001c70 <GUI_DisString_EN>
		GUI_DrawRectangle(x_g[2], y_g[4], x_g[6], y_g[8]-space, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001db0:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <GUI_display+0x26c>)
 8001db2:	8898      	ldrh	r0, [r3, #4]
 8001db4:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <GUI_display+0x270>)
 8001db6:	8919      	ldrh	r1, [r3, #8]
 8001db8:	4b71      	ldr	r3, [pc, #452]	@ (8001f80 <GUI_display+0x26c>)
 8001dba:	899c      	ldrh	r4, [r3, #12]
 8001dbc:	4b71      	ldr	r3, [pc, #452]	@ (8001f84 <GUI_display+0x270>)
 8001dbe:	8a1a      	ldrh	r2, [r3, #16]
 8001dc0:	4b75      	ldr	r3, [pc, #468]	@ (8001f98 <GUI_display+0x284>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2201      	movs	r2, #1
 8001dcc:	9202      	str	r2, [sp, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd6:	9200      	str	r2, [sp, #0]
 8001dd8:	4622      	mov	r2, r4
 8001dda:	f7ff fc8d 	bl	80016f8 <GUI_DrawRectangle>
		GUI_DisString_EN(x_g[2]+space, y_g[4]+space, "Wheel_1", &Font12, LCD_BACKGROUND, WHITE);
 8001dde:	4b68      	ldr	r3, [pc, #416]	@ (8001f80 <GUI_display+0x26c>)
 8001de0:	889a      	ldrh	r2, [r3, #4]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f98 <GUI_display+0x284>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	b298      	uxth	r0, r3
 8001dec:	4b65      	ldr	r3, [pc, #404]	@ (8001f84 <GUI_display+0x270>)
 8001dee:	891a      	ldrh	r2, [r3, #8]
 8001df0:	4b69      	ldr	r3, [pc, #420]	@ (8001f98 <GUI_display+0x284>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <GUI_display+0x290>)
 8001e06:	4a68      	ldr	r2, [pc, #416]	@ (8001fa8 <GUI_display+0x294>)
 8001e08:	f7ff ff32 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[2]+space, y_g[8]-4*space, "Wheel_2", &Font12, LCD_BACKGROUND, WHITE);
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001f80 <GUI_display+0x26c>)
 8001e0e:	889a      	ldrh	r2, [r3, #4]
 8001e10:	4b61      	ldr	r3, [pc, #388]	@ (8001f98 <GUI_display+0x284>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	b298      	uxth	r0, r3
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <GUI_display+0x270>)
 8001e1c:	8a1a      	ldrh	r2, [r3, #16]
 8001e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f98 <GUI_display+0x284>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2300      	movs	r3, #0
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa4 <GUI_display+0x290>)
 8001e38:	4a5c      	ldr	r2, [pc, #368]	@ (8001fac <GUI_display+0x298>)
 8001e3a:	f7ff ff19 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[5]+space, y_g[4]+space, "Wheel_3", &Font12, LCD_BACKGROUND, WHITE);
 8001e3e:	4b50      	ldr	r3, [pc, #320]	@ (8001f80 <GUI_display+0x26c>)
 8001e40:	895a      	ldrh	r2, [r3, #10]
 8001e42:	4b55      	ldr	r3, [pc, #340]	@ (8001f98 <GUI_display+0x284>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b298      	uxth	r0, r3
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <GUI_display+0x270>)
 8001e4e:	891a      	ldrh	r2, [r3, #8]
 8001e50:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <GUI_display+0x284>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <GUI_display+0x290>)
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <GUI_display+0x29c>)
 8001e68:	f7ff ff02 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[5]+space, y_g[8]-4*space, "Wheel_4", &Font12, LCD_BACKGROUND, WHITE);
 8001e6c:	4b44      	ldr	r3, [pc, #272]	@ (8001f80 <GUI_display+0x26c>)
 8001e6e:	895a      	ldrh	r2, [r3, #10]
 8001e70:	4b49      	ldr	r3, [pc, #292]	@ (8001f98 <GUI_display+0x284>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	b298      	uxth	r0, r3
 8001e7a:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <GUI_display+0x270>)
 8001e7c:	8a1a      	ldrh	r2, [r3, #16]
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <GUI_display+0x284>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	b299      	uxth	r1, r3
 8001e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <GUI_display+0x290>)
 8001e98:	4a46      	ldr	r2, [pc, #280]	@ (8001fb4 <GUI_display+0x2a0>)
 8001e9a:	f7ff fee9 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[4], "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <GUI_display+0x26c>)
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <GUI_display+0x284>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b298      	uxth	r0, r3
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <GUI_display+0x270>)
 8001eae:	8919      	ldrh	r1, [r3, #8]
 8001eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <GUI_display+0x288>)
 8001ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb8 <GUI_display+0x2a4>)
 8001ebe:	f7ff fed7 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[4]+5*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <GUI_display+0x26c>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <GUI_display+0x284>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b298      	uxth	r0, r3
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <GUI_display+0x270>)
 8001ed2:	891a      	ldrh	r2, [r3, #8]
 8001ed4:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <GUI_display+0x284>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	0089      	lsls	r1, r1, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <GUI_display+0x288>)
 8001ef2:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <GUI_display+0x2a8>)
 8001ef4:	f7ff febc 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[6]+space, y_g[4], "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8001ef8:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <GUI_display+0x26c>)
 8001efa:	899a      	ldrh	r2, [r3, #12]
 8001efc:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <GUI_display+0x284>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b298      	uxth	r0, r3
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <GUI_display+0x270>)
 8001f08:	8919      	ldrh	r1, [r3, #8]
 8001f0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <GUI_display+0x288>)
 8001f16:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <GUI_display+0x2a4>)
 8001f18:	f7ff feaa 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[6]+space, y_g[4]+5*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <GUI_display+0x26c>)
 8001f1e:	899a      	ldrh	r2, [r3, #12]
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <GUI_display+0x284>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	b298      	uxth	r0, r3
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <GUI_display+0x270>)
 8001f2c:	891a      	ldrh	r2, [r3, #8]
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <GUI_display+0x284>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	0089      	lsls	r1, r1, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <GUI_display+0x288>)
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fbc <GUI_display+0x2a8>)
 8001f4e:	f7ff fe8f 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[0]+space, y_g[6]+2*space, "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <GUI_display+0x26c>)
 8001f54:	881a      	ldrh	r2, [r3, #0]
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <GUI_display+0x284>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b298      	uxth	r0, r3
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <GUI_display+0x270>)
 8001f62:	899a      	ldrh	r2, [r3, #12]
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <GUI_display+0x284>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	b299      	uxth	r1, r3
 8001f72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	e020      	b.n	8001fc0 <GUI_display+0x2ac>
 8001f7e:	bf00      	nop
 8001f80:	20000018 	.word	0x20000018
 8001f84:	2000002c 	.word	0x2000002c
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	08011364 	.word	0x08011364
 8001f90:	0801136c 	.word	0x0801136c
 8001f94:	08011374 	.word	0x08011374
 8001f98:	20000044 	.word	0x20000044
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	0801137c 	.word	0x0801137c
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	08011388 	.word	0x08011388
 8001fac:	08011390 	.word	0x08011390
 8001fb0:	08011398 	.word	0x08011398
 8001fb4:	080113a0 	.word	0x080113a0
 8001fb8:	080113a8 	.word	0x080113a8
 8001fbc:	080113b0 	.word	0x080113b0
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <GUI_display+0x360>)
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <GUI_display+0x364>)
 8001fc4:	f7ff fe54 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[0]+space, y_g[6]+6*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <GUI_display+0x368>)
 8001fca:	881a      	ldrh	r2, [r3, #0]
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <GUI_display+0x36c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b298      	uxth	r0, r3
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <GUI_display+0x370>)
 8001fd8:	899a      	ldrh	r2, [r3, #12]
 8001fda:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <GUI_display+0x36c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	0049      	lsls	r1, r1, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b299      	uxth	r1, r3
 8001fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <GUI_display+0x360>)
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <GUI_display+0x374>)
 8001ffc:	f7ff fe38 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[6]+space, y_g[6]+2*space, "Hurd=", &Font16, LCD_BACKGROUND, WHITE);
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <GUI_display+0x368>)
 8002002:	899a      	ldrh	r2, [r3, #12]
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <GUI_display+0x36c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4413      	add	r3, r2
 800200c:	b298      	uxth	r0, r3
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <GUI_display+0x370>)
 8002010:	899a      	ldrh	r2, [r3, #12]
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <GUI_display+0x36c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b299      	uxth	r1, r3
 8002020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <GUI_display+0x360>)
 800202c:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <GUI_display+0x364>)
 800202e:	f7ff fe1f 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[6]+space, y_g[6]+6*space, "PWM=", &Font16, LCD_BACKGROUND, WHITE);
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <GUI_display+0x368>)
 8002034:	899a      	ldrh	r2, [r3, #12]
 8002036:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <GUI_display+0x36c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4413      	add	r3, r2
 800203e:	b298      	uxth	r0, r3
 8002040:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <GUI_display+0x370>)
 8002042:	899a      	ldrh	r2, [r3, #12]
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <GUI_display+0x36c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	440b      	add	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	b299      	uxth	r1, r3
 8002058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <GUI_display+0x360>)
 8002064:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <GUI_display+0x374>)
 8002066:	f7ff fe03 	bl	8001c70 <GUI_DisString_EN>
}
 800206a:	bf00      	nop
 800206c:	3704      	adds	r7, #4
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	080113a8 	.word	0x080113a8
 800207c:	20000018 	.word	0x20000018
 8002080:	20000044 	.word	0x20000044
 8002084:	2000002c 	.word	0x2000002c
 8002088:	080113b0 	.word	0x080113b0

0800208c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800209c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <vApplicationGetIdleTaskMemory+0x30>)
 80020a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020aa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200000e0 	.word	0x200000e0
 80020bc:	20000134 	.word	0x20000134

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b0b8      	sub	sp, #224	@ 0xe0
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c6:	f007 f96a 	bl	800939e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ca:	f000 f965 	bl	8002398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ce:	f000 fe1d 	bl	8002d0c <MX_GPIO_Init>
  MX_DMA_Init();
 80020d2:	f000 fdc9 	bl	8002c68 <MX_DMA_Init>
  MX_TIM1_Init();
 80020d6:	f000 fab3 	bl	8002640 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020da:	f000 fb0b 	bl	80026f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80020de:	f000 fbd9 	bl	8002894 <MX_TIM4_Init>
  MX_TIM5_Init();
 80020e2:	f000 fc2d 	bl	8002940 <MX_TIM5_Init>
  MX_TIM8_Init();
 80020e6:	f000 fc91 	bl	8002a0c <MX_TIM8_Init>
  MX_TIM12_Init();
 80020ea:	f000 fd0d 	bl	8002b08 <MX_TIM12_Init>
  MX_USART3_UART_Init();
 80020ee:	f000 fd8b 	bl	8002c08 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80020f2:	f000 fa29 	bl	8002548 <MX_SPI1_Init>
  MX_TIM3_Init();
 80020f6:	f000 fb51 	bl	800279c <MX_TIM3_Init>
  MX_SPI4_Init();
 80020fa:	f000 fa63 	bl	80025c4 <MX_SPI4_Init>
  MX_TIM10_Init();
 80020fe:	f000 fcdf 	bl	8002ac0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8002102:	f000 fd51 	bl	8002ba8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002106:	f000 f9b5 	bl	8002474 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800210a:	2100      	movs	r1, #0
 800210c:	487f      	ldr	r0, [pc, #508]	@ (800230c <main+0x24c>)
 800210e:	f00a fcf3 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002112:	2104      	movs	r1, #4
 8002114:	487d      	ldr	r0, [pc, #500]	@ (800230c <main+0x24c>)
 8002116:	f00a fcef 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800211a:	2108      	movs	r1, #8
 800211c:	487b      	ldr	r0, [pc, #492]	@ (800230c <main+0x24c>)
 800211e:	f00a fceb 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002122:	210c      	movs	r1, #12
 8002124:	4879      	ldr	r0, [pc, #484]	@ (800230c <main+0x24c>)
 8002126:	f00a fce7 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800212a:	2104      	movs	r1, #4
 800212c:	4878      	ldr	r0, [pc, #480]	@ (8002310 <main+0x250>)
 800212e:	f00a fce3 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);   //BRUSHLESS
 8002132:	2108      	movs	r1, #8
 8002134:	4877      	ldr	r0, [pc, #476]	@ (8002314 <main+0x254>)
 8002136:	f00a fcdf 	bl	800caf8 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800213a:	213c      	movs	r1, #60	@ 0x3c
 800213c:	4876      	ldr	r0, [pc, #472]	@ (8002318 <main+0x258>)
 800213e:	f00a fe7b 	bl	800ce38 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002142:	213c      	movs	r1, #60	@ 0x3c
 8002144:	4875      	ldr	r0, [pc, #468]	@ (800231c <main+0x25c>)
 8002146:	f00a fe77 	bl	800ce38 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800214a:	213c      	movs	r1, #60	@ 0x3c
 800214c:	4874      	ldr	r0, [pc, #464]	@ (8002320 <main+0x260>)
 800214e:	f00a fe73 	bl	800ce38 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002152:	213c      	movs	r1, #60	@ 0x3c
 8002154:	4873      	ldr	r0, [pc, #460]	@ (8002324 <main+0x264>)
 8002156:	f00a fe6f 	bl	800ce38 <HAL_TIM_Encoder_Start>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, 1);
 800215a:	2201      	movs	r2, #1
 800215c:	2108      	movs	r1, #8
 800215e:	4872      	ldr	r0, [pc, #456]	@ (8002328 <main+0x268>)
 8002160:	f008 fe9a 	bl	800ae98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002164:	2201      	movs	r2, #1
 8002166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800216a:	4870      	ldr	r0, [pc, #448]	@ (800232c <main+0x26c>)
 800216c:	f008 fe94 	bl	800ae98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002176:	486d      	ldr	r0, [pc, #436]	@ (800232c <main+0x26c>)
 8002178:	f008 fe8e 	bl	800ae98 <HAL_GPIO_WritePin>
    TIM5->CCR3=zogs;
 800217c:	4b6c      	ldr	r3, [pc, #432]	@ (8002330 <main+0x270>)
 800217e:	2208      	movs	r2, #8
 8002180:	63da      	str	r2, [r3, #60]	@ 0x3c

    M1_pid.KP=0.45777;
 8002182:	4b6c      	ldr	r3, [pc, #432]	@ (8002334 <main+0x274>)
 8002184:	4a6c      	ldr	r2, [pc, #432]	@ (8002338 <main+0x278>)
 8002186:	601a      	str	r2, [r3, #0]
    M1_pid.KI=0.0;
 8002188:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <main+0x274>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
    M1_pid.KD=0;
 8002190:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <main+0x274>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	609a      	str	r2, [r3, #8]

    M2_pid.KP=0.46314;
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <main+0x27c>)
 800219a:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <main+0x280>)
 800219c:	601a      	str	r2, [r3, #0]
    M2_pid.KI=0.0;
 800219e:	4b67      	ldr	r3, [pc, #412]	@ (800233c <main+0x27c>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
    M2_pid.KD=0.10;
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <main+0x27c>)
 80021a8:	4a66      	ldr	r2, [pc, #408]	@ (8002344 <main+0x284>)
 80021aa:	609a      	str	r2, [r3, #8]

    M3_pid.KP=0.41351;
 80021ac:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <main+0x288>)
 80021ae:	4a67      	ldr	r2, [pc, #412]	@ (800234c <main+0x28c>)
 80021b0:	601a      	str	r2, [r3, #0]
    M3_pid.KI=0.0;
 80021b2:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <main+0x288>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
    M3_pid.KD=0.1;
 80021ba:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <main+0x288>)
 80021bc:	4a61      	ldr	r2, [pc, #388]	@ (8002344 <main+0x284>)
 80021be:	609a      	str	r2, [r3, #8]

    M4_pid.KP=0.47799;
 80021c0:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <main+0x290>)
 80021c2:	4a64      	ldr	r2, [pc, #400]	@ (8002354 <main+0x294>)
 80021c4:	601a      	str	r2, [r3, #0]
    M4_pid.KI=0.0;
 80021c6:	4b62      	ldr	r3, [pc, #392]	@ (8002350 <main+0x290>)
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
    M4_pid.KD=0.10;
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <main+0x290>)
 80021d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002344 <main+0x284>)
 80021d2:	609a      	str	r2, [r3, #8]



    setup();
 80021d4:	f005 fbd0 	bl	8007978 <setup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Joystick_task, osPriorityNormal, 0, 256);
 80021d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <main+0x298>)
 80021da:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80021de:	461d      	mov	r5, r3
 80021e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021ec:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00c ffbc 	bl	800f170 <osThreadCreate>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a58      	ldr	r2, [pc, #352]	@ (800235c <main+0x29c>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Ball_task, osPriorityNormal, 0, 512);
 80021fe:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <main+0x2a0>)
 8002200:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8002204:	461d      	mov	r5, r3
 8002206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800220e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002212:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f00c ffa9 	bl	800f170 <osThreadCreate>
 800221e:	4603      	mov	r3, r0
 8002220:	4a50      	ldr	r2, [pc, #320]	@ (8002364 <main+0x2a4>)
 8002222:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Seedling_task, osPriorityNormal, 0, 512);
 8002224:	4b50      	ldr	r3, [pc, #320]	@ (8002368 <main+0x2a8>)
 8002226:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800222a:	461d      	mov	r5, r3
 800222c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8002238:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f00c ff96 	bl	800f170 <osThreadCreate>
 8002244:	4603      	mov	r3, r0
 8002246:	4a49      	ldr	r2, [pc, #292]	@ (800236c <main+0x2ac>)
 8002248:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, Wheel_task, osPriorityNormal, 0, 1024);
 800224a:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <main+0x2b0>)
 800224c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002250:	461d      	mov	r5, r3
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800225a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800225e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f00c ff83 	bl	800f170 <osThreadCreate>
 800226a:	4603      	mov	r3, r0
 800226c:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <main+0x2b4>)
 800226e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Encoder_task, osPriorityNormal, 0, 512);
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <main+0x2b8>)
 8002272:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002276:	461d      	mov	r5, r3
 8002278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8002284:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f00c ff70 	bl	800f170 <osThreadCreate>
 8002290:	4603      	mov	r3, r0
 8002292:	4a3a      	ldr	r2, [pc, #232]	@ (800237c <main+0x2bc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, Display_task, osPriorityNormal, 0, 512);
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <main+0x2c0>)
 8002298:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800229c:	461d      	mov	r5, r3
 800229e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 80022aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00c ff5d 	bl	800f170 <osThreadCreate>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <main+0x2c4>)
 80022ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, Ros_Transmit, osPriorityNormal, 0, 512);
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <main+0x2c8>)
 80022be:	f107 041c 	add.w	r4, r7, #28
 80022c2:	461d      	mov	r5, r3
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00c ff4a 	bl	800f170 <osThreadCreate>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <main+0x2cc>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, M3508_task, osPriorityNormal, 0, 256);
 80022e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <main+0x2d0>)
 80022e4:	463c      	mov	r4, r7
 80022e6:	461d      	mov	r5, r3
 80022e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 80022f4:	463b      	mov	r3, r7
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00c ff39 	bl	800f170 <osThreadCreate>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a24      	ldr	r2, [pc, #144]	@ (8002394 <main+0x2d4>)
 8002302:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002304:	f00c ff2d 	bl	800f162 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <main+0x248>
 800230c:	20000798 	.word	0x20000798
 8002310:	20000914 	.word	0x20000914
 8002314:	20000830 	.word	0x20000830
 8002318:	20000700 	.word	0x20000700
 800231c:	2000074c 	.word	0x2000074c
 8002320:	2000087c 	.word	0x2000087c
 8002324:	200007e4 	.word	0x200007e4
 8002328:	40021400 	.word	0x40021400
 800232c:	40021000 	.word	0x40021000
 8002330:	40000c00 	.word	0x40000c00
 8002334:	20000ce4 	.word	0x20000ce4
 8002338:	3eea60d4 	.word	0x3eea60d4
 800233c:	20000d00 	.word	0x20000d00
 8002340:	3eed20b0 	.word	0x3eed20b0
 8002344:	3dcccccd 	.word	0x3dcccccd
 8002348:	20000d1c 	.word	0x20000d1c
 800234c:	3ed3b795 	.word	0x3ed3b795
 8002350:	20000d38 	.word	0x20000d38
 8002354:	3ef4bb1b 	.word	0x3ef4bb1b
 8002358:	080113c4 	.word	0x080113c4
 800235c:	20000bf0 	.word	0x20000bf0
 8002360:	080113ec 	.word	0x080113ec
 8002364:	20000bf4 	.word	0x20000bf4
 8002368:	08011414 	.word	0x08011414
 800236c:	20000bf8 	.word	0x20000bf8
 8002370:	0801143c 	.word	0x0801143c
 8002374:	20000bfc 	.word	0x20000bfc
 8002378:	08011464 	.word	0x08011464
 800237c:	20000c00 	.word	0x20000c00
 8002380:	0801148c 	.word	0x0801148c
 8002384:	20000c04 	.word	0x20000c04
 8002388:	080114b4 	.word	0x080114b4
 800238c:	20000c08 	.word	0x20000c08
 8002390:	080114dc 	.word	0x080114dc
 8002394:	20000c0c 	.word	0x20000c0c

08002398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b094      	sub	sp, #80	@ 0x50
 800239c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	2230      	movs	r2, #48	@ 0x30
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f00e fb35 	bl	8010a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023bc:	f008 fd86 	bl	800aecc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <SystemClock_Config+0xd4>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	4a29      	ldr	r2, [pc, #164]	@ (800246c <SystemClock_Config+0xd4>)
 80023c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <SystemClock_Config+0xd4>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <SystemClock_Config+0xd8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <SystemClock_Config+0xd8>)
 80023de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <SystemClock_Config+0xd8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f4:	2301      	movs	r3, #1
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f8:	2310      	movs	r3, #16
 80023fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fc:	2302      	movs	r3, #2
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002400:	2300      	movs	r3, #0
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002404:	2308      	movs	r3, #8
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002408:	23c8      	movs	r3, #200	@ 0xc8
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240c:	2302      	movs	r3, #2
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002410:	2303      	movs	r3, #3
 8002412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002414:	f107 0320 	add.w	r3, r7, #32
 8002418:	4618      	mov	r0, r3
 800241a:	f008 fdb7 	bl	800af8c <HAL_RCC_OscConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002424:	f003 f860 	bl	80054e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002428:	f008 fd60 	bl	800aeec <HAL_PWREx_EnableOverDrive>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002432:	f003 f859 	bl	80054e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002436:	230f      	movs	r3, #15
 8002438:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243a:	2302      	movs	r3, #2
 800243c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002442:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	2106      	movs	r1, #6
 8002454:	4618      	mov	r0, r3
 8002456:	f009 f83d 	bl	800b4d4 <HAL_RCC_ClockConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002460:	f003 f842 	bl	80054e8 <Error_Handler>
  }
}
 8002464:	bf00      	nop
 8002466:	3750      	adds	r7, #80	@ 0x50
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000

08002474 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800247a:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <MX_CAN1_Init+0xcc>)
 800247c:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <MX_CAN1_Init+0xd0>)
 800247e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8002480:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <MX_CAN1_Init+0xcc>)
 8002482:	2205      	movs	r2, #5
 8002484:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002486:	4b2e      	ldr	r3, [pc, #184]	@ (8002540 <MX_CAN1_Init+0xcc>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800248c:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <MX_CAN1_Init+0xcc>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002492:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <MX_CAN1_Init+0xcc>)
 8002494:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8002498:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <MX_CAN1_Init+0xcc>)
 800249c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024c6:	481e      	ldr	r0, [pc, #120]	@ (8002540 <MX_CAN1_Init+0xcc>)
 80024c8:	f006 ffba 	bl	8009440 <HAL_CAN_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80024d2:	f003 f809 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;
    sFilterConfig.FilterBank = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80024de:	2301      	movs	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x205;
 80024e2:	f240 2305 	movw	r3, #517	@ 0x205
 80024e6:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x200;
 80024e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ec:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80024fe:	230e      	movs	r3, #14
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002502:	463b      	mov	r3, r7
 8002504:	4619      	mov	r1, r3
 8002506:	480e      	ldr	r0, [pc, #56]	@ (8002540 <MX_CAN1_Init+0xcc>)
 8002508:	f007 f896 	bl	8009638 <HAL_CAN_ConfigFilter>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_CAN1_Init+0xa2>
      	Error_Handler();
 8002512:	f002 ffe9 	bl	80054e8 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002516:	480a      	ldr	r0, [pc, #40]	@ (8002540 <MX_CAN1_Init+0xcc>)
 8002518:	f007 f96e 	bl	80097f8 <HAL_CAN_Start>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_CAN1_Init+0xb2>
      	Error_Handler();
 8002522:	f002 ffe1 	bl	80054e8 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002526:	2102      	movs	r1, #2
 8002528:	4805      	ldr	r0, [pc, #20]	@ (8002540 <MX_CAN1_Init+0xcc>)
 800252a:	f007 fbaf 	bl	8009c8c <HAL_CAN_ActivateNotification>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_CAN1_Init+0xc4>
      	Error_Handler();
 8002534:	f002 ffd8 	bl	80054e8 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	@ 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000550 	.word	0x20000550
 8002544:	40006400 	.word	0x40006400

08002548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <MX_SPI1_Init+0x74>)
 800254e:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <MX_SPI1_Init+0x78>)
 8002550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002554:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800255a:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002560:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002562:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002566:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <MX_SPI1_Init+0x74>)
 800256a:	2202      	movs	r2, #2
 800256c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002570:	2201      	movs	r2, #1
 8002572:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <MX_SPI1_Init+0x74>)
 800257e:	2238      	movs	r2, #56	@ 0x38
 8002580:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002584:	2280      	movs	r2, #128	@ 0x80
 8002586:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <MX_SPI1_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <MX_SPI1_Init+0x74>)
 8002596:	2207      	movs	r2, #7
 8002598:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <MX_SPI1_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <MX_SPI1_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <MX_SPI1_Init+0x74>)
 80025a8:	f009 fddc 	bl	800c164 <HAL_SPI_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025b2:	f002 ff99 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000578 	.word	0x20000578
 80025c0:	40013000 	.word	0x40013000

080025c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025ca:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <MX_SPI4_Init+0x78>)
 80025cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025e2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <MX_SPI4_Init+0x74>)
 80025fa:	2208      	movs	r2, #8
 80025fc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <MX_SPI4_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <MX_SPI4_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <MX_SPI4_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <MX_SPI4_Init+0x74>)
 8002612:	2207      	movs	r2, #7
 8002614:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <MX_SPI4_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <MX_SPI4_Init+0x74>)
 800261e:	2208      	movs	r2, #8
 8002620:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	@ (8002638 <MX_SPI4_Init+0x74>)
 8002624:	f009 fd9e 	bl	800c164 <HAL_SPI_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800262e:	f002 ff5b 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200005dc 	.word	0x200005dc
 800263c:	40013400 	.word	0x40013400

08002640 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	@ 0x30
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	2224      	movs	r2, #36	@ 0x24
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f00e f9e1 	bl	8010a16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002654:	463b      	mov	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <MX_TIM1_Init+0xac>)
 8002660:	4a23      	ldr	r2, [pc, #140]	@ (80026f0 <MX_TIM1_Init+0xb0>)
 8002662:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <MX_TIM1_Init+0xac>)
 8002666:	2200      	movs	r2, #0
 8002668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <MX_TIM1_Init+0xac>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <MX_TIM1_Init+0xac>)
 8002672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <MX_TIM1_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800267e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <MX_TIM1_Init+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <MX_TIM1_Init+0xac>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800268a:	2303      	movs	r3, #3
 800268c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800268e:	2302      	movs	r3, #2
 8002690:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002692:	2301      	movs	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800269e:	2302      	movs	r3, #2
 80026a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	4619      	mov	r1, r3
 80026b4:	480d      	ldr	r0, [pc, #52]	@ (80026ec <MX_TIM1_Init+0xac>)
 80026b6:	f00a fb19 	bl	800ccec <HAL_TIM_Encoder_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80026c0:	f002 ff12 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	@ (80026ec <MX_TIM1_Init+0xac>)
 80026d6:	f00b f9bd 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80026e0:	f002 ff02 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3730      	adds	r7, #48	@ 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000700 	.word	0x20000700
 80026f0:	40010000 	.word	0x40010000

080026f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	@ 0x30
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f00e f987 	bl	8010a16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002708:	463b      	mov	r3, r7
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002712:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002718:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800271a:	4b1f      	ldr	r3, [pc, #124]	@ (8002798 <MX_TIM2_Init+0xa4>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800273a:	2303      	movs	r3, #3
 800273c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800273e:	2302      	movs	r3, #2
 8002740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800274e:	2302      	movs	r3, #2
 8002750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002752:	2301      	movs	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	4619      	mov	r1, r3
 8002764:	480c      	ldr	r0, [pc, #48]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002766:	f00a fac1 	bl	800ccec <HAL_TIM_Encoder_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002770:	f002 feba 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	@ (8002798 <MX_TIM2_Init+0xa4>)
 8002782:	f00b f967 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800278c:	f002 feac 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	@ 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000074c 	.word	0x2000074c

0800279c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ae:	463b      	mov	r3, r7
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	615a      	str	r2, [r3, #20]
 80027be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <MX_TIM3_Init+0xf4>)
 80027c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 427;
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027c8:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80027cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027e8:	4828      	ldr	r0, [pc, #160]	@ (800288c <MX_TIM3_Init+0xf0>)
 80027ea:	f00a f92d 	bl	800ca48 <HAL_TIM_PWM_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80027f4:	f002 fe78 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4821      	ldr	r0, [pc, #132]	@ (800288c <MX_TIM3_Init+0xf0>)
 8002808:	f00b f924 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002812:	f002 fe69 	bl	80054e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002816:	2360      	movs	r3, #96	@ 0x60
 8002818:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002826:	463b      	mov	r3, r7
 8002828:	2200      	movs	r2, #0
 800282a:	4619      	mov	r1, r3
 800282c:	4817      	ldr	r0, [pc, #92]	@ (800288c <MX_TIM3_Init+0xf0>)
 800282e:	f00a fcb1 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002838:	f002 fe56 	bl	80054e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	2204      	movs	r2, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4812      	ldr	r0, [pc, #72]	@ (800288c <MX_TIM3_Init+0xf0>)
 8002844:	f00a fca6 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800284e:	f002 fe4b 	bl	80054e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002852:	463b      	mov	r3, r7
 8002854:	2208      	movs	r2, #8
 8002856:	4619      	mov	r1, r3
 8002858:	480c      	ldr	r0, [pc, #48]	@ (800288c <MX_TIM3_Init+0xf0>)
 800285a:	f00a fc9b 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8002864:	f002 fe40 	bl	80054e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002868:	463b      	mov	r3, r7
 800286a:	220c      	movs	r2, #12
 800286c:	4619      	mov	r1, r3
 800286e:	4807      	ldr	r0, [pc, #28]	@ (800288c <MX_TIM3_Init+0xf0>)
 8002870:	f00a fc90 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800287a:	f002 fe35 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800287e:	4803      	ldr	r0, [pc, #12]	@ (800288c <MX_TIM3_Init+0xf0>)
 8002880:	f006 f986 	bl	8008b90 <HAL_TIM_MspPostInit>

}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	@ 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000798 	.word	0x20000798
 8002890:	40000400 	.word	0x40000400

08002894 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2224      	movs	r2, #36	@ 0x24
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00e f8b7 	bl	8010a16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a8:	463b      	mov	r3, r7
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028b2:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028b4:	4a21      	ldr	r2, [pc, #132]	@ (800293c <MX_TIM4_Init+0xa8>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <MX_TIM4_Init+0xa4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028d8:	2303      	movs	r3, #3
 80028da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80028dc:	2302      	movs	r3, #2
 80028de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028e0:	2301      	movs	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80028ec:	2302      	movs	r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	4619      	mov	r1, r3
 8002902:	480d      	ldr	r0, [pc, #52]	@ (8002938 <MX_TIM4_Init+0xa4>)
 8002904:	f00a f9f2 	bl	800ccec <HAL_TIM_Encoder_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800290e:	f002 fdeb 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800291a:	463b      	mov	r3, r7
 800291c:	4619      	mov	r1, r3
 800291e:	4806      	ldr	r0, [pc, #24]	@ (8002938 <MX_TIM4_Init+0xa4>)
 8002920:	f00b f898 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800292a:	f002 fddd 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	@ 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200007e4 	.word	0x200007e4
 800293c:	40000800 	.word	0x40000800

08002940 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002952:	463b      	mov	r3, r7
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 8002966:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <MX_TIM5_Init+0xc8>)
 8002968:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 21600-1;
 800296a:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 800296c:	f245 425f 	movw	r2, #21599	@ 0x545f
 8002970:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002978:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 800297a:	2263      	movs	r2, #99	@ 0x63
 800297c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800298a:	481e      	ldr	r0, [pc, #120]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 800298c:	f00a f85c 	bl	800ca48 <HAL_TIM_PWM_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002996:	f002 fda7 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4816      	ldr	r0, [pc, #88]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 80029aa:	f00b f853 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80029b4:	f002 fd98 	bl	80054e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b8:	2360      	movs	r3, #96	@ 0x60
 80029ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80029c0:	2302      	movs	r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029c8:	463b      	mov	r3, r7
 80029ca:	2208      	movs	r2, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 80029d0:	f00a fbe0 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80029da:	f002 fd85 	bl	80054e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029de:	463b      	mov	r3, r7
 80029e0:	220c      	movs	r2, #12
 80029e2:	4619      	mov	r1, r3
 80029e4:	4807      	ldr	r0, [pc, #28]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 80029e6:	f00a fbd5 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80029f0:	f002 fd7a 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029f4:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <MX_TIM5_Init+0xc4>)
 80029f6:	f006 f8cb 	bl	8008b90 <HAL_TIM_MspPostInit>

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	@ 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000830 	.word	0x20000830
 8002a08:	40000c00 	.word	0x40000c00

08002a0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	@ 0x30
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00d fffb 	bl	8010a16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	463b      	mov	r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a2c:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <MX_TIM8_Init+0xb0>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a30:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a56:	2303      	movs	r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002a82:	f00a f933 	bl	800ccec <HAL_TIM_Encoder_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002a8c:	f002 fd2c 	bl	80054e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <MX_TIM8_Init+0xac>)
 8002aa2:	f00a ffd7 	bl	800da54 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002aac:	f002 fd1c 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	3730      	adds	r7, #48	@ 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000087c 	.word	0x2000087c
 8002abc:	40010400 	.word	0x40010400

08002ac0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <MX_TIM10_Init+0x44>)
 8002ac8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002adc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <MX_TIM10_Init+0x40>)
 8002aec:	f009 fedc 	bl	800c8a8 <HAL_TIM_Base_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002af6:	f002 fcf7 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200008c8 	.word	0x200008c8
 8002b04:	40014400 	.word	0x40014400

08002b08 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	615a      	str	r2, [r3, #20]
 8002b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002b20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b22:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <MX_TIM12_Init+0x9c>)
 8002b24:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1686;
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b28:	f240 6296 	movw	r2, #1686	@ 0x696
 8002b2c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 127;
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b36:	227f      	movs	r2, #127	@ 0x7f
 8002b38:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002b46:	4816      	ldr	r0, [pc, #88]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b48:	f009 ff7e 	bl	800ca48 <HAL_TIM_PWM_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002b52:	f002 fcc9 	bl	80054e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2360      	movs	r3, #96	@ 0x60
 8002b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b6e:	f00a fb11 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002b78:	f002 fcb6 	bl	80054e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4807      	ldr	r0, [pc, #28]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b84:	f00a fb06 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002b8e:	f002 fcab 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002b92:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <MX_TIM12_Init+0x98>)
 8002b94:	f005 fffc 	bl	8008b90 <HAL_TIM_MspPostInit>

}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000914 	.word	0x20000914
 8002ba4:	40001800 	.word	0x40001800

08002ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bae:	4a15      	ldr	r2, [pc, #84]	@ (8002c04 <MX_USART2_UART_Init+0x5c>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bb4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	@ (8002c00 <MX_USART2_UART_Init+0x58>)
 8002bec:	f00a ffde 	bl	800dbac <HAL_UART_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002bf6:	f002 fc77 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000960 	.word	0x20000960
 8002c04:	40004400 	.word	0x40004400

08002c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c0e:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <MX_USART3_UART_Init+0x5c>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c14:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_USART3_UART_Init+0x58>)
 8002c4c:	f00a ffae 	bl	800dbac <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002c56:	f002 fc47 	bl	80054e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200009e8 	.word	0x200009e8
 8002c64:	40004800 	.word	0x40004800

08002c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c6e:	4b26      	ldr	r3, [pc, #152]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a25      	ldr	r2, [pc, #148]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <MX_DMA_Init+0xa0>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	200c      	movs	r0, #12
 8002ca4:	f007 fb00 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ca8:	200c      	movs	r0, #12
 8002caa:	f007 fb19 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2105      	movs	r1, #5
 8002cb2:	200e      	movs	r0, #14
 8002cb4:	f007 faf8 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002cb8:	200e      	movs	r0, #14
 8002cba:	f007 fb11 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	2010      	movs	r0, #16
 8002cc4:	f007 faf0 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cc8:	2010      	movs	r0, #16
 8002cca:	f007 fb09 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	2011      	movs	r0, #17
 8002cd4:	f007 fae8 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002cd8:	2011      	movs	r0, #17
 8002cda:	f007 fb01 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2105      	movs	r1, #5
 8002ce2:	2038      	movs	r0, #56	@ 0x38
 8002ce4:	f007 fae0 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ce8:	2038      	movs	r0, #56	@ 0x38
 8002cea:	f007 faf9 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	2039      	movs	r0, #57	@ 0x39
 8002cf4:	f007 fad8 	bl	800a2a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002cf8:	2039      	movs	r0, #57	@ 0x39
 8002cfa:	f007 faf1 	bl	800a2e0 <HAL_NVIC_EnableIRQ>

}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	@ 0x38
 8002d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	4b8f      	ldr	r3, [pc, #572]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a8e      	ldr	r2, [pc, #568]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	4b89      	ldr	r3, [pc, #548]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	4a88      	ldr	r2, [pc, #544]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d46:	4b86      	ldr	r3, [pc, #536]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d52:	4b83      	ldr	r3, [pc, #524]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a82      	ldr	r2, [pc, #520]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d58:	f043 0320 	orr.w	r3, r3, #32
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b80      	ldr	r3, [pc, #512]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b7a      	ldr	r3, [pc, #488]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b77      	ldr	r3, [pc, #476]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a76      	ldr	r2, [pc, #472]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b74      	ldr	r3, [pc, #464]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	4b71      	ldr	r3, [pc, #452]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a70      	ldr	r2, [pc, #448]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db2:	4b6b      	ldr	r3, [pc, #428]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4a6a      	ldr	r2, [pc, #424]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbe:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dca:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	4a64      	ldr	r2, [pc, #400]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd6:	4b62      	ldr	r3, [pc, #392]	@ (8002f60 <MX_GPIO_Init+0x254>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TFT_BL_Pin|TFT_CS_Pin|RELAY_1_Pin|MOTOR6_A_Pin
 8002de2:	2200      	movs	r2, #0
 8002de4:	f648 3198 	movw	r1, #35736	@ 0x8b98
 8002de8:	485e      	ldr	r0, [pc, #376]	@ (8002f64 <MX_GPIO_Init+0x258>)
 8002dea:	f008 f855 	bl	800ae98 <HAL_GPIO_WritePin>
                          |RELAY_5_Pin|RELAY_6_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|MOTOR5_B_Pin|MOTOR5_A_Pin|TFT_DC_Pin
 8002dee:	2200      	movs	r2, #0
 8002df0:	f244 51b8 	movw	r1, #17848	@ 0x45b8
 8002df4:	485c      	ldr	r0, [pc, #368]	@ (8002f68 <MX_GPIO_Init+0x25c>)
 8002df6:	f008 f84f 	bl	800ae98 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin|MOTOR6_B_Pin|RELAY_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR4_B_GPIO_Port, MOTOR4_B_Pin, GPIO_PIN_RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	485b      	ldr	r0, [pc, #364]	@ (8002f6c <MX_GPIO_Init+0x260>)
 8002e00:	f008 f84a 	bl	800ae98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_USER_LED_Pin|MOTOR3_B_Pin|MOTOR3_A_Pin|MOTOR2_B_Pin
 8002e04:	2200      	movs	r2, #0
 8002e06:	f643 0187 	movw	r1, #14471	@ 0x3887
 8002e0a:	4859      	ldr	r0, [pc, #356]	@ (8002f70 <MX_GPIO_Init+0x264>)
 8002e0c:	f008 f844 	bl	800ae98 <HAL_GPIO_WritePin>
                          |MOTOR2_A_Pin|MOTOR4_A_Pin|blue_user_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002e16:	4857      	ldr	r0, [pc, #348]	@ (8002f74 <MX_GPIO_Init+0x268>)
 8002e18:	f008 f83e 	bl	800ae98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIPSELECT_Pin|MOTOR1_B_Pin|MOTOR1_A_Pin, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002e22:	4855      	ldr	r0, [pc, #340]	@ (8002f78 <MX_GPIO_Init+0x26c>)
 8002e24:	f008 f838 	bl	800ae98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_BL_Pin TFT_CS_Pin RELAY_1_Pin MOTOR6_A_Pin
                           RELAY_5_Pin RELAY_6_Pin PE15 */
  GPIO_InitStruct.Pin = TFT_BL_Pin|TFT_CS_Pin|RELAY_1_Pin|MOTOR6_A_Pin
 8002e28:	f648 3398 	movw	r3, #35736	@ 0x8b98
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |RELAY_5_Pin|RELAY_6_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4848      	ldr	r0, [pc, #288]	@ (8002f64 <MX_GPIO_Init+0x258>)
 8002e42:	f007 fe65 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4843      	ldr	r0, [pc, #268]	@ (8002f6c <MX_GPIO_Init+0x260>)
 8002e5e:	f007 fe57 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 MOTOR5_B_Pin MOTOR5_A_Pin TFT_DC_Pin
                           TFT_RST_Pin MOTOR6_B_Pin RELAY_4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR5_B_Pin|MOTOR5_A_Pin|TFT_DC_Pin
 8002e62:	f244 53b8 	movw	r3, #17848	@ 0x45b8
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
                          |TFT_RST_Pin|MOTOR6_B_Pin|RELAY_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e78:	4619      	mov	r1, r3
 8002e7a:	483b      	ldr	r0, [pc, #236]	@ (8002f68 <MX_GPIO_Init+0x25c>)
 8002e7c:	f007 fe48 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_UP2_Pin Switch_BALL1_Pin Switch_DOWN2_Pin */
  GPIO_InitStruct.Pin = Switch_UP2_Pin|Switch_BALL1_Pin|Switch_DOWN2_Pin;
 8002e80:	f640 0303 	movw	r3, #2051	@ 0x803
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e92:	4619      	mov	r1, r3
 8002e94:	4835      	ldr	r0, [pc, #212]	@ (8002f6c <MX_GPIO_Init+0x260>)
 8002e96:	f007 fe3b 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_BALL2_Pin */
  GPIO_InitStruct.Pin = Switch_BALL2_Pin;
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Switch_BALL2_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4832      	ldr	r0, [pc, #200]	@ (8002f78 <MX_GPIO_Init+0x26c>)
 8002eae:	f007 fe2f 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR4_B_Pin */
  GPIO_InitStruct.Pin = MOTOR4_B_Pin;
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MOTOR4_B_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4828      	ldr	r0, [pc, #160]	@ (8002f6c <MX_GPIO_Init+0x260>)
 8002eca:	f007 fe21 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_USER_LED_Pin MOTOR3_B_Pin MOTOR3_A_Pin MOTOR2_B_Pin
                           MOTOR2_A_Pin MOTOR4_A_Pin blue_user_led_Pin */
  GPIO_InitStruct.Pin = GREEN_USER_LED_Pin|MOTOR3_B_Pin|MOTOR3_A_Pin|MOTOR2_B_Pin
 8002ece:	f643 0387 	movw	r3, #14471	@ 0x3887
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR2_A_Pin|MOTOR4_A_Pin|blue_user_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4822      	ldr	r0, [pc, #136]	@ (8002f70 <MX_GPIO_Init+0x264>)
 8002ee8:	f007 fe12 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_2_Pin|RELAY_3_Pin;
 8002eec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	481b      	ldr	r0, [pc, #108]	@ (8002f74 <MX_GPIO_Init+0x268>)
 8002f06:	f007 fe03 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_UP1_Pin */
  GPIO_InitStruct.Pin = Switch_UP1_Pin;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Switch_UP1_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4817      	ldr	r0, [pc, #92]	@ (8002f7c <MX_GPIO_Init+0x270>)
 8002f1e:	f007 fdf7 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIPSELECT_Pin MOTOR1_B_Pin MOTOR1_A_Pin */
  GPIO_InitStruct.Pin = SPI_CHIPSELECT_Pin|MOTOR1_B_Pin|MOTOR1_A_Pin;
 8002f22:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480f      	ldr	r0, [pc, #60]	@ (8002f78 <MX_GPIO_Init+0x26c>)
 8002f3c:	f007 fde8 	bl	800ab10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_DOWN1_Pin PD3 */
  GPIO_InitStruct.Pin = Switch_DOWN1_Pin|GPIO_PIN_3;
 8002f40:	230c      	movs	r3, #12
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f50:	4619      	mov	r1, r3
 8002f52:	4808      	ldr	r0, [pc, #32]	@ (8002f74 <MX_GPIO_Init+0x268>)
 8002f54:	f007 fddc 	bl	800ab10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f58:	bf00      	nop
 8002f5a:	3738      	adds	r7, #56	@ 0x38
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40021800 	.word	0x40021800

08002f80 <motor_speed>:
        flag[3] = 1;
    } else {
        flag[3] = 0;
    }
}
void motor_speed(){
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
	int pos1=0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
	int pos2=0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
	int pos3=0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
	int pos4=0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e022      	b.n	8002fe2 <motor_speed+0x62>
		pos1 += oldpos_1[i];
 8002f9c:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <motor_speed+0xc4>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
		pos2 += oldpos_2[i];
 8002fac:	4a26      	ldr	r2, [pc, #152]	@ (8003048 <motor_speed+0xc8>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
		pos3 += oldpos_3[i];
 8002fbc:	4a23      	ldr	r2, [pc, #140]	@ (800304c <motor_speed+0xcc>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
		pos4 += oldpos_4[i];
 8002fcc:	4a20      	ldr	r2, [pc, #128]	@ (8003050 <motor_speed+0xd0>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	ddd9      	ble.n	8002f9c <motor_speed+0x1c>
	}
	M1.en_speed = pos1/10;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <motor_speed+0xd4>)
 8002fec:	fb82 1203 	smull	r1, r2, r2, r3
 8002ff0:	1092      	asrs	r2, r2, #2
 8002ff2:	17db      	asrs	r3, r3, #31
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b21a      	sxth	r2, r3
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <motor_speed+0xd8>)
 8002ffa:	809a      	strh	r2, [r3, #4]
	M2.en_speed = pos2/10;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <motor_speed+0xd4>)
 8003000:	fb82 1203 	smull	r1, r2, r2, r3
 8003004:	1092      	asrs	r2, r2, #2
 8003006:	17db      	asrs	r3, r3, #31
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	b21a      	sxth	r2, r3
 800300c:	4b13      	ldr	r3, [pc, #76]	@ (800305c <motor_speed+0xdc>)
 800300e:	809a      	strh	r2, [r3, #4]
	M3.en_speed = pos3/10;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a10      	ldr	r2, [pc, #64]	@ (8003054 <motor_speed+0xd4>)
 8003014:	fb82 1203 	smull	r1, r2, r2, r3
 8003018:	1092      	asrs	r2, r2, #2
 800301a:	17db      	asrs	r3, r3, #31
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	b21a      	sxth	r2, r3
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <motor_speed+0xe0>)
 8003022:	809a      	strh	r2, [r3, #4]
	M4.en_speed = pos4/10;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <motor_speed+0xd4>)
 8003028:	fb82 1203 	smull	r1, r2, r2, r3
 800302c:	1092      	asrs	r2, r2, #2
 800302e:	17db      	asrs	r3, r3, #31
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b21a      	sxth	r2, r3
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <motor_speed+0xe4>)
 8003036:	809a      	strh	r2, [r3, #4]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	20000c30 	.word	0x20000c30
 8003048:	20000c44 	.word	0x20000c44
 800304c:	20000c58 	.word	0x20000c58
 8003050:	20000c6c 	.word	0x20000c6c
 8003054:	66666667 	.word	0x66666667
 8003058:	20000d8c 	.word	0x20000d8c
 800305c:	20000d94 	.word	0x20000d94
 8003060:	20000d9c 	.word	0x20000d9c
 8003064:	20000da4 	.word	0x20000da4

08003068 <motor1>:
void motor1(){
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	if(left_front>0){
 800306c:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <motor1+0x7c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	dd10      	ble.n	8003096 <motor1+0x2e>
		HAL_GPIO_WritePin(motor1_a, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800307a:	481b      	ldr	r0, [pc, #108]	@ (80030e8 <motor1+0x80>)
 800307c:	f007 ff0c 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 1);
 8003080:	2201      	movs	r2, #1
 8003082:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003086:	4818      	ldr	r0, [pc, #96]	@ (80030e8 <motor1+0x80>)
 8003088:	f007 ff06 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 800308c:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <motor1+0x84>)
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	4b17      	ldr	r3, [pc, #92]	@ (80030f0 <motor1+0x88>)
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40
	else{
		HAL_GPIO_WritePin(motor1_a, 0);
		HAL_GPIO_WritePin(motor1_b, 0);
		TIM3->CCR4=lf;
	}
}
 8003094:	e024      	b.n	80030e0 <motor1+0x78>
	else if(left_front<0){
 8003096:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <motor1+0x7c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da10      	bge.n	80030c0 <motor1+0x58>
		HAL_GPIO_WritePin(motor1_a, 1);
 800309e:	2201      	movs	r2, #1
 80030a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030a4:	4810      	ldr	r0, [pc, #64]	@ (80030e8 <motor1+0x80>)
 80030a6:	f007 fef7 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030b0:	480d      	ldr	r0, [pc, #52]	@ (80030e8 <motor1+0x80>)
 80030b2:	f007 fef1 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <motor1+0x84>)
 80030b8:	881a      	ldrh	r2, [r3, #0]
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <motor1+0x88>)
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030be:	e00f      	b.n	80030e0 <motor1+0x78>
		HAL_GPIO_WritePin(motor1_a, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030c6:	4808      	ldr	r0, [pc, #32]	@ (80030e8 <motor1+0x80>)
 80030c8:	f007 fee6 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030d2:	4805      	ldr	r0, [pc, #20]	@ (80030e8 <motor1+0x80>)
 80030d4:	f007 fee0 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR4=lf;
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <motor1+0x84>)
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <motor1+0x88>)
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000c90 	.word	0x20000c90
 80030e8:	40020000 	.word	0x40020000
 80030ec:	20000c1a 	.word	0x20000c1a
 80030f0:	40000400 	.word	0x40000400

080030f4 <motor2>:

void motor2(){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	if(left_back>0){
 80030f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <motor2+0x7c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	dd10      	ble.n	8003122 <motor2+0x2e>
		HAL_GPIO_WritePin(motor2_a, 0);
 8003100:	2200      	movs	r2, #0
 8003102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003106:	481b      	ldr	r0, [pc, #108]	@ (8003174 <motor2+0x80>)
 8003108:	f007 fec6 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 1);
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003112:	4818      	ldr	r0, [pc, #96]	@ (8003174 <motor2+0x80>)
 8003114:	f007 fec0 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 8003118:	4b17      	ldr	r3, [pc, #92]	@ (8003178 <motor2+0x84>)
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	4b17      	ldr	r3, [pc, #92]	@ (800317c <motor2+0x88>)
 800311e:	63da      	str	r2, [r3, #60]	@ 0x3c
	else{
		HAL_GPIO_WritePin(motor2_a, 0);
		HAL_GPIO_WritePin(motor2_b, 0);
		TIM3->CCR3=lb;
	}
}
 8003120:	e024      	b.n	800316c <motor2+0x78>
	else if(left_back<0){
 8003122:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <motor2+0x7c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da10      	bge.n	800314c <motor2+0x58>
		HAL_GPIO_WritePin(motor2_a, 1);
 800312a:	2201      	movs	r2, #1
 800312c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003130:	4810      	ldr	r0, [pc, #64]	@ (8003174 <motor2+0x80>)
 8003132:	f007 feb1 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800313c:	480d      	ldr	r0, [pc, #52]	@ (8003174 <motor2+0x80>)
 800313e:	f007 feab 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <motor2+0x84>)
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <motor2+0x88>)
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800314a:	e00f      	b.n	800316c <motor2+0x78>
		HAL_GPIO_WritePin(motor2_a, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003152:	4808      	ldr	r0, [pc, #32]	@ (8003174 <motor2+0x80>)
 8003154:	f007 fea0 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800315e:	4805      	ldr	r0, [pc, #20]	@ (8003174 <motor2+0x80>)
 8003160:	f007 fe9a 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR3=lb;
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <motor2+0x84>)
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <motor2+0x88>)
 800316a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000c94 	.word	0x20000c94
 8003174:	40020400 	.word	0x40020400
 8003178:	20000c1c 	.word	0x20000c1c
 800317c:	40000400 	.word	0x40000400

08003180 <motor3>:

void motor3(){
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	if(right_front>0){
 8003184:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <motor3+0x70>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dd0e      	ble.n	80031aa <motor3+0x2a>
		HAL_GPIO_WritePin(motor3_a, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2104      	movs	r1, #4
 8003190:	4818      	ldr	r0, [pc, #96]	@ (80031f4 <motor3+0x74>)
 8003192:	f007 fe81 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 1);
 8003196:	2201      	movs	r2, #1
 8003198:	2102      	movs	r1, #2
 800319a:	4816      	ldr	r0, [pc, #88]	@ (80031f4 <motor3+0x74>)
 800319c:	f007 fe7c 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 80031a0:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <motor3+0x78>)
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <motor3+0x7c>)
 80031a6:	639a      	str	r2, [r3, #56]	@ 0x38
	else{
		HAL_GPIO_WritePin(motor3_a, 0);
		HAL_GPIO_WritePin(motor3_b, 0);
		TIM3->CCR2=rf;
	}
}
 80031a8:	e020      	b.n	80031ec <motor3+0x6c>
	else if(right_front<0){
 80031aa:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <motor3+0x70>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0e      	bge.n	80031d0 <motor3+0x50>
		HAL_GPIO_WritePin(motor3_a, 1);
 80031b2:	2201      	movs	r2, #1
 80031b4:	2104      	movs	r1, #4
 80031b6:	480f      	ldr	r0, [pc, #60]	@ (80031f4 <motor3+0x74>)
 80031b8:	f007 fe6e 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2102      	movs	r1, #2
 80031c0:	480c      	ldr	r0, [pc, #48]	@ (80031f4 <motor3+0x74>)
 80031c2:	f007 fe69 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <motor3+0x78>)
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <motor3+0x7c>)
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80031ce:	e00d      	b.n	80031ec <motor3+0x6c>
		HAL_GPIO_WritePin(motor3_a, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2104      	movs	r1, #4
 80031d4:	4807      	ldr	r0, [pc, #28]	@ (80031f4 <motor3+0x74>)
 80031d6:	f007 fe5f 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2102      	movs	r1, #2
 80031de:	4805      	ldr	r0, [pc, #20]	@ (80031f4 <motor3+0x74>)
 80031e0:	f007 fe5a 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR2=rf;
 80031e4:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <motor3+0x78>)
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <motor3+0x7c>)
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000c98 	.word	0x20000c98
 80031f4:	40020400 	.word	0x40020400
 80031f8:	20000c1e 	.word	0x20000c1e
 80031fc:	40000400 	.word	0x40000400

08003200 <motor4>:

void motor4(){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	if(right_back>0){
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <motor4+0x78>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	dd0f      	ble.n	800322c <motor4+0x2c>
		HAL_GPIO_WritePin(motor4_a, 1);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003212:	481a      	ldr	r0, [pc, #104]	@ (800327c <motor4+0x7c>)
 8003214:	f007 fe40 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2110      	movs	r1, #16
 800321c:	4818      	ldr	r0, [pc, #96]	@ (8003280 <motor4+0x80>)
 800321e:	f007 fe3b 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 8003222:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <motor4+0x84>)
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <motor4+0x88>)
 8003228:	635a      	str	r2, [r3, #52]	@ 0x34
	else{
		HAL_GPIO_WritePin(motor4_a, 0);
		HAL_GPIO_WritePin(motor4_b, 0);
		TIM3->CCR1=rb;
	}
}
 800322a:	e022      	b.n	8003272 <motor4+0x72>
	else if(right_back<0){
 800322c:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <motor4+0x78>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da0f      	bge.n	8003254 <motor4+0x54>
		HAL_GPIO_WritePin(motor4_a, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800323a:	4810      	ldr	r0, [pc, #64]	@ (800327c <motor4+0x7c>)
 800323c:	f007 fe2c 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 1);
 8003240:	2201      	movs	r2, #1
 8003242:	2110      	movs	r1, #16
 8003244:	480e      	ldr	r0, [pc, #56]	@ (8003280 <motor4+0x80>)
 8003246:	f007 fe27 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <motor4+0x84>)
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <motor4+0x88>)
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003252:	e00e      	b.n	8003272 <motor4+0x72>
		HAL_GPIO_WritePin(motor4_a, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800325a:	4808      	ldr	r0, [pc, #32]	@ (800327c <motor4+0x7c>)
 800325c:	f007 fe1c 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2110      	movs	r1, #16
 8003264:	4806      	ldr	r0, [pc, #24]	@ (8003280 <motor4+0x80>)
 8003266:	f007 fe17 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR1=rb;
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <motor4+0x84>)
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <motor4+0x88>)
 8003270:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000c9c 	.word	0x20000c9c
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	20000c20 	.word	0x20000c20
 8003288:	40000400 	.word	0x40000400

0800328c <turn>:

/*************************************************************************************/

void turn(){
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	if(r>0){
 8003290:	4b52      	ldr	r3, [pc, #328]	@ (80033dc <turn+0x150>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dd4d      	ble.n	8003334 <turn+0xa8>
		HAL_GPIO_WritePin(motor1_a, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800329e:	4850      	ldr	r0, [pc, #320]	@ (80033e0 <turn+0x154>)
 80032a0:	f007 fdfa 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032aa:	484d      	ldr	r0, [pc, #308]	@ (80033e0 <turn+0x154>)
 80032ac:	f007 fdf4 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR4= abs(r);
 80032b0:	4b4a      	ldr	r3, [pc, #296]	@ (80033dc <turn+0x150>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032bc:	4b49      	ldr	r3, [pc, #292]	@ (80033e4 <turn+0x158>)
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(motor2_a, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032c6:	4848      	ldr	r0, [pc, #288]	@ (80033e8 <turn+0x15c>)
 80032c8:	f007 fde6 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 1);
 80032cc:	2201      	movs	r2, #1
 80032ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032d2:	4845      	ldr	r0, [pc, #276]	@ (80033e8 <turn+0x15c>)
 80032d4:	f007 fde0 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR3= abs(r);
 80032d8:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <turn+0x150>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032e0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032e4:	4b3f      	ldr	r3, [pc, #252]	@ (80033e4 <turn+0x158>)
 80032e6:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(motor3_a, 1);
 80032e8:	2201      	movs	r2, #1
 80032ea:	2104      	movs	r1, #4
 80032ec:	483e      	ldr	r0, [pc, #248]	@ (80033e8 <turn+0x15c>)
 80032ee:	f007 fdd3 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2102      	movs	r1, #2
 80032f6:	483c      	ldr	r0, [pc, #240]	@ (80033e8 <turn+0x15c>)
 80032f8:	f007 fdce 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR2= abs(r);
 80032fc:	4b37      	ldr	r3, [pc, #220]	@ (80033dc <turn+0x150>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003304:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003308:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <turn+0x158>)
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(motor4_a, 0);
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003312:	4835      	ldr	r0, [pc, #212]	@ (80033e8 <turn+0x15c>)
 8003314:	f007 fdc0 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 1);
 8003318:	2201      	movs	r2, #1
 800331a:	2110      	movs	r1, #16
 800331c:	4833      	ldr	r0, [pc, #204]	@ (80033ec <turn+0x160>)
 800331e:	f007 fdbb 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR1= abs(r);
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <turn+0x150>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800332a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800332e:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <turn+0x158>)
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2= abs(r);
		HAL_GPIO_WritePin(motor4_a, 1);
		HAL_GPIO_WritePin(motor4_b, 0);
		TIM3->CCR1= abs(r);
	}
}
 8003332:	e050      	b.n	80033d6 <turn+0x14a>
	else if(r<0){
 8003334:	4b29      	ldr	r3, [pc, #164]	@ (80033dc <turn+0x150>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da4c      	bge.n	80033d6 <turn+0x14a>
		HAL_GPIO_WritePin(motor1_a, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003342:	4827      	ldr	r0, [pc, #156]	@ (80033e0 <turn+0x154>)
 8003344:	f007 fda8 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor1_b, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800334e:	4824      	ldr	r0, [pc, #144]	@ (80033e0 <turn+0x154>)
 8003350:	f007 fda2 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR4= abs(r);
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <turn+0x150>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800335c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003360:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <turn+0x158>)
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(motor2_a, 1);
 8003364:	2201      	movs	r2, #1
 8003366:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800336a:	481f      	ldr	r0, [pc, #124]	@ (80033e8 <turn+0x15c>)
 800336c:	f007 fd94 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_b, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003376:	481c      	ldr	r0, [pc, #112]	@ (80033e8 <turn+0x15c>)
 8003378:	f007 fd8e 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR3= abs(r);
 800337c:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <turn+0x150>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003384:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <turn+0x158>)
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(motor3_a, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	4815      	ldr	r0, [pc, #84]	@ (80033e8 <turn+0x15c>)
 8003392:	f007 fd81 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor3_b, 1);
 8003396:	2201      	movs	r2, #1
 8003398:	2102      	movs	r1, #2
 800339a:	4813      	ldr	r0, [pc, #76]	@ (80033e8 <turn+0x15c>)
 800339c:	f007 fd7c 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR2= abs(r);
 80033a0:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <turn+0x150>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033ac:	4b0d      	ldr	r3, [pc, #52]	@ (80033e4 <turn+0x158>)
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(motor4_a, 1);
 80033b0:	2201      	movs	r2, #1
 80033b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033b6:	480c      	ldr	r0, [pc, #48]	@ (80033e8 <turn+0x15c>)
 80033b8:	f007 fd6e 	bl	800ae98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor4_b, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2110      	movs	r1, #16
 80033c0:	480a      	ldr	r0, [pc, #40]	@ (80033ec <turn+0x160>)
 80033c2:	f007 fd69 	bl	800ae98 <HAL_GPIO_WritePin>
		TIM3->CCR1= abs(r);
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <turn+0x150>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033ce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <turn+0x158>)
 80033d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000c88 	.word	0x20000c88
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800

080033f0 <yvj_ergeh>:

/*******************************************************************************/

void yvj_ergeh(){
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	if(r<0){
 80033f4:	4b50      	ldr	r3, [pc, #320]	@ (8003538 <yvj_ergeh+0x148>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da47      	bge.n	800348c <yvj_ergeh+0x9c>
		lf = abs(left_front+r*1.5);
 80033fc:	4b4f      	ldr	r3, [pc, #316]	@ (800353c <yvj_ergeh+0x14c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd f8af 	bl	8000564 <__aeabi_i2d>
 8003406:	4604      	mov	r4, r0
 8003408:	460d      	mov	r5, r1
 800340a:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <yvj_ergeh+0x148>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f8a8 	bl	8000564 <__aeabi_i2d>
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b49      	ldr	r3, [pc, #292]	@ (8003540 <yvj_ergeh+0x150>)
 800341a:	f7fd f90d 	bl	8000638 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff51 	bl	80002cc <__adddf3>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	f7fd fb13 	bl	8000a5c <__aeabi_d2iz>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	bfb8      	it	lt
 800343c:	425b      	neglt	r3, r3
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <yvj_ergeh+0x154>)
 8003442:	801a      	strh	r2, [r3, #0]
		lb = abs(left_back+r*1.5);
 8003444:	4b40      	ldr	r3, [pc, #256]	@ (8003548 <yvj_ergeh+0x158>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f88b 	bl	8000564 <__aeabi_i2d>
 800344e:	4604      	mov	r4, r0
 8003450:	460d      	mov	r5, r1
 8003452:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <yvj_ergeh+0x148>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f884 	bl	8000564 <__aeabi_i2d>
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <yvj_ergeh+0x150>)
 8003462:	f7fd f8e9 	bl	8000638 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fc ff2d 	bl	80002cc <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd faef 	bl	8000a5c <__aeabi_d2iz>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	bfb8      	it	lt
 8003484:	425b      	neglt	r3, r3
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b30      	ldr	r3, [pc, #192]	@ (800354c <yvj_ergeh+0x15c>)
 800348a:	801a      	strh	r2, [r3, #0]
	}
	if(r>0){
 800348c:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <yvj_ergeh+0x148>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	dd47      	ble.n	8003524 <yvj_ergeh+0x134>
		rf = abs(right_front-r*1.5);
 8003494:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <yvj_ergeh+0x160>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f863 	bl	8000564 <__aeabi_i2d>
 800349e:	4604      	mov	r4, r0
 80034a0:	460d      	mov	r5, r1
 80034a2:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <yvj_ergeh+0x148>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f85c 	bl	8000564 <__aeabi_i2d>
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <yvj_ergeh+0x150>)
 80034b2:	f7fd f8c1 	bl	8000638 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fc ff03 	bl	80002c8 <__aeabi_dsub>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd fac7 	bl	8000a5c <__aeabi_d2iz>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bfb8      	it	lt
 80034d4:	425b      	neglt	r3, r3
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <yvj_ergeh+0x164>)
 80034da:	801a      	strh	r2, [r3, #0]
		rb = abs(right_back-r*1.5);
 80034dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <yvj_ergeh+0x168>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f83f 	bl	8000564 <__aeabi_i2d>
 80034e6:	4604      	mov	r4, r0
 80034e8:	460d      	mov	r5, r1
 80034ea:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <yvj_ergeh+0x148>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f838 	bl	8000564 <__aeabi_i2d>
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <yvj_ergeh+0x150>)
 80034fa:	f7fd f89d 	bl	8000638 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f7fc fedf 	bl	80002c8 <__aeabi_dsub>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7fd faa3 	bl	8000a5c <__aeabi_d2iz>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	425b      	neglt	r3, r3
 800351e:	b29a      	uxth	r2, r3
 8003520:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <yvj_ergeh+0x16c>)
 8003522:	801a      	strh	r2, [r3, #0]
	}
	motor1();
 8003524:	f7ff fda0 	bl	8003068 <motor1>
	motor2();
 8003528:	f7ff fde4 	bl	80030f4 <motor2>
	motor3();
 800352c:	f7ff fe28 	bl	8003180 <motor3>
	motor4();
 8003530:	f7ff fe66 	bl	8003200 <motor4>
}
 8003534:	bf00      	nop
 8003536:	bdb0      	pop	{r4, r5, r7, pc}
 8003538:	20000c88 	.word	0x20000c88
 800353c:	20000c90 	.word	0x20000c90
 8003540:	3ff80000 	.word	0x3ff80000
 8003544:	20000c1a 	.word	0x20000c1a
 8003548:	20000c94 	.word	0x20000c94
 800354c:	20000c1c 	.word	0x20000c1c
 8003550:	20000c98 	.word	0x20000c98
 8003554:	20000c1e 	.word	0x20000c1e
 8003558:	20000c9c 	.word	0x20000c9c
 800355c:	20000c20 	.word	0x20000c20

08003560 <HAL_CAN_RxFifo0MsgPendingCallback>:
int GetPos_M5(){
	return M_can_pos/1000;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK){
 8003568:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800356a:	4a32      	ldr	r2, [pc, #200]	@ (8003634 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800356c:	2100      	movs	r1, #0
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f006 fa7a 	bl	8009a68 <HAL_CAN_GetRxMessage>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d152      	bne.n	8003620 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
		if(rxHeader.StdId == 0x201){
 800357a:	4b2e      	ldr	r3, [pc, #184]	@ (8003634 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f240 2201 	movw	r2, #513	@ 0x201
 8003582:	4293      	cmp	r3, r2
 8003584:	d14c      	bne.n	8003620 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
			int can_prev_time=can_time;
 8003586:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
			can_time=HAL_GetTick();
 800358c:	f005 ff28 	bl	80093e0 <HAL_GetTick>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8003596:	601a      	str	r2, [r3, #0]
			double delta_time=can_time-can_prev_time;
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffdf 	bl	8000564 <__aeabi_i2d>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
			can_flag=1;
 80035ae:	4b23      	ldr	r3, [pc, #140]	@ (800363c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
//			if(i < 100000){
//				i++;
//			}else{
//				i=0;
//			}
			M5.en_speed = RxData[2] << 8;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80035be:	809a      	strh	r2, [r3, #4]
			M5.en_speed = M5.en_speed  + RxData[3];
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80035c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4a19      	ldr	r2, [pc, #100]	@ (8003630 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80035ca:	78d2      	ldrb	r2, [r2, #3]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80035d4:	809a      	strh	r2, [r3, #4]
			delta_time=delta_time*M5.en_speed;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80035d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffc1 	bl	8000564 <__aeabi_i2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f7fd f825 	bl	8000638 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
//			speed = speed * 1.5;ss
			M_can_pos=M_can_pos+(delta_time/198);
 80035f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8003628 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003600:	f7fd f944 	bl	800088c <__aeabi_ddiv>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fc fe5b 	bl	80002cc <__adddf3>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	490a      	ldr	r1, [pc, #40]	@ (8003644 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800361c:	e9c1 2300 	strd	r2, r3, [r1]
//			HAL_GetTick();
		}
	}

}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00000000 	.word	0x00000000
 800362c:	4068c000 	.word	0x4068c000
 8003630:	20000db4 	.word	0x20000db4
 8003634:	20000534 	.word	0x20000534
 8003638:	20000cd0 	.word	0x20000cd0
 800363c:	20000ccc 	.word	0x20000ccc
 8003640:	20000dac 	.word	0x20000dac
 8003644:	20000cd8 	.word	0x20000cd8

08003648 <can_transmit>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1){
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
 8003654:	4613      	mov	r3, r2
 8003656:	803b      	strh	r3, [r7, #0]
    CAN_TxHeaderTypeDef tx_header;
    uint8_t             data[8];
    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	61bb      	str	r3, [r7, #24]
    tx_header.IDE   = CAN_ID_STD;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
    tx_header.RTR   = CAN_RTR_DATA;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.DLC   = CAN_DATA_SIZE;
 8003664:	2308      	movs	r3, #8
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28
    tx_header.TransmitGlobalTime = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    data[0] = msg1 >> 8;
 800366e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003672:	121b      	asrs	r3, r3, #8
 8003674:	b21b      	sxth	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	743b      	strb	r3, [r7, #16]
    data[1] = msg1;
 800367a:	883b      	ldrh	r3, [r7, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	747b      	strb	r3, [r7, #17]
    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	f107 0118 	add.w	r1, r7, #24
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f006 f8f7 	bl	8009880 <HAL_CAN_AddTxMessage>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <can_transmit+0x62>
    	while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8003698:	bf00      	nop
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f006 f9be 	bl	8009a20 <HAL_CAN_IsTxMessagePending>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f7      	bne.n	800369a <can_transmit+0x52>
//    	Error_Handler();
    }
}
 80036aa:	bf00      	nop
 80036ac:	3730      	adds	r7, #48	@ 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <Joystick_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Joystick_task */
void Joystick_task(void const * argument)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
//		M3.setpoint=ML;
//		M4.setpoint=MR;
//		if(can_flag==1){
//			can_flag=0;
//			can_transmit(&hcan1, FIRST_GROUP_ID, 0);
	  M_can_target=0;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <Joystick_task+0x3c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 80036c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036c6:	f00b fd9f 	bl	800f208 <osDelay>
	  M_can_target=-11;
 80036ca:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <Joystick_task+0x3c>)
 80036cc:	f06f 020a 	mvn.w	r2, #10
 80036d0:	601a      	str	r2, [r3, #0]
	  osDelay(5000);
 80036d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80036d6:	f00b fd97 	bl	800f208 <osDelay>
	  M_can_target=-6;
 80036da:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <Joystick_task+0x3c>)
 80036dc:	f06f 0205 	mvn.w	r2, #5
 80036e0:	601a      	str	r2, [r3, #0]
	  osDelay(5000);
 80036e2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80036e6:	f00b fd8f 	bl	800f208 <osDelay>
	  M_can_target=0;
 80036ea:	bf00      	nop
 80036ec:	e7e6      	b.n	80036bc <Joystick_task+0x8>
 80036ee:	bf00      	nop
 80036f0:	20000ce0 	.word	0x20000ce0

080036f4 <Ball_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ball_task */
void Ball_task(void const * argument)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ball_task */
  /* Infinite loop */
  for(;;)
  {
 	      if (Ball_switch1 != switchStatePrev_3) {
 80036fc:	2102      	movs	r1, #2
 80036fe:	484d      	ldr	r0, [pc, #308]	@ (8003834 <Ball_task+0x140>)
 8003700:	f007 fbb2 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <Ball_task+0x144>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d010      	beq.n	8003732 <Ball_task+0x3e>
 	          if (Ball_switch1 == GPIO_PIN_SET) {
 8003710:	2102      	movs	r1, #2
 8003712:	4848      	ldr	r0, [pc, #288]	@ (8003834 <Ball_task+0x140>)
 8003714:	f007 fba8 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d103      	bne.n	8003726 <Ball_task+0x32>
 	              ff[2]=0;
 800371e:	4b47      	ldr	r3, [pc, #284]	@ (800383c <Ball_task+0x148>)
 8003720:	2200      	movs	r2, #0
 8003722:	709a      	strb	r2, [r3, #2]
 8003724:	e005      	b.n	8003732 <Ball_task+0x3e>
 	          } else {
 	              ff[2]++;
 8003726:	4b45      	ldr	r3, [pc, #276]	@ (800383c <Ball_task+0x148>)
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	3301      	adds	r3, #1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4b43      	ldr	r3, [pc, #268]	@ (800383c <Ball_task+0x148>)
 8003730:	709a      	strb	r2, [r3, #2]
 	          }
 	      }
 	      if (ff[2] != 0) {
 8003732:	4b42      	ldr	r3, [pc, #264]	@ (800383c <Ball_task+0x148>)
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <Ball_task+0x4c>
 	          flag[2] = 2;
 800373a:	4b41      	ldr	r3, [pc, #260]	@ (8003840 <Ball_task+0x14c>)
 800373c:	2202      	movs	r2, #2
 800373e:	709a      	strb	r2, [r3, #2]
 	      }
 	      if (Ball_switch2 != switchStatePrev_4) {
 8003740:	2110      	movs	r1, #16
 8003742:	4840      	ldr	r0, [pc, #256]	@ (8003844 <Ball_task+0x150>)
 8003744:	f007 fb90 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4b3e      	ldr	r3, [pc, #248]	@ (8003848 <Ball_task+0x154>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d010      	beq.n	8003776 <Ball_task+0x82>
 	          if (Ball_switch2 == GPIO_PIN_SET) {
 8003754:	2110      	movs	r1, #16
 8003756:	483b      	ldr	r0, [pc, #236]	@ (8003844 <Ball_task+0x150>)
 8003758:	f007 fb86 	bl	800ae68 <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d103      	bne.n	800376a <Ball_task+0x76>
 	              ff[3]=0;
 8003762:	4b36      	ldr	r3, [pc, #216]	@ (800383c <Ball_task+0x148>)
 8003764:	2200      	movs	r2, #0
 8003766:	70da      	strb	r2, [r3, #3]
 8003768:	e005      	b.n	8003776 <Ball_task+0x82>
 	          } else {
 	              ff[3]++;
 800376a:	4b34      	ldr	r3, [pc, #208]	@ (800383c <Ball_task+0x148>)
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	3301      	adds	r3, #1
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b32      	ldr	r3, [pc, #200]	@ (800383c <Ball_task+0x148>)
 8003774:	70da      	strb	r2, [r3, #3]
 	          }
 	      }
 	      if (ff[3] != 0) {
 8003776:	4b31      	ldr	r3, [pc, #196]	@ (800383c <Ball_task+0x148>)
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <Ball_task+0x90>
 	          flag[3] = 2;
 800377e:	4b30      	ldr	r3, [pc, #192]	@ (8003840 <Ball_task+0x14c>)
 8003780:	2202      	movs	r2, #2
 8003782:	70da      	strb	r2, [r3, #3]
 	      }
 	      if(((Ball_switch1 == 1) || (Ball_switch2 == 1)) && (RX[6] > 240)){
 8003784:	2102      	movs	r1, #2
 8003786:	482b      	ldr	r0, [pc, #172]	@ (8003834 <Ball_task+0x140>)
 8003788:	f007 fb6e 	bl	800ae68 <HAL_GPIO_ReadPin>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d006      	beq.n	80037a0 <Ball_task+0xac>
 8003792:	2110      	movs	r1, #16
 8003794:	482b      	ldr	r0, [pc, #172]	@ (8003844 <Ball_task+0x150>)
 8003796:	f007 fb67 	bl	800ae68 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d111      	bne.n	80037c4 <Ball_task+0xd0>
 80037a0:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <Ball_task+0x158>)
 80037a2:	799b      	ldrb	r3, [r3, #6]
 80037a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80037a6:	d90d      	bls.n	80037c4 <Ball_task+0xd0>
		  	TIM5->CCR3=zogs;
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <Ball_task+0x15c>)
 80037aa:	2208      	movs	r2, #8
 80037ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		  	osDelay(200);
 80037ae:	20c8      	movs	r0, #200	@ 0xc8
 80037b0:	f00b fd2a 	bl	800f208 <osDelay>
	  	  	TIM5->CCR3=uragsh;
 80037b4:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <Ball_task+0x15c>)
 80037b6:	220a      	movs	r2, #10
 80037b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, SET);
 80037ba:	2201      	movs	r2, #1
 80037bc:	2108      	movs	r1, #8
 80037be:	4825      	ldr	r0, [pc, #148]	@ (8003854 <Ball_task+0x160>)
 80037c0:	f007 fb6a 	bl	800ae98 <HAL_GPIO_WritePin>
	  	  }
 	      if(((Ball_switch1 == 0) || (Ball_switch2 == 0)) && (RX[3] == 253)){
 80037c4:	2102      	movs	r1, #2
 80037c6:	481b      	ldr	r0, [pc, #108]	@ (8003834 <Ball_task+0x140>)
 80037c8:	f007 fb4e 	bl	800ae68 <HAL_GPIO_ReadPin>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <Ball_task+0xec>
 80037d2:	2110      	movs	r1, #16
 80037d4:	481b      	ldr	r0, [pc, #108]	@ (8003844 <Ball_task+0x150>)
 80037d6:	f007 fb47 	bl	800ae68 <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <Ball_task+0xfa>
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <Ball_task+0x158>)
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	2bfd      	cmp	r3, #253	@ 0xfd
 80037e6:	d102      	bne.n	80037ee <Ball_task+0xfa>
	  	  TIM5->CCR3=zogs;
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <Ball_task+0x15c>)
 80037ea:	2208      	movs	r2, #8
 80037ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  }
	  	  if(RX[6]<10){
 80037ee:	4b17      	ldr	r3, [pc, #92]	@ (800384c <Ball_task+0x158>)
 80037f0:	799b      	ldrb	r3, [r3, #6]
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d808      	bhi.n	8003808 <Ball_task+0x114>
	  		TIM5->CCR3=zogs;
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <Ball_task+0x15c>)
 80037f8:	2208      	movs	r2, #8
 80037fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		osDelay(200);
 80037fc:	20c8      	movs	r0, #200	@ 0xc8
 80037fe:	f00b fd03 	bl	800f208 <osDelay>
	  		TIM5->CCR3=hoish;
 8003802:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <Ball_task+0x15c>)
 8003804:	2206      	movs	r2, #6
 8003806:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  }
/**********************     RELAY BOMBOG    ************************************/
	  	  if(RX[4]==251){
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <Ball_task+0x158>)
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	2bfb      	cmp	r3, #251	@ 0xfb
 800380e:	d10d      	bne.n	800382c <Ball_task+0x138>
	  		  Ball_kick;
 8003810:	2200      	movs	r2, #0
 8003812:	2108      	movs	r1, #8
 8003814:	480f      	ldr	r0, [pc, #60]	@ (8003854 <Ball_task+0x160>)
 8003816:	f007 fb3f 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  osDelay(1000);
 800381a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800381e:	f00b fcf3 	bl	800f208 <osDelay>
	  		  Ball_in;
 8003822:	2201      	movs	r2, #1
 8003824:	2108      	movs	r1, #8
 8003826:	480b      	ldr	r0, [pc, #44]	@ (8003854 <Ball_task+0x160>)
 8003828:	f007 fb36 	bl	800ae98 <HAL_GPIO_WritePin>
	  	  		  }
			  osDelay(30);
 800382c:	201e      	movs	r0, #30
 800382e:	f00b fceb 	bl	800f208 <osDelay>
 	      if (Ball_switch1 != switchStatePrev_3) {
 8003832:	e763      	b.n	80036fc <Ball_task+0x8>
 8003834:	40020800 	.word	0x40020800
 8003838:	20000cbc 	.word	0x20000cbc
 800383c:	20000e14 	.word	0x20000e14
 8003840:	20000de4 	.word	0x20000de4
 8003844:	40020000 	.word	0x40020000
 8003848:	20000cc0 	.word	0x20000cc0
 800384c:	20000c10 	.word	0x20000c10
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40021400 	.word	0x40021400

08003858 <Seedling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Seedling_task */
void Seedling_task(void const * argument)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Seedling_task */
  /* Infinite loop */
  for(;;)
  {
	 	      if (Up_switch1 != switchStatePrev_1) {
 8003860:	2104      	movs	r1, #4
 8003862:	4873      	ldr	r0, [pc, #460]	@ (8003a30 <Seedling_task+0x1d8>)
 8003864:	f007 fb00 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	4b71      	ldr	r3, [pc, #452]	@ (8003a34 <Seedling_task+0x1dc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d010      	beq.n	8003896 <Seedling_task+0x3e>
	 	          if (Up_switch1 == GPIO_PIN_SET) {
 8003874:	2104      	movs	r1, #4
 8003876:	486e      	ldr	r0, [pc, #440]	@ (8003a30 <Seedling_task+0x1d8>)
 8003878:	f007 faf6 	bl	800ae68 <HAL_GPIO_ReadPin>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d103      	bne.n	800388a <Seedling_task+0x32>
	 	              ff[0]=0;
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <Seedling_task+0x1e0>)
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e005      	b.n	8003896 <Seedling_task+0x3e>
	 	          } else {
	 	              ff[0]++;
 800388a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a38 <Seedling_task+0x1e0>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <Seedling_task+0x1e0>)
 8003894:	701a      	strb	r2, [r3, #0]
	 	          }
	 	      }
	 	      if (ff[0] != 0) {
 8003896:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <Seedling_task+0x1e0>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <Seedling_task+0x4c>
	 	          flag[0] = 2;
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <Seedling_task+0x1e4>)
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
	 	      }

	 	      if (Up_switch2 != switchStatePrev_2) {
 80038a4:	2101      	movs	r1, #1
 80038a6:	4866      	ldr	r0, [pc, #408]	@ (8003a40 <Seedling_task+0x1e8>)
 80038a8:	f007 fade 	bl	800ae68 <HAL_GPIO_ReadPin>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b64      	ldr	r3, [pc, #400]	@ (8003a44 <Seedling_task+0x1ec>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d010      	beq.n	80038da <Seedling_task+0x82>
	 	          if (Up_switch2 == GPIO_PIN_SET) {
 80038b8:	2101      	movs	r1, #1
 80038ba:	4861      	ldr	r0, [pc, #388]	@ (8003a40 <Seedling_task+0x1e8>)
 80038bc:	f007 fad4 	bl	800ae68 <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d103      	bne.n	80038ce <Seedling_task+0x76>
	 	              ff[1]=0;
 80038c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a38 <Seedling_task+0x1e0>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	705a      	strb	r2, [r3, #1]
 80038cc:	e005      	b.n	80038da <Seedling_task+0x82>
	 	          } else {
	 	              ff[1]++;
 80038ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <Seedling_task+0x1e0>)
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	3301      	adds	r3, #1
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b58      	ldr	r3, [pc, #352]	@ (8003a38 <Seedling_task+0x1e0>)
 80038d8:	705a      	strb	r2, [r3, #1]
	 	          }
	 	      }
	 	      if (ff[1] != 0) {
 80038da:	4b57      	ldr	r3, [pc, #348]	@ (8003a38 <Seedling_task+0x1e0>)
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <Seedling_task+0x90>
	 	          flag[1] = 2;
 80038e2:	4b56      	ldr	r3, [pc, #344]	@ (8003a3c <Seedling_task+0x1e4>)
 80038e4:	2202      	movs	r2, #2
 80038e6:	705a      	strb	r2, [r3, #1]
	 	      }
	 	      if (Down_switch1 != switchStatePrev_5) {
 80038e8:	2104      	movs	r1, #4
 80038ea:	4857      	ldr	r0, [pc, #348]	@ (8003a48 <Seedling_task+0x1f0>)
 80038ec:	f007 fabc 	bl	800ae68 <HAL_GPIO_ReadPin>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <Seedling_task+0x1f4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d010      	beq.n	800391e <Seedling_task+0xc6>
	 	          if (Down_switch1 == GPIO_PIN_RESET) {
 80038fc:	2104      	movs	r1, #4
 80038fe:	4852      	ldr	r0, [pc, #328]	@ (8003a48 <Seedling_task+0x1f0>)
 8003900:	f007 fab2 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <Seedling_task+0xba>
	 	              ff[4]=0;
 800390a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <Seedling_task+0x1e0>)
 800390c:	2200      	movs	r2, #0
 800390e:	711a      	strb	r2, [r3, #4]
 8003910:	e005      	b.n	800391e <Seedling_task+0xc6>
	 	          } else {
	 	              ff[4]++;
 8003912:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <Seedling_task+0x1e0>)
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	3301      	adds	r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <Seedling_task+0x1e0>)
 800391c:	711a      	strb	r2, [r3, #4]
	 	          }
	 	      }
	 	      if (ff[4] != 0) {
 800391e:	4b46      	ldr	r3, [pc, #280]	@ (8003a38 <Seedling_task+0x1e0>)
 8003920:	791b      	ldrb	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <Seedling_task+0xd4>
	 	          flag[4] = 2;
 8003926:	4b45      	ldr	r3, [pc, #276]	@ (8003a3c <Seedling_task+0x1e4>)
 8003928:	2202      	movs	r2, #2
 800392a:	711a      	strb	r2, [r3, #4]
	 	      }
	 	      if (Down_switch2 != switchStatePrev_6) {
 800392c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003930:	4843      	ldr	r0, [pc, #268]	@ (8003a40 <Seedling_task+0x1e8>)
 8003932:	f007 fa99 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4b45      	ldr	r3, [pc, #276]	@ (8003a50 <Seedling_task+0x1f8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d011      	beq.n	8003966 <Seedling_task+0x10e>
	 	          if (Down_switch2 == GPIO_PIN_RESET) {
 8003942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003946:	483e      	ldr	r0, [pc, #248]	@ (8003a40 <Seedling_task+0x1e8>)
 8003948:	f007 fa8e 	bl	800ae68 <HAL_GPIO_ReadPin>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <Seedling_task+0x102>
	 	              ff[5]=0;
 8003952:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <Seedling_task+0x1e0>)
 8003954:	2200      	movs	r2, #0
 8003956:	715a      	strb	r2, [r3, #5]
 8003958:	e005      	b.n	8003966 <Seedling_task+0x10e>
	 	          } else {
	 	              ff[5]++;
 800395a:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <Seedling_task+0x1e0>)
 800395c:	795b      	ldrb	r3, [r3, #5]
 800395e:	3301      	adds	r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b35      	ldr	r3, [pc, #212]	@ (8003a38 <Seedling_task+0x1e0>)
 8003964:	715a      	strb	r2, [r3, #5]
	 	          }
	 	      }
	 	      if (ff[5] != 0) {
 8003966:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <Seedling_task+0x1e0>)
 8003968:	795b      	ldrb	r3, [r3, #5]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <Seedling_task+0x11c>
	 	          flag[5] = 2;
 800396e:	4b33      	ldr	r3, [pc, #204]	@ (8003a3c <Seedling_task+0x1e4>)
 8003970:	2202      	movs	r2, #2
 8003972:	715a      	strb	r2, [r3, #5]
//	  	  }

//****************************************seedling_motor************************************************/
//	 	      seedling_check();

			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==255)){
 8003974:	2104      	movs	r1, #4
 8003976:	4834      	ldr	r0, [pc, #208]	@ (8003a48 <Seedling_task+0x1f0>)
 8003978:	f007 fa76 	bl	800ae68 <HAL_GPIO_ReadPin>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <Seedling_task+0x13a>
 8003982:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003986:	482e      	ldr	r0, [pc, #184]	@ (8003a40 <Seedling_task+0x1e8>)
 8003988:	f007 fa6e 	bl	800ae68 <HAL_GPIO_ReadPin>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <Seedling_task+0x148>
 8003992:	4b30      	ldr	r3, [pc, #192]	@ (8003a54 <Seedling_task+0x1fc>)
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	2bff      	cmp	r3, #255	@ 0xff
 8003998:	d102      	bne.n	80039a0 <Seedling_task+0x148>
				  mode=2;
 800399a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a58 <Seedling_task+0x200>)
 800399c:	2202      	movs	r2, #2
 800399e:	601a      	str	r2, [r3, #0]
			  }
			  if(((Up_switch1 == 0) || (Up_switch2 == 0)) && (RX[4]==255)){
 80039a0:	2104      	movs	r1, #4
 80039a2:	4823      	ldr	r0, [pc, #140]	@ (8003a30 <Seedling_task+0x1d8>)
 80039a4:	f007 fa60 	bl	800ae68 <HAL_GPIO_ReadPin>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <Seedling_task+0x164>
 80039ae:	2101      	movs	r1, #1
 80039b0:	4823      	ldr	r0, [pc, #140]	@ (8003a40 <Seedling_task+0x1e8>)
 80039b2:	f007 fa59 	bl	800ae68 <HAL_GPIO_ReadPin>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d117      	bne.n	80039ec <Seedling_task+0x194>
 80039bc:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <Seedling_task+0x1fc>)
 80039be:	791b      	ldrb	r3, [r3, #4]
 80039c0:	2bff      	cmp	r3, #255	@ 0xff
 80039c2:	d113      	bne.n	80039ec <Seedling_task+0x194>
				  mode=2;
 80039c4:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <Seedling_task+0x200>)
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
				  if(fl == 1){
 80039ca:	4b24      	ldr	r3, [pc, #144]	@ (8003a5c <Seedling_task+0x204>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d103      	bne.n	80039da <Seedling_task+0x182>
					  fl=2;
 80039d2:	4b22      	ldr	r3, [pc, #136]	@ (8003a5c <Seedling_task+0x204>)
 80039d4:	2202      	movs	r2, #2
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e008      	b.n	80039ec <Seedling_task+0x194>
				  }
				  else if(fl == -1){
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <Seedling_task+0x204>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e2:	d103      	bne.n	80039ec <Seedling_task+0x194>
					  fl=-2;
 80039e4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <Seedling_task+0x204>)
 80039e6:	f06f 0201 	mvn.w	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
				  }
			  }
			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==239)){
 80039ec:	2104      	movs	r1, #4
 80039ee:	4816      	ldr	r0, [pc, #88]	@ (8003a48 <Seedling_task+0x1f0>)
 80039f0:	f007 fa3a 	bl	800ae68 <HAL_GPIO_ReadPin>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <Seedling_task+0x1b2>
 80039fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039fe:	4810      	ldr	r0, [pc, #64]	@ (8003a40 <Seedling_task+0x1e8>)
 8003a00:	f007 fa32 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <Seedling_task+0x1c6>
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <Seedling_task+0x1fc>)
 8003a0c:	791b      	ldrb	r3, [r3, #4]
 8003a0e:	2bef      	cmp	r3, #239	@ 0xef
 8003a10:	d105      	bne.n	8003a1e <Seedling_task+0x1c6>
				  mode=1;
 8003a12:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <Seedling_task+0x200>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
				  fl=1;
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <Seedling_task+0x204>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
			  }
			  if(RX[4] == 191){
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <Seedling_task+0x1fc>)
 8003a20:	791b      	ldrb	r3, [r3, #4]
 8003a22:	2bbf      	cmp	r3, #191	@ 0xbf
 8003a24:	d11c      	bne.n	8003a60 <Seedling_task+0x208>
				  mode=0;
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <Seedling_task+0x200>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e023      	b.n	8003a76 <Seedling_task+0x21e>
 8003a2e:	bf00      	nop
 8003a30:	40021800 	.word	0x40021800
 8003a34:	20000cb4 	.word	0x20000cb4
 8003a38:	20000e14 	.word	0x20000e14
 8003a3c:	20000de4 	.word	0x20000de4
 8003a40:	40020800 	.word	0x40020800
 8003a44:	20000cb8 	.word	0x20000cb8
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	20000cc4 	.word	0x20000cc4
 8003a50:	20000cc8 	.word	0x20000cc8
 8003a54:	20000c10 	.word	0x20000c10
 8003a58:	20000040 	.word	0x20000040
 8003a5c:	20000c8c 	.word	0x20000c8c
			  }
			  else if(RX[3] == 254){
 8003a60:	4b3a      	ldr	r3, [pc, #232]	@ (8003b4c <Seedling_task+0x2f4>)
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a66:	d106      	bne.n	8003a76 <Seedling_task+0x21e>
				  mode=1;
 8003a68:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <Seedling_task+0x2f8>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
				  fl=-1;
 8003a6e:	4b39      	ldr	r3, [pc, #228]	@ (8003b54 <Seedling_task+0x2fc>)
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a74:	601a      	str	r2, [r3, #0]
			  }
//****************************************seedling_relay************************************************/
			  if(((Down_switch1 == 0) || (Down_switch2 == 0)) && (RX[4]==247)){
 8003a76:	2104      	movs	r1, #4
 8003a78:	4837      	ldr	r0, [pc, #220]	@ (8003b58 <Seedling_task+0x300>)
 8003a7a:	f007 f9f5 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <Seedling_task+0x23c>
 8003a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a88:	4834      	ldr	r0, [pc, #208]	@ (8003b5c <Seedling_task+0x304>)
 8003a8a:	f007 f9ed 	bl	800ae68 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <Seedling_task+0x25c>
 8003a94:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <Seedling_task+0x2f4>)
 8003a96:	791b      	ldrb	r3, [r3, #4]
 8003a98:	2bf7      	cmp	r3, #247	@ 0xf7
 8003a9a:	d10b      	bne.n	8003ab4 <Seedling_task+0x25c>
				  Seedling_get;
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aa2:	482f      	ldr	r0, [pc, #188]	@ (8003b60 <Seedling_task+0x308>)
 8003aa4:	f007 f9f8 	bl	800ae98 <HAL_GPIO_WritePin>
				  Seedling_get_1;
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003aae:	482c      	ldr	r0, [pc, #176]	@ (8003b60 <Seedling_task+0x308>)
 8003ab0:	f007 f9f2 	bl	800ae98 <HAL_GPIO_WritePin>
			  }
			  if(RX[4]==223){
 8003ab4:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <Seedling_task+0x2f4>)
 8003ab6:	791b      	ldrb	r3, [r3, #4]
 8003ab8:	2bdf      	cmp	r3, #223	@ 0xdf
 8003aba:	d105      	bne.n	8003ac8 <Seedling_task+0x270>
		  	  	  Seedling_take_1;
 8003abc:	2201      	movs	r2, #1
 8003abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ac2:	4827      	ldr	r0, [pc, #156]	@ (8003b60 <Seedling_task+0x308>)
 8003ac4:	f007 f9e8 	bl	800ae98 <HAL_GPIO_WritePin>
		  	  }
		  	  if(RX[4]==127){
 8003ac8:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <Seedling_task+0x2f4>)
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ace:	d105      	bne.n	8003adc <Seedling_task+0x284>
		  	  	  Seedling_take_2;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ad6:	4822      	ldr	r0, [pc, #136]	@ (8003b60 <Seedling_task+0x308>)
 8003ad8:	f007 f9de 	bl	800ae98 <HAL_GPIO_WritePin>
		  	  }


	  	  if(mode==0){
 8003adc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <Seedling_task+0x2f8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <Seedling_task+0x2a6>
	  		  HAL_GPIO_WritePin(motors_a, 1);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2120      	movs	r1, #32
 8003ae8:	481e      	ldr	r0, [pc, #120]	@ (8003b64 <Seedling_task+0x30c>)
 8003aea:	f007 f9d5 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2110      	movs	r1, #16
 8003af2:	481c      	ldr	r0, [pc, #112]	@ (8003b64 <Seedling_task+0x30c>)
 8003af4:	f007 f9d0 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=8;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <Seedling_task+0x310>)
 8003afa:	2208      	movs	r2, #8
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }
	  	  if(mode==2){
 8003afe:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <Seedling_task+0x2f8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d10c      	bne.n	8003b20 <Seedling_task+0x2c8>
	  		  HAL_GPIO_WritePin(motors_a, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2120      	movs	r1, #32
 8003b0a:	4816      	ldr	r0, [pc, #88]	@ (8003b64 <Seedling_task+0x30c>)
 8003b0c:	f007 f9c4 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 0);
 8003b10:	2200      	movs	r2, #0
 8003b12:	2110      	movs	r1, #16
 8003b14:	4813      	ldr	r0, [pc, #76]	@ (8003b64 <Seedling_task+0x30c>)
 8003b16:	f007 f9bf 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=0;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <Seedling_task+0x310>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }
	  	  if(mode==1){
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <Seedling_task+0x2f8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10c      	bne.n	8003b42 <Seedling_task+0x2ea>
	  		  HAL_GPIO_WritePin(motors_a, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <Seedling_task+0x30c>)
 8003b2e:	f007 f9b3 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(motors_b, 1);
 8003b32:	2201      	movs	r2, #1
 8003b34:	2110      	movs	r1, #16
 8003b36:	480b      	ldr	r0, [pc, #44]	@ (8003b64 <Seedling_task+0x30c>)
 8003b38:	f007 f9ae 	bl	800ae98 <HAL_GPIO_WritePin>
	  		  TIM12->CCR2=50;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <Seedling_task+0x310>)
 8003b3e:	2232      	movs	r2, #50	@ 0x32
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
	  	  }

    osDelay(10);
 8003b42:	200a      	movs	r0, #10
 8003b44:	f00b fb60 	bl	800f208 <osDelay>
	 	      if (Up_switch1 != switchStatePrev_1) {
 8003b48:	e68a      	b.n	8003860 <Seedling_task+0x8>
 8003b4a:	bf00      	nop
 8003b4c:	20000c10 	.word	0x20000c10
 8003b50:	20000040 	.word	0x20000040
 8003b54:	20000c8c 	.word	0x20000c8c
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40021400 	.word	0x40021400
 8003b68:	40001800 	.word	0x40001800

08003b6c <Wheel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Wheel_task */
  /* Infinite loop */
  for(;;)
  {
	  if(vel_up == 1){
 8003b74:	4bac      	ldr	r3, [pc, #688]	@ (8003e28 <Wheel_task+0x2bc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 81f4 	bne.w	8003f66 <Wheel_task+0x3fa>
	   	  		  vel_up=0;
 8003b7e:	4baa      	ldr	r3, [pc, #680]	@ (8003e28 <Wheel_task+0x2bc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
  	  	  		  M1_pid.error = M1.setpoint-M1.en_speed;
 8003b84:	4ba9      	ldr	r3, [pc, #676]	@ (8003e2c <Wheel_task+0x2c0>)
 8003b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4ba7      	ldr	r3, [pc, #668]	@ (8003e2c <Wheel_task+0x2c0>)
 8003b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4aa6      	ldr	r2, [pc, #664]	@ (8003e30 <Wheel_task+0x2c4>)
 8003b96:	60d3      	str	r3, [r2, #12]
  	  	  		  M1_pid.I_error+=M1_pid.error;
 8003b98:	4ba5      	ldr	r3, [pc, #660]	@ (8003e30 <Wheel_task+0x2c4>)
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	4ba4      	ldr	r3, [pc, #656]	@ (8003e30 <Wheel_task+0x2c4>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4aa3      	ldr	r2, [pc, #652]	@ (8003e30 <Wheel_task+0x2c4>)
 8003ba4:	6113      	str	r3, [r2, #16]
  	  	  		  M1_pid.D_error=M1_pid.lasterror-M1_pid.error;
 8003ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e30 <Wheel_task+0x2c4>)
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	4ba1      	ldr	r3, [pc, #644]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bb2:	6153      	str	r3, [r2, #20]
  	  	  		  M1_pid.lasterror=M1_pid.error;
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a9d      	ldr	r2, [pc, #628]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bba:	6193      	str	r3, [r2, #24]
  	  	  		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8003bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	4b9b      	ldr	r3, [pc, #620]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd2:	4b97      	ldr	r3, [pc, #604]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8003bd8:	4b95      	ldr	r3, [pc, #596]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bec:	4b90      	ldr	r3, [pc, #576]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bee:	edd3 6a02 	vldr	s13, [r3, #8]
 8003bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e30 <Wheel_task+0x2c4>)
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c0a:	ee17 3a90 	vmov	r3, s15
 8003c0e:	b21a      	sxth	r2, r3
 8003c10:	4b86      	ldr	r3, [pc, #536]	@ (8003e2c <Wheel_task+0x2c0>)
 8003c12:	805a      	strh	r2, [r3, #2]

  	  	  		  M2_pid.error=M2.setpoint-M2.en_speed;
 8003c14:	4b87      	ldr	r3, [pc, #540]	@ (8003e34 <Wheel_task+0x2c8>)
 8003c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b85      	ldr	r3, [pc, #532]	@ (8003e34 <Wheel_task+0x2c8>)
 8003c1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	4a84      	ldr	r2, [pc, #528]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c26:	60d3      	str	r3, [r2, #12]
  	  	  		  M2_pid.I_error+=M2_pid.error;
 8003c28:	4b83      	ldr	r3, [pc, #524]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	4b82      	ldr	r3, [pc, #520]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	4a81      	ldr	r2, [pc, #516]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c34:	6113      	str	r3, [r2, #16]
  	  	  		  M2_pid.D_error=M2_pid.lasterror-M2_pid.error;
 8003c36:	4b80      	ldr	r3, [pc, #512]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	4a7d      	ldr	r2, [pc, #500]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c42:	6153      	str	r3, [r2, #20]
  	  	  		  M2_pid.lasterror=M2_pid.error;
 8003c44:	4b7c      	ldr	r3, [pc, #496]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a7b      	ldr	r2, [pc, #492]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c4a:	6193      	str	r3, [r2, #24]
  	  	  		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 8003c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c4e:	ed93 7a00 	vldr	s14, [r3]
 8003c52:	4b79      	ldr	r3, [pc, #484]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c62:	4b75      	ldr	r3, [pc, #468]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c64:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c68:	4b73      	ldr	r3, [pc, #460]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c82:	4b6d      	ldr	r3, [pc, #436]	@ (8003e38 <Wheel_task+0x2cc>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9a:	ee17 3a90 	vmov	r3, s15
 8003c9e:	b21a      	sxth	r2, r3
 8003ca0:	4b64      	ldr	r3, [pc, #400]	@ (8003e34 <Wheel_task+0x2c8>)
 8003ca2:	805a      	strh	r2, [r3, #2]

  	  	  		  M3_pid.error=M3.setpoint-M3.en_speed;
 8003ca4:	4b65      	ldr	r3, [pc, #404]	@ (8003e3c <Wheel_task+0x2d0>)
 8003ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b63      	ldr	r3, [pc, #396]	@ (8003e3c <Wheel_task+0x2d0>)
 8003cae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	4a62      	ldr	r2, [pc, #392]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cb6:	60d3      	str	r3, [r2, #12]
  	  	  		  M3_pid.I_error+=M3_pid.error;
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cc4:	6113      	str	r3, [r2, #16]
  	  	  		  M3_pid.D_error=M3_pid.lasterror-M3_pid.error;
 8003cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	4b5d      	ldr	r3, [pc, #372]	@ (8003e40 <Wheel_task+0x2d4>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	4a5b      	ldr	r2, [pc, #364]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cd2:	6153      	str	r3, [r2, #20]
  	  	  		  M3_pid.lasterror=M3_pid.error;
 8003cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a59      	ldr	r2, [pc, #356]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cda:	6193      	str	r3, [r2, #24]
  	  	  		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8003cdc:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cde:	ed93 7a00 	vldr	s14, [r3]
 8003ce2:	4b57      	ldr	r3, [pc, #348]	@ (8003e40 <Wheel_task+0x2d4>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf2:	4b53      	ldr	r3, [pc, #332]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cf4:	edd3 6a01 	vldr	s13, [r3, #4]
 8003cf8:	4b51      	ldr	r3, [pc, #324]	@ (8003e40 <Wheel_task+0x2d4>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e40 <Wheel_task+0x2d4>)
 8003d0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d12:	4b4b      	ldr	r3, [pc, #300]	@ (8003e40 <Wheel_task+0x2d4>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d2a:	ee17 3a90 	vmov	r3, s15
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	4b42      	ldr	r3, [pc, #264]	@ (8003e3c <Wheel_task+0x2d0>)
 8003d32:	805a      	strh	r2, [r3, #2]

  	  	  		  M4_pid.error=M4.setpoint-M4.en_speed;
 8003d34:	4b43      	ldr	r3, [pc, #268]	@ (8003e44 <Wheel_task+0x2d8>)
 8003d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <Wheel_task+0x2d8>)
 8003d3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	4a40      	ldr	r2, [pc, #256]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d46:	60d3      	str	r3, [r2, #12]
  	  	  		  M4_pid.I_error+=M4_pid.error;
 8003d48:	4b3f      	ldr	r3, [pc, #252]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	4a3d      	ldr	r2, [pc, #244]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d54:	6113      	str	r3, [r2, #16]
  	  	  		  M4_pid.D_error=M4_pid.lasterror-M4_pid.error;
 8003d56:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	4a39      	ldr	r2, [pc, #228]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d62:	6153      	str	r3, [r2, #20]
  	  	  		  M4_pid.lasterror=M4_pid.error;
 8003d64:	4b38      	ldr	r3, [pc, #224]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a37      	ldr	r2, [pc, #220]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d6a:	6193      	str	r3, [r2, #24]
  	  	  		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8003d6c:	4b36      	ldr	r3, [pc, #216]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d6e:	ed93 7a00 	vldr	s14, [r3]
 8003d72:	4b35      	ldr	r3, [pc, #212]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d82:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d84:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d88:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <Wheel_task+0x2dc>)
 8003d9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003da2:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <Wheel_task+0x2dc>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dba:	ee17 3a90 	vmov	r3, s15
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <Wheel_task+0x2d8>)
 8003dc2:	805a      	strh	r2, [r3, #2]
  	  	      left_front=M1.Out;
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <Wheel_task+0x2c0>)
 8003dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <Wheel_task+0x2e0>)
 8003dce:	601a      	str	r2, [r3, #0]
			  left_back=M2.Out;
 8003dd0:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <Wheel_task+0x2c8>)
 8003dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <Wheel_task+0x2e4>)
 8003dda:	601a      	str	r2, [r3, #0]
			  right_front=M3.Out;
 8003ddc:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <Wheel_task+0x2d0>)
 8003dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <Wheel_task+0x2e8>)
 8003de6:	601a      	str	r2, [r3, #0]
			  right_back=M4.Out;
 8003de8:	4b16      	ldr	r3, [pc, #88]	@ (8003e44 <Wheel_task+0x2d8>)
 8003dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <Wheel_task+0x2ec>)
 8003df2:	601a      	str	r2, [r3, #0]

			  lf = abs(left_front);
 8003df4:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <Wheel_task+0x2e0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bfb8      	it	lt
 8003dfc:	425b      	neglt	r3, r3
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <Wheel_task+0x2f0>)
 8003e02:	801a      	strh	r2, [r3, #0]
			  lb = abs(left_back);
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <Wheel_task+0x2e4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bfb8      	it	lt
 8003e0c:	425b      	neglt	r3, r3
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <Wheel_task+0x2f4>)
 8003e12:	801a      	strh	r2, [r3, #0]
			  rf = abs(right_front);
 8003e14:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <Wheel_task+0x2e8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bfb8      	it	lt
 8003e1c:	425b      	neglt	r3, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <Wheel_task+0x2f8>)
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e020      	b.n	8003e68 <Wheel_task+0x2fc>
 8003e26:	bf00      	nop
 8003e28:	20000ca0 	.word	0x20000ca0
 8003e2c:	20000d8c 	.word	0x20000d8c
 8003e30:	20000ce4 	.word	0x20000ce4
 8003e34:	20000d94 	.word	0x20000d94
 8003e38:	20000d00 	.word	0x20000d00
 8003e3c:	20000d9c 	.word	0x20000d9c
 8003e40:	20000d1c 	.word	0x20000d1c
 8003e44:	20000da4 	.word	0x20000da4
 8003e48:	20000d38 	.word	0x20000d38
 8003e4c:	20000c90 	.word	0x20000c90
 8003e50:	20000c94 	.word	0x20000c94
 8003e54:	20000c98 	.word	0x20000c98
 8003e58:	20000c9c 	.word	0x20000c9c
 8003e5c:	20000c1a 	.word	0x20000c1a
 8003e60:	20000c1c 	.word	0x20000c1c
 8003e64:	20000c1e 	.word	0x20000c1e
			  rb = abs(right_back);
 8003e68:	4b41      	ldr	r3, [pc, #260]	@ (8003f70 <Wheel_task+0x404>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bfb8      	it	lt
 8003e70:	425b      	neglt	r3, r3
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b3f      	ldr	r3, [pc, #252]	@ (8003f74 <Wheel_task+0x408>)
 8003e76:	801a      	strh	r2, [r3, #0]

			  if(abs(x)<5 && abs(y)<5 && abs(r)<5){
 8003e78:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <Wheel_task+0x40c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f113 0f04 	cmn.w	r3, #4
 8003e80:	db1e      	blt.n	8003ec0 <Wheel_task+0x354>
 8003e82:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <Wheel_task+0x40c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	dc1a      	bgt.n	8003ec0 <Wheel_task+0x354>
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <Wheel_task+0x410>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f113 0f04 	cmn.w	r3, #4
 8003e92:	db15      	blt.n	8003ec0 <Wheel_task+0x354>
 8003e94:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <Wheel_task+0x410>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	dc11      	bgt.n	8003ec0 <Wheel_task+0x354>
 8003e9c:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <Wheel_task+0x414>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f113 0f04 	cmn.w	r3, #4
 8003ea4:	db0c      	blt.n	8003ec0 <Wheel_task+0x354>
 8003ea6:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <Wheel_task+0x414>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	dc08      	bgt.n	8003ec0 <Wheel_task+0x354>
				  motor1();
 8003eae:	f7ff f8db 	bl	8003068 <motor1>
				  motor2();
 8003eb2:	f7ff f91f 	bl	80030f4 <motor2>
				  motor3();
 8003eb6:	f7ff f963 	bl	8003180 <motor3>
				  motor4();
 8003eba:	f7ff f9a1 	bl	8003200 <motor4>
 8003ebe:	e052      	b.n	8003f66 <Wheel_task+0x3fa>
			  }
			  else if((abs(x)>5 || abs(y)>5) && abs(r)<5){
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <Wheel_task+0x40c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bfb8      	it	lt
 8003ec8:	425b      	neglt	r3, r3
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	dc06      	bgt.n	8003edc <Wheel_task+0x370>
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <Wheel_task+0x410>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	425b      	neglt	r3, r3
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	dd11      	ble.n	8003f00 <Wheel_task+0x394>
 8003edc:	4b28      	ldr	r3, [pc, #160]	@ (8003f80 <Wheel_task+0x414>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f113 0f04 	cmn.w	r3, #4
 8003ee4:	db0c      	blt.n	8003f00 <Wheel_task+0x394>
 8003ee6:	4b26      	ldr	r3, [pc, #152]	@ (8003f80 <Wheel_task+0x414>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	dc08      	bgt.n	8003f00 <Wheel_task+0x394>
				  motor1();
 8003eee:	f7ff f8bb 	bl	8003068 <motor1>
				  motor2();
 8003ef2:	f7ff f8ff 	bl	80030f4 <motor2>
				  motor3();
 8003ef6:	f7ff f943 	bl	8003180 <motor3>
				  motor4();
 8003efa:	f7ff f981 	bl	8003200 <motor4>
 8003efe:	e032      	b.n	8003f66 <Wheel_task+0x3fa>
			  }
			  else if((abs(x)<5 && abs(y)<5) && abs(r)>5){
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <Wheel_task+0x40c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f113 0f04 	cmn.w	r3, #4
 8003f08:	db16      	blt.n	8003f38 <Wheel_task+0x3cc>
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <Wheel_task+0x40c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	dc12      	bgt.n	8003f38 <Wheel_task+0x3cc>
 8003f12:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <Wheel_task+0x410>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f113 0f04 	cmn.w	r3, #4
 8003f1a:	db0d      	blt.n	8003f38 <Wheel_task+0x3cc>
 8003f1c:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <Wheel_task+0x410>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	dc09      	bgt.n	8003f38 <Wheel_task+0x3cc>
 8003f24:	4b16      	ldr	r3, [pc, #88]	@ (8003f80 <Wheel_task+0x414>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfb8      	it	lt
 8003f2c:	425b      	neglt	r3, r3
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	dd02      	ble.n	8003f38 <Wheel_task+0x3cc>
				  turn();
 8003f32:	f7ff f9ab 	bl	800328c <turn>
 8003f36:	e016      	b.n	8003f66 <Wheel_task+0x3fa>
			  }
			  else if((abs(x)>5 || abs(y)>5) && abs(r)>5){
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <Wheel_task+0x40c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bfb8      	it	lt
 8003f40:	425b      	neglt	r3, r3
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	dc06      	bgt.n	8003f54 <Wheel_task+0x3e8>
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <Wheel_task+0x410>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfb8      	it	lt
 8003f4e:	425b      	neglt	r3, r3
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	dd08      	ble.n	8003f66 <Wheel_task+0x3fa>
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <Wheel_task+0x414>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfb8      	it	lt
 8003f5c:	425b      	neglt	r3, r3
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	dd01      	ble.n	8003f66 <Wheel_task+0x3fa>
				  yvj_ergeh();
 8003f62:	f7ff fa45 	bl	80033f0 <yvj_ergeh>
			  }
	  }

    osDelay(10);
 8003f66:	200a      	movs	r0, #10
 8003f68:	f00b f94e 	bl	800f208 <osDelay>
	  if(vel_up == 1){
 8003f6c:	e602      	b.n	8003b74 <Wheel_task+0x8>
 8003f6e:	bf00      	nop
 8003f70:	20000c9c 	.word	0x20000c9c
 8003f74:	20000c20 	.word	0x20000c20
 8003f78:	20000c80 	.word	0x20000c80
 8003f7c:	20000c84 	.word	0x20000c84
 8003f80:	20000c88 	.word	0x20000c88

08003f84 <Encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Encoder_task */
void Encoder_task(void const * argument)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encoder_task */
  /* Infinite loop */
  for(;;)
  {
		count_2 = TIM1->CNT;
 8003f8c:	4b91      	ldr	r3, [pc, #580]	@ (80041d4 <Encoder_task+0x250>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	4b91      	ldr	r3, [pc, #580]	@ (80041d8 <Encoder_task+0x254>)
 8003f94:	801a      	strh	r2, [r3, #0]
		count_4 = -(TIM2->CNT);
 8003f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	425b      	negs	r3, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <Encoder_task+0x258>)
 8003fa6:	801a      	strh	r2, [r3, #0]
		count_3 = -(TIM4->CNT);
 8003fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80041e0 <Encoder_task+0x25c>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	425b      	negs	r3, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	4b8b      	ldr	r3, [pc, #556]	@ (80041e4 <Encoder_task+0x260>)
 8003fb6:	801a      	strh	r2, [r3, #0]
		count_1 = -(TIM8->CNT);
 8003fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80041e8 <Encoder_task+0x264>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	425b      	negs	r3, r3
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	b21a      	sxth	r2, r3
 8003fc4:	4b89      	ldr	r3, [pc, #548]	@ (80041ec <Encoder_task+0x268>)
 8003fc6:	801a      	strh	r2, [r3, #0]
		oldpos_1[0]=oldpos_1[1];
 8003fc8:	4b89      	ldr	r3, [pc, #548]	@ (80041f0 <Encoder_task+0x26c>)
 8003fca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003fce:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <Encoder_task+0x26c>)
 8003fd0:	801a      	strh	r2, [r3, #0]
		oldpos_1[1]=oldpos_1[2];
 8003fd2:	4b87      	ldr	r3, [pc, #540]	@ (80041f0 <Encoder_task+0x26c>)
 8003fd4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003fd8:	4b85      	ldr	r3, [pc, #532]	@ (80041f0 <Encoder_task+0x26c>)
 8003fda:	805a      	strh	r2, [r3, #2]
		oldpos_1[2]=oldpos_1[3];
 8003fdc:	4b84      	ldr	r3, [pc, #528]	@ (80041f0 <Encoder_task+0x26c>)
 8003fde:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003fe2:	4b83      	ldr	r3, [pc, #524]	@ (80041f0 <Encoder_task+0x26c>)
 8003fe4:	809a      	strh	r2, [r3, #4]
		oldpos_1[3]=oldpos_1[4];
 8003fe6:	4b82      	ldr	r3, [pc, #520]	@ (80041f0 <Encoder_task+0x26c>)
 8003fe8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003fec:	4b80      	ldr	r3, [pc, #512]	@ (80041f0 <Encoder_task+0x26c>)
 8003fee:	80da      	strh	r2, [r3, #6]
		oldpos_1[4]=oldpos_1[5];
 8003ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80041f0 <Encoder_task+0x26c>)
 8003ff2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80041f0 <Encoder_task+0x26c>)
 8003ff8:	811a      	strh	r2, [r3, #8]
		oldpos_1[5]=oldpos_1[6];
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80041f0 <Encoder_task+0x26c>)
 8003ffc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004000:	4b7b      	ldr	r3, [pc, #492]	@ (80041f0 <Encoder_task+0x26c>)
 8004002:	815a      	strh	r2, [r3, #10]
		oldpos_1[6]=oldpos_1[7];
 8004004:	4b7a      	ldr	r3, [pc, #488]	@ (80041f0 <Encoder_task+0x26c>)
 8004006:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800400a:	4b79      	ldr	r3, [pc, #484]	@ (80041f0 <Encoder_task+0x26c>)
 800400c:	819a      	strh	r2, [r3, #12]
		oldpos_1[7]=oldpos_1[8];
 800400e:	4b78      	ldr	r3, [pc, #480]	@ (80041f0 <Encoder_task+0x26c>)
 8004010:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004014:	4b76      	ldr	r3, [pc, #472]	@ (80041f0 <Encoder_task+0x26c>)
 8004016:	81da      	strh	r2, [r3, #14]
		oldpos_1[8]=oldpos_1[9];
 8004018:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <Encoder_task+0x26c>)
 800401a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800401e:	4b74      	ldr	r3, [pc, #464]	@ (80041f0 <Encoder_task+0x26c>)
 8004020:	821a      	strh	r2, [r3, #16]
		oldpos_1[9] =count_1-older_1;
 8004022:	4b72      	ldr	r3, [pc, #456]	@ (80041ec <Encoder_task+0x268>)
 8004024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004028:	b29a      	uxth	r2, r3
 800402a:	4b72      	ldr	r3, [pc, #456]	@ (80041f4 <Encoder_task+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	b21a      	sxth	r2, r3
 8004036:	4b6e      	ldr	r3, [pc, #440]	@ (80041f0 <Encoder_task+0x26c>)
 8004038:	825a      	strh	r2, [r3, #18]
		older_1=count_1;
 800403a:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <Encoder_task+0x268>)
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	461a      	mov	r2, r3
 8004042:	4b6c      	ldr	r3, [pc, #432]	@ (80041f4 <Encoder_task+0x270>)
 8004044:	601a      	str	r2, [r3, #0]
		oldpos_2[0]=oldpos_2[1];
 8004046:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <Encoder_task+0x274>)
 8004048:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800404c:	4b6a      	ldr	r3, [pc, #424]	@ (80041f8 <Encoder_task+0x274>)
 800404e:	801a      	strh	r2, [r3, #0]
		oldpos_2[1]=oldpos_2[2];
 8004050:	4b69      	ldr	r3, [pc, #420]	@ (80041f8 <Encoder_task+0x274>)
 8004052:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004056:	4b68      	ldr	r3, [pc, #416]	@ (80041f8 <Encoder_task+0x274>)
 8004058:	805a      	strh	r2, [r3, #2]
		oldpos_2[2]=oldpos_2[3];
 800405a:	4b67      	ldr	r3, [pc, #412]	@ (80041f8 <Encoder_task+0x274>)
 800405c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004060:	4b65      	ldr	r3, [pc, #404]	@ (80041f8 <Encoder_task+0x274>)
 8004062:	809a      	strh	r2, [r3, #4]
		oldpos_2[3]=oldpos_2[4];
 8004064:	4b64      	ldr	r3, [pc, #400]	@ (80041f8 <Encoder_task+0x274>)
 8004066:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800406a:	4b63      	ldr	r3, [pc, #396]	@ (80041f8 <Encoder_task+0x274>)
 800406c:	80da      	strh	r2, [r3, #6]
		oldpos_2[4]=oldpos_2[5];
 800406e:	4b62      	ldr	r3, [pc, #392]	@ (80041f8 <Encoder_task+0x274>)
 8004070:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004074:	4b60      	ldr	r3, [pc, #384]	@ (80041f8 <Encoder_task+0x274>)
 8004076:	811a      	strh	r2, [r3, #8]
		oldpos_2[5]=oldpos_2[6];
 8004078:	4b5f      	ldr	r3, [pc, #380]	@ (80041f8 <Encoder_task+0x274>)
 800407a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800407e:	4b5e      	ldr	r3, [pc, #376]	@ (80041f8 <Encoder_task+0x274>)
 8004080:	815a      	strh	r2, [r3, #10]
		oldpos_2[6]=oldpos_2[7];
 8004082:	4b5d      	ldr	r3, [pc, #372]	@ (80041f8 <Encoder_task+0x274>)
 8004084:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004088:	4b5b      	ldr	r3, [pc, #364]	@ (80041f8 <Encoder_task+0x274>)
 800408a:	819a      	strh	r2, [r3, #12]
		oldpos_2[7]=oldpos_2[8];
 800408c:	4b5a      	ldr	r3, [pc, #360]	@ (80041f8 <Encoder_task+0x274>)
 800408e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004092:	4b59      	ldr	r3, [pc, #356]	@ (80041f8 <Encoder_task+0x274>)
 8004094:	81da      	strh	r2, [r3, #14]
		oldpos_2[8]=oldpos_2[9];
 8004096:	4b58      	ldr	r3, [pc, #352]	@ (80041f8 <Encoder_task+0x274>)
 8004098:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800409c:	4b56      	ldr	r3, [pc, #344]	@ (80041f8 <Encoder_task+0x274>)
 800409e:	821a      	strh	r2, [r3, #16]
		oldpos_2[9] =count_2-older_2;
 80040a0:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <Encoder_task+0x254>)
 80040a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	4b54      	ldr	r3, [pc, #336]	@ (80041fc <Encoder_task+0x278>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b50      	ldr	r3, [pc, #320]	@ (80041f8 <Encoder_task+0x274>)
 80040b6:	825a      	strh	r2, [r3, #18]
		older_2=count_2;
 80040b8:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <Encoder_task+0x254>)
 80040ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b4e      	ldr	r3, [pc, #312]	@ (80041fc <Encoder_task+0x278>)
 80040c2:	601a      	str	r2, [r3, #0]
		oldpos_3[0]=oldpos_3[1];
 80040c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004200 <Encoder_task+0x27c>)
 80040c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80040ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004200 <Encoder_task+0x27c>)
 80040cc:	801a      	strh	r2, [r3, #0]
		oldpos_3[1]=oldpos_3[2];
 80040ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004200 <Encoder_task+0x27c>)
 80040d0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80040d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004200 <Encoder_task+0x27c>)
 80040d6:	805a      	strh	r2, [r3, #2]
		oldpos_3[2]=oldpos_3[3];
 80040d8:	4b49      	ldr	r3, [pc, #292]	@ (8004200 <Encoder_task+0x27c>)
 80040da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80040de:	4b48      	ldr	r3, [pc, #288]	@ (8004200 <Encoder_task+0x27c>)
 80040e0:	809a      	strh	r2, [r3, #4]
		oldpos_3[3]=oldpos_3[4];
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <Encoder_task+0x27c>)
 80040e4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80040e8:	4b45      	ldr	r3, [pc, #276]	@ (8004200 <Encoder_task+0x27c>)
 80040ea:	80da      	strh	r2, [r3, #6]
		oldpos_3[4]=oldpos_3[5];
 80040ec:	4b44      	ldr	r3, [pc, #272]	@ (8004200 <Encoder_task+0x27c>)
 80040ee:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80040f2:	4b43      	ldr	r3, [pc, #268]	@ (8004200 <Encoder_task+0x27c>)
 80040f4:	811a      	strh	r2, [r3, #8]
		oldpos_3[5]=oldpos_3[6];
 80040f6:	4b42      	ldr	r3, [pc, #264]	@ (8004200 <Encoder_task+0x27c>)
 80040f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80040fc:	4b40      	ldr	r3, [pc, #256]	@ (8004200 <Encoder_task+0x27c>)
 80040fe:	815a      	strh	r2, [r3, #10]
		oldpos_3[6]=oldpos_3[7];
 8004100:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <Encoder_task+0x27c>)
 8004102:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004106:	4b3e      	ldr	r3, [pc, #248]	@ (8004200 <Encoder_task+0x27c>)
 8004108:	819a      	strh	r2, [r3, #12]
		oldpos_3[7]=oldpos_3[8];
 800410a:	4b3d      	ldr	r3, [pc, #244]	@ (8004200 <Encoder_task+0x27c>)
 800410c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004110:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <Encoder_task+0x27c>)
 8004112:	81da      	strh	r2, [r3, #14]
		oldpos_3[8]=oldpos_3[9];
 8004114:	4b3a      	ldr	r3, [pc, #232]	@ (8004200 <Encoder_task+0x27c>)
 8004116:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <Encoder_task+0x27c>)
 800411c:	821a      	strh	r2, [r3, #16]
		oldpos_3[9] =count_3-older_3;
 800411e:	4b31      	ldr	r3, [pc, #196]	@ (80041e4 <Encoder_task+0x260>)
 8004120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004124:	b29a      	uxth	r2, r3
 8004126:	4b37      	ldr	r3, [pc, #220]	@ (8004204 <Encoder_task+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	b21a      	sxth	r2, r3
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <Encoder_task+0x27c>)
 8004134:	825a      	strh	r2, [r3, #18]
		older_3=count_3;
 8004136:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <Encoder_task+0x260>)
 8004138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800413c:	461a      	mov	r2, r3
 800413e:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <Encoder_task+0x280>)
 8004140:	601a      	str	r2, [r3, #0]
		oldpos_4[0]=oldpos_4[1];
 8004142:	4b31      	ldr	r3, [pc, #196]	@ (8004208 <Encoder_task+0x284>)
 8004144:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004148:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <Encoder_task+0x284>)
 800414a:	801a      	strh	r2, [r3, #0]
		oldpos_4[1]=oldpos_4[2];
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <Encoder_task+0x284>)
 800414e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004152:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <Encoder_task+0x284>)
 8004154:	805a      	strh	r2, [r3, #2]
		oldpos_4[2]=oldpos_4[3];
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <Encoder_task+0x284>)
 8004158:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800415c:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <Encoder_task+0x284>)
 800415e:	809a      	strh	r2, [r3, #4]
		oldpos_4[3]=oldpos_4[4];
 8004160:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <Encoder_task+0x284>)
 8004162:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004166:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <Encoder_task+0x284>)
 8004168:	80da      	strh	r2, [r3, #6]
		oldpos_4[4]=oldpos_4[5];
 800416a:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <Encoder_task+0x284>)
 800416c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <Encoder_task+0x284>)
 8004172:	811a      	strh	r2, [r3, #8]
		oldpos_4[5]=oldpos_4[6];
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <Encoder_task+0x284>)
 8004176:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800417a:	4b23      	ldr	r3, [pc, #140]	@ (8004208 <Encoder_task+0x284>)
 800417c:	815a      	strh	r2, [r3, #10]
		oldpos_4[6]=oldpos_4[7];
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <Encoder_task+0x284>)
 8004180:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004184:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <Encoder_task+0x284>)
 8004186:	819a      	strh	r2, [r3, #12]
		oldpos_4[7]=oldpos_4[8];
 8004188:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <Encoder_task+0x284>)
 800418a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <Encoder_task+0x284>)
 8004190:	81da      	strh	r2, [r3, #14]
		oldpos_4[8]=oldpos_4[9];
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <Encoder_task+0x284>)
 8004194:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <Encoder_task+0x284>)
 800419a:	821a      	strh	r2, [r3, #16]
		oldpos_4[9] =count_4-older_4;
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <Encoder_task+0x258>)
 800419e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b19      	ldr	r3, [pc, #100]	@ (800420c <Encoder_task+0x288>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b21a      	sxth	r2, r3
 80041b0:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <Encoder_task+0x284>)
 80041b2:	825a      	strh	r2, [r3, #18]
		older_4=count_4;
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <Encoder_task+0x258>)
 80041b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <Encoder_task+0x288>)
 80041be:	601a      	str	r2, [r3, #0]
		vel_up=1;
 80041c0:	4b13      	ldr	r3, [pc, #76]	@ (8004210 <Encoder_task+0x28c>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
		motor_speed();
 80041c6:	f7fe fedb 	bl	8002f80 <motor_speed>


        osDelay(1);
 80041ca:	2001      	movs	r0, #1
 80041cc:	f00b f81c 	bl	800f208 <osDelay>
		count_2 = TIM1->CNT;
 80041d0:	bf00      	nop
 80041d2:	e6db      	b.n	8003f8c <Encoder_task+0x8>
 80041d4:	40010000 	.word	0x40010000
 80041d8:	20000c28 	.word	0x20000c28
 80041dc:	20000c2c 	.word	0x20000c2c
 80041e0:	40000800 	.word	0x40000800
 80041e4:	20000c2a 	.word	0x20000c2a
 80041e8:	40010400 	.word	0x40010400
 80041ec:	20000c26 	.word	0x20000c26
 80041f0:	20000c30 	.word	0x20000c30
 80041f4:	20000ca4 	.word	0x20000ca4
 80041f8:	20000c44 	.word	0x20000c44
 80041fc:	20000ca8 	.word	0x20000ca8
 8004200:	20000c58 	.word	0x20000c58
 8004204:	20000cac 	.word	0x20000cac
 8004208:	20000c6c 	.word	0x20000c6c
 800420c:	20000cb0 	.word	0x20000cb0
 8004210:	20000ca0 	.word	0x20000ca0

08004214 <Display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_task */
void Display_task(void const * argument)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	af04      	add	r7, sp, #16
 800421a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_task */
  /* Infinite loop */
    LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 800421c:	2306      	movs	r3, #6
 800421e:	73fb      	strb	r3, [r7, #15]
    LCD_Init( Lcd_ScanDir, 1000);
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd f800 	bl	800122c <LCD_Init>
    LCD_SetBackLight();
 800422c:	f7fc fde4 	bl	8000df8 <LCD_SetBackLight>
    LCD_Clear(LCD_BACKGROUND);
 8004230:	2000      	movs	r0, #0
 8004232:	f7fd f8f1 	bl	8001418 <LCD_Clear>
    GUI_display();
 8004236:	f7fd fd6d 	bl	8001d14 <GUI_display>
  for(;;)
  {
	  /******************************JOYSTICK************************************/
	  if((RX[1] == 65) || (RX[1] == 0)){
 800423a:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <Display_task+0x94>)
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b41      	cmp	r3, #65	@ 0x41
 8004240:	d003      	beq.n	800424a <Display_task+0x36>
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <Display_task+0x94>)
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d136      	bne.n	80042b8 <Display_task+0xa4>
	 		  GUI_DrawRectangle(x_g[6], y_g[2]+space, (x_g[6]+x_g[7])/2, (y_g[2]+y_g[3])/2-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 800424a:	4b18      	ldr	r3, [pc, #96]	@ (80042ac <Display_task+0x98>)
 800424c:	8998      	ldrh	r0, [r3, #12]
 800424e:	4b18      	ldr	r3, [pc, #96]	@ (80042b0 <Display_task+0x9c>)
 8004250:	889a      	ldrh	r2, [r3, #4]
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <Display_task+0xa0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	4413      	add	r3, r2
 800425a:	b299      	uxth	r1, r3
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <Display_task+0x98>)
 800425e:	899b      	ldrh	r3, [r3, #12]
 8004260:	461a      	mov	r2, r3
 8004262:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <Display_task+0x98>)
 8004264:	89db      	ldrh	r3, [r3, #14]
 8004266:	4413      	add	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	da00      	bge.n	800426e <Display_task+0x5a>
 800426c:	3301      	adds	r3, #1
 800426e:	105b      	asrs	r3, r3, #1
 8004270:	b29c      	uxth	r4, r3
 8004272:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <Display_task+0x9c>)
 8004274:	889b      	ldrh	r3, [r3, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <Display_task+0x9c>)
 800427a:	88db      	ldrh	r3, [r3, #6]
 800427c:	4413      	add	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	da00      	bge.n	8004284 <Display_task+0x70>
 8004282:	3301      	adds	r3, #1
 8004284:	105b      	asrs	r3, r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <Display_task+0xa0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	2201      	movs	r2, #1
 8004294:	9202      	str	r2, [sp, #8]
 8004296:	2201      	movs	r2, #1
 8004298:	9201      	str	r2, [sp, #4]
 800429a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800429e:	9200      	str	r2, [sp, #0]
 80042a0:	4622      	mov	r2, r4
 80042a2:	f7fd fa29 	bl	80016f8 <GUI_DrawRectangle>
 80042a6:	e035      	b.n	8004314 <Display_task+0x100>
 80042a8:	20000c10 	.word	0x20000c10
 80042ac:	20000018 	.word	0x20000018
 80042b0:	2000002c 	.word	0x2000002c
 80042b4:	20000044 	.word	0x20000044
	 	  }
	 	  else{
	 		  GUI_DrawRectangle(x_g[6], y_g[2]+space, (x_g[6]+x_g[7])/2, (y_g[2]+y_g[3])/2-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 80042b8:	4b98      	ldr	r3, [pc, #608]	@ (800451c <Display_task+0x308>)
 80042ba:	8998      	ldrh	r0, [r3, #12]
 80042bc:	4b98      	ldr	r3, [pc, #608]	@ (8004520 <Display_task+0x30c>)
 80042be:	889a      	ldrh	r2, [r3, #4]
 80042c0:	4b98      	ldr	r3, [pc, #608]	@ (8004524 <Display_task+0x310>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	b299      	uxth	r1, r3
 80042ca:	4b94      	ldr	r3, [pc, #592]	@ (800451c <Display_task+0x308>)
 80042cc:	899b      	ldrh	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b92      	ldr	r3, [pc, #584]	@ (800451c <Display_task+0x308>)
 80042d2:	89db      	ldrh	r3, [r3, #14]
 80042d4:	4413      	add	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da00      	bge.n	80042dc <Display_task+0xc8>
 80042da:	3301      	adds	r3, #1
 80042dc:	105b      	asrs	r3, r3, #1
 80042de:	b29c      	uxth	r4, r3
 80042e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004520 <Display_task+0x30c>)
 80042e2:	889b      	ldrh	r3, [r3, #4]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004520 <Display_task+0x30c>)
 80042e8:	88db      	ldrh	r3, [r3, #6]
 80042ea:	4413      	add	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da00      	bge.n	80042f2 <Display_task+0xde>
 80042f0:	3301      	adds	r3, #1
 80042f2:	105b      	asrs	r3, r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004524 <Display_task+0x310>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2201      	movs	r2, #1
 8004302:	9202      	str	r2, [sp, #8]
 8004304:	2201      	movs	r2, #1
 8004306:	9201      	str	r2, [sp, #4]
 8004308:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800430c:	9200      	str	r2, [sp, #0]
 800430e:	4622      	mov	r2, r4
 8004310:	f7fd f9f2 	bl	80016f8 <GUI_DrawRectangle>
	 	  }
/******************************SWITCH************************************/
	  if(Up_switch1 == 1){
 8004314:	2104      	movs	r1, #4
 8004316:	4884      	ldr	r0, [pc, #528]	@ (8004528 <Display_task+0x314>)
 8004318:	f006 fda6 	bl	800ae68 <HAL_GPIO_ReadPin>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d12b      	bne.n	800437a <Display_task+0x166>
			GUI_DrawRectangle(x_g[0]+space, y_g[1]+space, x_g[1]-space, y_g[2]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004322:	4b7e      	ldr	r3, [pc, #504]	@ (800451c <Display_task+0x308>)
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	4b7f      	ldr	r3, [pc, #508]	@ (8004524 <Display_task+0x310>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4413      	add	r3, r2
 800432e:	b298      	uxth	r0, r3
 8004330:	4b7b      	ldr	r3, [pc, #492]	@ (8004520 <Display_task+0x30c>)
 8004332:	885a      	ldrh	r2, [r3, #2]
 8004334:	4b7b      	ldr	r3, [pc, #492]	@ (8004524 <Display_task+0x310>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	4413      	add	r3, r2
 800433c:	b299      	uxth	r1, r3
 800433e:	4b77      	ldr	r3, [pc, #476]	@ (800451c <Display_task+0x308>)
 8004340:	885a      	ldrh	r2, [r3, #2]
 8004342:	4b78      	ldr	r3, [pc, #480]	@ (8004524 <Display_task+0x310>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	b29c      	uxth	r4, r3
 800434c:	4b74      	ldr	r3, [pc, #464]	@ (8004520 <Display_task+0x30c>)
 800434e:	889a      	ldrh	r2, [r3, #4]
 8004350:	4b74      	ldr	r3, [pc, #464]	@ (8004524 <Display_task+0x310>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	2201      	movs	r2, #1
 800435c:	9202      	str	r2, [sp, #8]
 800435e:	2201      	movs	r2, #1
 8004360:	9201      	str	r2, [sp, #4]
 8004362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004366:	9200      	str	r2, [sp, #0]
 8004368:	4622      	mov	r2, r4
 800436a:	f7fd f9c5 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 800436e:	4b6f      	ldr	r3, [pc, #444]	@ (800452c <Display_task+0x318>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f00c fa15 	bl	80107a4 <fflush>
	  }
	  if(Up_switch1 == 0){
 800437a:	2104      	movs	r1, #4
 800437c:	486a      	ldr	r0, [pc, #424]	@ (8004528 <Display_task+0x314>)
 800437e:	f006 fd73 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12b      	bne.n	80043e0 <Display_task+0x1cc>
			GUI_DrawRectangle(x_g[0]+space, y_g[1]+space, x_g[1]-space, y_g[2]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004388:	4b64      	ldr	r3, [pc, #400]	@ (800451c <Display_task+0x308>)
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	4b65      	ldr	r3, [pc, #404]	@ (8004524 <Display_task+0x310>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	4413      	add	r3, r2
 8004394:	b298      	uxth	r0, r3
 8004396:	4b62      	ldr	r3, [pc, #392]	@ (8004520 <Display_task+0x30c>)
 8004398:	885a      	ldrh	r2, [r3, #2]
 800439a:	4b62      	ldr	r3, [pc, #392]	@ (8004524 <Display_task+0x310>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	b299      	uxth	r1, r3
 80043a4:	4b5d      	ldr	r3, [pc, #372]	@ (800451c <Display_task+0x308>)
 80043a6:	885a      	ldrh	r2, [r3, #2]
 80043a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004524 <Display_task+0x310>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29c      	uxth	r4, r3
 80043b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004520 <Display_task+0x30c>)
 80043b4:	889a      	ldrh	r2, [r3, #4]
 80043b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <Display_task+0x310>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2201      	movs	r2, #1
 80043c2:	9202      	str	r2, [sp, #8]
 80043c4:	2201      	movs	r2, #1
 80043c6:	9201      	str	r2, [sp, #4]
 80043c8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	4622      	mov	r2, r4
 80043d0:	f7fd f992 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 80043d4:	4b55      	ldr	r3, [pc, #340]	@ (800452c <Display_task+0x318>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f00c f9e2 	bl	80107a4 <fflush>
	  }
	  if(flag[0] == 2){
 80043e0:	4b53      	ldr	r3, [pc, #332]	@ (8004530 <Display_task+0x31c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d12b      	bne.n	8004440 <Display_task+0x22c>
		  GUI_DrawRectangle(x_g[0]+space_1, y_g[1]+space_1, x_g[1]-space_1, y_g[2]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80043e8:	4b4c      	ldr	r3, [pc, #304]	@ (800451c <Display_task+0x308>)
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	4b51      	ldr	r3, [pc, #324]	@ (8004534 <Display_task+0x320>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	b298      	uxth	r0, r3
 80043f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004520 <Display_task+0x30c>)
 80043f8:	885a      	ldrh	r2, [r3, #2]
 80043fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004534 <Display_task+0x320>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4413      	add	r3, r2
 8004402:	b299      	uxth	r1, r3
 8004404:	4b45      	ldr	r3, [pc, #276]	@ (800451c <Display_task+0x308>)
 8004406:	885a      	ldrh	r2, [r3, #2]
 8004408:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <Display_task+0x320>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29c      	uxth	r4, r3
 8004412:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <Display_task+0x30c>)
 8004414:	889a      	ldrh	r2, [r3, #4]
 8004416:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <Display_task+0x320>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	b29b      	uxth	r3, r3
 8004420:	2201      	movs	r2, #1
 8004422:	9202      	str	r2, [sp, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	9201      	str	r2, [sp, #4]
 8004428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800442c:	9200      	str	r2, [sp, #0]
 800442e:	4622      	mov	r2, r4
 8004430:	f7fd f962 	bl	80016f8 <GUI_DrawRectangle>
		  fflush(stdout);
 8004434:	4b3d      	ldr	r3, [pc, #244]	@ (800452c <Display_task+0x318>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f00c f9b2 	bl	80107a4 <fflush>
	  }
	  if(flag[1] == 2){
 8004440:	4b3b      	ldr	r3, [pc, #236]	@ (8004530 <Display_task+0x31c>)
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d12b      	bne.n	80044a0 <Display_task+0x28c>
		  GUI_DrawRectangle(x_g[3]+space_1, y_g[1]+space_1, x_g[4]-space_1, y_g[2]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004448:	4b34      	ldr	r3, [pc, #208]	@ (800451c <Display_task+0x308>)
 800444a:	88da      	ldrh	r2, [r3, #6]
 800444c:	4b39      	ldr	r3, [pc, #228]	@ (8004534 <Display_task+0x320>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	4413      	add	r3, r2
 8004454:	b298      	uxth	r0, r3
 8004456:	4b32      	ldr	r3, [pc, #200]	@ (8004520 <Display_task+0x30c>)
 8004458:	885a      	ldrh	r2, [r3, #2]
 800445a:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <Display_task+0x320>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	4413      	add	r3, r2
 8004462:	b299      	uxth	r1, r3
 8004464:	4b2d      	ldr	r3, [pc, #180]	@ (800451c <Display_task+0x308>)
 8004466:	891a      	ldrh	r2, [r3, #8]
 8004468:	4b32      	ldr	r3, [pc, #200]	@ (8004534 <Display_task+0x320>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	b29c      	uxth	r4, r3
 8004472:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <Display_task+0x30c>)
 8004474:	889a      	ldrh	r2, [r3, #4]
 8004476:	4b2f      	ldr	r3, [pc, #188]	@ (8004534 <Display_task+0x320>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	2201      	movs	r2, #1
 8004482:	9202      	str	r2, [sp, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	9201      	str	r2, [sp, #4]
 8004488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800448c:	9200      	str	r2, [sp, #0]
 800448e:	4622      	mov	r2, r4
 8004490:	f7fd f932 	bl	80016f8 <GUI_DrawRectangle>
		  fflush(stdout);
 8004494:	4b25      	ldr	r3, [pc, #148]	@ (800452c <Display_task+0x318>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f00c f982 	bl	80107a4 <fflush>
	  }
	  if(Up_switch2 == 1){
 80044a0:	2101      	movs	r1, #1
 80044a2:	4825      	ldr	r0, [pc, #148]	@ (8004538 <Display_task+0x324>)
 80044a4:	f006 fce0 	bl	800ae68 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d12b      	bne.n	8004506 <Display_task+0x2f2>
		  GUI_DrawRectangle(x_g[3]+space, y_g[1]+space, x_g[4]-space, y_g[2]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <Display_task+0x308>)
 80044b0:	88da      	ldrh	r2, [r3, #6]
 80044b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004524 <Display_task+0x310>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	b298      	uxth	r0, r3
 80044bc:	4b18      	ldr	r3, [pc, #96]	@ (8004520 <Display_task+0x30c>)
 80044be:	885a      	ldrh	r2, [r3, #2]
 80044c0:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <Display_task+0x310>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	b299      	uxth	r1, r3
 80044ca:	4b14      	ldr	r3, [pc, #80]	@ (800451c <Display_task+0x308>)
 80044cc:	891a      	ldrh	r2, [r3, #8]
 80044ce:	4b15      	ldr	r3, [pc, #84]	@ (8004524 <Display_task+0x310>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	b29c      	uxth	r4, r3
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <Display_task+0x30c>)
 80044da:	889a      	ldrh	r2, [r3, #4]
 80044dc:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <Display_task+0x310>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2201      	movs	r2, #1
 80044e8:	9202      	str	r2, [sp, #8]
 80044ea:	2201      	movs	r2, #1
 80044ec:	9201      	str	r2, [sp, #4]
 80044ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044f2:	9200      	str	r2, [sp, #0]
 80044f4:	4622      	mov	r2, r4
 80044f6:	f7fd f8ff 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 80044fa:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <Display_task+0x318>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f00c f94f 	bl	80107a4 <fflush>
	  }
	  if(Up_switch2 == 0){
 8004506:	2101      	movs	r1, #1
 8004508:	480b      	ldr	r0, [pc, #44]	@ (8004538 <Display_task+0x324>)
 800450a:	f006 fcad 	bl	800ae68 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d13d      	bne.n	8004590 <Display_task+0x37c>
		  GUI_DrawRectangle(x_g[3]+space, y_g[1]+space, x_g[4]-space, y_g[2]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004514:	4b01      	ldr	r3, [pc, #4]	@ (800451c <Display_task+0x308>)
 8004516:	88da      	ldrh	r2, [r3, #6]
 8004518:	e010      	b.n	800453c <Display_task+0x328>
 800451a:	bf00      	nop
 800451c:	20000018 	.word	0x20000018
 8004520:	2000002c 	.word	0x2000002c
 8004524:	20000044 	.word	0x20000044
 8004528:	40021800 	.word	0x40021800
 800452c:	20000068 	.word	0x20000068
 8004530:	20000de4 	.word	0x20000de4
 8004534:	20000048 	.word	0x20000048
 8004538:	40020800 	.word	0x40020800
 800453c:	4ba2      	ldr	r3, [pc, #648]	@ (80047c8 <Display_task+0x5b4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	4413      	add	r3, r2
 8004544:	b298      	uxth	r0, r3
 8004546:	4ba1      	ldr	r3, [pc, #644]	@ (80047cc <Display_task+0x5b8>)
 8004548:	885a      	ldrh	r2, [r3, #2]
 800454a:	4b9f      	ldr	r3, [pc, #636]	@ (80047c8 <Display_task+0x5b4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	4413      	add	r3, r2
 8004552:	b299      	uxth	r1, r3
 8004554:	4b9e      	ldr	r3, [pc, #632]	@ (80047d0 <Display_task+0x5bc>)
 8004556:	891a      	ldrh	r2, [r3, #8]
 8004558:	4b9b      	ldr	r3, [pc, #620]	@ (80047c8 <Display_task+0x5b4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	b29c      	uxth	r4, r3
 8004562:	4b9a      	ldr	r3, [pc, #616]	@ (80047cc <Display_task+0x5b8>)
 8004564:	889a      	ldrh	r2, [r3, #4]
 8004566:	4b98      	ldr	r3, [pc, #608]	@ (80047c8 <Display_task+0x5b4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	b29b      	uxth	r3, r3
 8004570:	2201      	movs	r2, #1
 8004572:	9202      	str	r2, [sp, #8]
 8004574:	2201      	movs	r2, #1
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800457c:	9200      	str	r2, [sp, #0]
 800457e:	4622      	mov	r2, r4
 8004580:	f7fd f8ba 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 8004584:	4b93      	ldr	r3, [pc, #588]	@ (80047d4 <Display_task+0x5c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f00c f90a 	bl	80107a4 <fflush>
	  }
	  if(flag[3] == 2){
 8004590:	4b91      	ldr	r3, [pc, #580]	@ (80047d8 <Display_task+0x5c4>)
 8004592:	78db      	ldrb	r3, [r3, #3]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d124      	bne.n	80045e2 <Display_task+0x3ce>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 20, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8004598:	4b8d      	ldr	r3, [pc, #564]	@ (80047d0 <Display_task+0x5bc>)
 800459a:	889b      	ldrh	r3, [r3, #4]
 800459c:	461a      	mov	r2, r3
 800459e:	4b8c      	ldr	r3, [pc, #560]	@ (80047d0 <Display_task+0x5bc>)
 80045a0:	885b      	ldrh	r3, [r3, #2]
 80045a2:	4413      	add	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da00      	bge.n	80045aa <Display_task+0x396>
 80045a8:	3301      	adds	r3, #1
 80045aa:	105b      	asrs	r3, r3, #1
 80045ac:	b298      	uxth	r0, r3
 80045ae:	4b87      	ldr	r3, [pc, #540]	@ (80047cc <Display_task+0x5b8>)
 80045b0:	88db      	ldrh	r3, [r3, #6]
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b85      	ldr	r3, [pc, #532]	@ (80047cc <Display_task+0x5b8>)
 80045b6:	885b      	ldrh	r3, [r3, #2]
 80045b8:	4413      	add	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da00      	bge.n	80045c0 <Display_task+0x3ac>
 80045be:	3301      	adds	r3, #1
 80045c0:	105b      	asrs	r3, r3, #1
 80045c2:	b299      	uxth	r1, r3
 80045c4:	2301      	movs	r3, #1
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045d0:	2214      	movs	r2, #20
 80045d2:	f7fd f915 	bl	8001800 <GUI_DrawCircle>
		  fflush(stdout);
 80045d6:	4b7f      	ldr	r3, [pc, #508]	@ (80047d4 <Display_task+0x5c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f00c f8e1 	bl	80107a4 <fflush>
	  }
	  if(Ball_switch2 == 1){
 80045e2:	2110      	movs	r1, #16
 80045e4:	487d      	ldr	r0, [pc, #500]	@ (80047dc <Display_task+0x5c8>)
 80045e6:	f006 fc3f 	bl	800ae68 <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d124      	bne.n	800463a <Display_task+0x426>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 15, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 80045f0:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <Display_task+0x5bc>)
 80045f2:	889b      	ldrh	r3, [r3, #4]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b76      	ldr	r3, [pc, #472]	@ (80047d0 <Display_task+0x5bc>)
 80045f8:	885b      	ldrh	r3, [r3, #2]
 80045fa:	4413      	add	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da00      	bge.n	8004602 <Display_task+0x3ee>
 8004600:	3301      	adds	r3, #1
 8004602:	105b      	asrs	r3, r3, #1
 8004604:	b298      	uxth	r0, r3
 8004606:	4b71      	ldr	r3, [pc, #452]	@ (80047cc <Display_task+0x5b8>)
 8004608:	88db      	ldrh	r3, [r3, #6]
 800460a:	461a      	mov	r2, r3
 800460c:	4b6f      	ldr	r3, [pc, #444]	@ (80047cc <Display_task+0x5b8>)
 800460e:	885b      	ldrh	r3, [r3, #2]
 8004610:	4413      	add	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	da00      	bge.n	8004618 <Display_task+0x404>
 8004616:	3301      	adds	r3, #1
 8004618:	105b      	asrs	r3, r3, #1
 800461a:	b299      	uxth	r1, r3
 800461c:	2301      	movs	r3, #1
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2301      	movs	r3, #1
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004628:	220f      	movs	r2, #15
 800462a:	f7fd f8e9 	bl	8001800 <GUI_DrawCircle>
			fflush(stdout);
 800462e:	4b69      	ldr	r3, [pc, #420]	@ (80047d4 <Display_task+0x5c0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f00c f8b5 	bl	80107a4 <fflush>
	  }
	  if(Ball_switch2 == 0){
 800463a:	2110      	movs	r1, #16
 800463c:	4867      	ldr	r0, [pc, #412]	@ (80047dc <Display_task+0x5c8>)
 800463e:	f006 fc13 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d124      	bne.n	8004692 <Display_task+0x47e>
		  GUI_DrawCircle((x_g[2]+x_g[1])/2, ((y_g[3])+(y_g[1]))/2, 15, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004648:	4b61      	ldr	r3, [pc, #388]	@ (80047d0 <Display_task+0x5bc>)
 800464a:	889b      	ldrh	r3, [r3, #4]
 800464c:	461a      	mov	r2, r3
 800464e:	4b60      	ldr	r3, [pc, #384]	@ (80047d0 <Display_task+0x5bc>)
 8004650:	885b      	ldrh	r3, [r3, #2]
 8004652:	4413      	add	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	da00      	bge.n	800465a <Display_task+0x446>
 8004658:	3301      	adds	r3, #1
 800465a:	105b      	asrs	r3, r3, #1
 800465c:	b298      	uxth	r0, r3
 800465e:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <Display_task+0x5b8>)
 8004660:	88db      	ldrh	r3, [r3, #6]
 8004662:	461a      	mov	r2, r3
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <Display_task+0x5b8>)
 8004666:	885b      	ldrh	r3, [r3, #2]
 8004668:	4413      	add	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	da00      	bge.n	8004670 <Display_task+0x45c>
 800466e:	3301      	adds	r3, #1
 8004670:	105b      	asrs	r3, r3, #1
 8004672:	b299      	uxth	r1, r3
 8004674:	2301      	movs	r3, #1
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	2301      	movs	r3, #1
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004680:	220f      	movs	r2, #15
 8004682:	f7fd f8bd 	bl	8001800 <GUI_DrawCircle>
			fflush(stdout);
 8004686:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <Display_task+0x5c0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f00c f889 	bl	80107a4 <fflush>
	  }
	  if(flag[2] == 2){
 8004692:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <Display_task+0x5c4>)
 8004694:	789b      	ldrb	r3, [r3, #2]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d124      	bne.n	80046e4 <Display_task+0x4d0>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 20, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 800469a:	4b4d      	ldr	r3, [pc, #308]	@ (80047d0 <Display_task+0x5bc>)
 800469c:	88db      	ldrh	r3, [r3, #6]
 800469e:	461a      	mov	r2, r3
 80046a0:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <Display_task+0x5bc>)
 80046a2:	889b      	ldrh	r3, [r3, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da00      	bge.n	80046ac <Display_task+0x498>
 80046aa:	3301      	adds	r3, #1
 80046ac:	105b      	asrs	r3, r3, #1
 80046ae:	b298      	uxth	r0, r3
 80046b0:	4b46      	ldr	r3, [pc, #280]	@ (80047cc <Display_task+0x5b8>)
 80046b2:	88db      	ldrh	r3, [r3, #6]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b45      	ldr	r3, [pc, #276]	@ (80047cc <Display_task+0x5b8>)
 80046b8:	885b      	ldrh	r3, [r3, #2]
 80046ba:	4413      	add	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	da00      	bge.n	80046c2 <Display_task+0x4ae>
 80046c0:	3301      	adds	r3, #1
 80046c2:	105b      	asrs	r3, r3, #1
 80046c4:	b299      	uxth	r1, r3
 80046c6:	2301      	movs	r3, #1
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046d2:	2214      	movs	r2, #20
 80046d4:	f7fd f894 	bl	8001800 <GUI_DrawCircle>
		  fflush(stdout);
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <Display_task+0x5c0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f00c f860 	bl	80107a4 <fflush>
	  }
	  if(Ball_switch1 == 1){
 80046e4:	2102      	movs	r1, #2
 80046e6:	483e      	ldr	r0, [pc, #248]	@ (80047e0 <Display_task+0x5cc>)
 80046e8:	f006 fbbe 	bl	800ae68 <HAL_GPIO_ReadPin>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d124      	bne.n	800473c <Display_task+0x528>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 15, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <Display_task+0x5bc>)
 80046f4:	88db      	ldrh	r3, [r3, #6]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <Display_task+0x5bc>)
 80046fa:	889b      	ldrh	r3, [r3, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da00      	bge.n	8004704 <Display_task+0x4f0>
 8004702:	3301      	adds	r3, #1
 8004704:	105b      	asrs	r3, r3, #1
 8004706:	b298      	uxth	r0, r3
 8004708:	4b30      	ldr	r3, [pc, #192]	@ (80047cc <Display_task+0x5b8>)
 800470a:	88db      	ldrh	r3, [r3, #6]
 800470c:	461a      	mov	r2, r3
 800470e:	4b2f      	ldr	r3, [pc, #188]	@ (80047cc <Display_task+0x5b8>)
 8004710:	885b      	ldrh	r3, [r3, #2]
 8004712:	4413      	add	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	da00      	bge.n	800471a <Display_task+0x506>
 8004718:	3301      	adds	r3, #1
 800471a:	105b      	asrs	r3, r3, #1
 800471c:	b299      	uxth	r1, r3
 800471e:	2301      	movs	r3, #1
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	2301      	movs	r3, #1
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800472a:	220f      	movs	r2, #15
 800472c:	f7fd f868 	bl	8001800 <GUI_DrawCircle>
			fflush(stdout);
 8004730:	4b28      	ldr	r3, [pc, #160]	@ (80047d4 <Display_task+0x5c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f00c f834 	bl	80107a4 <fflush>
	  }
	  if(Ball_switch1 == 0){
 800473c:	2102      	movs	r1, #2
 800473e:	4828      	ldr	r0, [pc, #160]	@ (80047e0 <Display_task+0x5cc>)
 8004740:	f006 fb92 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d124      	bne.n	8004794 <Display_task+0x580>
		  GUI_DrawCircle((x_g[3]+x_g[2])/2, ((y_g[3])+(y_g[1]))/2, 15, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 800474a:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <Display_task+0x5bc>)
 800474c:	88db      	ldrh	r3, [r3, #6]
 800474e:	461a      	mov	r2, r3
 8004750:	4b1f      	ldr	r3, [pc, #124]	@ (80047d0 <Display_task+0x5bc>)
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	4413      	add	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	da00      	bge.n	800475c <Display_task+0x548>
 800475a:	3301      	adds	r3, #1
 800475c:	105b      	asrs	r3, r3, #1
 800475e:	b298      	uxth	r0, r3
 8004760:	4b1a      	ldr	r3, [pc, #104]	@ (80047cc <Display_task+0x5b8>)
 8004762:	88db      	ldrh	r3, [r3, #6]
 8004764:	461a      	mov	r2, r3
 8004766:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <Display_task+0x5b8>)
 8004768:	885b      	ldrh	r3, [r3, #2]
 800476a:	4413      	add	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	da00      	bge.n	8004772 <Display_task+0x55e>
 8004770:	3301      	adds	r3, #1
 8004772:	105b      	asrs	r3, r3, #1
 8004774:	b299      	uxth	r1, r3
 8004776:	2301      	movs	r3, #1
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	2301      	movs	r3, #1
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004782:	220f      	movs	r2, #15
 8004784:	f7fd f83c 	bl	8001800 <GUI_DrawCircle>
			fflush(stdout);
 8004788:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <Display_task+0x5c0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f00c f808 	bl	80107a4 <fflush>
	  }
	  if(flag[5] == 2){
 8004794:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <Display_task+0x5c4>)
 8004796:	795b      	ldrb	r3, [r3, #5]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d13d      	bne.n	8004818 <Display_task+0x604>
		  GUI_DrawRectangle(x_g[0]+space_1, y_g[2]+space_1, x_g[1]-space_1, y_g[3]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <Display_task+0x5bc>)
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <Display_task+0x5d0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	b298      	uxth	r0, r3
 80047aa:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <Display_task+0x5b8>)
 80047ac:	889a      	ldrh	r2, [r3, #4]
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <Display_task+0x5d0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	b299      	uxth	r1, r3
 80047b8:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <Display_task+0x5bc>)
 80047ba:	885a      	ldrh	r2, [r3, #2]
 80047bc:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <Display_task+0x5d0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	e010      	b.n	80047e8 <Display_task+0x5d4>
 80047c6:	bf00      	nop
 80047c8:	20000044 	.word	0x20000044
 80047cc:	2000002c 	.word	0x2000002c
 80047d0:	20000018 	.word	0x20000018
 80047d4:	20000068 	.word	0x20000068
 80047d8:	20000de4 	.word	0x20000de4
 80047dc:	40020000 	.word	0x40020000
 80047e0:	40020800 	.word	0x40020800
 80047e4:	20000048 	.word	0x20000048
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	4b9a      	ldr	r3, [pc, #616]	@ (8004a54 <Display_task+0x840>)
 80047ec:	88da      	ldrh	r2, [r3, #6]
 80047ee:	4b9a      	ldr	r3, [pc, #616]	@ (8004a58 <Display_task+0x844>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2201      	movs	r2, #1
 80047fa:	9202      	str	r2, [sp, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004804:	9200      	str	r2, [sp, #0]
 8004806:	4622      	mov	r2, r4
 8004808:	f7fc ff76 	bl	80016f8 <GUI_DrawRectangle>
		  fflush(stdout);
 800480c:	4b93      	ldr	r3, [pc, #588]	@ (8004a5c <Display_task+0x848>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f00b ffc6 	bl	80107a4 <fflush>
	  }
	  if(Down_switch2 == 1){
 8004818:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800481c:	4890      	ldr	r0, [pc, #576]	@ (8004a60 <Display_task+0x84c>)
 800481e:	f006 fb23 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004822:	4603      	mov	r3, r0
 8004824:	2b01      	cmp	r3, #1
 8004826:	d12b      	bne.n	8004880 <Display_task+0x66c>
		  GUI_DrawRectangle(x_g[0]+space, y_g[2]+space, x_g[1]-space, y_g[3]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004828:	4b8e      	ldr	r3, [pc, #568]	@ (8004a64 <Display_task+0x850>)
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	4b8e      	ldr	r3, [pc, #568]	@ (8004a68 <Display_task+0x854>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	4413      	add	r3, r2
 8004834:	b298      	uxth	r0, r3
 8004836:	4b87      	ldr	r3, [pc, #540]	@ (8004a54 <Display_task+0x840>)
 8004838:	889a      	ldrh	r2, [r3, #4]
 800483a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a68 <Display_task+0x854>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	4413      	add	r3, r2
 8004842:	b299      	uxth	r1, r3
 8004844:	4b87      	ldr	r3, [pc, #540]	@ (8004a64 <Display_task+0x850>)
 8004846:	885a      	ldrh	r2, [r3, #2]
 8004848:	4b87      	ldr	r3, [pc, #540]	@ (8004a68 <Display_task+0x854>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b29c      	uxth	r4, r3
 8004852:	4b80      	ldr	r3, [pc, #512]	@ (8004a54 <Display_task+0x840>)
 8004854:	88da      	ldrh	r2, [r3, #6]
 8004856:	4b84      	ldr	r3, [pc, #528]	@ (8004a68 <Display_task+0x854>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	2201      	movs	r2, #1
 8004862:	9202      	str	r2, [sp, #8]
 8004864:	2201      	movs	r2, #1
 8004866:	9201      	str	r2, [sp, #4]
 8004868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800486c:	9200      	str	r2, [sp, #0]
 800486e:	4622      	mov	r2, r4
 8004870:	f7fc ff42 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 8004874:	4b79      	ldr	r3, [pc, #484]	@ (8004a5c <Display_task+0x848>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f00b ff92 	bl	80107a4 <fflush>
	  }
	  if(Down_switch2 == 0){
 8004880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004884:	4876      	ldr	r0, [pc, #472]	@ (8004a60 <Display_task+0x84c>)
 8004886:	f006 faef 	bl	800ae68 <HAL_GPIO_ReadPin>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12b      	bne.n	80048e8 <Display_task+0x6d4>
		  GUI_DrawRectangle(x_g[0]+space, y_g[2]+space, x_g[1]-space, y_g[3]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8004890:	4b74      	ldr	r3, [pc, #464]	@ (8004a64 <Display_task+0x850>)
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	4b74      	ldr	r3, [pc, #464]	@ (8004a68 <Display_task+0x854>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	4413      	add	r3, r2
 800489c:	b298      	uxth	r0, r3
 800489e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a54 <Display_task+0x840>)
 80048a0:	889a      	ldrh	r2, [r3, #4]
 80048a2:	4b71      	ldr	r3, [pc, #452]	@ (8004a68 <Display_task+0x854>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	b299      	uxth	r1, r3
 80048ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <Display_task+0x850>)
 80048ae:	885a      	ldrh	r2, [r3, #2]
 80048b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004a68 <Display_task+0x854>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	4b66      	ldr	r3, [pc, #408]	@ (8004a54 <Display_task+0x840>)
 80048bc:	88da      	ldrh	r2, [r3, #6]
 80048be:	4b6a      	ldr	r3, [pc, #424]	@ (8004a68 <Display_task+0x854>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2201      	movs	r2, #1
 80048ca:	9202      	str	r2, [sp, #8]
 80048cc:	2201      	movs	r2, #1
 80048ce:	9201      	str	r2, [sp, #4]
 80048d0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80048d4:	9200      	str	r2, [sp, #0]
 80048d6:	4622      	mov	r2, r4
 80048d8:	f7fc ff0e 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 80048dc:	4b5f      	ldr	r3, [pc, #380]	@ (8004a5c <Display_task+0x848>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f00b ff5e 	bl	80107a4 <fflush>
	  }
	  if(flag[4] == 2){
 80048e8:	4b60      	ldr	r3, [pc, #384]	@ (8004a6c <Display_task+0x858>)
 80048ea:	791b      	ldrb	r3, [r3, #4]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d12b      	bne.n	8004948 <Display_task+0x734>
		  GUI_DrawRectangle(x_g[3]+space_1, y_g[2]+space_1, x_g[4]-space_1, y_g[3]-space_1, WHITE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80048f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a64 <Display_task+0x850>)
 80048f2:	88da      	ldrh	r2, [r3, #6]
 80048f4:	4b58      	ldr	r3, [pc, #352]	@ (8004a58 <Display_task+0x844>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	b298      	uxth	r0, r3
 80048fe:	4b55      	ldr	r3, [pc, #340]	@ (8004a54 <Display_task+0x840>)
 8004900:	889a      	ldrh	r2, [r3, #4]
 8004902:	4b55      	ldr	r3, [pc, #340]	@ (8004a58 <Display_task+0x844>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	4413      	add	r3, r2
 800490a:	b299      	uxth	r1, r3
 800490c:	4b55      	ldr	r3, [pc, #340]	@ (8004a64 <Display_task+0x850>)
 800490e:	891a      	ldrh	r2, [r3, #8]
 8004910:	4b51      	ldr	r3, [pc, #324]	@ (8004a58 <Display_task+0x844>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	b29c      	uxth	r4, r3
 800491a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a54 <Display_task+0x840>)
 800491c:	88da      	ldrh	r2, [r3, #6]
 800491e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a58 <Display_task+0x844>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	2201      	movs	r2, #1
 800492a:	9202      	str	r2, [sp, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	9201      	str	r2, [sp, #4]
 8004930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004934:	9200      	str	r2, [sp, #0]
 8004936:	4622      	mov	r2, r4
 8004938:	f7fc fede 	bl	80016f8 <GUI_DrawRectangle>
		  fflush(stdout);
 800493c:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <Display_task+0x848>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f00b ff2e 	bl	80107a4 <fflush>
	  }
	  if(Down_switch1 == 1){
 8004948:	2104      	movs	r1, #4
 800494a:	4849      	ldr	r0, [pc, #292]	@ (8004a70 <Display_task+0x85c>)
 800494c:	f006 fa8c 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d12b      	bne.n	80049ae <Display_task+0x79a>
		  GUI_DrawRectangle(x_g[3]+space, y_g[2]+space, x_g[4]-space, y_g[3]-space, WHITE, DRAW_FULL, DOT_PIXEL_DFT);
 8004956:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <Display_task+0x850>)
 8004958:	88da      	ldrh	r2, [r3, #6]
 800495a:	4b43      	ldr	r3, [pc, #268]	@ (8004a68 <Display_task+0x854>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	4413      	add	r3, r2
 8004962:	b298      	uxth	r0, r3
 8004964:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <Display_task+0x840>)
 8004966:	889a      	ldrh	r2, [r3, #4]
 8004968:	4b3f      	ldr	r3, [pc, #252]	@ (8004a68 <Display_task+0x854>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4413      	add	r3, r2
 8004970:	b299      	uxth	r1, r3
 8004972:	4b3c      	ldr	r3, [pc, #240]	@ (8004a64 <Display_task+0x850>)
 8004974:	891a      	ldrh	r2, [r3, #8]
 8004976:	4b3c      	ldr	r3, [pc, #240]	@ (8004a68 <Display_task+0x854>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	b29c      	uxth	r4, r3
 8004980:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <Display_task+0x840>)
 8004982:	88da      	ldrh	r2, [r3, #6]
 8004984:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <Display_task+0x854>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	2201      	movs	r2, #1
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	2201      	movs	r2, #1
 8004994:	9201      	str	r2, [sp, #4]
 8004996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499a:	9200      	str	r2, [sp, #0]
 800499c:	4622      	mov	r2, r4
 800499e:	f7fc feab 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 80049a2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a5c <Display_task+0x848>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f00b fefb 	bl	80107a4 <fflush>
	  }
	  if(Down_switch1 == 0){
 80049ae:	2104      	movs	r1, #4
 80049b0:	482f      	ldr	r0, [pc, #188]	@ (8004a70 <Display_task+0x85c>)
 80049b2:	f006 fa59 	bl	800ae68 <HAL_GPIO_ReadPin>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d12b      	bne.n	8004a14 <Display_task+0x800>
		  GUI_DrawRectangle(x_g[3]+space, y_g[2]+space, x_g[4]-space, y_g[3]-space, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 80049bc:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <Display_task+0x850>)
 80049be:	88da      	ldrh	r2, [r3, #6]
 80049c0:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <Display_task+0x854>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	b298      	uxth	r0, r3
 80049ca:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <Display_task+0x840>)
 80049cc:	889a      	ldrh	r2, [r3, #4]
 80049ce:	4b26      	ldr	r3, [pc, #152]	@ (8004a68 <Display_task+0x854>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <Display_task+0x850>)
 80049da:	891a      	ldrh	r2, [r3, #8]
 80049dc:	4b22      	ldr	r3, [pc, #136]	@ (8004a68 <Display_task+0x854>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b29c      	uxth	r4, r3
 80049e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <Display_task+0x840>)
 80049e8:	88da      	ldrh	r2, [r3, #6]
 80049ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004a68 <Display_task+0x854>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2201      	movs	r2, #1
 80049f6:	9202      	str	r2, [sp, #8]
 80049f8:	2201      	movs	r2, #1
 80049fa:	9201      	str	r2, [sp, #4]
 80049fc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	4622      	mov	r2, r4
 8004a04:	f7fc fe78 	bl	80016f8 <GUI_DrawRectangle>
			fflush(stdout);
 8004a08:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <Display_task+0x848>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f00b fec8 	bl	80107a4 <fflush>
	  }
	  /******************************RELAY************************************/
	  if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)) == 0){
 8004a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004a18:	4816      	ldr	r0, [pc, #88]	@ (8004a74 <Display_task+0x860>)
 8004a1a:	f006 fa25 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d14b      	bne.n	8004abc <Display_task+0x8a8>
		  GUI_DrawRectangle((x_g[4]+x_g[5])/2+space, y_g[1]+space, (x_g[5]+x_g[6])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 8004a24:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <Display_task+0x850>)
 8004a26:	891b      	ldrh	r3, [r3, #8]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <Display_task+0x850>)
 8004a2c:	895b      	ldrh	r3, [r3, #10]
 8004a2e:	4413      	add	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	da00      	bge.n	8004a36 <Display_task+0x822>
 8004a34:	3301      	adds	r3, #1
 8004a36:	105b      	asrs	r3, r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <Display_task+0x854>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	b298      	uxth	r0, r3
 8004a44:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <Display_task+0x840>)
 8004a46:	885a      	ldrh	r2, [r3, #2]
 8004a48:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <Display_task+0x854>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	b299      	uxth	r1, r3
 8004a52:	e011      	b.n	8004a78 <Display_task+0x864>
 8004a54:	2000002c 	.word	0x2000002c
 8004a58:	20000048 	.word	0x20000048
 8004a5c:	20000068 	.word	0x20000068
 8004a60:	40020800 	.word	0x40020800
 8004a64:	20000018 	.word	0x20000018
 8004a68:	20000044 	.word	0x20000044
 8004a6c:	20000de4 	.word	0x20000de4
 8004a70:	40020c00 	.word	0x40020c00
 8004a74:	40021000 	.word	0x40021000
 8004a78:	4b89      	ldr	r3, [pc, #548]	@ (8004ca0 <Display_task+0xa8c>)
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b88      	ldr	r3, [pc, #544]	@ (8004ca0 <Display_task+0xa8c>)
 8004a80:	899b      	ldrh	r3, [r3, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da00      	bge.n	8004a8a <Display_task+0x876>
 8004a88:	3301      	adds	r3, #1
 8004a8a:	105b      	asrs	r3, r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ca4 <Display_task+0xa90>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	b29c      	uxth	r4, r3
 8004a98:	4b83      	ldr	r3, [pc, #524]	@ (8004ca8 <Display_task+0xa94>)
 8004a9a:	889a      	ldrh	r2, [r3, #4]
 8004a9c:	4b81      	ldr	r3, [pc, #516]	@ (8004ca4 <Display_task+0xa90>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	9202      	str	r2, [sp, #8]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	9201      	str	r2, [sp, #4]
 8004aae:	f248 4230 	movw	r2, #33840	@ 0x8430
 8004ab2:	9200      	str	r2, [sp, #0]
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	f7fc fe1f 	bl	80016f8 <GUI_DrawRectangle>
 8004aba:	e037      	b.n	8004b2c <Display_task+0x918>
	  }
	  else{
		  GUI_DrawRectangle((x_g[4]+x_g[5])/2+space, y_g[1]+space, (x_g[5]+x_g[6])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8004abc:	4b78      	ldr	r3, [pc, #480]	@ (8004ca0 <Display_task+0xa8c>)
 8004abe:	891b      	ldrh	r3, [r3, #8]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b77      	ldr	r3, [pc, #476]	@ (8004ca0 <Display_task+0xa8c>)
 8004ac4:	895b      	ldrh	r3, [r3, #10]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da00      	bge.n	8004ace <Display_task+0x8ba>
 8004acc:	3301      	adds	r3, #1
 8004ace:	105b      	asrs	r3, r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	4b74      	ldr	r3, [pc, #464]	@ (8004ca4 <Display_task+0xa90>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	b298      	uxth	r0, r3
 8004adc:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <Display_task+0xa94>)
 8004ade:	885a      	ldrh	r2, [r3, #2]
 8004ae0:	4b70      	ldr	r3, [pc, #448]	@ (8004ca4 <Display_task+0xa90>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	b299      	uxth	r1, r3
 8004aea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <Display_task+0xa8c>)
 8004aec:	895b      	ldrh	r3, [r3, #10]
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca0 <Display_task+0xa8c>)
 8004af2:	899b      	ldrh	r3, [r3, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da00      	bge.n	8004afc <Display_task+0x8e8>
 8004afa:	3301      	adds	r3, #1
 8004afc:	105b      	asrs	r3, r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	4b68      	ldr	r3, [pc, #416]	@ (8004ca4 <Display_task+0xa90>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	b29c      	uxth	r4, r3
 8004b0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ca8 <Display_task+0xa94>)
 8004b0c:	889a      	ldrh	r2, [r3, #4]
 8004b0e:	4b65      	ldr	r3, [pc, #404]	@ (8004ca4 <Display_task+0xa90>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2201      	movs	r2, #1
 8004b1a:	9202      	str	r2, [sp, #8]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	9201      	str	r2, [sp, #4]
 8004b20:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004b24:	9200      	str	r2, [sp, #0]
 8004b26:	4622      	mov	r2, r4
 8004b28:	f7fc fde6 	bl	80016f8 <GUI_DrawRectangle>
	  }
	  if( (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)) == 0){
 8004b2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b30:	485e      	ldr	r0, [pc, #376]	@ (8004cac <Display_task+0xa98>)
 8004b32:	f006 f999 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d138      	bne.n	8004bae <Display_task+0x99a>
		  GUI_DrawRectangle((x_g[6]+x_g[7])/2+space, y_g[1]+space, (x_g[7]+x_g[8])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 8004b3c:	4b58      	ldr	r3, [pc, #352]	@ (8004ca0 <Display_task+0xa8c>)
 8004b3e:	899b      	ldrh	r3, [r3, #12]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b57      	ldr	r3, [pc, #348]	@ (8004ca0 <Display_task+0xa8c>)
 8004b44:	89db      	ldrh	r3, [r3, #14]
 8004b46:	4413      	add	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da00      	bge.n	8004b4e <Display_task+0x93a>
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	105b      	asrs	r3, r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	4b54      	ldr	r3, [pc, #336]	@ (8004ca4 <Display_task+0xa90>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	b298      	uxth	r0, r3
 8004b5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ca8 <Display_task+0xa94>)
 8004b5e:	885a      	ldrh	r2, [r3, #2]
 8004b60:	4b50      	ldr	r3, [pc, #320]	@ (8004ca4 <Display_task+0xa90>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	b299      	uxth	r1, r3
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca0 <Display_task+0xa8c>)
 8004b6c:	89db      	ldrh	r3, [r3, #14]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <Display_task+0xa8c>)
 8004b72:	8a1b      	ldrh	r3, [r3, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da00      	bge.n	8004b7c <Display_task+0x968>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	105b      	asrs	r3, r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	4b48      	ldr	r3, [pc, #288]	@ (8004ca4 <Display_task+0xa90>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	b29c      	uxth	r4, r3
 8004b8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ca8 <Display_task+0xa94>)
 8004b8c:	889a      	ldrh	r2, [r3, #4]
 8004b8e:	4b45      	ldr	r3, [pc, #276]	@ (8004ca4 <Display_task+0xa90>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2201      	movs	r2, #1
 8004b9a:	9202      	str	r2, [sp, #8]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	9201      	str	r2, [sp, #4]
 8004ba0:	f248 4230 	movw	r2, #33840	@ 0x8430
 8004ba4:	9200      	str	r2, [sp, #0]
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	f7fc fda6 	bl	80016f8 <GUI_DrawRectangle>
 8004bac:	e037      	b.n	8004c1e <Display_task+0xa0a>
	  }
	  else{
		  GUI_DrawRectangle((x_g[6]+x_g[7])/2+space, y_g[1]+space, (x_g[7]+x_g[8])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8004bae:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca0 <Display_task+0xa8c>)
 8004bb0:	899b      	ldrh	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca0 <Display_task+0xa8c>)
 8004bb6:	89db      	ldrh	r3, [r3, #14]
 8004bb8:	4413      	add	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da00      	bge.n	8004bc0 <Display_task+0x9ac>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	105b      	asrs	r3, r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <Display_task+0xa90>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	b298      	uxth	r0, r3
 8004bce:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <Display_task+0xa94>)
 8004bd0:	885a      	ldrh	r2, [r3, #2]
 8004bd2:	4b34      	ldr	r3, [pc, #208]	@ (8004ca4 <Display_task+0xa90>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	b299      	uxth	r1, r3
 8004bdc:	4b30      	ldr	r3, [pc, #192]	@ (8004ca0 <Display_task+0xa8c>)
 8004bde:	89db      	ldrh	r3, [r3, #14]
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca0 <Display_task+0xa8c>)
 8004be4:	8a1b      	ldrh	r3, [r3, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da00      	bge.n	8004bee <Display_task+0x9da>
 8004bec:	3301      	adds	r3, #1
 8004bee:	105b      	asrs	r3, r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <Display_task+0xa90>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	b29c      	uxth	r4, r3
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <Display_task+0xa94>)
 8004bfe:	889a      	ldrh	r2, [r3, #4]
 8004c00:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <Display_task+0xa90>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	9202      	str	r2, [sp, #8]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	9201      	str	r2, [sp, #4]
 8004c12:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	4622      	mov	r2, r4
 8004c1a:	f7fc fd6d 	bl	80016f8 <GUI_DrawRectangle>
	  }
	  if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)) == 0){
 8004c1e:	2108      	movs	r1, #8
 8004c20:	4823      	ldr	r0, [pc, #140]	@ (8004cb0 <Display_task+0xa9c>)
 8004c22:	f006 f921 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d143      	bne.n	8004cb4 <Display_task+0xaa0>
		  GUI_DrawRectangle((x_g[5]+x_g[6])/2+space, y_g[1]+space, (x_g[6]+x_g[7])/2-space, y_g[2]-space, GRAY, DRAW_FULL, DOT_PIXEL_DFT);
 8004c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <Display_task+0xa8c>)
 8004c2e:	895b      	ldrh	r3, [r3, #10]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <Display_task+0xa8c>)
 8004c34:	899b      	ldrh	r3, [r3, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	da00      	bge.n	8004c3e <Display_task+0xa2a>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	105b      	asrs	r3, r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	4b18      	ldr	r3, [pc, #96]	@ (8004ca4 <Display_task+0xa90>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ca8 <Display_task+0xa94>)
 8004c4e:	885a      	ldrh	r2, [r3, #2]
 8004c50:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <Display_task+0xa90>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	b299      	uxth	r1, r3
 8004c5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <Display_task+0xa8c>)
 8004c5c:	899b      	ldrh	r3, [r3, #12]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <Display_task+0xa8c>)
 8004c62:	89db      	ldrh	r3, [r3, #14]
 8004c64:	4413      	add	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da00      	bge.n	8004c6c <Display_task+0xa58>
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	105b      	asrs	r3, r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <Display_task+0xa90>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	b29c      	uxth	r4, r3
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <Display_task+0xa94>)
 8004c7c:	889a      	ldrh	r2, [r3, #4]
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <Display_task+0xa90>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2201      	movs	r2, #1
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	9201      	str	r2, [sp, #4]
 8004c90:	f248 4230 	movw	r2, #33840	@ 0x8430
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	4622      	mov	r2, r4
 8004c98:	f7fc fd2e 	bl	80016f8 <GUI_DrawRectangle>
 8004c9c:	e042      	b.n	8004d24 <Display_task+0xb10>
 8004c9e:	bf00      	nop
 8004ca0:	20000018 	.word	0x20000018
 8004ca4:	20000044 	.word	0x20000044
 8004ca8:	2000002c 	.word	0x2000002c
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40021400 	.word	0x40021400
	  }
	  else{
		  GUI_DrawRectangle((x_g[5]+x_g[6])/2+space, y_g[1]+space, (x_g[6]+x_g[7])/2-space, y_g[2]-space, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8004cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8004f34 <Display_task+0xd20>)
 8004cb6:	895b      	ldrh	r3, [r3, #10]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b9e      	ldr	r3, [pc, #632]	@ (8004f34 <Display_task+0xd20>)
 8004cbc:	899b      	ldrh	r3, [r3, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	da00      	bge.n	8004cc6 <Display_task+0xab2>
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	105b      	asrs	r3, r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	4b9b      	ldr	r3, [pc, #620]	@ (8004f38 <Display_task+0xd24>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	b298      	uxth	r0, r3
 8004cd4:	4b99      	ldr	r3, [pc, #612]	@ (8004f3c <Display_task+0xd28>)
 8004cd6:	885a      	ldrh	r2, [r3, #2]
 8004cd8:	4b97      	ldr	r3, [pc, #604]	@ (8004f38 <Display_task+0xd24>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	4b94      	ldr	r3, [pc, #592]	@ (8004f34 <Display_task+0xd20>)
 8004ce4:	899b      	ldrh	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4b92      	ldr	r3, [pc, #584]	@ (8004f34 <Display_task+0xd20>)
 8004cea:	89db      	ldrh	r3, [r3, #14]
 8004cec:	4413      	add	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da00      	bge.n	8004cf4 <Display_task+0xae0>
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	105b      	asrs	r3, r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8004f38 <Display_task+0xd24>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29c      	uxth	r4, r3
 8004d02:	4b8e      	ldr	r3, [pc, #568]	@ (8004f3c <Display_task+0xd28>)
 8004d04:	889a      	ldrh	r2, [r3, #4]
 8004d06:	4b8c      	ldr	r3, [pc, #560]	@ (8004f38 <Display_task+0xd24>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	9202      	str	r2, [sp, #8]
 8004d14:	2201      	movs	r2, #1
 8004d16:	9201      	str	r2, [sp, #4]
 8004d18:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d1c:	9200      	str	r2, [sp, #0]
 8004d1e:	4622      	mov	r2, r4
 8004d20:	f7fc fcea 	bl	80016f8 <GUI_DrawRectangle>
	  }
/******************************ROBOT************************************/
	  	sprintf(m1_hurd[0], "%d   ", M1.en_speed);
 8004d24:	4b86      	ldr	r3, [pc, #536]	@ (8004f40 <Display_task+0xd2c>)
 8004d26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4985      	ldr	r1, [pc, #532]	@ (8004f44 <Display_task+0xd30>)
 8004d2e:	4886      	ldr	r0, [pc, #536]	@ (8004f48 <Display_task+0xd34>)
 8004d30:	f00b fe0e 	bl	8010950 <siprintf>
	  	sprintf(m1_hurd[1], "%d   ", M2.en_speed);
 8004d34:	4b85      	ldr	r3, [pc, #532]	@ (8004f4c <Display_task+0xd38>)
 8004d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4981      	ldr	r1, [pc, #516]	@ (8004f44 <Display_task+0xd30>)
 8004d3e:	4884      	ldr	r0, [pc, #528]	@ (8004f50 <Display_task+0xd3c>)
 8004d40:	f00b fe06 	bl	8010950 <siprintf>
	  	sprintf(m1_hurd[2], "%d   ", M3.en_speed);
 8004d44:	4b83      	ldr	r3, [pc, #524]	@ (8004f54 <Display_task+0xd40>)
 8004d46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	497d      	ldr	r1, [pc, #500]	@ (8004f44 <Display_task+0xd30>)
 8004d4e:	4882      	ldr	r0, [pc, #520]	@ (8004f58 <Display_task+0xd44>)
 8004d50:	f00b fdfe 	bl	8010950 <siprintf>
	  	sprintf(m1_hurd[3], "%d   ", M4.en_speed);
 8004d54:	4b81      	ldr	r3, [pc, #516]	@ (8004f5c <Display_task+0xd48>)
 8004d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4979      	ldr	r1, [pc, #484]	@ (8004f44 <Display_task+0xd30>)
 8004d5e:	4880      	ldr	r0, [pc, #512]	@ (8004f60 <Display_task+0xd4c>)
 8004d60:	f00b fdf6 	bl	8010950 <siprintf>
	  	sprintf(pwm[0], "%u   ", lf);
 8004d64:	4b7f      	ldr	r3, [pc, #508]	@ (8004f64 <Display_task+0xd50>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	497f      	ldr	r1, [pc, #508]	@ (8004f68 <Display_task+0xd54>)
 8004d6c:	487f      	ldr	r0, [pc, #508]	@ (8004f6c <Display_task+0xd58>)
 8004d6e:	f00b fdef 	bl	8010950 <siprintf>
	  	sprintf(pwm[1], "%u   ", lb);
 8004d72:	4b7f      	ldr	r3, [pc, #508]	@ (8004f70 <Display_task+0xd5c>)
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	497b      	ldr	r1, [pc, #492]	@ (8004f68 <Display_task+0xd54>)
 8004d7a:	487e      	ldr	r0, [pc, #504]	@ (8004f74 <Display_task+0xd60>)
 8004d7c:	f00b fde8 	bl	8010950 <siprintf>
	  	sprintf(pwm[2], "%u   ", rf);
 8004d80:	4b7d      	ldr	r3, [pc, #500]	@ (8004f78 <Display_task+0xd64>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4978      	ldr	r1, [pc, #480]	@ (8004f68 <Display_task+0xd54>)
 8004d88:	487c      	ldr	r0, [pc, #496]	@ (8004f7c <Display_task+0xd68>)
 8004d8a:	f00b fde1 	bl	8010950 <siprintf>
	  	sprintf(pwm[3], "%u   ", rb);
 8004d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f80 <Display_task+0xd6c>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	4974      	ldr	r1, [pc, #464]	@ (8004f68 <Display_task+0xd54>)
 8004d96:	487b      	ldr	r0, [pc, #492]	@ (8004f84 <Display_task+0xd70>)
 8004d98:	f00b fdda 	bl	8010950 <siprintf>
		switchStatePrev_1 = Up_switch2;
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	487a      	ldr	r0, [pc, #488]	@ (8004f88 <Display_task+0xd74>)
 8004da0:	f006 f862 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b78      	ldr	r3, [pc, #480]	@ (8004f8c <Display_task+0xd78>)
 8004daa:	601a      	str	r2, [r3, #0]
		switchStatePrev_2 = Up_switch2;
 8004dac:	2101      	movs	r1, #1
 8004dae:	4876      	ldr	r0, [pc, #472]	@ (8004f88 <Display_task+0xd74>)
 8004db0:	f006 f85a 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b75      	ldr	r3, [pc, #468]	@ (8004f90 <Display_task+0xd7c>)
 8004dba:	601a      	str	r2, [r3, #0]
		switchStatePrev_3 = Ball_switch2;
 8004dbc:	2110      	movs	r1, #16
 8004dbe:	4875      	ldr	r0, [pc, #468]	@ (8004f94 <Display_task+0xd80>)
 8004dc0:	f006 f852 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b73      	ldr	r3, [pc, #460]	@ (8004f98 <Display_task+0xd84>)
 8004dca:	601a      	str	r2, [r3, #0]
		switchStatePrev_4 = Ball_switch2;
 8004dcc:	2110      	movs	r1, #16
 8004dce:	4871      	ldr	r0, [pc, #452]	@ (8004f94 <Display_task+0xd80>)
 8004dd0:	f006 f84a 	bl	800ae68 <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b70      	ldr	r3, [pc, #448]	@ (8004f9c <Display_task+0xd88>)
 8004dda:	601a      	str	r2, [r3, #0]

		GUI_DisString_EN(x_g[1]+space, y_g[4], m1_hurd[0], &Font16, LCD_BACKGROUND, WHITE);
 8004ddc:	4b55      	ldr	r3, [pc, #340]	@ (8004f34 <Display_task+0xd20>)
 8004dde:	885a      	ldrh	r2, [r3, #2]
 8004de0:	4b55      	ldr	r3, [pc, #340]	@ (8004f38 <Display_task+0xd24>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	b298      	uxth	r0, r3
 8004dea:	4b54      	ldr	r3, [pc, #336]	@ (8004f3c <Display_task+0xd28>)
 8004dec:	8919      	ldrh	r1, [r3, #8]
 8004dee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4b69      	ldr	r3, [pc, #420]	@ (8004fa0 <Display_task+0xd8c>)
 8004dfa:	4a53      	ldr	r2, [pc, #332]	@ (8004f48 <Display_task+0xd34>)
 8004dfc:	f7fc ff38 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[1]+space, y_g[4]+5*space, pwm[0], &Font16, LCD_BACKGROUND, WHITE);
 8004e00:	4b4c      	ldr	r3, [pc, #304]	@ (8004f34 <Display_task+0xd20>)
 8004e02:	885a      	ldrh	r2, [r3, #2]
 8004e04:	4b4c      	ldr	r3, [pc, #304]	@ (8004f38 <Display_task+0xd24>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	b298      	uxth	r0, r3
 8004e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f3c <Display_task+0xd28>)
 8004e10:	891a      	ldrh	r2, [r3, #8]
 8004e12:	4b49      	ldr	r3, [pc, #292]	@ (8004f38 <Display_task+0xd24>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	0089      	lsls	r1, r1, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	b299      	uxth	r1, r3
 8004e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa0 <Display_task+0xd8c>)
 8004e30:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <Display_task+0xd58>)
 8004e32:	f7fc ff1d 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[7]+space, y_g[4], m1_hurd[2], &Font16, LCD_BACKGROUND, WHITE);
 8004e36:	4b3f      	ldr	r3, [pc, #252]	@ (8004f34 <Display_task+0xd20>)
 8004e38:	89da      	ldrh	r2, [r3, #14]
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f38 <Display_task+0xd24>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	b298      	uxth	r0, r3
 8004e44:	4b3d      	ldr	r3, [pc, #244]	@ (8004f3c <Display_task+0xd28>)
 8004e46:	8919      	ldrh	r1, [r3, #8]
 8004e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4b53      	ldr	r3, [pc, #332]	@ (8004fa0 <Display_task+0xd8c>)
 8004e54:	4a40      	ldr	r2, [pc, #256]	@ (8004f58 <Display_task+0xd44>)
 8004e56:	f7fc ff0b 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[7]+space, y_g[4]+5*space, pwm[2], &Font16, LCD_BACKGROUND, WHITE);
 8004e5a:	4b36      	ldr	r3, [pc, #216]	@ (8004f34 <Display_task+0xd20>)
 8004e5c:	89da      	ldrh	r2, [r3, #14]
 8004e5e:	4b36      	ldr	r3, [pc, #216]	@ (8004f38 <Display_task+0xd24>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	b298      	uxth	r0, r3
 8004e68:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <Display_task+0xd28>)
 8004e6a:	891a      	ldrh	r2, [r3, #8]
 8004e6c:	4b32      	ldr	r3, [pc, #200]	@ (8004f38 <Display_task+0xd24>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	0089      	lsls	r1, r1, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b299      	uxth	r1, r3
 8004e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	2300      	movs	r3, #0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4b45      	ldr	r3, [pc, #276]	@ (8004fa0 <Display_task+0xd8c>)
 8004e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f7c <Display_task+0xd68>)
 8004e8c:	f7fc fef0 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[1]+space, y_g[6]+2*space, m1_hurd[1], &Font16, LCD_BACKGROUND, WHITE);
 8004e90:	4b28      	ldr	r3, [pc, #160]	@ (8004f34 <Display_task+0xd20>)
 8004e92:	885a      	ldrh	r2, [r3, #2]
 8004e94:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <Display_task+0xd24>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b298      	uxth	r0, r3
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <Display_task+0xd28>)
 8004ea0:	899a      	ldrh	r2, [r3, #12]
 8004ea2:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <Display_task+0xd24>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	b299      	uxth	r1, r3
 8004eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <Display_task+0xd8c>)
 8004ebc:	4a24      	ldr	r2, [pc, #144]	@ (8004f50 <Display_task+0xd3c>)
 8004ebe:	f7fc fed7 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[1]+space, y_g[6]+6*space, pwm[1], &Font16, LCD_BACKGROUND, WHITE);
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f34 <Display_task+0xd20>)
 8004ec4:	885a      	ldrh	r2, [r3, #2]
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <Display_task+0xd24>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	b298      	uxth	r0, r3
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <Display_task+0xd28>)
 8004ed2:	899a      	ldrh	r2, [r3, #12]
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <Display_task+0xd24>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4619      	mov	r1, r3
 8004edc:	0049      	lsls	r1, r1, #1
 8004ede:	440b      	add	r3, r1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa0 <Display_task+0xd8c>)
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <Display_task+0xd60>)
 8004ef6:	f7fc febb 	bl	8001c70 <GUI_DisString_EN>

		GUI_DisString_EN(x_g[7]+space, y_g[6]+2*space, m1_hurd[3], &Font16, LCD_BACKGROUND, WHITE);
 8004efa:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <Display_task+0xd20>)
 8004efc:	89da      	ldrh	r2, [r3, #14]
 8004efe:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <Display_task+0xd24>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	b298      	uxth	r0, r3
 8004f08:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <Display_task+0xd28>)
 8004f0a:	899a      	ldrh	r2, [r3, #12]
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <Display_task+0xd24>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	2300      	movs	r3, #0
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <Display_task+0xd8c>)
 8004f26:	4a0e      	ldr	r2, [pc, #56]	@ (8004f60 <Display_task+0xd4c>)
 8004f28:	f7fc fea2 	bl	8001c70 <GUI_DisString_EN>
		GUI_DisString_EN(x_g[7]+space, y_g[6]+6*space, pwm[3], &Font16, LCD_BACKGROUND, WHITE);
 8004f2c:	4b01      	ldr	r3, [pc, #4]	@ (8004f34 <Display_task+0xd20>)
 8004f2e:	89da      	ldrh	r2, [r3, #14]
 8004f30:	e038      	b.n	8004fa4 <Display_task+0xd90>
 8004f32:	bf00      	nop
 8004f34:	20000018 	.word	0x20000018
 8004f38:	20000044 	.word	0x20000044
 8004f3c:	2000002c 	.word	0x2000002c
 8004f40:	20000d8c 	.word	0x20000d8c
 8004f44:	080114f8 	.word	0x080114f8
 8004f48:	20000dbc 	.word	0x20000dbc
 8004f4c:	20000d94 	.word	0x20000d94
 8004f50:	20000dc6 	.word	0x20000dc6
 8004f54:	20000d9c 	.word	0x20000d9c
 8004f58:	20000dd0 	.word	0x20000dd0
 8004f5c:	20000da4 	.word	0x20000da4
 8004f60:	20000dda 	.word	0x20000dda
 8004f64:	20000c1a 	.word	0x20000c1a
 8004f68:	08011500 	.word	0x08011500
 8004f6c:	20000dec 	.word	0x20000dec
 8004f70:	20000c1c 	.word	0x20000c1c
 8004f74:	20000df6 	.word	0x20000df6
 8004f78:	20000c1e 	.word	0x20000c1e
 8004f7c:	20000e00 	.word	0x20000e00
 8004f80:	20000c20 	.word	0x20000c20
 8004f84:	20000e0a 	.word	0x20000e0a
 8004f88:	40020800 	.word	0x40020800
 8004f8c:	20000cb4 	.word	0x20000cb4
 8004f90:	20000cb8 	.word	0x20000cb8
 8004f94:	40020000 	.word	0x40020000
 8004f98:	20000cbc 	.word	0x20000cbc
 8004f9c:	20000cc0 	.word	0x20000cc0
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	4b79      	ldr	r3, [pc, #484]	@ (800518c <Display_task+0xf78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	b298      	uxth	r0, r3
 8004fae:	4b78      	ldr	r3, [pc, #480]	@ (8005190 <Display_task+0xf7c>)
 8004fb0:	899a      	ldrh	r2, [r3, #12]
 8004fb2:	4b76      	ldr	r3, [pc, #472]	@ (800518c <Display_task+0xf78>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4619      	mov	r1, r3
 8004fba:	0049      	lsls	r1, r1, #1
 8004fbc:	440b      	add	r3, r1
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	b299      	uxth	r1, r3
 8004fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	4b70      	ldr	r3, [pc, #448]	@ (8005194 <Display_task+0xf80>)
 8004fd2:	4a71      	ldr	r2, [pc, #452]	@ (8005198 <Display_task+0xf84>)
 8004fd4:	f7fc fe4c 	bl	8001c70 <GUI_DisString_EN>
/******************************JOYSTICK CHIGLEL************************************/
		if((x_g[4] > (x_g[4]+(RX[7]-128))) || (y_g[6] > (y_g[6]+(128-RX[8])))){
 8004fd8:	4b70      	ldr	r3, [pc, #448]	@ (800519c <Display_task+0xf88>)
 8004fda:	79db      	ldrb	r3, [r3, #7]
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da05      	bge.n	8004fee <Display_task+0xdda>
 8004fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800519c <Display_task+0xf88>)
 8004fe4:	7a1b      	ldrb	r3, [r3, #8]
 8004fe6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da5f      	bge.n	80050ae <Display_task+0xe9a>
			GUI_DrawLine(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4 , x_g[4], y_g[6], MAGENTA, LINE_SOLID, DOT_PIXEL_2X2);
 8004fee:	4b6c      	ldr	r3, [pc, #432]	@ (80051a0 <Display_task+0xf8c>)
 8004ff0:	891a      	ldrh	r2, [r3, #8]
 8004ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800519c <Display_task+0xf88>)
 8004ff4:	79db      	ldrb	r3, [r3, #7]
 8004ff6:	3b80      	subs	r3, #128	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	da00      	bge.n	8004ffe <Display_task+0xdea>
 8004ffc:	3303      	adds	r3, #3
 8004ffe:	109b      	asrs	r3, r3, #2
 8005000:	b29b      	uxth	r3, r3
 8005002:	4413      	add	r3, r2
 8005004:	b298      	uxth	r0, r3
 8005006:	4b62      	ldr	r3, [pc, #392]	@ (8005190 <Display_task+0xf7c>)
 8005008:	899a      	ldrh	r2, [r3, #12]
 800500a:	4b64      	ldr	r3, [pc, #400]	@ (800519c <Display_task+0xf88>)
 800500c:	7a1b      	ldrb	r3, [r3, #8]
 800500e:	3b80      	subs	r3, #128	@ 0x80
 8005010:	2b00      	cmp	r3, #0
 8005012:	da00      	bge.n	8005016 <Display_task+0xe02>
 8005014:	3303      	adds	r3, #3
 8005016:	109b      	asrs	r3, r3, #2
 8005018:	b29b      	uxth	r3, r3
 800501a:	4413      	add	r3, r2
 800501c:	b299      	uxth	r1, r3
 800501e:	4b60      	ldr	r3, [pc, #384]	@ (80051a0 <Display_task+0xf8c>)
 8005020:	891a      	ldrh	r2, [r3, #8]
 8005022:	4b5b      	ldr	r3, [pc, #364]	@ (8005190 <Display_task+0xf7c>)
 8005024:	899b      	ldrh	r3, [r3, #12]
 8005026:	2402      	movs	r4, #2
 8005028:	9402      	str	r4, [sp, #8]
 800502a:	2400      	movs	r4, #0
 800502c:	9401      	str	r4, [sp, #4]
 800502e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8005032:	9400      	str	r4, [sp, #0]
 8005034:	f7fc faa0 	bl	8001578 <GUI_DrawLine>
			GUI_DrawPoint(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8005038:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <Display_task+0xf8c>)
 800503a:	891a      	ldrh	r2, [r3, #8]
 800503c:	4b57      	ldr	r3, [pc, #348]	@ (800519c <Display_task+0xf88>)
 800503e:	79db      	ldrb	r3, [r3, #7]
 8005040:	3b80      	subs	r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	da00      	bge.n	8005048 <Display_task+0xe34>
 8005046:	3303      	adds	r3, #3
 8005048:	109b      	asrs	r3, r3, #2
 800504a:	b29b      	uxth	r3, r3
 800504c:	4413      	add	r3, r2
 800504e:	b298      	uxth	r0, r3
 8005050:	4b4f      	ldr	r3, [pc, #316]	@ (8005190 <Display_task+0xf7c>)
 8005052:	899a      	ldrh	r2, [r3, #12]
 8005054:	4b51      	ldr	r3, [pc, #324]	@ (800519c <Display_task+0xf88>)
 8005056:	7a1b      	ldrb	r3, [r3, #8]
 8005058:	3b80      	subs	r3, #128	@ 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	da00      	bge.n	8005060 <Display_task+0xe4c>
 800505e:	3303      	adds	r3, #3
 8005060:	109b      	asrs	r3, r3, #2
 8005062:	b29b      	uxth	r3, r3
 8005064:	4413      	add	r3, r2
 8005066:	b299      	uxth	r1, r3
 8005068:	2301      	movs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2303      	movs	r3, #3
 800506e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8005072:	f7fc f9fb 	bl	800146c <GUI_DrawPoint>
			GUI_DrawRectangle(x_g[3], y_g[4]+space, x_g[5], y_g[8]-space, BLACK, DRAW_FULL, DOT_PIXEL_DFT);
 8005076:	4b4a      	ldr	r3, [pc, #296]	@ (80051a0 <Display_task+0xf8c>)
 8005078:	88d8      	ldrh	r0, [r3, #6]
 800507a:	4b45      	ldr	r3, [pc, #276]	@ (8005190 <Display_task+0xf7c>)
 800507c:	891a      	ldrh	r2, [r3, #8]
 800507e:	4b43      	ldr	r3, [pc, #268]	@ (800518c <Display_task+0xf78>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	4413      	add	r3, r2
 8005086:	b299      	uxth	r1, r3
 8005088:	4b45      	ldr	r3, [pc, #276]	@ (80051a0 <Display_task+0xf8c>)
 800508a:	895c      	ldrh	r4, [r3, #10]
 800508c:	4b40      	ldr	r3, [pc, #256]	@ (8005190 <Display_task+0xf7c>)
 800508e:	8a1a      	ldrh	r2, [r3, #16]
 8005090:	4b3e      	ldr	r3, [pc, #248]	@ (800518c <Display_task+0xf78>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	2201      	movs	r2, #1
 800509c:	9202      	str	r2, [sp, #8]
 800509e:	2201      	movs	r2, #1
 80050a0:	9201      	str	r2, [sp, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	9200      	str	r2, [sp, #0]
 80050a6:	4622      	mov	r2, r4
 80050a8:	f7fc fb26 	bl	80016f8 <GUI_DrawRectangle>
 80050ac:	e069      	b.n	8005182 <Display_task+0xf6e>
		}
		else if((x_g[4] < (x_g[4]+(RX[7]-128))) || (y_g[6] < (y_g[6]+(128-RX[8])))){
 80050ae:	4b3b      	ldr	r3, [pc, #236]	@ (800519c <Display_task+0xf88>)
 80050b0:	79db      	ldrb	r3, [r3, #7]
 80050b2:	2b80      	cmp	r3, #128	@ 0x80
 80050b4:	d805      	bhi.n	80050c2 <Display_task+0xeae>
 80050b6:	4b39      	ldr	r3, [pc, #228]	@ (800519c <Display_task+0xf88>)
 80050b8:	7a1b      	ldrb	r3, [r3, #8]
 80050ba:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dd5f      	ble.n	8005182 <Display_task+0xf6e>
			GUI_DrawLine(x_g[4], y_g[6] , x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, LINE_SOLID, DOT_PIXEL_2X2);
 80050c2:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <Display_task+0xf8c>)
 80050c4:	8918      	ldrh	r0, [r3, #8]
 80050c6:	4b32      	ldr	r3, [pc, #200]	@ (8005190 <Display_task+0xf7c>)
 80050c8:	8999      	ldrh	r1, [r3, #12]
 80050ca:	4b35      	ldr	r3, [pc, #212]	@ (80051a0 <Display_task+0xf8c>)
 80050cc:	891a      	ldrh	r2, [r3, #8]
 80050ce:	4b33      	ldr	r3, [pc, #204]	@ (800519c <Display_task+0xf88>)
 80050d0:	79db      	ldrb	r3, [r3, #7]
 80050d2:	3b80      	subs	r3, #128	@ 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	da00      	bge.n	80050da <Display_task+0xec6>
 80050d8:	3303      	adds	r3, #3
 80050da:	109b      	asrs	r3, r3, #2
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4413      	add	r3, r2
 80050e0:	b29c      	uxth	r4, r3
 80050e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <Display_task+0xf7c>)
 80050e4:	899a      	ldrh	r2, [r3, #12]
 80050e6:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <Display_task+0xf88>)
 80050e8:	7a1b      	ldrb	r3, [r3, #8]
 80050ea:	3b80      	subs	r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da00      	bge.n	80050f2 <Display_task+0xede>
 80050f0:	3303      	adds	r3, #3
 80050f2:	109b      	asrs	r3, r3, #2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2202      	movs	r2, #2
 80050fc:	9202      	str	r2, [sp, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	9201      	str	r2, [sp, #4]
 8005102:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8005106:	9200      	str	r2, [sp, #0]
 8005108:	4622      	mov	r2, r4
 800510a:	f7fc fa35 	bl	8001578 <GUI_DrawLine>
			GUI_DrawPoint(x_g[4]+(RX[7]-128)/4, y_g[6]+(RX[8]-128)/4, MAGENTA, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 800510e:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <Display_task+0xf8c>)
 8005110:	891a      	ldrh	r2, [r3, #8]
 8005112:	4b22      	ldr	r3, [pc, #136]	@ (800519c <Display_task+0xf88>)
 8005114:	79db      	ldrb	r3, [r3, #7]
 8005116:	3b80      	subs	r3, #128	@ 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	da00      	bge.n	800511e <Display_task+0xf0a>
 800511c:	3303      	adds	r3, #3
 800511e:	109b      	asrs	r3, r3, #2
 8005120:	b29b      	uxth	r3, r3
 8005122:	4413      	add	r3, r2
 8005124:	b298      	uxth	r0, r3
 8005126:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <Display_task+0xf7c>)
 8005128:	899a      	ldrh	r2, [r3, #12]
 800512a:	4b1c      	ldr	r3, [pc, #112]	@ (800519c <Display_task+0xf88>)
 800512c:	7a1b      	ldrb	r3, [r3, #8]
 800512e:	3b80      	subs	r3, #128	@ 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	da00      	bge.n	8005136 <Display_task+0xf22>
 8005134:	3303      	adds	r3, #3
 8005136:	109b      	asrs	r3, r3, #2
 8005138:	b29b      	uxth	r3, r3
 800513a:	4413      	add	r3, r2
 800513c:	b299      	uxth	r1, r3
 800513e:	2301      	movs	r3, #1
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2303      	movs	r3, #3
 8005144:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8005148:	f7fc f990 	bl	800146c <GUI_DrawPoint>
			GUI_DrawRectangle(x_g[3], y_g[4]+space, x_g[5], y_g[8]-space, BLACK, DRAW_FULL, DOT_PIXEL_DFT);
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <Display_task+0xf8c>)
 800514e:	88d8      	ldrh	r0, [r3, #6]
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <Display_task+0xf7c>)
 8005152:	891a      	ldrh	r2, [r3, #8]
 8005154:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <Display_task+0xf78>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	4413      	add	r3, r2
 800515c:	b299      	uxth	r1, r3
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <Display_task+0xf8c>)
 8005160:	895c      	ldrh	r4, [r3, #10]
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <Display_task+0xf7c>)
 8005164:	8a1a      	ldrh	r2, [r3, #16]
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <Display_task+0xf78>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	2201      	movs	r2, #1
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	2201      	movs	r2, #1
 8005176:	9201      	str	r2, [sp, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	9200      	str	r2, [sp, #0]
 800517c:	4622      	mov	r2, r4
 800517e:	f7fc fabb 	bl	80016f8 <GUI_DrawRectangle>
		}

    osDelay(10);
 8005182:	200a      	movs	r0, #10
 8005184:	f00a f840 	bl	800f208 <osDelay>
	  if((RX[1] == 65) || (RX[1] == 0)){
 8005188:	f7ff b857 	b.w	800423a <Display_task+0x26>
 800518c:	20000044 	.word	0x20000044
 8005190:	2000002c 	.word	0x2000002c
 8005194:	20000008 	.word	0x20000008
 8005198:	20000e0a 	.word	0x20000e0a
 800519c:	20000c10 	.word	0x20000c10
 80051a0:	20000018 	.word	0x20000018

080051a4 <Ros_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ros_Transmit */
void Ros_Transmit(void const * argument)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ros_Transmit */
  /* Infinite loop */
  for(;;)
  {

	  if(Up_switch1==0){
 80051ac:	2104      	movs	r1, #4
 80051ae:	4861      	ldr	r0, [pc, #388]	@ (8005334 <Ros_Transmit+0x190>)
 80051b0:	f005 fe5a 	bl	800ae68 <HAL_GPIO_ReadPin>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d108      	bne.n	80051cc <Ros_Transmit+0x28>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000001;
 80051ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005338 <Ros_Transmit+0x194>)
 80051bc:	f993 3000 	ldrsb.w	r3, [r3]
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	b25a      	sxtb	r2, r3
 80051c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005338 <Ros_Transmit+0x194>)
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <Ros_Transmit+0x38>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111110;
 80051cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005338 <Ros_Transmit+0x194>)
 80051ce:	f993 3000 	ldrsb.w	r3, [r3]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	b25a      	sxtb	r2, r3
 80051d8:	4b57      	ldr	r3, [pc, #348]	@ (8005338 <Ros_Transmit+0x194>)
 80051da:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Up_switch2==0){
 80051dc:	2101      	movs	r1, #1
 80051de:	4857      	ldr	r0, [pc, #348]	@ (800533c <Ros_Transmit+0x198>)
 80051e0:	f005 fe42 	bl	800ae68 <HAL_GPIO_ReadPin>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <Ros_Transmit+0x58>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000010;
 80051ea:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <Ros_Transmit+0x194>)
 80051ec:	f993 3000 	ldrsb.w	r3, [r3]
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	b25a      	sxtb	r2, r3
 80051f6:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <Ros_Transmit+0x194>)
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e007      	b.n	800520c <Ros_Transmit+0x68>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111101;
 80051fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005338 <Ros_Transmit+0x194>)
 80051fe:	f993 3000 	ldrsb.w	r3, [r3]
 8005202:	f023 0302 	bic.w	r3, r3, #2
 8005206:	b25a      	sxtb	r2, r3
 8005208:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <Ros_Transmit+0x194>)
 800520a:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Down_switch1==0){
 800520c:	2104      	movs	r1, #4
 800520e:	484c      	ldr	r0, [pc, #304]	@ (8005340 <Ros_Transmit+0x19c>)
 8005210:	f005 fe2a 	bl	800ae68 <HAL_GPIO_ReadPin>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <Ros_Transmit+0x88>
	  		  sensor_buff[0]=sensor_buff[0]|0b00000100;
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <Ros_Transmit+0x194>)
 800521c:	f993 3000 	ldrsb.w	r3, [r3]
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	b25a      	sxtb	r2, r3
 8005226:	4b44      	ldr	r3, [pc, #272]	@ (8005338 <Ros_Transmit+0x194>)
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e007      	b.n	800523c <Ros_Transmit+0x98>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11111011;
 800522c:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <Ros_Transmit+0x194>)
 800522e:	f993 3000 	ldrsb.w	r3, [r3]
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	b25a      	sxtb	r2, r3
 8005238:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <Ros_Transmit+0x194>)
 800523a:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Down_switch2==0){
 800523c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005240:	483e      	ldr	r0, [pc, #248]	@ (800533c <Ros_Transmit+0x198>)
 8005242:	f005 fe11 	bl	800ae68 <HAL_GPIO_ReadPin>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <Ros_Transmit+0xba>
	  		  sensor_buff[0]=sensor_buff[0]|0b00001000;
 800524c:	4b3a      	ldr	r3, [pc, #232]	@ (8005338 <Ros_Transmit+0x194>)
 800524e:	f993 3000 	ldrsb.w	r3, [r3]
 8005252:	f043 0308 	orr.w	r3, r3, #8
 8005256:	b25a      	sxtb	r2, r3
 8005258:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <Ros_Transmit+0x194>)
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e007      	b.n	800526e <Ros_Transmit+0xca>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11110111;
 800525e:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <Ros_Transmit+0x194>)
 8005260:	f993 3000 	ldrsb.w	r3, [r3]
 8005264:	f023 0308 	bic.w	r3, r3, #8
 8005268:	b25a      	sxtb	r2, r3
 800526a:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <Ros_Transmit+0x194>)
 800526c:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(Ball_switch1==0){
 800526e:	2102      	movs	r1, #2
 8005270:	4832      	ldr	r0, [pc, #200]	@ (800533c <Ros_Transmit+0x198>)
 8005272:	f005 fdf9 	bl	800ae68 <HAL_GPIO_ReadPin>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <Ros_Transmit+0xea>
	  		  sensor_buff[0]=sensor_buff[0]|0b00010000;
 800527c:	4b2e      	ldr	r3, [pc, #184]	@ (8005338 <Ros_Transmit+0x194>)
 800527e:	f993 3000 	ldrsb.w	r3, [r3]
 8005282:	f043 0310 	orr.w	r3, r3, #16
 8005286:	b25a      	sxtb	r2, r3
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <Ros_Transmit+0x194>)
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e007      	b.n	800529e <Ros_Transmit+0xfa>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b11101111;
 800528e:	4b2a      	ldr	r3, [pc, #168]	@ (8005338 <Ros_Transmit+0x194>)
 8005290:	f993 3000 	ldrsb.w	r3, [r3]
 8005294:	f023 0310 	bic.w	r3, r3, #16
 8005298:	b25a      	sxtb	r2, r3
 800529a:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <Ros_Transmit+0x194>)
 800529c:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(fl==2){
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <Ros_Transmit+0x1a0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d108      	bne.n	80052b8 <Ros_Transmit+0x114>
	  		  sensor_buff[0]=sensor_buff[0]|0b00100000;
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <Ros_Transmit+0x194>)
 80052a8:	f993 3000 	ldrsb.w	r3, [r3]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	b25a      	sxtb	r2, r3
 80052b2:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <Ros_Transmit+0x194>)
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e00c      	b.n	80052d2 <Ros_Transmit+0x12e>
	  	  }
	  	  else if(fl==-2){
 80052b8:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <Ros_Transmit+0x1a0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f113 0f02 	cmn.w	r3, #2
 80052c0:	d107      	bne.n	80052d2 <Ros_Transmit+0x12e>
	  		  sensor_buff[0]=sensor_buff[0]&0b11011111;
 80052c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <Ros_Transmit+0x194>)
 80052c4:	f993 3000 	ldrsb.w	r3, [r3]
 80052c8:	f023 0320 	bic.w	r3, r3, #32
 80052cc:	b25a      	sxtb	r2, r3
 80052ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <Ros_Transmit+0x194>)
 80052d0:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(RX[3]==247){
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <Ros_Transmit+0x1a4>)
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	2bf7      	cmp	r3, #247	@ 0xf7
 80052d8:	d108      	bne.n	80052ec <Ros_Transmit+0x148>
	  		  sensor_buff[0]=sensor_buff[0]|0b01000000;
 80052da:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <Ros_Transmit+0x194>)
 80052dc:	f993 3000 	ldrsb.w	r3, [r3]
 80052e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052e4:	b25a      	sxtb	r2, r3
 80052e6:	4b14      	ldr	r3, [pc, #80]	@ (8005338 <Ros_Transmit+0x194>)
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e007      	b.n	80052fc <Ros_Transmit+0x158>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b10111111;
 80052ec:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <Ros_Transmit+0x194>)
 80052ee:	f993 3000 	ldrsb.w	r3, [r3]
 80052f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f6:	b25a      	sxtb	r2, r3
 80052f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005338 <Ros_Transmit+0x194>)
 80052fa:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(RX[3] == 254){
 80052fc:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <Ros_Transmit+0x1a4>)
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	2bfe      	cmp	r3, #254	@ 0xfe
 8005302:	d108      	bne.n	8005316 <Ros_Transmit+0x172>
	  		  sensor_buff[0]=sensor_buff[0]|0b10000000;
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <Ros_Transmit+0x194>)
 8005306:	f993 3000 	ldrsb.w	r3, [r3]
 800530a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800530e:	b25a      	sxtb	r2, r3
 8005310:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <Ros_Transmit+0x194>)
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e007      	b.n	8005326 <Ros_Transmit+0x182>
	  	  }
	  	  else{
	  		  sensor_buff[0]=sensor_buff[0]&0b01111111;
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <Ros_Transmit+0x194>)
 8005318:	f993 3000 	ldrsb.w	r3, [r3]
 800531c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005320:	b25a      	sxtb	r2, r3
 8005322:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <Ros_Transmit+0x194>)
 8005324:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  loop();
 8005326:	f002 fb43 	bl	80079b0 <loop>
    osDelay(5);
 800532a:	2005      	movs	r0, #5
 800532c:	f009 ff6c 	bl	800f208 <osDelay>
	  if(Up_switch1==0){
 8005330:	e73c      	b.n	80051ac <Ros_Transmit+0x8>
 8005332:	bf00      	nop
 8005334:	40021800 	.word	0x40021800
 8005338:	20000c24 	.word	0x20000c24
 800533c:	40020800 	.word	0x40020800
 8005340:	40020c00 	.word	0x40020c00
 8005344:	20000c8c 	.word	0x20000c8c
 8005348:	20000c10 	.word	0x20000c10

0800534c <M3508_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_M3508_task */
void M3508_task(void const * argument)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN M3508_task */
    M5_pid.KP=1.5;
 8005354:	4b54      	ldr	r3, [pc, #336]	@ (80054a8 <M3508_task+0x15c>)
 8005356:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800535a:	601a      	str	r2, [r3, #0]
    M5_pid.KI=0.000;
 800535c:	4b52      	ldr	r3, [pc, #328]	@ (80054a8 <M3508_task+0x15c>)
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	605a      	str	r2, [r3, #4]
    M5_pid.KD=0.02;
 8005364:	4b50      	ldr	r3, [pc, #320]	@ (80054a8 <M3508_task+0x15c>)
 8005366:	4a51      	ldr	r2, [pc, #324]	@ (80054ac <M3508_task+0x160>)
 8005368:	609a      	str	r2, [r3, #8]
    M5_pos_pid.KP=1.5;
 800536a:	4b51      	ldr	r3, [pc, #324]	@ (80054b0 <M3508_task+0x164>)
 800536c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005370:	601a      	str	r2, [r3, #0]
    M5_pos_pid.KI=0;
 8005372:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <M3508_task+0x164>)
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	605a      	str	r2, [r3, #4]
    M5_pos_pid.KD=0;
 800537a:	4b4d      	ldr	r3, [pc, #308]	@ (80054b0 <M3508_task+0x164>)
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	M5_pos_pid.error=M_can_target*1000-M_can_pos;
 8005382:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <M3508_task+0x168>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	4618      	mov	r0, r3
 8005390:	f7fb f8e8 	bl	8000564 <__aeabi_i2d>
 8005394:	4b48      	ldr	r3, [pc, #288]	@ (80054b8 <M3508_task+0x16c>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fa ff95 	bl	80002c8 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7fb fb59 	bl	8000a5c <__aeabi_d2iz>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a40      	ldr	r2, [pc, #256]	@ (80054b0 <M3508_task+0x164>)
 80053ae:	60d3      	str	r3, [r2, #12]
	M5.setpoint=M5_pos_pid.KP*M5_pos_pid.error;
 80053b0:	4b3f      	ldr	r3, [pc, #252]	@ (80054b0 <M3508_task+0x164>)
 80053b2:	ed93 7a00 	vldr	s14, [r3]
 80053b6:	4b3e      	ldr	r3, [pc, #248]	@ (80054b0 <M3508_task+0x164>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ca:	ee17 3a90 	vmov	r3, s15
 80053ce:	b21a      	sxth	r2, r3
 80053d0:	4b3a      	ldr	r3, [pc, #232]	@ (80054bc <M3508_task+0x170>)
 80053d2:	801a      	strh	r2, [r3, #0]
	if(M5.setpoint>8000){
 80053d4:	4b39      	ldr	r3, [pc, #228]	@ (80054bc <M3508_task+0x170>)
 80053d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053da:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80053de:	dd03      	ble.n	80053e8 <M3508_task+0x9c>
		M5.setpoint=8000;
 80053e0:	4b36      	ldr	r3, [pc, #216]	@ (80054bc <M3508_task+0x170>)
 80053e2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80053e6:	801a      	strh	r2, [r3, #0]
	}
	if(M5.setpoint<-8000){
 80053e8:	4b34      	ldr	r3, [pc, #208]	@ (80054bc <M3508_task+0x170>)
 80053ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ee:	f513 5ffa 	cmn.w	r3, #8000	@ 0x1f40
 80053f2:	da03      	bge.n	80053fc <M3508_task+0xb0>
		M5.setpoint=-8000;
 80053f4:	4b31      	ldr	r3, [pc, #196]	@ (80054bc <M3508_task+0x170>)
 80053f6:	f24e 02c0 	movw	r2, #57536	@ 0xe0c0
 80053fa:	801a      	strh	r2, [r3, #0]
	}
	  M5_pid.error=M5.setpoint-M5.en_speed;
 80053fc:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <M3508_task+0x170>)
 80053fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005402:	461a      	mov	r2, r3
 8005404:	4b2d      	ldr	r3, [pc, #180]	@ (80054bc <M3508_task+0x170>)
 8005406:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <M3508_task+0x15c>)
 800540e:	60d3      	str	r3, [r2, #12]
	  M5_pid.I_error+=M5_pid.error;
 8005410:	4b25      	ldr	r3, [pc, #148]	@ (80054a8 <M3508_task+0x15c>)
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <M3508_task+0x15c>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4413      	add	r3, r2
 800541a:	4a23      	ldr	r2, [pc, #140]	@ (80054a8 <M3508_task+0x15c>)
 800541c:	6113      	str	r3, [r2, #16]
	  M5_pid.D_error=M5_pid.lasterror-M5_pid.error;
 800541e:	4b22      	ldr	r3, [pc, #136]	@ (80054a8 <M3508_task+0x15c>)
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	4b21      	ldr	r3, [pc, #132]	@ (80054a8 <M3508_task+0x15c>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <M3508_task+0x15c>)
 800542a:	6153      	str	r3, [r2, #20]
	  M5_pid.lasterror=M5_pid.error;
 800542c:	4b1e      	ldr	r3, [pc, #120]	@ (80054a8 <M3508_task+0x15c>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a1d      	ldr	r2, [pc, #116]	@ (80054a8 <M3508_task+0x15c>)
 8005432:	6193      	str	r3, [r2, #24]
	  M5.Out=M5_pid.KP*M5_pid.error+M5_pid.KI*M5_pid.I_error+M5_pid.KD*M5_pid.D_error;
 8005434:	4b1c      	ldr	r3, [pc, #112]	@ (80054a8 <M3508_task+0x15c>)
 8005436:	ed93 7a00 	vldr	s14, [r3]
 800543a:	4b1b      	ldr	r3, [pc, #108]	@ (80054a8 <M3508_task+0x15c>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <M3508_task+0x15c>)
 800544c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005450:	4b15      	ldr	r3, [pc, #84]	@ (80054a8 <M3508_task+0x15c>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005464:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <M3508_task+0x15c>)
 8005466:	edd3 6a02 	vldr	s13, [r3, #8]
 800546a:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <M3508_task+0x15c>)
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800547a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005482:	ee17 3a90 	vmov	r3, s15
 8005486:	b21a      	sxth	r2, r3
 8005488:	4b0c      	ldr	r3, [pc, #48]	@ (80054bc <M3508_task+0x170>)
 800548a:	805a      	strh	r2, [r3, #2]
	  can_transmit(&hcan1, FIRST_GROUP_ID, M5.Out);
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <M3508_task+0x170>)
 800548e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005492:	461a      	mov	r2, r3
 8005494:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005498:	4809      	ldr	r0, [pc, #36]	@ (80054c0 <M3508_task+0x174>)
 800549a:	f7fe f8d5 	bl	8003648 <can_transmit>
	  osDelay(2);
 800549e:	2002      	movs	r0, #2
 80054a0:	f009 feb2 	bl	800f208 <osDelay>
	M5_pos_pid.error=M_can_target*1000-M_can_pos;
 80054a4:	e76d      	b.n	8005382 <M3508_task+0x36>
 80054a6:	bf00      	nop
 80054a8:	20000d54 	.word	0x20000d54
 80054ac:	3ca3d70a 	.word	0x3ca3d70a
 80054b0:	20000d70 	.word	0x20000d70
 80054b4:	20000ce0 	.word	0x20000ce0
 80054b8:	20000cd8 	.word	0x20000cd8
 80054bc:	20000dac 	.word	0x20000dac
 80054c0:	20000550 	.word	0x20000550

080054c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a04      	ldr	r2, [pc, #16]	@ (80054e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d101      	bne.n	80054da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80054d6:	f003 ff6f 	bl	80093b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40014000 	.word	0x40014000

080054e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054ec:	b672      	cpsid	i
}
 80054ee:	bf00      	nop
  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	4a04      	ldr	r2, [pc, #16]	@ (8005538 <_ZN3ros3MsgC1Ev+0x1c>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	08013850 	.word	0x08013850

0800553c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
      data()
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ffe8 	bl	800551c <_ZN3ros3MsgC1Ev>
 800554c:	4a06      	ldr	r2, [pc, #24]	@ (8005568 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ffcf 	bl	80054fa <_ZN3ros4TimeC1Ev>
    {
    }
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	08013838 	.word	0x08013838

0800556c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4413      	add	r3, r2
 8005584:	b2ca      	uxtb	r2, r1
 8005586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0a19      	lsrs	r1, r3, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	4413      	add	r3, r2
 8005596:	b2ca      	uxtb	r2, r1
 8005598:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	0c19      	lsrs	r1, r3, #16
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3302      	adds	r3, #2
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	b2ca      	uxtb	r2, r1
 80055aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	0e19      	lsrs	r1, r3, #24
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3303      	adds	r3, #3
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	b2ca      	uxtb	r2, r1
 80055bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6899      	ldr	r1, [r3, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	4413      	add	r3, r2
 80055ce:	b2ca      	uxtb	r2, r1
 80055d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	0a19      	lsrs	r1, r3, #8
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	b2ca      	uxtb	r2, r1
 80055e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	0c19      	lsrs	r1, r3, #16
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3302      	adds	r3, #2
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	b2ca      	uxtb	r2, r1
 80055f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0e19      	lsrs	r1, r3, #24
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3303      	adds	r3, #3
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	4413      	add	r3, r2
 8005604:	b2ca      	uxtb	r2, r1
 8005606:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	60fb      	str	r3, [r7, #12]
      return offset;
 800560e:	68fb      	ldr	r3, [r7, #12]
    }
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	440b      	add	r3, r1
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3302      	adds	r3, #2
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	440b      	add	r3, r1
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3303      	adds	r3, #3
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	440b      	add	r3, r1
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	061b      	lsls	r3, r3, #24
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3304      	adds	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	440b      	add	r3, r1
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3302      	adds	r3, #2
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	440b      	add	r3, r1
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3303      	adds	r3, #3
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	440b      	add	r3, r1
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
     return offset;
 80056d6:	68fb      	ldr	r3, [r7, #12]
    }
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	4b03      	ldr	r3, [pc, #12]	@ (80056fc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	08011508 	.word	0x08011508

08005700 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	08011518 	.word	0x08011518

0800571c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fef8 	bl	800551c <_ZN3ros3MsgC1Ev>
 800572c:	4a0b      	ldr	r2, [pc, #44]	@ (800575c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a09      	ldr	r2, [pc, #36]	@ (8005760 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800573c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005742:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005748:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	615a      	str	r2, [r3, #20]
    {
    }
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08013820 	.word	0x08013820
 8005760:	0801153c 	.word	0x0801153c

08005764 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8899      	ldrh	r1, [r3, #4]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	4413      	add	r3, r2
 800577c:	b2ca      	uxtb	r2, r1
 800577e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	889b      	ldrh	r3, [r3, #4]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	b299      	uxth	r1, r3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	4413      	add	r3, r2
 8005790:	b2ca      	uxtb	r2, r1
 8005792:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3302      	adds	r3, #2
 8005798:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fd36 	bl	8000210 <strlen>
 80057a4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	69b9      	ldr	r1, [r7, #24]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 f918 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3304      	adds	r3, #4
 80057b8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	18d0      	adds	r0, r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4619      	mov	r1, r3
 80057c8:	f00b f9a1 	bl	8010b0e <memcpy>
      offset += length_topic_name;
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fa fd19 	bl	8000210 <strlen>
 80057de:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f002 f8fb 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3304      	adds	r3, #4
 80057f2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	18d0      	adds	r0, r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4619      	mov	r1, r3
 8005802:	f00b f984 	bl	8010b0e <memcpy>
      offset += length_message_type;
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	4618      	mov	r0, r3
 8005814:	f7fa fcfc 	bl	8000210 <strlen>
 8005818:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	4413      	add	r3, r2
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 f8de 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3304      	adds	r3, #4
 800582c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	18d0      	adds	r0, r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4619      	mov	r1, r3
 800583c:	f00b f967 	bl	8010b0e <memcpy>
      offset += length_md5sum;
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4413      	add	r3, r2
 8005856:	b2ca      	uxtb	r2, r1
 8005858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	0a19      	lsrs	r1, r3, #8
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	4413      	add	r3, r2
 8005866:	b2ca      	uxtb	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0c19      	lsrs	r1, r3, #16
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3302      	adds	r3, #2
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	b2ca      	uxtb	r2, r1
 8005878:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0e19      	lsrs	r1, r3, #24
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3303      	adds	r3, #3
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	4413      	add	r3, r2
 8005886:	b2ca      	uxtb	r2, r1
 8005888:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3304      	adds	r3, #4
 800588e:	61fb      	str	r3, [r7, #28]
      return offset;
 8005890:	69fb      	ldr	r3, [r7, #28]
    }
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800589a:	b580      	push	{r7, lr}
 800589c:	b08a      	sub	sp, #40	@ 0x28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4413      	add	r3, r2
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	889b      	ldrh	r3, [r3, #4]
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3301      	adds	r3, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	440b      	add	r3, r1
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3302      	adds	r3, #2
 80058d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	441a      	add	r2, r3
 80058e0:	f107 0314 	add.w	r3, r7, #20
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 f89b 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3304      	adds	r3, #4
 80058f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f6:	e00b      	b.n	8005910 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	441a      	add	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	3b01      	subs	r3, #1
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	440b      	add	r3, r1
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	3301      	adds	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005918:	429a      	cmp	r2, r3
 800591a:	d3ed      	bcc.n	80058f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	3b01      	subs	r3, #1
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	4413      	add	r3, r2
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	3b01      	subs	r3, #1
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	441a      	add	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	441a      	add	r2, r3
 8005946:	f107 0310 	add.w	r3, r7, #16
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f002 f868 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	3304      	adds	r3, #4
 8005956:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	e00b      	b.n	8005976 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	441a      	add	r2, r3
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3b01      	subs	r3, #1
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	440b      	add	r3, r1
 800596c:	7812      	ldrb	r2, [r2, #0]
 800596e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	3301      	adds	r3, #1
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	429a      	cmp	r2, r3
 8005980:	d3ed      	bcc.n	800595e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	3b01      	subs	r3, #1
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	4413      	add	r3, r2
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3b01      	subs	r3, #1
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4413      	add	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	441a      	add	r2, r3
 80059ac:	f107 030c 	add.w	r3, r7, #12
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f002 f835 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	3304      	adds	r3, #4
 80059bc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e00b      	b.n	80059dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	441a      	add	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	440b      	add	r3, r1
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3ed      	bcc.n	80059c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	3b01      	subs	r3, #1
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	4413      	add	r3, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	441a      	add	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	440a      	add	r2, r1
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3301      	adds	r3, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	440b      	add	r3, r1
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	3302      	adds	r3, #2
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	440b      	add	r3, r1
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3303      	adds	r3, #3
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	440b      	add	r3, r1
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	061b      	lsls	r3, r3, #24
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	61bb      	str	r3, [r7, #24]
     return offset;
 8005a60:	69bb      	ldr	r3, [r7, #24]
    }
 8005a62:	4618      	mov	r0, r3
 8005a64:	3728      	adds	r7, #40	@ 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	4b03      	ldr	r3, [pc, #12]	@ (8005a84 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	08011540 	.word	0x08011540

08005a88 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	4b03      	ldr	r3, [pc, #12]	@ (8005aa0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	0801155c 	.word	0x0801155c

08005aa4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fd34 	bl	800551c <_ZN3ros3MsgC1Ev>
 8005ab4:	4a06      	ldr	r2, [pc, #24]	@ (8005ad0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
      level(0),
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	711a      	strb	r2, [r3, #4]
      msg("")
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a04      	ldr	r2, [pc, #16]	@ (8005ad4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8005ac4:	609a      	str	r2, [r3, #8]
    {
    }
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	08013808 	.word	0x08013808
 8005ad4:	0801153c 	.word	0x0801153c

08005ad8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	4413      	add	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	7912      	ldrb	r2, [r2, #4]
 8005af0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fb87 	bl	8000210 <strlen>
 8005b02:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	4413      	add	r3, r2
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 ff69 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	18d0      	adds	r0, r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	4619      	mov	r1, r3
 8005b26:	f00a fff2 	bl	8010b0e <memcpy>
      offset += length_msg;
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4413      	add	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
      return offset;
 8005b32:	68fb      	ldr	r3, [r7, #12]
    }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	4413      	add	r3, r2
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	441a      	add	r2, r3
 8005b62:	f107 030c 	add.w	r3, r7, #12
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 ff5a 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3304      	adds	r3, #4
 8005b72:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e00b      	b.n	8005b92 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	441a      	add	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	440b      	add	r3, r1
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3ed      	bcc.n	8005b7a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
     return offset;
 8005bc2:	693b      	ldr	r3, [r7, #16]
    }
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	4b03      	ldr	r3, [pc, #12]	@ (8005be4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08011580 	.word	0x08011580

08005be8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	08011594 	.word	0x08011594

08005c04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fc84 	bl	800551c <_ZN3ros3MsgC1Ev>
 8005c14:	4a11      	ldr	r2, [pc, #68]	@ (8005c5c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	615a      	str	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	61da      	str	r2, [r3, #28]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	621a      	str	r2, [r3, #32]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	080137f0 	.word	0x080137f0

08005c60 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	@ 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6859      	ldr	r1, [r3, #4]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4413      	add	r3, r2
 8005c78:	b2ca      	uxtb	r2, r1
 8005c7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0a19      	lsrs	r1, r3, #8
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	3301      	adds	r3, #1
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	b2ca      	uxtb	r2, r1
 8005c8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	0c19      	lsrs	r1, r3, #16
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	3302      	adds	r3, #2
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	b2ca      	uxtb	r2, r1
 8005c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	0e19      	lsrs	r1, r3, #24
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	3303      	adds	r3, #3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	b2ca      	uxtb	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8005cb8:	2300      	movs	r3, #0
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	e02a      	b.n	8005d14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8005ccc:	6939      	ldr	r1, [r7, #16]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	b2ca      	uxtb	r2, r1
 8005cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	0a19      	lsrs	r1, r3, #8
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	3301      	adds	r3, #1
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b2ca      	uxtb	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	0c19      	lsrs	r1, r3, #16
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	3302      	adds	r3, #2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	b2ca      	uxtb	r2, r1
 8005cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	0e19      	lsrs	r1, r3, #24
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	3303      	adds	r3, #3
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	4413      	add	r3, r2
 8005d04:	b2ca      	uxtb	r2, r1
 8005d06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	3301      	adds	r3, #1
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6a3a      	ldr	r2, [r7, #32]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d3cf      	bcc.n	8005cbe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6919      	ldr	r1, [r3, #16]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	4413      	add	r3, r2
 8005d28:	b2ca      	uxtb	r2, r1
 8005d2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	0a19      	lsrs	r1, r3, #8
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	3301      	adds	r3, #1
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4413      	add	r3, r2
 8005d3a:	b2ca      	uxtb	r2, r1
 8005d3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	0c19      	lsrs	r1, r3, #16
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	3302      	adds	r3, #2
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b2ca      	uxtb	r2, r1
 8005d4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	0e19      	lsrs	r1, r3, #24
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	3303      	adds	r3, #3
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	b2ca      	uxtb	r2, r1
 8005d60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	3304      	adds	r3, #4
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e02a      	b.n	8005dc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8005d7c:	68f9      	ldr	r1, [r7, #12]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	b2ca      	uxtb	r2, r1
 8005d86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0a19      	lsrs	r1, r3, #8
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	3301      	adds	r3, #1
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	4413      	add	r3, r2
 8005d94:	b2ca      	uxtb	r2, r1
 8005d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	0c19      	lsrs	r1, r3, #16
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	3302      	adds	r3, #2
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	4413      	add	r3, r2
 8005da4:	b2ca      	uxtb	r2, r1
 8005da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0e19      	lsrs	r1, r3, #24
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	3303      	adds	r3, #3
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	4413      	add	r3, r2
 8005db4:	b2ca      	uxtb	r2, r1
 8005db6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	3304      	adds	r3, #4
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d3cf      	bcc.n	8005d6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69d9      	ldr	r1, [r3, #28]
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b2ca      	uxtb	r2, r1
 8005dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	0a19      	lsrs	r1, r3, #8
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	3301      	adds	r3, #1
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	b2ca      	uxtb	r2, r1
 8005dec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	0c19      	lsrs	r1, r3, #16
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	3302      	adds	r3, #2
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	b2ca      	uxtb	r2, r1
 8005dfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	0e19      	lsrs	r1, r3, #24
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	3303      	adds	r3, #3
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b2ca      	uxtb	r2, r1
 8005e10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	3304      	adds	r3, #4
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e027      	b.n	8005e6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa f9f0 	bl	8000210 <strlen>
 8005e30:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	4413      	add	r3, r2
 8005e38:	6979      	ldr	r1, [r7, #20]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fdd2 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	3304      	adds	r3, #4
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	18d0      	adds	r0, r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f00a fe57 	bl	8010b0e <memcpy>
      offset += length_stringsi;
 8005e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d3d2      	bcc.n	8005e1e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3728      	adds	r7, #40	@ 0x28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08e      	sub	sp, #56	@ 0x38
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eae:	3302      	adds	r3, #2
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d90a      	bls.n	8005ef6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f00a fb78 	bl	80105e0 <realloc>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8005efc:	2300      	movs	r3, #0
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f00:	e035      	b.n	8005f6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	7812      	ldrb	r2, [r2, #0]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	3301      	adds	r3, #1
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	440b      	add	r3, r1
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	440b      	add	r3, r1
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3c:	3303      	adds	r3, #3
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	440b      	add	r3, r1
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8005f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f52:	3304      	adds	r3, #4
 8005f54:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	3208      	adds	r2, #8
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3c4      	bcc.n	8005f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f84:	3301      	adds	r3, #1
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	3302      	adds	r3, #2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa8:	3303      	adds	r3, #3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4413      	add	r3, r2
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	3304      	adds	r3, #4
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d90a      	bls.n	8005fde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f00a fb04 	bl	80105e0 <realloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe8:	e035      	b.n	8006056 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006000:	3301      	adds	r3, #1
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	440b      	add	r3, r1
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006012:	3302      	adds	r3, #2
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	440b      	add	r3, r1
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006024:	3303      	adds	r3, #3
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	440b      	add	r3, r1
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	3304      	adds	r3, #4
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	3214      	adds	r2, #20
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	3301      	adds	r3, #1
 8006054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d3c4      	bcc.n	8005fea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	4413      	add	r3, r2
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800606a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606c:	3301      	adds	r3, #1
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	3302      	adds	r3, #2
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	4413      	add	r3, r2
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	3303      	adds	r3, #3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4413      	add	r3, r2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80060a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a2:	3304      	adds	r3, #4
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d90a      	bls.n	80060c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f00a fa90 	bl	80105e0 <realloc>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80060cc:	2300      	movs	r3, #0
 80060ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d0:	e03e      	b.n	8006150 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	441a      	add	r2, r3
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fc9f 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	3304      	adds	r3, #4
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ee:	e00b      	b.n	8006108 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	441a      	add	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	3b01      	subs	r3, #1
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	440b      	add	r3, r1
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	3301      	adds	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	429a      	cmp	r2, r3
 8006112:	d3ed      	bcc.n	80060f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8006114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	3b01      	subs	r3, #1
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4413      	add	r3, r2
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	3b01      	subs	r3, #1
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	441a      	add	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8006130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	3220      	adds	r2, #32
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	3301      	adds	r3, #1
 800614e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006156:	429a      	cmp	r2, r3
 8006158:	d3bb      	bcc.n	80060d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800615a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800615c:	4618      	mov	r0, r3
 800615e:	3738      	adds	r7, #56	@ 0x38
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	4b03      	ldr	r3, [pc, #12]	@ (800617c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	080136cc 	.word	0x080136cc

08006180 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	4b03      	ldr	r3, [pc, #12]	@ (8006198 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	080115b8 	.word	0x080115b8

0800619c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	611a      	str	r2, [r3, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68d8      	ldr	r0, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6891      	ldr	r1, [r2, #8]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	4798      	blx	r3
 80061e8:	4603      	mov	r3, r0
  };
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
  }
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006224:	2200      	movs	r2, #0
 8006226:	805a      	strh	r2, [r3, #2]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800622e:	2200      	movs	r2, #0
 8006230:	809a      	strh	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006238:	2200      	movs	r2, #0
 800623a:	80da      	strh	r2, [r3, #6]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006242:	461a      	mov	r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006264:	689b      	ldr	r3, [r3, #8]
	}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800628a:	2200      	movs	r2, #0
 800628c:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006294:	6898      	ldr	r0, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062a0:	4619      	mov	r1, r3
 80062a2:	f007 fd4d 	bl	800dd40 <HAL_UART_Receive_DMA>
	}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZN11SerialClass4readEv>:



	inline int read(void)
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80062ca:	b29b      	uxth	r3, r3
				& buf_mask;
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062d8:	885b      	ldrh	r3, [r3, #2]
 80062da:	89fa      	ldrh	r2, [r7, #14]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d102      	bne.n	80062e6 <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062e4:	e01c      	b.n	8006320 <_ZN11SerialClass4readEv+0x72>
		}

		int c = (int) rx_buf[rx_tail++];
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062ec:	885b      	ldrh	r3, [r3, #2]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	b291      	uxth	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80062f8:	8051      	strh	r1, [r2, #2]
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800630e:	885b      	ldrh	r3, [r3, #2]
 8006310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800631c:	805a      	strh	r2, [r3, #2]
		return c;
 800631e:	68bb      	ldr	r3, [r7, #8]
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633e:	dc35      	bgt.n	80063ac <_ZN11SerialClass5writeEPKhi+0x80>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	dd32      	ble.n	80063ac <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8006346:	bf00      	nop
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f6      	bne.n	8006348 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e00b      	b.n	8006378 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4413      	add	r3, r2
 8006366:	7819      	ldrb	r1, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	460a      	mov	r2, r1
 8006370:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	3301      	adds	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	dbef      	blt.n	8006360 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d010      	beq.n	80063ae <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	b292      	uxth	r2, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f007 fc4f 	bl	800dc48 <HAL_UART_Transmit_DMA>
 80063aa:	e000      	b.n	80063ae <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80063ac:	bf00      	nop
		}
	}
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
	}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063e0:	6898      	ldr	r0, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063ec:	4619      	mov	r1, r3
 80063ee:	f007 fca7 	bl	800dd40 <HAL_UART_Receive_DMA>
    }
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_UART_TxCpltCallback>:
SerialClass serial(huart3);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681c      	ldr	r4, [r3, #0]
 8006408:	4809      	ldr	r0, [pc, #36]	@ (8006430 <HAL_UART_TxCpltCallback+0x34>)
 800640a:	f7ff ff24 	bl	8006256 <_ZN11SerialClass10get_handleEv>
 800640e:	4603      	mov	r3, r0
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429c      	cmp	r4, r3
 8006414:	bf0c      	ite	eq
 8006416:	2301      	moveq	r3, #1
 8006418:	2300      	movne	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8006420:	4803      	ldr	r0, [pc, #12]	@ (8006430 <HAL_UART_TxCpltCallback+0x34>)
 8006422:	f7ff ffc7 	bl	80063b4 <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}
 800642e:	bf00      	nop
 8006430:	20000e1c 	.word	0x20000e1c

08006434 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 800643c:	4803      	ldr	r0, [pc, #12]	@ (800644c <HAL_UART_RxCpltCallback+0x18>)
 800643e:	f7ff ffc8 	bl	80063d2 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000e1c 	.word	0x20000e1c

08006450 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
			com(&serial)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a04      	ldr	r2, [pc, #16]	@ (800646c <_ZN13STM32HardwareC1Ev+0x1c>)
 800645c:	601a      	str	r2, [r3, #0]
	{

	}
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000e1c 	.word	0x20000e1c

08006470 <_ZN13STM32Hardware4initEv>:

	void init()
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fef8 	bl	8006272 <_ZN11SerialClass9start_dmaEv>
	}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <_ZN13STM32Hardware4readEv>:

	int read()
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff ff09 	bl	80062ae <_ZN11SerialClass4readEv>
 800649c:	4603      	mov	r3, r0
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff36 	bl	800632c <_ZN11SerialClass5writeEPKhi>
	}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80064d0:	f002 ff86 	bl	80093e0 <HAL_GetTick>
 80064d4:	4603      	mov	r3, r0
	}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff f816 	bl	800551c <_ZN3ros3MsgC1Ev>
 80064f0:	4a08      	ldr	r2, [pc, #32]	@ (8006514 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
      label(""),
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a07      	ldr	r2, [pc, #28]	@ (8006518 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80064fa:	605a      	str	r2, [r3, #4]
      size(0),
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	609a      	str	r2, [r3, #8]
      stride(0)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	60da      	str	r2, [r3, #12]
    {
    }
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	080137ac 	.word	0x080137ac
 8006518:	0801153c 	.word	0x0801153c

0800651c <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f7f9 fe6e 	bl	8000210 <strlen>
 8006534:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	4413      	add	r3, r2
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fa50 	bl	80079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3304      	adds	r3, #4
 8006548:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	18d0      	adds	r0, r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	4619      	mov	r1, r3
 8006558:	f00a fad9 	bl	8010b0e <memcpy>
      offset += length_label;
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4413      	add	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4413      	add	r3, r2
 800656e:	b2ca      	uxtb	r2, r1
 8006570:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	0a19      	lsrs	r1, r3, #8
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	4413      	add	r3, r2
 8006580:	b2ca      	uxtb	r2, r1
 8006582:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	0c19      	lsrs	r1, r3, #16
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3302      	adds	r3, #2
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	4413      	add	r3, r2
 8006592:	b2ca      	uxtb	r2, r1
 8006594:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0e19      	lsrs	r1, r3, #24
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3303      	adds	r3, #3
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	4413      	add	r3, r2
 80065a4:	b2ca      	uxtb	r2, r1
 80065a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3304      	adds	r3, #4
 80065ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68d9      	ldr	r1, [r3, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	4413      	add	r3, r2
 80065b8:	b2ca      	uxtb	r2, r1
 80065ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	0a19      	lsrs	r1, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	4413      	add	r3, r2
 80065ca:	b2ca      	uxtb	r2, r1
 80065cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	0c19      	lsrs	r1, r3, #16
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3302      	adds	r3, #2
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	b2ca      	uxtb	r2, r1
 80065de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0e19      	lsrs	r1, r3, #24
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3303      	adds	r3, #3
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	b2ca      	uxtb	r2, r1
 80065f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3304      	adds	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80065f8:	68fb      	ldr	r3, [r7, #12]
    }
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	441a      	add	r2, r3
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fa00 	bl	8007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3304      	adds	r3, #4
 8006626:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e00b      	b.n	8006646 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	441a      	add	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	3b01      	subs	r3, #1
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	440b      	add	r3, r1
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	429a      	cmp	r2, r3
 8006650:	d3ed      	bcc.n	800662e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	3b01      	subs	r3, #1
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4413      	add	r3, r2
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3b01      	subs	r3, #1
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	605a      	str	r2, [r3, #4]
      offset += length_label;
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4413      	add	r3, r2
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3301      	adds	r3, #1
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	440b      	add	r3, r1
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3302      	adds	r3, #2
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	440b      	add	r3, r1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3303      	adds	r3, #3
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	440b      	add	r3, r1
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3304      	adds	r3, #4
 80066ca:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4413      	add	r3, r2
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	440b      	add	r3, r1
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3302      	adds	r3, #2
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	440b      	add	r3, r1
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	3303      	adds	r3, #3
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	440b      	add	r3, r1
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3304      	adds	r3, #4
 8006720:	613b      	str	r3, [r7, #16]
     return offset;
 8006722:	693b      	ldr	r3, [r7, #16]
    }
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	4b03      	ldr	r3, [pc, #12]	@ (8006744 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	080115dc 	.word	0x080115dc

08006748 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	4b03      	ldr	r3, [pc, #12]	@ (8006760 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	080115fc 	.word	0x080115fc

08006764 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fed4 	bl	800551c <_ZN3ros3MsgC1Ev>
 8006774:	4a0a      	ldr	r2, [pc, #40]	@ (80067a0 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3308      	adds	r3, #8
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff feab 	bl	80064e0 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	61da      	str	r2, [r3, #28]
    {
    }
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	08013794 	.word	0x08013794

080067a4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4413      	add	r3, r2
 80067bc:	b2ca      	uxtb	r2, r1
 80067be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	0a19      	lsrs	r1, r3, #8
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4413      	add	r3, r2
 80067ce:	b2ca      	uxtb	r2, r1
 80067d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	0c19      	lsrs	r1, r3, #16
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3302      	adds	r3, #2
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	4413      	add	r3, r2
 80067e0:	b2ca      	uxtb	r2, r1
 80067e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	0e19      	lsrs	r1, r3, #24
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3303      	adds	r3, #3
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4413      	add	r3, r2
 80067f2:	b2ca      	uxtb	r2, r1
 80067f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3304      	adds	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80067fc:	2300      	movs	r3, #0
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	e017      	b.n	8006832 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	18d0      	adds	r0, r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	4413      	add	r3, r2
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	440a      	add	r2, r1
 8006820:	4611      	mov	r1, r2
 8006822:	4798      	blx	r3
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3301      	adds	r3, #1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d3e2      	bcc.n	8006802 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69d9      	ldr	r1, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4413      	add	r3, r2
 8006846:	b2ca      	uxtb	r2, r1
 8006848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	0a19      	lsrs	r1, r3, #8
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	4413      	add	r3, r2
 8006858:	b2ca      	uxtb	r2, r1
 800685a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	0c19      	lsrs	r1, r3, #16
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3302      	adds	r3, #2
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	4413      	add	r3, r2
 800686a:	b2ca      	uxtb	r2, r1
 800686c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	0e19      	lsrs	r1, r3, #24
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3303      	adds	r3, #3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	4413      	add	r3, r2
 800687c:	b2ca      	uxtb	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3304      	adds	r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
      return offset;
 8006886:	68fb      	ldr	r3, [r7, #12]
    }
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	4413      	add	r3, r2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3301      	adds	r3, #1
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3302      	adds	r3, #2
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	3303      	adds	r3, #3
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	4413      	add	r3, r2
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	061b      	lsls	r3, r3, #24
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	3304      	adds	r3, #4
 80068e2:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90a      	bls.n	8006904 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f009 fe71 	bl	80105e0 <realloc>
 80068fe:	4602      	mov	r2, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800690a:	2300      	movs	r3, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	e01a      	b.n	8006946 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f103 0008 	add.w	r0, r3, #8
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	4413      	add	r3, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f7ff fe70 	bl	8006602 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	18d0      	adds	r0, r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3308      	adds	r3, #8
 8006938:	2210      	movs	r2, #16
 800693a:	4619      	mov	r1, r3
 800693c:	f00a f8e7 	bl	8010b0e <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	d3df      	bcc.n	8006910 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4413      	add	r3, r2
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	440b      	add	r3, r1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3302      	adds	r3, #2
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	440b      	add	r3, r1
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3303      	adds	r3, #3
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	440b      	add	r3, r1
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	061b      	lsls	r3, r3, #24
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	3304      	adds	r3, #4
 80069a4:	617b      	str	r3, [r7, #20]
     return offset;
 80069a6:	697b      	ldr	r3, [r7, #20]
    }
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	4b03      	ldr	r3, [pc, #12]	@ (80069c8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	08011620 	.word	0x08011620

080069cc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	4b03      	ldr	r3, [pc, #12]	@ (80069e4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	0801163c 	.word	0x0801163c

080069e8 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
      data(0)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fd92 	bl	800551c <_ZN3ros3MsgC1Ev>
 80069f8:	4a05      	ldr	r2, [pc, #20]	@ (8006a10 <_ZN8std_msgs4Int8C1Ev+0x28>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	711a      	strb	r2, [r3, #4]
    {
    }
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	0801377c 	.word	0x0801377c

08006a14 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006a28:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	4413      	add	r3, r2
 8006a30:	7a3a      	ldrb	r2, [r7, #8]
 8006a32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]
      return offset;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
    }
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006a5a:	7a3a      	ldrb	r2, [r7, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	440b      	add	r3, r1
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8006a6a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
     return offset;
 8006a78:	68fb      	ldr	r3, [r7, #12]
    }
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <_ZN8std_msgs4Int87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8"; };
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	08011660 	.word	0x08011660

08006aa4 <_ZN8std_msgs4Int86getMD5Ev>:
    virtual const char * getMD5() override { return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	4b03      	ldr	r3, [pc, #12]	@ (8006abc <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	08011670 	.word	0x08011670

08006ac0 <_ZN8std_msgs14Int8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int8_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int8MultiArray():
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fd26 	bl	800551c <_ZN3ros3MsgC1Ev>
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b00 <_ZN8std_msgs14Int8MultiArrayC1Ev+0x40>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
      layout(),
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fe42 	bl	8006764 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	08013764 	.word	0x08013764

08006b04 <_ZNK8std_msgs14Int8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1d18      	adds	r0, r3, #4
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7ff fe41 	bl	80067a4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8006b22:	4602      	mov	r2, r0
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	4413      	add	r3, r2
 8006b34:	b2ca      	uxtb	r2, r1
 8006b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	0a19      	lsrs	r1, r3, #8
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3301      	adds	r3, #1
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	b2ca      	uxtb	r2, r1
 8006b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	0c19      	lsrs	r1, r3, #16
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	3302      	adds	r3, #2
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	4413      	add	r3, r2
 8006b58:	b2ca      	uxtb	r2, r1
 8006b5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	0e19      	lsrs	r1, r3, #24
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3303      	adds	r3, #3
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4413      	add	r3, r2
 8006b6a:	b2ca      	uxtb	r2, r1
 8006b6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	3304      	adds	r3, #4
 8006b72:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	e011      	b.n	8006b9e <_ZNK8std_msgs14Int8MultiArray9serializeEPh+0x9a>
      union {
        int8_t real;
        uint8_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f993 3000 	ldrsb.w	r3, [r3]
 8006b86:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	7b3a      	ldrb	r2, [r7, #12]
 8006b90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	3301      	adds	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d3e8      	bcc.n	8006b7a <_ZNK8std_msgs14Int8MultiArray9serializeEPh+0x76>
      }
      return offset;
 8006ba8:	697b      	ldr	r3, [r7, #20]
    }
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <_ZN8std_msgs14Int8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	1d18      	adds	r0, r3, #4
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4413      	add	r3, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f7ff fe60 	bl	8006890 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4413      	add	r3, r2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3301      	adds	r3, #1
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d908      	bls.n	8006c3a <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0x88>
        this->data = (int8_t*)realloc(this->data, data_lengthT * sizeof(int8_t));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f009 fcd6 	bl	80105e0 <realloc>
 8006c34:	4602      	mov	r2, r0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	e01c      	b.n	8006c80 <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0xce>
      union {
        int8_t real;
        uint8_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	723b      	strb	r3, [r7, #8]
      u_st_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006c4a:	7a3a      	ldrb	r2, [r7, #8]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	440b      	add	r3, r1
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	723b      	strb	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8006c5a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	3301      	adds	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	3228      	adds	r2, #40	@ 0x28
 8006c76:	7812      	ldrb	r2, [r2, #0]
 8006c78:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3dd      	bcc.n	8006c46 <_ZN8std_msgs14Int8MultiArray11deserializeEPh+0x94>
      }
     return offset;
 8006c8a:	697b      	ldr	r3, [r7, #20]
    }
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <_ZN8std_msgs14Int8MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8MultiArray"; };
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	4b03      	ldr	r3, [pc, #12]	@ (8006cac <_ZN8std_msgs14Int8MultiArray7getTypeEv+0x18>)
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	08011694 	.word	0x08011694

08006cb0 <_ZN8std_msgs14Int8MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d7c1af35a1b4781bbe79e03dd94b7c13"; };
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <_ZN8std_msgs14Int8MultiArray6getMD5Ev+0x18>)
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	080116ac 	.word	0x080116ac

08006ccc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fc20 	bl	800551c <_ZN3ros3MsgC1Ev>
 8006cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8006d18 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
      x(0),
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	0801374c 	.word	0x0801374c

08006d1c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006d1c:	b480      	push	{r7}
 8006d1e:	b08b      	sub	sp, #44	@ 0x2c
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d30:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d3a:	6838      	ldr	r0, [r7, #0]
 8006d3c:	4401      	add	r1, r0
 8006d3e:	b2d3      	uxtb	r3, r2
 8006d40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8006d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	0a02      	lsrs	r2, r0, #8
 8006d50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006d54:	0a0b      	lsrs	r3, r1, #8
 8006d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d58:	3101      	adds	r1, #1
 8006d5a:	6838      	ldr	r0, [r7, #0]
 8006d5c:	4401      	add	r1, r0
 8006d5e:	b2d3      	uxtb	r3, r2
 8006d60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8006d62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	0c02      	lsrs	r2, r0, #16
 8006d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d74:	0c0b      	lsrs	r3, r1, #16
 8006d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d78:	3102      	adds	r1, #2
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	4401      	add	r1, r0
 8006d7e:	b2d3      	uxtb	r3, r2
 8006d80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8006d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	0e02      	lsrs	r2, r0, #24
 8006d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006d94:	0e0b      	lsrs	r3, r1, #24
 8006d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d98:	3103      	adds	r1, #3
 8006d9a:	6838      	ldr	r0, [r7, #0]
 8006d9c:	4401      	add	r1, r0
 8006d9e:	b2d3      	uxtb	r3, r2
 8006da0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8006da2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	000a      	movs	r2, r1
 8006db0:	2300      	movs	r3, #0
 8006db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006db4:	3104      	adds	r1, #4
 8006db6:	6838      	ldr	r0, [r7, #0]
 8006db8:	4401      	add	r1, r0
 8006dba:	b2d3      	uxtb	r3, r2
 8006dbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	0a0a      	lsrs	r2, r1, #8
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dd0:	3105      	adds	r1, #5
 8006dd2:	6838      	ldr	r0, [r7, #0]
 8006dd4:	4401      	add	r1, r0
 8006dd6:	b2d3      	uxtb	r3, r2
 8006dd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8006dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	0c0a      	lsrs	r2, r1, #16
 8006de8:	2300      	movs	r3, #0
 8006dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dec:	3106      	adds	r1, #6
 8006dee:	6838      	ldr	r0, [r7, #0]
 8006df0:	4401      	add	r1, r0
 8006df2:	b2d3      	uxtb	r3, r2
 8006df4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8006df6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	0e0a      	lsrs	r2, r1, #24
 8006e04:	2300      	movs	r3, #0
 8006e06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e08:	3107      	adds	r1, #7
 8006e0a:	6838      	ldr	r0, [r7, #0]
 8006e0c:	4401      	add	r1, r0
 8006e0e:	b2d3      	uxtb	r3, r2
 8006e10:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	3308      	adds	r3, #8
 8006e16:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8006e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e28:	6838      	ldr	r0, [r7, #0]
 8006e2a:	4401      	add	r1, r0
 8006e2c:	b2d3      	uxtb	r3, r2
 8006e2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8006e30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	0a02      	lsrs	r2, r0, #8
 8006e3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006e42:	0a0b      	lsrs	r3, r1, #8
 8006e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e46:	3101      	adds	r1, #1
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	4401      	add	r1, r0
 8006e4c:	b2d3      	uxtb	r3, r2
 8006e4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8006e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	0c02      	lsrs	r2, r0, #16
 8006e5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e62:	0c0b      	lsrs	r3, r1, #16
 8006e64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e66:	3102      	adds	r1, #2
 8006e68:	6838      	ldr	r0, [r7, #0]
 8006e6a:	4401      	add	r1, r0
 8006e6c:	b2d3      	uxtb	r3, r2
 8006e6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8006e70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	0e02      	lsrs	r2, r0, #24
 8006e7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006e82:	0e0b      	lsrs	r3, r1, #24
 8006e84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e86:	3103      	adds	r1, #3
 8006e88:	6838      	ldr	r0, [r7, #0]
 8006e8a:	4401      	add	r1, r0
 8006e8c:	b2d3      	uxtb	r3, r2
 8006e8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8006e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	000a      	movs	r2, r1
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ea2:	3104      	adds	r1, #4
 8006ea4:	6838      	ldr	r0, [r7, #0]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	b2d3      	uxtb	r3, r2
 8006eaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8006eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	0a0a      	lsrs	r2, r1, #8
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ebe:	3105      	adds	r1, #5
 8006ec0:	6838      	ldr	r0, [r7, #0]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	b2d3      	uxtb	r3, r2
 8006ec6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8006ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	0c0a      	lsrs	r2, r1, #16
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eda:	3106      	adds	r1, #6
 8006edc:	6838      	ldr	r0, [r7, #0]
 8006ede:	4401      	add	r1, r0
 8006ee0:	b2d3      	uxtb	r3, r2
 8006ee2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8006ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	0e0a      	lsrs	r2, r1, #24
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ef6:	3107      	adds	r1, #7
 8006ef8:	6838      	ldr	r0, [r7, #0]
 8006efa:	4401      	add	r1, r0
 8006efc:	b2d3      	uxtb	r3, r2
 8006efe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	3308      	adds	r3, #8
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006f0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8006f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	4401      	add	r1, r0
 8006f1a:	b2d3      	uxtb	r3, r2
 8006f1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8006f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	0a02      	lsrs	r2, r0, #8
 8006f2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006f30:	0a0b      	lsrs	r3, r1, #8
 8006f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f34:	3101      	adds	r1, #1
 8006f36:	6838      	ldr	r0, [r7, #0]
 8006f38:	4401      	add	r1, r0
 8006f3a:	b2d3      	uxtb	r3, r2
 8006f3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8006f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	0c02      	lsrs	r2, r0, #16
 8006f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006f50:	0c0b      	lsrs	r3, r1, #16
 8006f52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f54:	3102      	adds	r1, #2
 8006f56:	6838      	ldr	r0, [r7, #0]
 8006f58:	4401      	add	r1, r0
 8006f5a:	b2d3      	uxtb	r3, r2
 8006f5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8006f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	0e02      	lsrs	r2, r0, #24
 8006f6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006f70:	0e0b      	lsrs	r3, r1, #24
 8006f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f74:	3103      	adds	r1, #3
 8006f76:	6838      	ldr	r0, [r7, #0]
 8006f78:	4401      	add	r1, r0
 8006f7a:	b2d3      	uxtb	r3, r2
 8006f7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8006f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	000a      	movs	r2, r1
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f90:	3104      	adds	r1, #4
 8006f92:	6838      	ldr	r0, [r7, #0]
 8006f94:	4401      	add	r1, r0
 8006f96:	b2d3      	uxtb	r3, r2
 8006f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	f04f 0300 	mov.w	r3, #0
 8006fa6:	0a0a      	lsrs	r2, r1, #8
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fac:	3105      	adds	r1, #5
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	4401      	add	r1, r0
 8006fb2:	b2d3      	uxtb	r3, r2
 8006fb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8006fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	0c0a      	lsrs	r2, r1, #16
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fc8:	3106      	adds	r1, #6
 8006fca:	6838      	ldr	r0, [r7, #0]
 8006fcc:	4401      	add	r1, r0
 8006fce:	b2d3      	uxtb	r3, r2
 8006fd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8006fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	0e0a      	lsrs	r2, r1, #24
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fe4:	3107      	adds	r1, #7
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	4401      	add	r1, r0
 8006fea:	b2d3      	uxtb	r3, r2
 8006fec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	372c      	adds	r7, #44	@ 0x2c
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007002:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007006:	b0eb      	sub	sp, #428	@ 0x1ac
 8007008:	af00      	add	r7, sp, #0
 800700a:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 800700e:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007024:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007028:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800702c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007030:	4413      	add	r3, r2
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2200      	movs	r2, #0
 8007038:	461c      	mov	r4, r3
 800703a:	4615      	mov	r5, r2
 800703c:	ea40 0804 	orr.w	r8, r0, r4
 8007040:	ea41 0905 	orr.w	r9, r1, r5
 8007044:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007048:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800704c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007056:	4413      	add	r3, r2
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2200      	movs	r2, #0
 800705e:	469a      	mov	sl, r3
 8007060:	4693      	mov	fp, r2
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800706e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8007072:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8007076:	ea40 0402 	orr.w	r4, r0, r2
 800707a:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 800707e:	430b      	orrs	r3, r1
 8007080:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8007084:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8007088:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800708c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007094:	1c9a      	adds	r2, r3, #2
 8007096:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80070a6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80070b6:	464c      	mov	r4, r9
 80070b8:	0423      	lsls	r3, r4, #16
 80070ba:	4644      	mov	r4, r8
 80070bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80070c0:	4644      	mov	r4, r8
 80070c2:	0422      	lsls	r2, r4, #16
 80070c4:	ea40 0402 	orr.w	r4, r0, r2
 80070c8:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80070cc:	430b      	orrs	r3, r1
 80070ce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80070d2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80070d6:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80070da:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80070de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80070e2:	1cda      	adds	r2, r3, #3
 80070e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80070e8:	4413      	add	r3, r2
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80070f4:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80070f8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80070fc:	4623      	mov	r3, r4
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8007104:	4623      	mov	r3, r4
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800710c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8007110:	4623      	mov	r3, r4
 8007112:	4303      	orrs	r3, r0
 8007114:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8007118:	462b      	mov	r3, r5
 800711a:	430b      	orrs	r3, r1
 800711c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007120:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8007124:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007128:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800712c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007136:	4413      	add	r3, r2
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2200      	movs	r2, #0
 800713e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8007142:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8007152:	0023      	movs	r3, r4
 8007154:	2200      	movs	r2, #0
 8007156:	ea40 0402 	orr.w	r4, r0, r2
 800715a:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 800715e:	430b      	orrs	r3, r1
 8007160:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007164:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8007168:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800716c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8007170:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007174:	1d5a      	adds	r2, r3, #5
 8007176:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800717a:	4413      	add	r3, r2
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2200      	movs	r2, #0
 8007182:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007186:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8007196:	0223      	lsls	r3, r4, #8
 8007198:	2200      	movs	r2, #0
 800719a:	ea40 0402 	orr.w	r4, r0, r2
 800719e:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80071a8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80071ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80071b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80071b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80071b8:	1d9a      	adds	r2, r3, #6
 80071ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80071be:	4413      	add	r3, r2
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80071ca:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80071da:	0423      	lsls	r3, r4, #16
 80071dc:	2200      	movs	r2, #0
 80071de:	ea40 0402 	orr.w	r4, r0, r2
 80071e2:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80071e6:	430b      	orrs	r3, r1
 80071e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80071ec:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80071f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80071f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80071f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80071fc:	1dda      	adds	r2, r3, #7
 80071fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007202:	4413      	add	r3, r2
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2200      	movs	r2, #0
 800720a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800720e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 800721e:	0623      	lsls	r3, r4, #24
 8007220:	2200      	movs	r2, #0
 8007222:	ea40 0402 	orr.w	r4, r0, r2
 8007226:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800722a:	430b      	orrs	r3, r1
 800722c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007230:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8007234:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8007238:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800723c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8007240:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8007244:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007248:	3308      	adds	r3, #8
 800724a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800725a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800725e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8007262:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007266:	4413      	add	r3, r2
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007272:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8007276:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800727a:	4623      	mov	r3, r4
 800727c:	4303      	orrs	r3, r0
 800727e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007282:	462b      	mov	r3, r5
 8007284:	430b      	orrs	r3, r1
 8007286:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800728a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800728e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007292:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007296:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80072a0:	4413      	add	r3, r2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072ac:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80072bc:	464c      	mov	r4, r9
 80072be:	0223      	lsls	r3, r4, #8
 80072c0:	4644      	mov	r4, r8
 80072c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072c6:	4644      	mov	r4, r8
 80072c8:	0222      	lsls	r2, r4, #8
 80072ca:	ea40 0402 	orr.w	r4, r0, r2
 80072ce:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80072d2:	430b      	orrs	r3, r1
 80072d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072d8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80072dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80072e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80072e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800730a:	464c      	mov	r4, r9
 800730c:	0423      	lsls	r3, r4, #16
 800730e:	4644      	mov	r4, r8
 8007310:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8007314:	4644      	mov	r4, r8
 8007316:	0422      	lsls	r2, r4, #16
 8007318:	ea40 0402 	orr.w	r4, r0, r2
 800731c:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8007320:	430b      	orrs	r3, r1
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800732a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800732e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007332:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007336:	1cda      	adds	r2, r3, #3
 8007338:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800733c:	4413      	add	r3, r2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007348:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800734c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8007350:	4623      	mov	r3, r4
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007358:	4623      	mov	r3, r4
 800735a:	061b      	lsls	r3, r3, #24
 800735c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007360:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8007364:	4623      	mov	r3, r4
 8007366:	4303      	orrs	r3, r0
 8007368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800736c:	462b      	mov	r3, r5
 800736e:	430b      	orrs	r3, r1
 8007370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007374:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8007378:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800737c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007380:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007384:	1d1a      	adds	r2, r3, #4
 8007386:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800738a:	4413      	add	r3, r2
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007396:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80073a6:	0023      	movs	r3, r4
 80073a8:	2200      	movs	r2, #0
 80073aa:	ea40 0402 	orr.w	r4, r0, r2
 80073ae:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80073b2:	430b      	orrs	r3, r1
 80073b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073b8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80073bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80073c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80073c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80073c8:	1d5a      	adds	r2, r3, #5
 80073ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073da:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80073ea:	0223      	lsls	r3, r4, #8
 80073ec:	2200      	movs	r2, #0
 80073ee:	ea40 0402 	orr.w	r4, r0, r2
 80073f2:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80073f6:	430b      	orrs	r3, r1
 80073f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073fc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8007400:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007404:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800740c:	1d9a      	adds	r2, r3, #6
 800740e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007412:	4413      	add	r3, r2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2200      	movs	r2, #0
 800741a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800741e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800742e:	0423      	lsls	r3, r4, #16
 8007430:	2200      	movs	r2, #0
 8007432:	ea40 0402 	orr.w	r4, r0, r2
 8007436:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 800743a:	430b      	orrs	r3, r1
 800743c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007440:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8007444:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007448:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800744c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007450:	1dda      	adds	r2, r3, #7
 8007452:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2200      	movs	r2, #0
 800745e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007462:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	f04f 0300 	mov.w	r3, #0
 800746e:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8007472:	0623      	lsls	r3, r4, #24
 8007474:	2200      	movs	r2, #0
 8007476:	ea40 0402 	orr.w	r4, r0, r2
 800747a:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800747e:	430b      	orrs	r3, r1
 8007480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007484:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8007488:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 800748c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8007490:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8007494:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8007498:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800749c:	3308      	adds	r3, #8
 800749e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80074ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80074b2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80074b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80074ba:	4413      	add	r3, r2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074c6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80074ca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80074ce:	4623      	mov	r3, r4
 80074d0:	4303      	orrs	r3, r0
 80074d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074d4:	462b      	mov	r3, r5
 80074d6:	430b      	orrs	r3, r1
 80074d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074da:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80074de:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80074e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80074e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80074f0:	4413      	add	r3, r2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2200      	movs	r2, #0
 80074f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80074fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007508:	464c      	mov	r4, r9
 800750a:	0223      	lsls	r3, r4, #8
 800750c:	4644      	mov	r4, r8
 800750e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007512:	4644      	mov	r4, r8
 8007514:	0222      	lsls	r2, r4, #8
 8007516:	ea40 0402 	orr.w	r4, r0, r2
 800751a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800751c:	430b      	orrs	r3, r1
 800751e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007520:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8007524:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007528:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800752c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007530:	1c9a      	adds	r2, r3, #2
 8007532:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8007536:	4413      	add	r3, r2
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2200      	movs	r2, #0
 800753e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007540:	667a      	str	r2, [r7, #100]	@ 0x64
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800754e:	464c      	mov	r4, r9
 8007550:	0423      	lsls	r3, r4, #16
 8007552:	4644      	mov	r4, r8
 8007554:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8007558:	4644      	mov	r4, r8
 800755a:	0422      	lsls	r2, r4, #16
 800755c:	ea40 0402 	orr.w	r4, r0, r2
 8007560:	65bc      	str	r4, [r7, #88]	@ 0x58
 8007562:	430b      	orrs	r3, r1
 8007564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007566:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800756a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800756e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007572:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007576:	1cda      	adds	r2, r3, #3
 8007578:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800757c:	4413      	add	r3, r2
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2200      	movs	r2, #0
 8007584:	653b      	str	r3, [r7, #80]	@ 0x50
 8007586:	657a      	str	r2, [r7, #84]	@ 0x54
 8007588:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800758c:	4623      	mov	r3, r4
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007592:	4623      	mov	r3, r4
 8007594:	061b      	lsls	r3, r3, #24
 8007596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007598:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800759c:	4623      	mov	r3, r4
 800759e:	4303      	orrs	r3, r0
 80075a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a2:	462b      	mov	r3, r5
 80075a4:	430b      	orrs	r3, r1
 80075a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80075ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80075b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80075b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80075b8:	1d1a      	adds	r2, r3, #4
 80075ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80075be:	4413      	add	r3, r2
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2200      	movs	r2, #0
 80075c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80075d4:	0023      	movs	r3, r4
 80075d6:	2200      	movs	r2, #0
 80075d8:	ea40 0402 	orr.w	r4, r0, r2
 80075dc:	633c      	str	r4, [r7, #48]	@ 0x30
 80075de:	430b      	orrs	r3, r1
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80075e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80075ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80075ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80075f2:	1d5a      	adds	r2, r3, #5
 80075f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80075f8:	4413      	add	r3, r2
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2200      	movs	r2, #0
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800760e:	0223      	lsls	r3, r4, #8
 8007610:	2200      	movs	r2, #0
 8007612:	ea40 0402 	orr.w	r4, r0, r2
 8007616:	623c      	str	r4, [r7, #32]
 8007618:	430b      	orrs	r3, r1
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
 800761c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007620:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007624:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007628:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800762c:	3306      	adds	r3, #6
 800762e:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007632:	4413      	add	r3, r2
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2200      	movs	r2, #0
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	69bc      	ldr	r4, [r7, #24]
 8007648:	0423      	lsls	r3, r4, #16
 800764a:	2200      	movs	r2, #0
 800764c:	ea40 0402 	orr.w	r4, r0, r2
 8007650:	613c      	str	r4, [r7, #16]
 8007652:	430b      	orrs	r3, r1
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800765a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800765e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007662:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007666:	3307      	adds	r3, #7
 8007668:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800766c:	4413      	add	r3, r2
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2200      	movs	r2, #0
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	60fa      	str	r2, [r7, #12]
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	68bc      	ldr	r4, [r7, #8]
 8007682:	0623      	lsls	r3, r4, #24
 8007684:	2200      	movs	r2, #0
 8007686:	ea40 0402 	orr.w	r4, r0, r2
 800768a:	603c      	str	r4, [r7, #0]
 800768c:	430b      	orrs	r3, r1
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007694:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8007698:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800769c:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 80076a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80076a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 80076ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 80076b2:	4618      	mov	r0, r3
 80076b4:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 80076b8:	46bd      	mov	sp, r7
 80076ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80076be:	4770      	bx	lr

080076c0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4b03      	ldr	r3, [pc, #12]	@ (80076d8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	080116d0 	.word	0x080116d0

080076dc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	4b03      	ldr	r3, [pc, #12]	@ (80076f4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	080116e8 	.word	0x080116e8

080076f8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd ff0a 	bl	800551c <_ZN3ros3MsgC1Ev>
 8007708:	4a08      	ldr	r2, [pc, #32]	@ (800772c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
      linear(),
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3308      	adds	r3, #8
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fada 	bl	8006ccc <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3328      	adds	r3, #40	@ 0x28
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fad5 	bl	8006ccc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	08013734 	.word	0x08013734

08007730 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f103 0008 	add.w	r0, r3, #8
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4413      	add	r3, r2
 800774a:	4619      	mov	r1, r3
 800774c:	f7ff fae6 	bl	8006d1c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8007750:	4602      	mov	r2, r0
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	4413      	add	r3, r2
 8007764:	4619      	mov	r1, r3
 8007766:	f7ff fad9 	bl	8006d1c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800776a:	4602      	mov	r2, r0
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
      return offset;
 8007772:	68fb      	ldr	r3, [r7, #12]
    }
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f103 0008 	add.w	r0, r3, #8
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4413      	add	r3, r2
 8007796:	4619      	mov	r1, r3
 8007798:	f7ff fc33 	bl	8007002 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800779c:	4602      	mov	r2, r0
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4413      	add	r3, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7ff fc26 	bl	8007002 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80077b6:	4602      	mov	r2, r0
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80077be:	68fb      	ldr	r3, [r7, #12]
    }
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	4b03      	ldr	r3, [pc, #12]	@ (80077e0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	0801170c 	.word	0x0801170c

080077e4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	4b03      	ldr	r3, [pc, #12]	@ (80077fc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	08011720 	.word	0x08011720

08007800 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	4a04      	ldr	r2, [pc, #16]	@ (800781c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	080137dc 	.word	0x080137dc

08007820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ffe8 	bl	8007800 <_ZN3ros15NodeHandleBase_C1Ev>
 8007830:	4a33      	ldr	r2, [pc, #204]	@ (8007900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fe08 	bl	8006450 <_ZN13STM32HardwareC1Ev>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	609a      	str	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	611a      	str	r2, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	615a      	str	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3318      	adds	r3, #24
 800785c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f009 f8d7 	bl	8010a16 <memset>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800786e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f009 f8ce 	bl	8010a16 <memset>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8007880:	2264      	movs	r2, #100	@ 0x64
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f009 f8c6 	bl	8010a16 <memset>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8007890:	2264      	movs	r2, #100	@ 0x64
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f009 f8be 	bl	8010a16 <memset>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe f987 	bl	8005c04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08013720 	.word	0x08013720

08007904 <_Z9call_backRKN13geometry_msgs5TwistE>:
//void coordinate(const std_msgs::Int16& msg){
//	reset_encoder = msg.data;
//	reset_flag =1;
//}
//extern char color_buffer[]='';
void call_back(const geometry_msgs::Twist& cmd_vel){
 8007904:	b5b0      	push	{r4, r5, r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	right_x = cmd_vel.angular.z;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007912:	4610      	mov	r0, r2
 8007914:	4619      	mov	r1, r3
 8007916:	f7f9 f8a1 	bl	8000a5c <__aeabi_d2iz>
 800791a:	4603      	mov	r3, r0
 800791c:	4a0a      	ldr	r2, [pc, #40]	@ (8007948 <_Z9call_backRKN13geometry_msgs5TwistE+0x44>)
 800791e:	6013      	str	r3, [r2, #0]
	left_x = cmd_vel.linear.x;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007926:	4909      	ldr	r1, [pc, #36]	@ (800794c <_Z9call_backRKN13geometry_msgs5TwistE+0x48>)
 8007928:	e9c1 2300 	strd	r2, r3, [r1]
	left_y = -cmd_vel.linear.y;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007932:	4614      	mov	r4, r2
 8007934:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007938:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <_Z9call_backRKN13geometry_msgs5TwistE+0x4c>)
 800793a:	e9c3 4500 	strd	r4, r5, [r3]
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bdb0      	pop	{r4, r5, r7, pc}
 8007946:	bf00      	nop
 8007948:	20002e28 	.word	0x20002e28
 800794c:	20002e30 	.word	0x20002e30
 8007950:	20002e38 	.word	0x20002e38

08007954 <_Z4seedRKN8std_msgs4Int8E>:
void seed(const std_msgs::Int8& seed){
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	 comma = seed.data;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007962:	461a      	mov	r2, r3
 8007964:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <_Z4seedRKN8std_msgs4Int8E+0x20>)
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20002e40 	.word	0x20002e40

08007978 <setup>:
ros::Publisher sensor("sensor", &Sensor_data);
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
ros::Subscriber<std_msgs::Int8>seedl("seed", &seed);
//ros::Subscriber<std_msgs::Int16> reset_en("coordinate", &coordinate);
//ros::Publisher color_sensor("color", &color_data);
void setup(void){
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
	nh.initNode();
 800797c:	4808      	ldr	r0, [pc, #32]	@ (80079a0 <setup+0x28>)
 800797e:	f000 f8cf 	bl	8007b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(sensor);
 8007982:	4908      	ldr	r1, [pc, #32]	@ (80079a4 <setup+0x2c>)
 8007984:	4806      	ldr	r0, [pc, #24]	@ (80079a0 <setup+0x28>)
 8007986:	f000 f8e8 	bl	8007b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(joy);
 800798a:	4907      	ldr	r1, [pc, #28]	@ (80079a8 <setup+0x30>)
 800798c:	4804      	ldr	r0, [pc, #16]	@ (80079a0 <setup+0x28>)
 800798e:	f000 f912 	bl	8007bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(seedl);
 8007992:	4906      	ldr	r1, [pc, #24]	@ (80079ac <setup+0x34>)
 8007994:	4802      	ldr	r0, [pc, #8]	@ (80079a0 <setup+0x28>)
 8007996:	f000 f90e 	bl	8007bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//	nh.subscribe(reset_en);
//	nh.advertise(color_sensor);
}
 800799a:	bf00      	nop
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20002e44 	.word	0x20002e44
 80079a4:	200033a4 	.word	0x200033a4
 80079a8:	200033b8 	.word	0x200033b8
 80079ac:	20003418 	.word	0x20003418

080079b0 <loop>:

void loop(void){
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
//		color_data.data= color_buffer;
		Sensor_data.data_length =2;
 80079b4:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <loop+0x24>)
 80079b6:	2202      	movs	r2, #2
 80079b8:	625a      	str	r2, [r3, #36]	@ 0x24
		Sensor_data.data= sensor_buff;
 80079ba:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <loop+0x24>)
 80079bc:	4a06      	ldr	r2, [pc, #24]	@ (80079d8 <loop+0x28>)
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c
		sensor.publish(&Sensor_data);
 80079c0:	4904      	ldr	r1, [pc, #16]	@ (80079d4 <loop+0x24>)
 80079c2:	4806      	ldr	r0, [pc, #24]	@ (80079dc <loop+0x2c>)
 80079c4:	f7fe fc01 	bl	80061ca <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//		color_sensor.publish(&color_data);
		nh.spinOnce();
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <loop+0x30>)
 80079ca:	f000 f921 	bl	8007c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20003374 	.word	0x20003374
 80079d8:	20000c24 	.word	0x20000c24
 80079dc:	200033a4 	.word	0x200033a4
 80079e0:	20002e44 	.word	0x20002e44

080079e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e00c      	b.n	8007a0e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	fa22 f103 	lsr.w	r1, r2, r3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	b2ca      	uxtb	r2, r1
 8007a06:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d9ef      	bls.n	80079f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e010      	b.n	8007a5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	440a      	add	r2, r1
 8007a42:	7812      	ldrb	r2, [r2, #0]
 8007a44:	4611      	mov	r1, r2
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	00d2      	lsls	r2, r2, #3
 8007a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d9eb      	bls.n	8007a38 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	4a04      	ldr	r2, [pc, #16]	@ (8007a8c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	080137c4 	.word	0x080137c4

08007a90 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ffe5 	bl	8007a70 <_ZN3ros11Subscriber_C1Ev>
 8007aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3310      	adds	r3, #16
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fe21 	bl	80076f8 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	609a      	str	r2, [r3, #8]
  };
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08013708 	.word	0x08013708

08007ad8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ffc1 	bl	8007a70 <_ZN3ros11Subscriber_C1Ev>
 8007aee:	4a0b      	ldr	r2, [pc, #44]	@ (8007b1c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	330c      	adds	r3, #12
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe ff75 	bl	80069e8 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  };
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	080136f0 	.word	0x080136f0

08007b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe fc9f 	bl	8006470 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e01b      	b.n	8007ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d110      	bne.n	8007b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	60da      	str	r2, [r3, #12]
        return true;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e006      	b.n	8007baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b18      	cmp	r3, #24
 8007ba6:	dde0      	ble.n	8007b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8007ba8:	2300      	movs	r3, #0
  }
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e01a      	b.n	8007bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10e      	bne.n	8007bf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
        return true;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e006      	b.n	8007c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b18      	cmp	r3, #24
 8007c00:	dde1      	ble.n	8007bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8007c02:	2300      	movs	r3, #0
  }
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fc53 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 8007c22:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d903      	bls.n	8007c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d903      	bls.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d013      	beq.n	8007c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fc2d 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	bf8c      	ite	hi
 8007c7c:	2301      	movhi	r3, #1
 8007c7e:	2300      	movls	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8007c86:	f06f 0301 	mvn.w	r3, #1
 8007c8a:	e190      	b.n	8007fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fbfa 	bl	800648a <_ZN13STM32Hardware4readEv>
 8007c96:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f2c0 8170 	blt.w	8007f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	441a      	add	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cb6:	2b07      	cmp	r3, #7
 8007cb8:	d11d      	bne.n	8007cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8007cc0:	1c59      	adds	r1, r3, #1
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	b2d1      	uxtb	r1, r2
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8007cda:	1e5a      	subs	r2, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1b7      	bne.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2208      	movs	r2, #8
 8007cf0:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007cf4:	e7b2      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d128      	bne.n	8007d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2bff      	cmp	r3, #255	@ 0xff
 8007d04:	d10d      	bne.n	8007d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f103 0214 	add.w	r2, r3, #20
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8007d20:	e79c      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fbce 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d36:	4293      	cmp	r3, r2
 8007d38:	bf8c      	ite	hi
 8007d3a:	2301      	movhi	r3, #1
 8007d3c:	2300      	movls	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d08b      	beq.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8007d4c:	f06f 0301 	mvn.w	r3, #1
 8007d50:	e12d      	b.n	8007fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d118      	bne.n	8007d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d60:	d107      	bne.n	8007d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007d70:	e774      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f47f af6b 	bne.w	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f915 	bl	8007fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8007d8c:	e766      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d113      	bne.n	8007dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8007dbe:	e74d      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d110      	bne.n	8007dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007dea:	e737      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d116      	bne.n	8007e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8007dfc:	425a      	negs	r2, r3
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	bf58      	it	pl
 8007e04:	4253      	negpl	r3, r2
 8007e06:	2bff      	cmp	r3, #255	@ 0xff
 8007e08:	d107      	bne.n	8007e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007e18:	e720      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007e22:	e71b      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d10f      	bne.n	8007e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8007e4c:	e706      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e54:	2b06      	cmp	r3, #6
 8007e56:	d117      	bne.n	8007e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	441a      	add	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f aeef 	bne.w	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2208      	movs	r2, #8
 8007e82:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8007e86:	e6e9      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	f47f aee4 	bne.w	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8007ea2:	425a      	negs	r2, r3
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	bf58      	it	pl
 8007eaa:	4253      	negpl	r3, r2
 8007eac:	2bff      	cmp	r3, #255	@ 0xff
 8007eae:	f47f aed5 	bne.w	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d110      	bne.n	8007ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f87a 	bl	8007fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f894 	bl	8007ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007edc:	e067      	b.n	8007fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007ee4:	2b0a      	cmp	r3, #10
 8007ee6:	d106      	bne.n	8007ef6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3318      	adds	r3, #24
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f95e 	bl	80081b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8007ef4:	e6b2      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007efc:	2b06      	cmp	r3, #6
 8007efe:	d10d      	bne.n	8007f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3318      	adds	r3, #24
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f7fd ffb8 	bl	8005e82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8007f1a:	e69f      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007f22:	2b0b      	cmp	r3, #11
 8007f24:	d104      	bne.n	8007f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8007f2e:	e695      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007f36:	3b64      	subs	r3, #100	@ 0x64
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f43f ae89 	beq.w	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007f50:	3b64      	subs	r3, #100	@ 0x64
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	6858      	ldr	r0, [r3, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8007f64:	3b64      	subs	r3, #100	@ 0x64
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	3218      	adds	r2, #24
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4798      	blx	r3
    while (true)
 8007f7e:	e66d      	b.n	8007c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8007f80:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00f      	beq.n	8007fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d906      	bls.n	8007fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f809 	bl	8007fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 8007fac:	2300      	movs	r3, #0
  }
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007fbe:	f107 030c 	add.w	r3, r7, #12
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fd faba 	bl	800553c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f107 020c 	add.w	r2, r7, #12
 8007fd2:	210a      	movs	r1, #10
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
    rt_time = hardware_.time();
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fa73 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	609a      	str	r2, [r3, #8]
  }
 8007fe8:	bf00      	nop
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8007ff0:	b590      	push	{r4, r7, lr}
 8007ff2:	b08b      	sub	sp, #44	@ 0x2c
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007ff8:	f107 030c 	add.w	r3, r7, #12
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fd fb8d 	bl	800571c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8008002:	2300      	movs	r3, #0
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
 8008006:	e05a      	b.n	80080be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800800c:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d04f      	beq.n	80080b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801c:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	b29b      	uxth	r3, r3
 8008028:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804c:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3308      	adds	r3, #8
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4608      	mov	r0, r1
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008068:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008076:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	330c      	adds	r3, #12
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4608      	mov	r0, r1
 8008088:	4798      	blx	r3
 800808a:	4603      	mov	r3, r0
 800808c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800808e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008092:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681c      	ldr	r4, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800809e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80080a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe f8a3 	bl	80061f2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80080ac:	4601      	mov	r1, r0
 80080ae:	f107 030c 	add.w	r3, r7, #12
 80080b2:	461a      	mov	r2, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	2b18      	cmp	r3, #24
 80080c2:	dda1      	ble.n	8008008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80080c4:	2300      	movs	r3, #0
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c8:	e067      	b.n	800819a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d05b      	beq.n	8008194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4608      	mov	r0, r1
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4608      	mov	r0, r1
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8008156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800815a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681c      	ldr	r4, [r3, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	6859      	ldr	r1, [r3, #4]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3304      	adds	r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4608      	mov	r0, r1
 8008186:	4798      	blx	r3
 8008188:	4601      	mov	r1, r0
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	461a      	mov	r2, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	3301      	adds	r3, #1
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	2b18      	cmp	r3, #24
 800819e:	dd94      	ble.n	80080ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 80081a8:	bf00      	nop
 80081aa:	372c      	adds	r7, #44	@ 0x2c
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd90      	pop	{r4, r7, pc}

080081b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fd f9bc 	bl	800553c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe f97d 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 80081ce:	4602      	mov	r2, r0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fa1c 	bl	800561c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	4914      	ldr	r1, [pc, #80]	@ (800823c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80081ea:	fba1 1303 	umull	r1, r3, r1, r3
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	4413      	add	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80081f4:	6939      	ldr	r1, [r7, #16]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4b10      	ldr	r3, [pc, #64]	@ (800823c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80081fa:	fba3 0302 	umull	r0, r3, r3, r2
 80081fe:	099b      	lsrs	r3, r3, #6
 8008200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008204:	fb00 f303 	mul.w	r3, r0, r3
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	4a0d      	ldr	r2, [pc, #52]	@ (8008240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	440b      	add	r3, r1
 8008212:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f8a5 	bl	800836c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3304      	adds	r3, #4
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe f94e 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 800822c:	4602      	mov	r2, r0
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 8008234:	bf00      	nop
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	000f4240 	.word	0x000f4240

08008244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b63      	cmp	r3, #99	@ 0x63
 8008254:	dd09      	ble.n	800826a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800825c:	f083 0301 	eor.w	r3, r3, #1
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8008266:	2300      	movs	r3, #0
 8008268:	e079      	b.n	800835e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 8008276:	3207      	adds	r2, #7
 8008278:	4611      	mov	r1, r2
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
 800827e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	22ff      	movs	r2, #255	@ 0xff
 8008284:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22fe      	movs	r2, #254	@ 0xfe
 800828c:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	b29b      	uxth	r3, r3
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80082b6:	4413      	add	r3, r2
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	43db      	mvns	r3, r3
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	b21b      	sxth	r3, r3
 80082d2:	121b      	asrs	r3, r3, #8
 80082d4:	b21b      	sxth	r3, r3
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80082e2:	2305      	movs	r3, #5
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	e00c      	b.n	8008302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	3301      	adds	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	3306      	adds	r3, #6
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	429a      	cmp	r2, r3
 800830a:	dded      	ble.n	80082e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	3307      	adds	r3, #7
 8008310:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	425a      	negs	r2, r3
 8008316:	b2db      	uxtb	r3, r3
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	bf58      	it	pl
 800831c:	4253      	negpl	r3, r2
 800831e:	b2da      	uxtb	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	1c59      	adds	r1, r3, #1
 8008324:	6179      	str	r1, [r7, #20]
 8008326:	43d2      	mvns	r2, r2
 8008328:	b2d1      	uxtb	r1, r2
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	460a      	mov	r2, r1
 8008330:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833a:	dc0a      	bgt.n	8008352 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	1d18      	adds	r0, r3, #4
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4619      	mov	r1, r3
 800834a:	f7fe f8ac 	bl	80064a6 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	e005      	b.n	800835e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8008352:	4905      	ldr	r1, [pc, #20]	@ (8008368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f847 	bl	80083e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800835e:	4618      	mov	r0, r3
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	08011744 	.word	0x08011744

0800836c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3304      	adds	r3, #4
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe f8a4 	bl	80064c8 <_ZN13STM32Hardware4timeEv>
 8008380:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4914      	ldr	r1, [pc, #80]	@ (80083dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 800838a:	fba1 1303 	umull	r1, r3, r1, r3
 800838e:	099b      	lsrs	r3, r3, #6
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4b0f      	ldr	r3, [pc, #60]	@ (80083dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80083a0:	fba3 0302 	umull	r0, r3, r3, r2
 80083a4:	099b      	lsrs	r3, r3, #6
 80083a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80083aa:	fb00 f303 	mul.w	r3, r0, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	4a0b      	ldr	r2, [pc, #44]	@ (80083e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80083b2:	fb02 f303 	mul.w	r3, r2, r3
 80083b6:	1aca      	subs	r2, r1, r3
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80083ba:	4413      	add	r3, r2
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f103 020c 	add.w	r2, r3, #12
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3310      	adds	r3, #16
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f000 ff91 	bl	80092f4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	10624dd3 	.word	0x10624dd3
 80083e0:	000f4240 	.word	0x000f4240
 80083e4:	3b9aca00 	.word	0x3b9aca00

080083e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	2103      	movs	r1, #3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f804 	bl	8008404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	460b      	mov	r3, r1
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8008412:	f107 0314 	add.w	r3, r7, #20
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd fb44 	bl	8005aa4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f107 0214 	add.w	r2, r7, #20
 800842e:	2107      	movs	r1, #7
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	4798      	blx	r3
  }
 8008434:	bf00      	nop
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <_Z41__static_initialization_and_destruction_0ii>:
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d120      	bne.n	800848e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008452:	4293      	cmp	r3, r2
 8008454:	d11b      	bne.n	800848e <_Z41__static_initialization_and_destruction_0ii+0x52>
SerialClass serial(huart3);
 8008456:	4910      	ldr	r1, [pc, #64]	@ (8008498 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8008458:	4810      	ldr	r0, [pc, #64]	@ (800849c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800845a:	f7fd fed6 	bl	800620a <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800845e:	4810      	ldr	r0, [pc, #64]	@ (80084a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8008460:	f7ff f9de 	bl	8007820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8MultiArray Sensor_data;
 8008464:	480f      	ldr	r0, [pc, #60]	@ (80084a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008466:	f7fe fb2b 	bl	8006ac0 <_ZN8std_msgs14Int8MultiArrayC1Ev>
ros::Publisher sensor("sensor", &Sensor_data);
 800846a:	2300      	movs	r3, #0
 800846c:	4a0d      	ldr	r2, [pc, #52]	@ (80084a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800846e:	490e      	ldr	r1, [pc, #56]	@ (80084a8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8008470:	480e      	ldr	r0, [pc, #56]	@ (80084ac <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8008472:	f7fd fe93 	bl	800619c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
 8008476:	2301      	movs	r3, #1
 8008478:	4a0d      	ldr	r2, [pc, #52]	@ (80084b0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800847a:	490e      	ldr	r1, [pc, #56]	@ (80084b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800847c:	480e      	ldr	r0, [pc, #56]	@ (80084b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800847e:	f7ff fb07 	bl	8007a90 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8>seedl("seed", &seed);
 8008482:	2301      	movs	r3, #1
 8008484:	4a0d      	ldr	r2, [pc, #52]	@ (80084bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008486:	490e      	ldr	r1, [pc, #56]	@ (80084c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008488:	480e      	ldr	r0, [pc, #56]	@ (80084c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800848a:	f7ff fb25 	bl	8007ad8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200009e8 	.word	0x200009e8
 800849c:	20000e1c 	.word	0x20000e1c
 80084a0:	20002e44 	.word	0x20002e44
 80084a4:	20003374 	.word	0x20003374
 80084a8:	08011780 	.word	0x08011780
 80084ac:	200033a4 	.word	0x200033a4
 80084b0:	08007905 	.word	0x08007905
 80084b4:	08011788 	.word	0x08011788
 80084b8:	200033b8 	.word	0x200033b8
 80084bc:	08007955 	.word	0x08007955
 80084c0:	08011790 	.word	0x08011790
 80084c4:	20003418 	.word	0x20003418

080084c8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	330c      	adds	r3, #12
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fab5 	bl	8006a48 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	320c      	adds	r2, #12
 80084e6:	4610      	mov	r0, r2
 80084e8:	4798      	blx	r3
  }
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
  }
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	330c      	adds	r3, #12
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fab6 	bl	8006a88 <_ZN8std_msgs4Int87getTypeEv>
 800851c:	4603      	mov	r3, r0
  }
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	330c      	adds	r3, #12
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fab6 	bl	8006aa4 <_ZN8std_msgs4Int86getMD5Ev>
 8008538:	4603      	mov	r3, r0
  }
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3310      	adds	r3, #16
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff f912 	bl	800777c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	3210      	adds	r2, #16
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3
  }
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3310      	adds	r3, #16
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff f919 	bl	80077c8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8008596:	4603      	mov	r3, r0
  }
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3310      	adds	r3, #16
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff f919 	bl	80077e4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80085b2:	4603      	mov	r3, r0
  }
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
    return configured_;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <_GLOBAL__sub_I_serial>:
 80085d6:	b580      	push	{r7, lr}
 80085d8:	af00      	add	r7, sp, #0
 80085da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80085de:	2001      	movs	r0, #1
 80085e0:	f7ff ff2c 	bl	800843c <_Z41__static_initialization_and_destruction_0ii>
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80085ee:	4b11      	ldr	r3, [pc, #68]	@ (8008634 <HAL_MspInit+0x4c>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	4a10      	ldr	r2, [pc, #64]	@ (8008634 <HAL_MspInit+0x4c>)
 80085f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80085fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <HAL_MspInit+0x4c>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008606:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <HAL_MspInit+0x4c>)
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	4a0a      	ldr	r2, [pc, #40]	@ (8008634 <HAL_MspInit+0x4c>)
 800860c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008610:	6453      	str	r3, [r2, #68]	@ 0x44
 8008612:	4b08      	ldr	r3, [pc, #32]	@ (8008634 <HAL_MspInit+0x4c>)
 8008614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800861e:	2200      	movs	r2, #0
 8008620:	210f      	movs	r1, #15
 8008622:	f06f 0001 	mvn.w	r0, #1
 8008626:	f001 fe3f 	bl	800a2a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800862a:	bf00      	nop
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40023800 	.word	0x40023800

08008638 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	@ 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_CAN_MspInit+0x8c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d12f      	bne.n	80086ba <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800865a:	4b1b      	ldr	r3, [pc, #108]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865e:	4a1a      	ldr	r2, [pc, #104]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 8008660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008664:	6413      	str	r3, [r2, #64]	@ 0x40
 8008666:	4b18      	ldr	r3, [pc, #96]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008672:	4b15      	ldr	r3, [pc, #84]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	4a14      	ldr	r2, [pc, #80]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 8008678:	f043 0308 	orr.w	r3, r3, #8
 800867c:	6313      	str	r3, [r2, #48]	@ 0x30
 800867e:	4b12      	ldr	r3, [pc, #72]	@ (80086c8 <HAL_CAN_MspInit+0x90>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800868a:	2303      	movs	r3, #3
 800868c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800868e:	2302      	movs	r3, #2
 8008690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008692:	2300      	movs	r3, #0
 8008694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008696:	2303      	movs	r3, #3
 8008698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800869a:	2309      	movs	r3, #9
 800869c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800869e:	f107 0314 	add.w	r3, r7, #20
 80086a2:	4619      	mov	r1, r3
 80086a4:	4809      	ldr	r0, [pc, #36]	@ (80086cc <HAL_CAN_MspInit+0x94>)
 80086a6:	f002 fa33 	bl	800ab10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80086aa:	2200      	movs	r2, #0
 80086ac:	2105      	movs	r1, #5
 80086ae:	2014      	movs	r0, #20
 80086b0:	f001 fdfa 	bl	800a2a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80086b4:	2014      	movs	r0, #20
 80086b6:	f001 fe13 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80086ba:	bf00      	nop
 80086bc:	3728      	adds	r7, #40	@ 0x28
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40006400 	.word	0x40006400
 80086c8:	40023800 	.word	0x40023800
 80086cc:	40020c00 	.word	0x40020c00

080086d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	@ 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 031c 	add.w	r3, r7, #28
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a7a      	ldr	r2, [pc, #488]	@ (80088d8 <HAL_SPI_MspInit+0x208>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d154      	bne.n	800879c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086f2:	4b7a      	ldr	r3, [pc, #488]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	4a79      	ldr	r2, [pc, #484]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80086f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80086fe:	4b77      	ldr	r3, [pc, #476]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008706:	61bb      	str	r3, [r7, #24]
 8008708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870a:	4b74      	ldr	r3, [pc, #464]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870e:	4a73      	ldr	r2, [pc, #460]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	6313      	str	r3, [r2, #48]	@ 0x30
 8008716:	4b71      	ldr	r3, [pc, #452]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008722:	4b6e      	ldr	r3, [pc, #440]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008726:	4a6d      	ldr	r2, [pc, #436]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	6313      	str	r3, [r2, #48]	@ 0x30
 800872e:	4b6b      	ldr	r3, [pc, #428]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 8008730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800873a:	2320      	movs	r3, #32
 800873c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800873e:	2302      	movs	r3, #2
 8008740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008746:	2303      	movs	r3, #3
 8008748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800874a:	2305      	movs	r3, #5
 800874c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800874e:	f107 031c 	add.w	r3, r7, #28
 8008752:	4619      	mov	r1, r3
 8008754:	4862      	ldr	r0, [pc, #392]	@ (80088e0 <HAL_SPI_MspInit+0x210>)
 8008756:	f002 f9db 	bl	800ab10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800875a:	2310      	movs	r3, #16
 800875c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800875e:	2302      	movs	r3, #2
 8008760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008762:	2301      	movs	r3, #1
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008766:	2303      	movs	r3, #3
 8008768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800876a:	2305      	movs	r3, #5
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800876e:	f107 031c 	add.w	r3, r7, #28
 8008772:	4619      	mov	r1, r3
 8008774:	485b      	ldr	r0, [pc, #364]	@ (80088e4 <HAL_SPI_MspInit+0x214>)
 8008776:	f002 f9cb 	bl	800ab10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800877a:	2320      	movs	r3, #32
 800877c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800877e:	2302      	movs	r3, #2
 8008780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008782:	2300      	movs	r3, #0
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008786:	2303      	movs	r3, #3
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800878a:	2305      	movs	r3, #5
 800878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800878e:	f107 031c 	add.w	r3, r7, #28
 8008792:	4619      	mov	r1, r3
 8008794:	4853      	ldr	r0, [pc, #332]	@ (80088e4 <HAL_SPI_MspInit+0x214>)
 8008796:	f002 f9bb 	bl	800ab10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800879a:	e099      	b.n	80088d0 <HAL_SPI_MspInit+0x200>
  else if(hspi->Instance==SPI4)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a51      	ldr	r2, [pc, #324]	@ (80088e8 <HAL_SPI_MspInit+0x218>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f040 8094 	bne.w	80088d0 <HAL_SPI_MspInit+0x200>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80087a8:	4b4c      	ldr	r3, [pc, #304]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ac:	4a4b      	ldr	r2, [pc, #300]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80087b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80087b4:	4b49      	ldr	r3, [pc, #292]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80087c0:	4b46      	ldr	r3, [pc, #280]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c4:	4a45      	ldr	r2, [pc, #276]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087c6:	f043 0310 	orr.w	r3, r3, #16
 80087ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80087cc:	4b43      	ldr	r3, [pc, #268]	@ (80088dc <HAL_SPI_MspInit+0x20c>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80087d8:	2324      	movs	r3, #36	@ 0x24
 80087da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087dc:	2302      	movs	r3, #2
 80087de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087e4:	2303      	movs	r3, #3
 80087e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80087e8:	2305      	movs	r3, #5
 80087ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80087ec:	f107 031c 	add.w	r3, r7, #28
 80087f0:	4619      	mov	r1, r3
 80087f2:	483e      	ldr	r0, [pc, #248]	@ (80088ec <HAL_SPI_MspInit+0x21c>)
 80087f4:	f002 f98c 	bl	800ab10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80087f8:	2340      	movs	r3, #64	@ 0x40
 80087fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fc:	2302      	movs	r3, #2
 80087fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008800:	2301      	movs	r3, #1
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008804:	2303      	movs	r3, #3
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8008808:	2305      	movs	r3, #5
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800880c:	f107 031c 	add.w	r3, r7, #28
 8008810:	4619      	mov	r1, r3
 8008812:	4836      	ldr	r0, [pc, #216]	@ (80088ec <HAL_SPI_MspInit+0x21c>)
 8008814:	f002 f97c 	bl	800ab10 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8008818:	4b35      	ldr	r3, [pc, #212]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800881a:	4a36      	ldr	r2, [pc, #216]	@ (80088f4 <HAL_SPI_MspInit+0x224>)
 800881c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 800881e:	4b34      	ldr	r3, [pc, #208]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008820:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008824:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008826:	4b32      	ldr	r3, [pc, #200]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008828:	2200      	movs	r2, #0
 800882a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800882c:	4b30      	ldr	r3, [pc, #192]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800882e:	2200      	movs	r2, #0
 8008830:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008832:	4b2f      	ldr	r3, [pc, #188]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008838:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800883a:	4b2d      	ldr	r3, [pc, #180]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800883c:	2200      	movs	r2, #0
 800883e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008840:	4b2b      	ldr	r3, [pc, #172]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008842:	2200      	movs	r2, #0
 8008844:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8008846:	4b2a      	ldr	r3, [pc, #168]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008848:	2200      	movs	r2, #0
 800884a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800884c:	4b28      	ldr	r3, [pc, #160]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800884e:	2200      	movs	r2, #0
 8008850:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008852:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008854:	2200      	movs	r2, #0
 8008856:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8008858:	4825      	ldr	r0, [pc, #148]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800885a:	f001 fd4f 	bl	800a2fc <HAL_DMA_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8008864:	f7fc fe40 	bl	80054e8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a21      	ldr	r2, [pc, #132]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 800886c:	659a      	str	r2, [r3, #88]	@ 0x58
 800886e:	4a20      	ldr	r2, [pc, #128]	@ (80088f0 <HAL_SPI_MspInit+0x220>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8008874:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 8008876:	4a21      	ldr	r2, [pc, #132]	@ (80088fc <HAL_SPI_MspInit+0x22c>)
 8008878:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800887a:	4b1f      	ldr	r3, [pc, #124]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 800887c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008880:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 8008884:	2240      	movs	r2, #64	@ 0x40
 8008886:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008888:	4b1b      	ldr	r3, [pc, #108]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 800888a:	2200      	movs	r2, #0
 800888c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800888e:	4b1a      	ldr	r3, [pc, #104]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 8008890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008894:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008896:	4b18      	ldr	r3, [pc, #96]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 8008898:	2200      	movs	r2, #0
 800889a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800889c:	4b16      	ldr	r3, [pc, #88]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 800889e:	2200      	movs	r2, #0
 80088a0:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80088a2:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80088a8:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80088b4:	4810      	ldr	r0, [pc, #64]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088b6:	f001 fd21 	bl	800a2fc <HAL_DMA_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_SPI_MspInit+0x1f4>
      Error_Handler();
 80088c0:	f7fc fe12 	bl	80054e8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80088ca:	4a0b      	ldr	r2, [pc, #44]	@ (80088f8 <HAL_SPI_MspInit+0x228>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80088d0:	bf00      	nop
 80088d2:	3730      	adds	r7, #48	@ 0x30
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40013000 	.word	0x40013000
 80088dc:	40023800 	.word	0x40023800
 80088e0:	40020000 	.word	0x40020000
 80088e4:	40020400 	.word	0x40020400
 80088e8:	40013400 	.word	0x40013400
 80088ec:	40021000 	.word	0x40021000
 80088f0:	20000640 	.word	0x20000640
 80088f4:	40026410 	.word	0x40026410
 80088f8:	200006a0 	.word	0x200006a0
 80088fc:	40026428 	.word	0x40026428

08008900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b090      	sub	sp, #64	@ 0x40
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a61      	ldr	r2, [pc, #388]	@ (8008aa4 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d131      	bne.n	8008986 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008922:	4b61      	ldr	r3, [pc, #388]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	4a60      	ldr	r2, [pc, #384]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6453      	str	r3, [r2, #68]	@ 0x44
 800892e:	4b5e      	ldr	r3, [pc, #376]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800893a:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	4a5a      	ldr	r2, [pc, #360]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6313      	str	r3, [r2, #48]	@ 0x30
 8008946:	4b58      	ldr	r3, [pc, #352]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER1_A_Pin|TIM1_CH2_ENCODER1_B_Pin;
 8008952:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	2302      	movs	r3, #2
 800895a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895c:	2300      	movs	r3, #0
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008960:	2300      	movs	r3, #0
 8008962:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008964:	2301      	movs	r3, #1
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800896c:	4619      	mov	r1, r3
 800896e:	484f      	ldr	r0, [pc, #316]	@ (8008aac <HAL_TIM_Encoder_MspInit+0x1ac>)
 8008970:	f002 f8ce 	bl	800ab10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 8008974:	2200      	movs	r2, #0
 8008976:	210f      	movs	r1, #15
 8008978:	2018      	movs	r0, #24
 800897a:	f001 fc95 	bl	800a2a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800897e:	2018      	movs	r0, #24
 8008980:	f001 fcae 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8008984:	e089      	b.n	8008a9a <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM2)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898e:	d128      	bne.n	80089e2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008990:	4b45      	ldr	r3, [pc, #276]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	4a44      	ldr	r2, [pc, #272]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	6413      	str	r3, [r2, #64]	@ 0x40
 800899c:	4b42      	ldr	r3, [pc, #264]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 800899e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	623b      	str	r3, [r7, #32]
 80089a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089a8:	4b3f      	ldr	r3, [pc, #252]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ac:	4a3e      	ldr	r2, [pc, #248]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089ae:	f043 0301 	orr.w	r3, r3, #1
 80089b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80089b4:	4b3c      	ldr	r3, [pc, #240]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_ENCODER2_A_Pin|TIM2_CH2_ENCODER2_B_Pin;
 80089c0:	2303      	movs	r3, #3
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c4:	2302      	movs	r3, #2
 80089c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80089d0:	2301      	movs	r3, #1
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089d8:	4619      	mov	r1, r3
 80089da:	4834      	ldr	r0, [pc, #208]	@ (8008aac <HAL_TIM_Encoder_MspInit+0x1ac>)
 80089dc:	f002 f898 	bl	800ab10 <HAL_GPIO_Init>
}
 80089e0:	e05b      	b.n	8008a9a <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM4)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a32      	ldr	r2, [pc, #200]	@ (8008ab0 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d129      	bne.n	8008a40 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80089ec:	4b2e      	ldr	r3, [pc, #184]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089f2:	f043 0304 	orr.w	r3, r3, #4
 80089f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80089f8:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a04:	4b28      	ldr	r3, [pc, #160]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a08:	4a27      	ldr	r2, [pc, #156]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a0a:	f043 0308 	orr.w	r3, r3, #8
 8008a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a10:	4b25      	ldr	r3, [pc, #148]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCODER4_A_Pin|TIM4_CH2_ENCODER4_B_Pin;
 8008a1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a36:	4619      	mov	r1, r3
 8008a38:	481e      	ldr	r0, [pc, #120]	@ (8008ab4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008a3a:	f002 f869 	bl	800ab10 <HAL_GPIO_Init>
}
 8008a3e:	e02c      	b.n	8008a9a <HAL_TIM_Encoder_MspInit+0x19a>
  else if(htim_encoder->Instance==TIM8)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1c      	ldr	r2, [pc, #112]	@ (8008ab8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d127      	bne.n	8008a9a <HAL_TIM_Encoder_MspInit+0x19a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008a4a:	4b17      	ldr	r3, [pc, #92]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a50:	f043 0302 	orr.w	r3, r3, #2
 8008a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a56:	4b14      	ldr	r3, [pc, #80]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a62:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a66:	4a10      	ldr	r2, [pc, #64]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a68:	f043 0304 	orr.w	r3, r3, #4
 8008a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1__ENCODER3_A_Pin|TIM8_CH2__ENCODER3_B_Pin;
 8008a7a:	23c0      	movs	r3, #192	@ 0xc0
 8008a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a92:	4619      	mov	r1, r3
 8008a94:	4809      	ldr	r0, [pc, #36]	@ (8008abc <HAL_TIM_Encoder_MspInit+0x1bc>)
 8008a96:	f002 f83b 	bl	800ab10 <HAL_GPIO_Init>
}
 8008a9a:	bf00      	nop
 8008a9c:	3740      	adds	r7, #64	@ 0x40
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40010000 	.word	0x40010000
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	40020000 	.word	0x40020000
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40020c00 	.word	0x40020c00
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40020800 	.word	0x40020800

08008ac0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b40 <HAL_TIM_PWM_MspInit+0x80>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10c      	bne.n	8008aec <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008ad8:	f043 0302 	orr.w	r3, r3, #2
 8008adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ade:	4b19      	ldr	r3, [pc, #100]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8008aea:	e022      	b.n	8008b32 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM5)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <HAL_TIM_PWM_MspInit+0x88>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d10c      	bne.n	8008b10 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008af6:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	4a12      	ldr	r2, [pc, #72]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008afc:	f043 0308 	orr.w	r3, r3, #8
 8008b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	693b      	ldr	r3, [r7, #16]
}
 8008b0e:	e010      	b.n	8008b32 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM12)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a0d      	ldr	r2, [pc, #52]	@ (8008b4c <HAL_TIM_PWM_MspInit+0x8c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d10b      	bne.n	8008b32 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8008b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1e:	4a09      	ldr	r2, [pc, #36]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b26:	4b07      	ldr	r3, [pc, #28]	@ (8008b44 <HAL_TIM_PWM_MspInit+0x84>)
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
}
 8008b32:	bf00      	nop
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40000400 	.word	0x40000400
 8008b44:	40023800 	.word	0x40023800
 8008b48:	40000c00 	.word	0x40000c00
 8008b4c:	40001800 	.word	0x40001800

08008b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b88 <HAL_TIM_Base_MspInit+0x38>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d10b      	bne.n	8008b7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <HAL_TIM_Base_MspInit+0x3c>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b66:	4a09      	ldr	r2, [pc, #36]	@ (8008b8c <HAL_TIM_Base_MspInit+0x3c>)
 8008b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b6e:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <HAL_TIM_Base_MspInit+0x3c>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40014400 	.word	0x40014400
 8008b8c:	40023800 	.word	0x40023800

08008b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	@ 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b98:	f107 031c 	add.w	r3, r7, #28
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	605a      	str	r2, [r3, #4]
 8008ba2:	609a      	str	r2, [r3, #8]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a42      	ldr	r2, [pc, #264]	@ (8008cb8 <HAL_TIM_MspPostInit+0x128>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d139      	bne.n	8008c26 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb2:	4b42      	ldr	r3, [pc, #264]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb6:	4a41      	ldr	r2, [pc, #260]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bb8:	f043 0301 	orr.w	r3, r3, #1
 8008bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bca:	4b3c      	ldr	r3, [pc, #240]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bce:	4a3b      	ldr	r2, [pc, #236]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bd0:	f043 0304 	orr.w	r3, r3, #4
 8008bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008bd6:	4b39      	ldr	r3, [pc, #228]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH1_MOTOR4_PWM_Pin|TIM3_CH2_MOTOR3_PWM_Pin;
 8008be2:	23c0      	movs	r3, #192	@ 0xc0
 8008be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be6:	2302      	movs	r3, #2
 8008be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf6:	f107 031c 	add.w	r3, r7, #28
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4830      	ldr	r0, [pc, #192]	@ (8008cc0 <HAL_TIM_MspPostInit+0x130>)
 8008bfe:	f001 ff87 	bl	800ab10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH3_MOTOR2_PWM_Pin|TIM3_CH4_MOTOR1_PWM_Pin;
 8008c02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008c14:	2302      	movs	r3, #2
 8008c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c18:	f107 031c 	add.w	r3, r7, #28
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4829      	ldr	r0, [pc, #164]	@ (8008cc4 <HAL_TIM_MspPostInit+0x134>)
 8008c20:	f001 ff76 	bl	800ab10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8008c24:	e043      	b.n	8008cae <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM5)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a27      	ldr	r2, [pc, #156]	@ (8008cc8 <HAL_TIM_MspPostInit+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d11c      	bne.n	8008c6a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c30:	4b22      	ldr	r3, [pc, #136]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c34:	4a21      	ldr	r2, [pc, #132]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c36:	f043 0301 	orr.w	r3, r3, #1
 8008c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH3_BRUSHLESS1_Pin|TIM5_CH4_BRUSHLESS2_Pin;
 8008c48:	230c      	movs	r3, #12
 8008c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c50:	2300      	movs	r3, #0
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5c:	f107 031c 	add.w	r3, r7, #28
 8008c60:	4619      	mov	r1, r3
 8008c62:	4817      	ldr	r0, [pc, #92]	@ (8008cc0 <HAL_TIM_MspPostInit+0x130>)
 8008c64:	f001 ff54 	bl	800ab10 <HAL_GPIO_Init>
}
 8008c68:	e021      	b.n	8008cae <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM12)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a17      	ldr	r2, [pc, #92]	@ (8008ccc <HAL_TIM_MspPostInit+0x13c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d11c      	bne.n	8008cae <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c74:	4b11      	ldr	r3, [pc, #68]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c78:	4a10      	ldr	r2, [pc, #64]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c7a:	f043 0302 	orr.w	r3, r3, #2
 8008c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c80:	4b0e      	ldr	r3, [pc, #56]	@ (8008cbc <HAL_TIM_MspPostInit+0x12c>)
 8008c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM12_CH1_MOTOR6_PWM_Pin|TIM12_CH2_MOTOR5_PWM_Pin;
 8008c8c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c92:	2302      	movs	r3, #2
 8008c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8008c9e:	2309      	movs	r3, #9
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ca2:	f107 031c 	add.w	r3, r7, #28
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4809      	ldr	r0, [pc, #36]	@ (8008cd0 <HAL_TIM_MspPostInit+0x140>)
 8008caa:	f001 ff31 	bl	800ab10 <HAL_GPIO_Init>
}
 8008cae:	bf00      	nop
 8008cb0:	3730      	adds	r7, #48	@ 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40023800 	.word	0x40023800
 8008cc0:	40020000 	.word	0x40020000
 8008cc4:	40020800 	.word	0x40020800
 8008cc8:	40000c00 	.word	0x40000c00
 8008ccc:	40001800 	.word	0x40001800
 8008cd0:	40020400 	.word	0x40020400

08008cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b0ac      	sub	sp, #176	@ 0xb0
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cec:	f107 0318 	add.w	r3, r7, #24
 8008cf0:	2284      	movs	r2, #132	@ 0x84
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f007 fe8e 	bl	8010a16 <memset>
  if(huart->Instance==USART2)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4aa9      	ldr	r2, [pc, #676]	@ (8008fa4 <HAL_UART_MspInit+0x2d0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	f040 80a1 	bne.w	8008e48 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008d06:	2380      	movs	r3, #128	@ 0x80
 8008d08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d0e:	f107 0318 	add.w	r3, r7, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 fe36 	bl	800b984 <HAL_RCCEx_PeriphCLKConfig>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008d1e:	f7fc fbe3 	bl	80054e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d22:	4ba1      	ldr	r3, [pc, #644]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	4aa0      	ldr	r2, [pc, #640]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d2e:	4b9e      	ldr	r3, [pc, #632]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d3a:	4b9b      	ldr	r3, [pc, #620]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	4a9a      	ldr	r2, [pc, #616]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d40:	f043 0308 	orr.w	r3, r3, #8
 8008d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d46:	4b98      	ldr	r3, [pc, #608]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008d52:	2360      	movs	r3, #96	@ 0x60
 8008d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d64:	2303      	movs	r3, #3
 8008d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008d74:	4619      	mov	r1, r3
 8008d76:	488d      	ldr	r0, [pc, #564]	@ (8008fac <HAL_UART_MspInit+0x2d8>)
 8008d78:	f001 feca 	bl	800ab10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008d7e:	4a8d      	ldr	r2, [pc, #564]	@ (8008fb4 <HAL_UART_MspInit+0x2e0>)
 8008d80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008d82:	4b8b      	ldr	r3, [pc, #556]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008d84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008d88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d8a:	4b89      	ldr	r3, [pc, #548]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d90:	4b87      	ldr	r3, [pc, #540]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d96:	4b86      	ldr	r3, [pc, #536]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d9e:	4b84      	ldr	r3, [pc, #528]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008da4:	4b82      	ldr	r3, [pc, #520]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008daa:	4b81      	ldr	r3, [pc, #516]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008db0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008db2:	4b7f      	ldr	r3, [pc, #508]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008db8:	4b7d      	ldr	r3, [pc, #500]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008dbe:	487c      	ldr	r0, [pc, #496]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008dc0:	f001 fa9c 	bl	800a2fc <HAL_DMA_Init>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8008dca:	f7fc fb8d 	bl	80054e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a77      	ldr	r2, [pc, #476]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008dd2:	675a      	str	r2, [r3, #116]	@ 0x74
 8008dd4:	4a76      	ldr	r2, [pc, #472]	@ (8008fb0 <HAL_UART_MspInit+0x2dc>)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8008dda:	4b77      	ldr	r3, [pc, #476]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008ddc:	4a77      	ldr	r2, [pc, #476]	@ (8008fbc <HAL_UART_MspInit+0x2e8>)
 8008dde:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8008de0:	4b75      	ldr	r3, [pc, #468]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008de2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008de6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008de8:	4b73      	ldr	r3, [pc, #460]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008dea:	2240      	movs	r2, #64	@ 0x40
 8008dec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008dee:	4b72      	ldr	r3, [pc, #456]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008df4:	4b70      	ldr	r3, [pc, #448]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008dfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008dfc:	4b6e      	ldr	r3, [pc, #440]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e02:	4b6d      	ldr	r3, [pc, #436]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008e08:	4b6b      	ldr	r3, [pc, #428]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e14:	4b68      	ldr	r3, [pc, #416]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008e1a:	4867      	ldr	r0, [pc, #412]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e1c:	f001 fa6e 	bl	800a2fc <HAL_DMA_Init>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8008e26:	f7fc fb5f 	bl	80054e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a62      	ldr	r2, [pc, #392]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8008e30:	4a61      	ldr	r2, [pc, #388]	@ (8008fb8 <HAL_UART_MspInit+0x2e4>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008e36:	2200      	movs	r2, #0
 8008e38:	2105      	movs	r1, #5
 8008e3a:	2026      	movs	r0, #38	@ 0x26
 8008e3c:	f001 fa34 	bl	800a2a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e40:	2026      	movs	r0, #38	@ 0x26
 8008e42:	f001 fa4d 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008e46:	e0a9      	b.n	8008f9c <HAL_UART_MspInit+0x2c8>
  else if(huart->Instance==USART3)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8008fc0 <HAL_UART_MspInit+0x2ec>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	f040 80a4 	bne.w	8008f9c <HAL_UART_MspInit+0x2c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e5e:	f107 0318 	add.w	r3, r7, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f002 fd8e 	bl	800b984 <HAL_RCCEx_PeriphCLKConfig>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8008e6e:	f7fc fb3b 	bl	80054e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008e72:	4b4d      	ldr	r3, [pc, #308]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e76:	4a4c      	ldr	r2, [pc, #304]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e8a:	4b47      	ldr	r3, [pc, #284]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	4a46      	ldr	r2, [pc, #280]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e96:	4b44      	ldr	r3, [pc, #272]	@ (8008fa8 <HAL_UART_MspInit+0x2d4>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	60bb      	str	r3, [r7, #8]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008ebc:	2307      	movs	r3, #7
 8008ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ec2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4838      	ldr	r0, [pc, #224]	@ (8008fac <HAL_UART_MspInit+0x2d8>)
 8008eca:	f001 fe21 	bl	800ab10 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8008ece:	4b3d      	ldr	r3, [pc, #244]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ed0:	4a3d      	ldr	r2, [pc, #244]	@ (8008fc8 <HAL_UART_MspInit+0x2f4>)
 8008ed2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ed6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008eda:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008edc:	4b39      	ldr	r3, [pc, #228]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ee2:	4b38      	ldr	r3, [pc, #224]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008ee8:	4b36      	ldr	r3, [pc, #216]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008eee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ef0:	4b34      	ldr	r3, [pc, #208]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ef6:	4b33      	ldr	r3, [pc, #204]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8008efc:	4b31      	ldr	r3, [pc, #196]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f02:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008f04:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008f06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008f0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008f12:	482c      	ldr	r0, [pc, #176]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008f14:	f001 f9f2 	bl	800a2fc <HAL_DMA_Init>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8008f1e:	f7fc fae3 	bl	80054e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a27      	ldr	r2, [pc, #156]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008f26:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f28:	4a26      	ldr	r2, [pc, #152]	@ (8008fc4 <HAL_UART_MspInit+0x2f0>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008f2e:	4b27      	ldr	r3, [pc, #156]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f30:	4a27      	ldr	r2, [pc, #156]	@ (8008fd0 <HAL_UART_MspInit+0x2fc>)
 8008f32:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8008f34:	4b25      	ldr	r3, [pc, #148]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008f3a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f3c:	4b23      	ldr	r3, [pc, #140]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f3e:	2240      	movs	r2, #64	@ 0x40
 8008f40:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f42:	4b22      	ldr	r3, [pc, #136]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f48:	4b20      	ldr	r3, [pc, #128]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008f4e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f50:	4b1e      	ldr	r3, [pc, #120]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f56:	4b1d      	ldr	r3, [pc, #116]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008f62:	4b1a      	ldr	r3, [pc, #104]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008f68:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f6a:	4b18      	ldr	r3, [pc, #96]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008f70:	4816      	ldr	r0, [pc, #88]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f72:	f001 f9c3 	bl	800a2fc <HAL_DMA_Init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8008f7c:	f7fc fab4 	bl	80054e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a12      	ldr	r2, [pc, #72]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f84:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f86:	4a11      	ldr	r2, [pc, #68]	@ (8008fcc <HAL_UART_MspInit+0x2f8>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2105      	movs	r1, #5
 8008f90:	2027      	movs	r0, #39	@ 0x27
 8008f92:	f001 f989 	bl	800a2a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008f96:	2027      	movs	r0, #39	@ 0x27
 8008f98:	f001 f9a2 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
}
 8008f9c:	bf00      	nop
 8008f9e:	37b0      	adds	r7, #176	@ 0xb0
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40004400 	.word	0x40004400
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40020c00 	.word	0x40020c00
 8008fb0:	20000a70 	.word	0x20000a70
 8008fb4:	40026088 	.word	0x40026088
 8008fb8:	20000ad0 	.word	0x20000ad0
 8008fbc:	400260a0 	.word	0x400260a0
 8008fc0:	40004800 	.word	0x40004800
 8008fc4:	20000b30 	.word	0x20000b30
 8008fc8:	40026028 	.word	0x40026028
 8008fcc:	20000b90 	.word	0x20000b90
 8008fd0:	40026058 	.word	0x40026058

08008fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08c      	sub	sp, #48	@ 0x30
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8008fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80090a4 <HAL_InitTick+0xd0>)
 8008fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80090a4 <HAL_InitTick+0xd0>)
 8008fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fee:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80090a4 <HAL_InitTick+0xd0>)
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ffc:	f107 020c 	add.w	r2, r7, #12
 8009000:	f107 0310 	add.w	r3, r7, #16
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f002 fc8a 	bl	800b920 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800900c:	f002 fc74 	bl	800b8f8 <HAL_RCC_GetPCLK2Freq>
 8009010:	4603      	mov	r3, r0
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	4a23      	ldr	r2, [pc, #140]	@ (80090a8 <HAL_InitTick+0xd4>)
 800901a:	fba2 2303 	umull	r2, r3, r2, r3
 800901e:	0c9b      	lsrs	r3, r3, #18
 8009020:	3b01      	subs	r3, #1
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8009024:	4b21      	ldr	r3, [pc, #132]	@ (80090ac <HAL_InitTick+0xd8>)
 8009026:	4a22      	ldr	r2, [pc, #136]	@ (80090b0 <HAL_InitTick+0xdc>)
 8009028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800902a:	4b20      	ldr	r3, [pc, #128]	@ (80090ac <HAL_InitTick+0xd8>)
 800902c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009030:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8009032:	4a1e      	ldr	r2, [pc, #120]	@ (80090ac <HAL_InitTick+0xd8>)
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8009038:	4b1c      	ldr	r3, [pc, #112]	@ (80090ac <HAL_InitTick+0xd8>)
 800903a:	2200      	movs	r2, #0
 800903c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800903e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ac <HAL_InitTick+0xd8>)
 8009040:	2200      	movs	r2, #0
 8009042:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009044:	4b19      	ldr	r3, [pc, #100]	@ (80090ac <HAL_InitTick+0xd8>)
 8009046:	2200      	movs	r2, #0
 8009048:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800904a:	4818      	ldr	r0, [pc, #96]	@ (80090ac <HAL_InitTick+0xd8>)
 800904c:	f003 fc2c 	bl	800c8a8 <HAL_TIM_Base_Init>
 8009050:	4603      	mov	r3, r0
 8009052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8009056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800905a:	2b00      	cmp	r3, #0
 800905c:	d11b      	bne.n	8009096 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800905e:	4813      	ldr	r0, [pc, #76]	@ (80090ac <HAL_InitTick+0xd8>)
 8009060:	f003 fc7a 	bl	800c958 <HAL_TIM_Base_Start_IT>
 8009064:	4603      	mov	r3, r0
 8009066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800906a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d111      	bne.n	8009096 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009072:	2018      	movs	r0, #24
 8009074:	f001 f934 	bl	800a2e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d808      	bhi.n	8009090 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800907e:	2200      	movs	r2, #0
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	2018      	movs	r0, #24
 8009084:	f001 f910 	bl	800a2a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009088:	4a0a      	ldr	r2, [pc, #40]	@ (80090b4 <HAL_InitTick+0xe0>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e002      	b.n	8009096 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8009096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800909a:	4618      	mov	r0, r3
 800909c:	3730      	adds	r7, #48	@ 0x30
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40023800 	.word	0x40023800
 80090a8:	431bde83 	.word	0x431bde83
 80090ac:	20003434 	.word	0x20003434
 80090b0:	40014000 	.word	0x40014000
 80090b4:	20000050 	.word	0x20000050

080090b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80090bc:	bf00      	nop
 80090be:	e7fd      	b.n	80090bc <NMI_Handler+0x4>

080090c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <HardFault_Handler+0x4>

080090c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <MemManage_Handler+0x4>

080090d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <BusFault_Handler+0x4>

080090d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80090dc:	bf00      	nop
 80090de:	e7fd      	b.n	80090dc <UsageFault_Handler+0x4>

080090e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
	...

080090f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80090f4:	4802      	ldr	r0, [pc, #8]	@ (8009100 <DMA1_Stream1_IRQHandler+0x10>)
 80090f6:	f001 faa1 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000b30 	.word	0x20000b30

08009104 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009108:	4802      	ldr	r0, [pc, #8]	@ (8009114 <DMA1_Stream3_IRQHandler+0x10>)
 800910a:	f001 fa97 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000b90 	.word	0x20000b90

08009118 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800911c:	4802      	ldr	r0, [pc, #8]	@ (8009128 <DMA1_Stream5_IRQHandler+0x10>)
 800911e:	f001 fa8d 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000a70 	.word	0x20000a70

0800912c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009130:	4802      	ldr	r0, [pc, #8]	@ (800913c <DMA1_Stream6_IRQHandler+0x10>)
 8009132:	f001 fa83 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000ad0 	.word	0x20000ad0

08009140 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009144:	4802      	ldr	r0, [pc, #8]	@ (8009150 <CAN1_RX0_IRQHandler+0x10>)
 8009146:	f000 fdc7 	bl	8009cd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000550 	.word	0x20000550

08009154 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009158:	4803      	ldr	r0, [pc, #12]	@ (8009168 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800915a:	f003 fefb 	bl	800cf54 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800915e:	4803      	ldr	r0, [pc, #12]	@ (800916c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8009160:	f003 fef8 	bl	800cf54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8009164:	bf00      	nop
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000700 	.word	0x20000700
 800916c:	20003434 	.word	0x20003434

08009170 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009174:	4802      	ldr	r0, [pc, #8]	@ (8009180 <USART2_IRQHandler+0x10>)
 8009176:	f004 fe27 	bl	800ddc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800917a:	bf00      	nop
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000960 	.word	0x20000960

08009184 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009188:	4802      	ldr	r0, [pc, #8]	@ (8009194 <USART3_IRQHandler+0x10>)
 800918a:	f004 fe1d 	bl	800ddc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800918e:	bf00      	nop
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200009e8 	.word	0x200009e8

08009198 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800919c:	4802      	ldr	r0, [pc, #8]	@ (80091a8 <DMA2_Stream0_IRQHandler+0x10>)
 800919e:	f001 fa4d 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000640 	.word	0x20000640

080091ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80091b0:	4802      	ldr	r0, [pc, #8]	@ (80091bc <DMA2_Stream1_IRQHandler+0x10>)
 80091b2:	f001 fa43 	bl	800a63c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80091b6:	bf00      	nop
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200006a0 	.word	0x200006a0

080091c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e00a      	b.n	80091e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80091d2:	f3af 8000 	nop.w
 80091d6:	4601      	mov	r1, r0
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	60ba      	str	r2, [r7, #8]
 80091de:	b2ca      	uxtb	r2, r1
 80091e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	3301      	adds	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	dbf0      	blt.n	80091d2 <_read+0x12>
  }

  return len;
 80091f0:	687b      	ldr	r3, [r7, #4]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	e009      	b.n	8009220 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	60ba      	str	r2, [r7, #8]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	3301      	adds	r3, #1
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	dbf1      	blt.n	800920c <_write+0x12>
  }
  return len;
 8009228:	687b      	ldr	r3, [r7, #4]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <_close>:

int _close(int file)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800923a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800926c:	4a14      	ldr	r2, [pc, #80]	@ (80092c0 <_sbrk+0x5c>)
 800926e:	4b15      	ldr	r3, [pc, #84]	@ (80092c4 <_sbrk+0x60>)
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009278:	4b13      	ldr	r3, [pc, #76]	@ (80092c8 <_sbrk+0x64>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009280:	4b11      	ldr	r3, [pc, #68]	@ (80092c8 <_sbrk+0x64>)
 8009282:	4a12      	ldr	r2, [pc, #72]	@ (80092cc <_sbrk+0x68>)
 8009284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <_sbrk+0x64>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	429a      	cmp	r2, r3
 8009292:	d207      	bcs.n	80092a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009294:	f007 fc0e 	bl	8010ab4 <__errno>
 8009298:	4603      	mov	r3, r0
 800929a:	220c      	movs	r2, #12
 800929c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092a2:	e009      	b.n	80092b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092a4:	4b08      	ldr	r3, [pc, #32]	@ (80092c8 <_sbrk+0x64>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092aa:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <_sbrk+0x64>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	4a05      	ldr	r2, [pc, #20]	@ (80092c8 <_sbrk+0x64>)
 80092b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20050000 	.word	0x20050000
 80092c4:	00000400 	.word	0x00000400
 80092c8:	20003480 	.word	0x20003480
 80092cc:	20008540 	.word	0x20008540

080092d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092d4:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <SystemInit+0x20>)
 80092d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092da:	4a05      	ldr	r2, [pc, #20]	@ (80092f0 <SystemInit+0x20>)
 80092dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092e4:	bf00      	nop
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	e000ed00 	.word	0xe000ed00

080092f4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	0a5a      	lsrs	r2, r3, #9
 8009304:	490f      	ldr	r1, [pc, #60]	@ (8009344 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8009306:	fba1 1202 	umull	r1, r2, r1, r2
 800930a:	09d2      	lsrs	r2, r2, #7
 800930c:	490e      	ldr	r1, [pc, #56]	@ (8009348 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800930e:	fb01 f202 	mul.w	r2, r1, r2
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	0a5b      	lsrs	r3, r3, #9
 800931c:	4a09      	ldr	r2, [pc, #36]	@ (8009344 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800931e:	fba2 2303 	umull	r2, r3, r2, r3
 8009322:	09db      	lsrs	r3, r3, #7
 8009324:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	441a      	add	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	601a      	str	r2, [r3, #0]
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	00044b83 	.word	0x00044b83
 8009348:	3b9aca00 	.word	0x3b9aca00

0800934c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800934c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009350:	480d      	ldr	r0, [pc, #52]	@ (8009388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009352:	490e      	ldr	r1, [pc, #56]	@ (800938c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009354:	4a0e      	ldr	r2, [pc, #56]	@ (8009390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009358:	e002      	b.n	8009360 <LoopCopyDataInit>

0800935a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800935a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800935c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800935e:	3304      	adds	r3, #4

08009360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009364:	d3f9      	bcc.n	800935a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009366:	4a0b      	ldr	r2, [pc, #44]	@ (8009394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009368:	4c0b      	ldr	r4, [pc, #44]	@ (8009398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800936a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800936c:	e001      	b.n	8009372 <LoopFillZerobss>

0800936e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800936e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009370:	3204      	adds	r2, #4

08009372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009374:	d3fb      	bcc.n	800936e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009376:	f7ff ffab 	bl	80092d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800937a:	f007 fba1 	bl	8010ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800937e:	f7f8 fe9f 	bl	80020c0 <main>
  bx  lr    
 8009382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009384:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8009388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800938c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8009390:	080138c8 	.word	0x080138c8
  ldr r2, =_sbss
 8009394:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8009398:	20008540 	.word	0x20008540

0800939c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800939c:	e7fe      	b.n	800939c <ADC_IRQHandler>

0800939e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093a2:	2003      	movs	r0, #3
 80093a4:	f000 ff75 	bl	800a292 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80093a8:	200f      	movs	r0, #15
 80093aa:	f7ff fe13 	bl	8008fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80093ae:	f7ff f91b 	bl	80085e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80093bc:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <HAL_IncTick+0x20>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	4b06      	ldr	r3, [pc, #24]	@ (80093dc <HAL_IncTick+0x24>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4413      	add	r3, r2
 80093c8:	4a04      	ldr	r2, [pc, #16]	@ (80093dc <HAL_IncTick+0x24>)
 80093ca:	6013      	str	r3, [r2, #0]
}
 80093cc:	bf00      	nop
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	20000054 	.word	0x20000054
 80093dc:	20003484 	.word	0x20003484

080093e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  return uwTick;
 80093e4:	4b03      	ldr	r3, [pc, #12]	@ (80093f4 <HAL_GetTick+0x14>)
 80093e6:	681b      	ldr	r3, [r3, #0]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20003484 	.word	0x20003484

080093f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009400:	f7ff ffee 	bl	80093e0 <HAL_GetTick>
 8009404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009410:	d005      	beq.n	800941e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009412:	4b0a      	ldr	r3, [pc, #40]	@ (800943c <HAL_Delay+0x44>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800941e:	bf00      	nop
 8009420:	f7ff ffde 	bl	80093e0 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	429a      	cmp	r2, r3
 800942e:	d8f7      	bhi.n	8009420 <HAL_Delay+0x28>
  {
  }
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000054 	.word	0x20000054

08009440 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e0ed      	b.n	800962e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff f8ea 	bl	8008638 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0201 	orr.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009474:	f7ff ffb4 	bl	80093e0 <HAL_GetTick>
 8009478:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800947a:	e012      	b.n	80094a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800947c:	f7ff ffb0 	bl	80093e0 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b0a      	cmp	r3, #10
 8009488:	d90b      	bls.n	80094a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2205      	movs	r2, #5
 800949a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e0c5      	b.n	800962e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0e5      	beq.n	800947c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0202 	bic.w	r2, r2, #2
 80094be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094c0:	f7ff ff8e 	bl	80093e0 <HAL_GetTick>
 80094c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80094c6:	e012      	b.n	80094ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80094c8:	f7ff ff8a 	bl	80093e0 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b0a      	cmp	r3, #10
 80094d4:	d90b      	bls.n	80094ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2205      	movs	r2, #5
 80094e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e09f      	b.n	800962e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e5      	bne.n	80094c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7e1b      	ldrb	r3, [r3, #24]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d108      	bne.n	8009516 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e007      	b.n	8009526 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	7e5b      	ldrb	r3, [r3, #25]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d108      	bne.n	8009540 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e007      	b.n	8009550 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800954e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7e9b      	ldrb	r3, [r3, #26]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d108      	bne.n	800956a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0220 	orr.w	r2, r2, #32
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	e007      	b.n	800957a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0220 	bic.w	r2, r2, #32
 8009578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	7edb      	ldrb	r3, [r3, #27]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d108      	bne.n	8009594 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0210 	bic.w	r2, r2, #16
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e007      	b.n	80095a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f042 0210 	orr.w	r2, r2, #16
 80095a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7f1b      	ldrb	r3, [r3, #28]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d108      	bne.n	80095be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0208 	orr.w	r2, r2, #8
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e007      	b.n	80095ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0208 	bic.w	r2, r2, #8
 80095cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7f5b      	ldrb	r3, [r3, #29]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d108      	bne.n	80095e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f042 0204 	orr.w	r2, r2, #4
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e007      	b.n	80095f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0204 	bic.w	r2, r2, #4
 80095f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	ea42 0103 	orr.w	r1, r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	1e5a      	subs	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800964e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009650:	7cfb      	ldrb	r3, [r7, #19]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d003      	beq.n	800965e <HAL_CAN_ConfigFilter+0x26>
 8009656:	7cfb      	ldrb	r3, [r7, #19]
 8009658:	2b02      	cmp	r3, #2
 800965a:	f040 80be 	bne.w	80097da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800965e:	4b65      	ldr	r3, [pc, #404]	@ (80097f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8009660:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009668:	f043 0201 	orr.w	r2, r3, #1
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009678:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	021b      	lsls	r3, r3, #8
 800968e:	431a      	orrs	r2, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	2201      	movs	r2, #1
 80096a0:	fa02 f303 	lsl.w	r3, r2, r3
 80096a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	43db      	mvns	r3, r3
 80096b0:	401a      	ands	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d123      	bne.n	8009708 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	43db      	mvns	r3, r3
 80096ca:	401a      	ands	r2, r3
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80096e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	3248      	adds	r2, #72	@ 0x48
 80096e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80096fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80096fe:	6979      	ldr	r1, [r7, #20]
 8009700:	3348      	adds	r3, #72	@ 0x48
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	440b      	add	r3, r1
 8009706:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d122      	bne.n	8009756 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	431a      	orrs	r2, r3
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	3248      	adds	r2, #72	@ 0x48
 8009736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800974a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800974c:	6979      	ldr	r1, [r7, #20]
 800974e:	3348      	adds	r3, #72	@ 0x48
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	440b      	add	r3, r1
 8009754:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	43db      	mvns	r3, r3
 8009768:	401a      	ands	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8009770:	e007      	b.n	8009782 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	431a      	orrs	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	43db      	mvns	r3, r3
 8009794:	401a      	ands	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800979c:	e007      	b.n	80097ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d107      	bne.n	80097c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	431a      	orrs	r2, r3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80097cc:	f023 0201 	bic.w	r2, r3, #1
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e006      	b.n	80097e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
  }
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	40006400 	.word	0x40006400

080097f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b01      	cmp	r3, #1
 800980a:	d12e      	bne.n	800986a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0201 	bic.w	r2, r2, #1
 8009822:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009824:	f7ff fddc 	bl	80093e0 <HAL_GetTick>
 8009828:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800982a:	e012      	b.n	8009852 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800982c:	f7ff fdd8 	bl	80093e0 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b0a      	cmp	r3, #10
 8009838:	d90b      	bls.n	8009852 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2205      	movs	r2, #5
 800984a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e012      	b.n	8009878 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e5      	bne.n	800982c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	e006      	b.n	8009878 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
  }
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009880:	b480      	push	{r7}
 8009882:	b089      	sub	sp, #36	@ 0x24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009894:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800989e:	7ffb      	ldrb	r3, [r7, #31]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d003      	beq.n	80098ac <HAL_CAN_AddTxMessage+0x2c>
 80098a4:	7ffb      	ldrb	r3, [r7, #31]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	f040 80ad 	bne.w	8009a06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 8095 	beq.w	80099f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	0e1b      	lsrs	r3, r3, #24
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80098d6:	2201      	movs	r2, #1
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	409a      	lsls	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10d      	bne.n	8009904 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	6809      	ldr	r1, [r1, #0]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	3318      	adds	r3, #24
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	440b      	add	r3, r1
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e00f      	b.n	8009924 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800990e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009914:	68f9      	ldr	r1, [r7, #12]
 8009916:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009918:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	3318      	adds	r3, #24
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	440b      	add	r3, r1
 8009922:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6819      	ldr	r1, [r3, #0]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	3318      	adds	r3, #24
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	440b      	add	r3, r1
 8009934:	3304      	adds	r3, #4
 8009936:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	7d1b      	ldrb	r3, [r3, #20]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d111      	bne.n	8009964 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	3318      	adds	r3, #24
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4413      	add	r3, r2
 800994c:	3304      	adds	r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	6811      	ldr	r1, [r2, #0]
 8009954:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	3318      	adds	r3, #24
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	440b      	add	r3, r1
 8009960:	3304      	adds	r3, #4
 8009962:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3307      	adds	r3, #7
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	061a      	lsls	r2, r3, #24
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3306      	adds	r3, #6
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	041b      	lsls	r3, r3, #16
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3305      	adds	r3, #5
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	4313      	orrs	r3, r2
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	3204      	adds	r2, #4
 8009984:	7812      	ldrb	r2, [r2, #0]
 8009986:	4610      	mov	r0, r2
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	6811      	ldr	r1, [r2, #0]
 800998c:	ea43 0200 	orr.w	r2, r3, r0
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	440b      	add	r3, r1
 8009996:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800999a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3303      	adds	r3, #3
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	061a      	lsls	r2, r3, #24
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3302      	adds	r3, #2
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3301      	adds	r3, #1
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	4313      	orrs	r3, r2
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	4610      	mov	r0, r2
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	6811      	ldr	r1, [r2, #0]
 80099c2:	ea43 0200 	orr.w	r2, r3, r0
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80099d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	3318      	adds	r3, #24
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	4413      	add	r3, r2
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	6811      	ldr	r1, [r2, #0]
 80099e4:	f043 0201 	orr.w	r2, r3, #1
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	3318      	adds	r3, #24
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	440b      	add	r3, r1
 80099f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e00e      	b.n	8009a14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e006      	b.n	8009a14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3724      	adds	r7, #36	@ 0x24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a34:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d002      	beq.n	8009a42 <HAL_CAN_IsTxMessagePending+0x22>
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d10b      	bne.n	8009a5a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	069b      	lsls	r3, r3, #26
 8009a4c:	401a      	ands	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	069b      	lsls	r3, r3, #26
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d001      	beq.n	8009a5a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8009a56:	2301      	movs	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a7c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d003      	beq.n	8009a8c <HAL_CAN_GetRxMessage+0x24>
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	f040 80f3 	bne.w	8009c72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10e      	bne.n	8009ab0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d116      	bne.n	8009ace <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0e7      	b.n	8009c80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e0d8      	b.n	8009c80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	331b      	adds	r3, #27
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	4413      	add	r3, r2
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0204 	and.w	r2, r3, #4
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	331b      	adds	r3, #27
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	4413      	add	r3, r2
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	0d5b      	lsrs	r3, r3, #21
 8009afc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e00b      	b.n	8009b1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	331b      	adds	r3, #27
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	4413      	add	r3, r2
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	08db      	lsrs	r3, r3, #3
 8009b16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	331b      	adds	r3, #27
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	4413      	add	r3, r2
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0202 	and.w	r2, r3, #2
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	331b      	adds	r3, #27
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	4413      	add	r3, r2
 8009b40:	3304      	adds	r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 020f 	and.w	r2, r3, #15
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	331b      	adds	r3, #27
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	4413      	add	r3, r2
 8009b58:	3304      	adds	r3, #4
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	0a1b      	lsrs	r3, r3, #8
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	331b      	adds	r3, #27
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	4413      	add	r3, r2
 8009b70:	3304      	adds	r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	0c1b      	lsrs	r3, r3, #16
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	011b      	lsls	r3, r3, #4
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	0a1a      	lsrs	r2, r3, #8
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	0c1a      	lsrs	r2, r3, #16
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3302      	adds	r3, #2
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	0e1a      	lsrs	r2, r3, #24
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	3303      	adds	r3, #3
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	0a1a      	lsrs	r2, r3, #8
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	3305      	adds	r3, #5
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	0c1a      	lsrs	r2, r3, #16
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	3306      	adds	r3, #6
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	0e1a      	lsrs	r2, r3, #24
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	3307      	adds	r3, #7
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d108      	bne.n	8009c5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0220 	orr.w	r2, r2, #32
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	e007      	b.n	8009c6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0220 	orr.w	r2, r2, #32
 8009c6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e006      	b.n	8009c80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
  }
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	371c      	adds	r7, #28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d002      	beq.n	8009caa <HAL_CAN_ActivateNotification+0x1e>
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d109      	bne.n	8009cbe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6959      	ldr	r1, [r3, #20]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e006      	b.n	8009ccc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	@ 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d07c      	beq.n	8009e18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d023      	beq.n	8009d70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f983 	bl	800a046 <HAL_CAN_TxMailbox0CompleteCallback>
 8009d40:	e016      	b.n	8009d70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d54:	e00c      	b.n	8009d70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d68:	e002      	b.n	8009d70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f989 	bl	800a082 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d024      	beq.n	8009dc4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f963 	bl	800a05a <HAL_CAN_TxMailbox1CompleteCallback>
 8009d94:	e016      	b.n	8009dc4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da8:	e00c      	b.n	8009dc4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dbc:	e002      	b.n	8009dc4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f969 	bl	800a096 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d024      	beq.n	8009e18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009dd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f943 	bl	800a06e <HAL_CAN_TxMailbox2CompleteCallback>
 8009de8:	e016      	b.n	8009e18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d004      	beq.n	8009dfe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dfc:	e00c      	b.n	8009e18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e10:	e002      	b.n	8009e18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f949 	bl	800a0aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00c      	beq.n	8009e3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2210      	movs	r2, #16
 8009e3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	f003 0304 	and.w	r3, r3, #4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2208      	movs	r2, #8
 8009e56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f930 	bl	800a0be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f003 0302 	and.w	r3, r3, #2
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7f9 fb72 	bl	8003560 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00c      	beq.n	8009ea0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00b      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2208      	movs	r2, #8
 8009eba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f912 	bl	800a0e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d009      	beq.n	8009ee0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f8f9 	bl	800a0d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00b      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2210      	movs	r2, #16
 8009efa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f8fc 	bl	800a0fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d006      	beq.n	8009f24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f8f5 	bl	800a10e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d07b      	beq.n	800a026 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d072      	beq.n	800a01e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d008      	beq.n	8009f70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	f043 0302 	orr.w	r3, r3, #2
 8009f6e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	f043 0304 	orr.w	r3, r3, #4
 8009f8a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d043      	beq.n	800a01e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d03e      	beq.n	800a01e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fa6:	2b60      	cmp	r3, #96	@ 0x60
 8009fa8:	d02b      	beq.n	800a002 <HAL_CAN_IRQHandler+0x32a>
 8009faa:	2b60      	cmp	r3, #96	@ 0x60
 8009fac:	d82e      	bhi.n	800a00c <HAL_CAN_IRQHandler+0x334>
 8009fae:	2b50      	cmp	r3, #80	@ 0x50
 8009fb0:	d022      	beq.n	8009ff8 <HAL_CAN_IRQHandler+0x320>
 8009fb2:	2b50      	cmp	r3, #80	@ 0x50
 8009fb4:	d82a      	bhi.n	800a00c <HAL_CAN_IRQHandler+0x334>
 8009fb6:	2b40      	cmp	r3, #64	@ 0x40
 8009fb8:	d019      	beq.n	8009fee <HAL_CAN_IRQHandler+0x316>
 8009fba:	2b40      	cmp	r3, #64	@ 0x40
 8009fbc:	d826      	bhi.n	800a00c <HAL_CAN_IRQHandler+0x334>
 8009fbe:	2b30      	cmp	r3, #48	@ 0x30
 8009fc0:	d010      	beq.n	8009fe4 <HAL_CAN_IRQHandler+0x30c>
 8009fc2:	2b30      	cmp	r3, #48	@ 0x30
 8009fc4:	d822      	bhi.n	800a00c <HAL_CAN_IRQHandler+0x334>
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d002      	beq.n	8009fd0 <HAL_CAN_IRQHandler+0x2f8>
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	d005      	beq.n	8009fda <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fce:	e01d      	b.n	800a00c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	f043 0308 	orr.w	r3, r3, #8
 8009fd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009fd8:	e019      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fdc:	f043 0310 	orr.w	r3, r3, #16
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009fe2:	e014      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	f043 0320 	orr.w	r3, r3, #32
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009fec:	e00f      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009ff6:	e00a      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a000:	e005      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a008:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800a00a:	e000      	b.n	800a00e <HAL_CAN_IRQHandler+0x336>
            break;
 800a00c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a01c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2204      	movs	r2, #4
 800a024:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f872 	bl	800a122 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a03e:	bf00      	nop
 800a040:	3728      	adds	r7, #40	@ 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a148:	4b0b      	ldr	r3, [pc, #44]	@ (800a178 <__NVIC_SetPriorityGrouping+0x40>)
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a154:	4013      	ands	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a160:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <__NVIC_SetPriorityGrouping+0x44>)
 800a162:	4313      	orrs	r3, r2
 800a164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a166:	4a04      	ldr	r2, [pc, #16]	@ (800a178 <__NVIC_SetPriorityGrouping+0x40>)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	60d3      	str	r3, [r2, #12]
}
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	e000ed00 	.word	0xe000ed00
 800a17c:	05fa0000 	.word	0x05fa0000

0800a180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a180:	b480      	push	{r7}
 800a182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a184:	4b04      	ldr	r3, [pc, #16]	@ (800a198 <__NVIC_GetPriorityGrouping+0x18>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	f003 0307 	and.w	r3, r3, #7
}
 800a18e:	4618      	mov	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	e000ed00 	.word	0xe000ed00

0800a19c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	db0b      	blt.n	800a1c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	f003 021f 	and.w	r2, r3, #31
 800a1b4:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <__NVIC_EnableIRQ+0x38>)
 800a1b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	2001      	movs	r0, #1
 800a1be:	fa00 f202 	lsl.w	r2, r0, r2
 800a1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	e000e100 	.word	0xe000e100

0800a1d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	db0a      	blt.n	800a202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	490c      	ldr	r1, [pc, #48]	@ (800a224 <__NVIC_SetPriority+0x4c>)
 800a1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1f6:	0112      	lsls	r2, r2, #4
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a200:	e00a      	b.n	800a218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	b2da      	uxtb	r2, r3
 800a206:	4908      	ldr	r1, [pc, #32]	@ (800a228 <__NVIC_SetPriority+0x50>)
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	f003 030f 	and.w	r3, r3, #15
 800a20e:	3b04      	subs	r3, #4
 800a210:	0112      	lsls	r2, r2, #4
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	440b      	add	r3, r1
 800a216:	761a      	strb	r2, [r3, #24]
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	e000e100 	.word	0xe000e100
 800a228:	e000ed00 	.word	0xe000ed00

0800a22c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b089      	sub	sp, #36	@ 0x24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	f1c3 0307 	rsb	r3, r3, #7
 800a246:	2b04      	cmp	r3, #4
 800a248:	bf28      	it	cs
 800a24a:	2304      	movcs	r3, #4
 800a24c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	3304      	adds	r3, #4
 800a252:	2b06      	cmp	r3, #6
 800a254:	d902      	bls.n	800a25c <NVIC_EncodePriority+0x30>
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	3b03      	subs	r3, #3
 800a25a:	e000      	b.n	800a25e <NVIC_EncodePriority+0x32>
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	43da      	mvns	r2, r3
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	401a      	ands	r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a274:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	fa01 f303 	lsl.w	r3, r1, r3
 800a27e:	43d9      	mvns	r1, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a284:	4313      	orrs	r3, r2
         );
}
 800a286:	4618      	mov	r0, r3
 800a288:	3724      	adds	r7, #36	@ 0x24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff ff4c 	bl	800a138 <__NVIC_SetPriorityGrouping>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2ba:	f7ff ff61 	bl	800a180 <__NVIC_GetPriorityGrouping>
 800a2be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f7ff ffb1 	bl	800a22c <NVIC_EncodePriority>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff ff80 	bl	800a1d8 <__NVIC_SetPriority>
}
 800a2d8:	bf00      	nop
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff ff54 	bl	800a19c <__NVIC_EnableIRQ>
}
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a308:	f7ff f86a 	bl	80093e0 <HAL_GetTick>
 800a30c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e099      	b.n	800a44c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0201 	bic.w	r2, r2, #1
 800a336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a338:	e00f      	b.n	800a35a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a33a:	f7ff f851 	bl	80093e0 <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	2b05      	cmp	r3, #5
 800a346:	d908      	bls.n	800a35a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2203      	movs	r2, #3
 800a352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e078      	b.n	800a44c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e8      	bne.n	800a33a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	4b38      	ldr	r3, [pc, #224]	@ (800a454 <HAL_DMA_Init+0x158>)
 800a374:	4013      	ands	r3, r2
 800a376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a39e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d107      	bne.n	800a3c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f023 0307 	bic.w	r3, r3, #7
 800a3da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d117      	bne.n	800a41e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00e      	beq.n	800a41e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fb09 	bl	800aa18 <DMA_CheckFifoParam>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d008      	beq.n	800a41e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2240      	movs	r2, #64	@ 0x40
 800a410:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a41a:	2301      	movs	r3, #1
 800a41c:	e016      	b.n	800a44c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fac0 	bl	800a9ac <DMA_CalcBaseAndBitshift>
 800a42c:	4603      	mov	r3, r0
 800a42e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a434:	223f      	movs	r2, #63	@ 0x3f
 800a436:	409a      	lsls	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	f010803f 	.word	0xf010803f

0800a458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_DMA_Start_IT+0x26>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e048      	b.n	800a510 <HAL_DMA_Start_IT+0xb8>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d137      	bne.n	800a502 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2202      	movs	r2, #2
 800a496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 fa52 	bl	800a950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4b0:	223f      	movs	r2, #63	@ 0x3f
 800a4b2:	409a      	lsls	r2, r3
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0216 	orr.w	r2, r2, #22
 800a4c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	695a      	ldr	r2, [r3, #20]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a4d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d007      	beq.n	800a4f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0208 	orr.w	r2, r2, #8
 800a4ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e005      	b.n	800a50e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a50a:	2302      	movs	r3, #2
 800a50c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a524:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a526:	f7fe ff5b 	bl	80093e0 <HAL_GetTick>
 800a52a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b02      	cmp	r3, #2
 800a536:	d008      	beq.n	800a54a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2280      	movs	r2, #128	@ 0x80
 800a53c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e052      	b.n	800a5f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0216 	bic.w	r2, r2, #22
 800a558:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695a      	ldr	r2, [r3, #20]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a568:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <HAL_DMA_Abort+0x62>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a576:	2b00      	cmp	r3, #0
 800a578:	d007      	beq.n	800a58a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0208 	bic.w	r2, r2, #8
 800a588:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0201 	bic.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a59a:	e013      	b.n	800a5c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a59c:	f7fe ff20 	bl	80093e0 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d90c      	bls.n	800a5c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2203      	movs	r2, #3
 800a5b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e015      	b.n	800a5f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e4      	bne.n	800a59c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d6:	223f      	movs	r2, #63	@ 0x3f
 800a5d8:	409a      	lsls	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d004      	beq.n	800a616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2280      	movs	r2, #128	@ 0x80
 800a610:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e00c      	b.n	800a630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2205      	movs	r2, #5
 800a61a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a648:	4b8e      	ldr	r3, [pc, #568]	@ (800a884 <HAL_DMA_IRQHandler+0x248>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a8e      	ldr	r2, [pc, #568]	@ (800a888 <HAL_DMA_IRQHandler+0x24c>)
 800a64e:	fba2 2303 	umull	r2, r3, r2, r3
 800a652:	0a9b      	lsrs	r3, r3, #10
 800a654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a65a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a666:	2208      	movs	r2, #8
 800a668:	409a      	lsls	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4013      	ands	r3, r2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d01a      	beq.n	800a6a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d013      	beq.n	800a6a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0204 	bic.w	r2, r2, #4
 800a68e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a694:	2208      	movs	r2, #8
 800a696:	409a      	lsls	r2, r3
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a0:	f043 0201 	orr.w	r2, r3, #1
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d012      	beq.n	800a6de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00b      	beq.n	800a6de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	409a      	lsls	r2, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d6:	f043 0202 	orr.w	r2, r3, #2
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	409a      	lsls	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d012      	beq.n	800a714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a700:	2204      	movs	r2, #4
 800a702:	409a      	lsls	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70c:	f043 0204 	orr.w	r2, r3, #4
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a718:	2210      	movs	r2, #16
 800a71a:	409a      	lsls	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4013      	ands	r3, r2
 800a720:	2b00      	cmp	r3, #0
 800a722:	d043      	beq.n	800a7ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d03c      	beq.n	800a7ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a736:	2210      	movs	r2, #16
 800a738:	409a      	lsls	r2, r3
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d018      	beq.n	800a77e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d108      	bne.n	800a76c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d024      	beq.n	800a7ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	e01f      	b.n	800a7ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01b      	beq.n	800a7ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
 800a77c:	e016      	b.n	800a7ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d107      	bne.n	800a79c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0208 	bic.w	r2, r2, #8
 800a79a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	409a      	lsls	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 808f 	beq.w	800a8dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 8087 	beq.w	800a8dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	409a      	lsls	r2, r3
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b05      	cmp	r3, #5
 800a7e4:	d136      	bne.n	800a854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f022 0216 	bic.w	r2, r2, #22
 800a7f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695a      	ldr	r2, [r3, #20]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <HAL_DMA_IRQHandler+0x1da>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0208 	bic.w	r2, r2, #8
 800a824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a82a:	223f      	movs	r2, #63	@ 0x3f
 800a82c:	409a      	lsls	r2, r3
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d07e      	beq.n	800a948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
        }
        return;
 800a852:	e079      	b.n	800a948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d01d      	beq.n	800a89e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10d      	bne.n	800a88c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a874:	2b00      	cmp	r3, #0
 800a876:	d031      	beq.n	800a8dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	4798      	blx	r3
 800a880:	e02c      	b.n	800a8dc <HAL_DMA_IRQHandler+0x2a0>
 800a882:	bf00      	nop
 800a884:	2000004c 	.word	0x2000004c
 800a888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d023      	beq.n	800a8dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
 800a89c:	e01e      	b.n	800a8dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10f      	bne.n	800a8cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0210 	bic.w	r2, r2, #16
 800a8ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d032      	beq.n	800a94a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d022      	beq.n	800a936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2205      	movs	r2, #5
 800a8f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	3301      	adds	r3, #1
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	429a      	cmp	r2, r3
 800a912:	d307      	bcc.n	800a924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1f2      	bne.n	800a908 <HAL_DMA_IRQHandler+0x2cc>
 800a922:	e000      	b.n	800a926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d005      	beq.n	800a94a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
 800a946:	e000      	b.n	800a94a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a948:	bf00      	nop
    }
  }
}
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a96c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b40      	cmp	r3, #64	@ 0x40
 800a97c:	d108      	bne.n	800a990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a98e:	e007      	b.n	800a9a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	60da      	str	r2, [r3, #12]
}
 800a9a0:	bf00      	nop
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	3b10      	subs	r3, #16
 800a9bc:	4a13      	ldr	r2, [pc, #76]	@ (800aa0c <DMA_CalcBaseAndBitshift+0x60>)
 800a9be:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c2:	091b      	lsrs	r3, r3, #4
 800a9c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9c6:	4a12      	ldr	r2, [pc, #72]	@ (800aa10 <DMA_CalcBaseAndBitshift+0x64>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d908      	bls.n	800a9ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa14 <DMA_CalcBaseAndBitshift+0x68>)
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	1d1a      	adds	r2, r3, #4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	659a      	str	r2, [r3, #88]	@ 0x58
 800a9ea:	e006      	b.n	800a9fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4b08      	ldr	r3, [pc, #32]	@ (800aa14 <DMA_CalcBaseAndBitshift+0x68>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	aaaaaaab 	.word	0xaaaaaaab
 800aa10:	08013878 	.word	0x08013878
 800aa14:	fffffc00 	.word	0xfffffc00

0800aa18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d11f      	bne.n	800aa72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d856      	bhi.n	800aae6 <DMA_CheckFifoParam+0xce>
 800aa38:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <DMA_CheckFifoParam+0x28>)
 800aa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3e:	bf00      	nop
 800aa40:	0800aa51 	.word	0x0800aa51
 800aa44:	0800aa63 	.word	0x0800aa63
 800aa48:	0800aa51 	.word	0x0800aa51
 800aa4c:	0800aae7 	.word	0x0800aae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d046      	beq.n	800aaea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa60:	e043      	b.n	800aaea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aa6a:	d140      	bne.n	800aaee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa70:	e03d      	b.n	800aaee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa7a:	d121      	bne.n	800aac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d837      	bhi.n	800aaf2 <DMA_CheckFifoParam+0xda>
 800aa82:	a201      	add	r2, pc, #4	@ (adr r2, 800aa88 <DMA_CheckFifoParam+0x70>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aa99 	.word	0x0800aa99
 800aa8c:	0800aa9f 	.word	0x0800aa9f
 800aa90:	0800aa99 	.word	0x0800aa99
 800aa94:	0800aab1 	.word	0x0800aab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9c:	e030      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d025      	beq.n	800aaf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaae:	e022      	b.n	800aaf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aab8:	d11f      	bne.n	800aafa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aabe:	e01c      	b.n	800aafa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d903      	bls.n	800aace <DMA_CheckFifoParam+0xb6>
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d003      	beq.n	800aad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aacc:	e018      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
      break;
 800aad2:	e015      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
      break;
 800aae4:	e00b      	b.n	800aafe <DMA_CheckFifoParam+0xe6>
      break;
 800aae6:	bf00      	nop
 800aae8:	e00a      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;
 800aaea:	bf00      	nop
 800aaec:	e008      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;
 800aaee:	bf00      	nop
 800aaf0:	e006      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;
 800aaf2:	bf00      	nop
 800aaf4:	e004      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;
 800aaf6:	bf00      	nop
 800aaf8:	e002      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;   
 800aafa:	bf00      	nop
 800aafc:	e000      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
      break;
 800aafe:	bf00      	nop
    }
  } 
  
  return status; 
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop

0800ab10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b089      	sub	sp, #36	@ 0x24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ab22:	2300      	movs	r3, #0
 800ab24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ab26:	2300      	movs	r3, #0
 800ab28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	61fb      	str	r3, [r7, #28]
 800ab2e:	e175      	b.n	800ae1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ab30:	2201      	movs	r2, #1
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4013      	ands	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	f040 8164 	bne.w	800ae16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d005      	beq.n	800ab66 <HAL_GPIO_Init+0x56>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d130      	bne.n	800abc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	2203      	movs	r2, #3
 800ab72:	fa02 f303 	lsl.w	r3, r2, r3
 800ab76:	43db      	mvns	r3, r3
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	43db      	mvns	r3, r3
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	4013      	ands	r3, r2
 800abaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	091b      	lsrs	r3, r3, #4
 800abb2:	f003 0201 	and.w	r2, r3, #1
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d017      	beq.n	800ac04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	2203      	movs	r2, #3
 800abe0:	fa02 f303 	lsl.w	r3, r2, r3
 800abe4:	43db      	mvns	r3, r3
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	4013      	ands	r3, r2
 800abea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	fa02 f303 	lsl.w	r3, r2, r3
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d123      	bne.n	800ac58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	08da      	lsrs	r2, r3, #3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3208      	adds	r2, #8
 800ac18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	220f      	movs	r2, #15
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	43db      	mvns	r3, r3
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	4013      	ands	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	08da      	lsrs	r2, r3, #3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3208      	adds	r2, #8
 800ac52:	69b9      	ldr	r1, [r7, #24]
 800ac54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	2203      	movs	r2, #3
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	43db      	mvns	r3, r3
 800ac6a:	69ba      	ldr	r2, [r7, #24]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f003 0203 	and.w	r2, r3, #3
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 80be 	beq.w	800ae16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac9a:	4b66      	ldr	r3, [pc, #408]	@ (800ae34 <HAL_GPIO_Init+0x324>)
 800ac9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac9e:	4a65      	ldr	r2, [pc, #404]	@ (800ae34 <HAL_GPIO_Init+0x324>)
 800aca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aca4:	6453      	str	r3, [r2, #68]	@ 0x44
 800aca6:	4b63      	ldr	r3, [pc, #396]	@ (800ae34 <HAL_GPIO_Init+0x324>)
 800aca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800acb2:	4a61      	ldr	r2, [pc, #388]	@ (800ae38 <HAL_GPIO_Init+0x328>)
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	089b      	lsrs	r3, r3, #2
 800acb8:	3302      	adds	r3, #2
 800acba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	220f      	movs	r2, #15
 800acca:	fa02 f303 	lsl.w	r3, r2, r3
 800acce:	43db      	mvns	r3, r3
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	4013      	ands	r3, r2
 800acd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a58      	ldr	r2, [pc, #352]	@ (800ae3c <HAL_GPIO_Init+0x32c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d037      	beq.n	800ad4e <HAL_GPIO_Init+0x23e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a57      	ldr	r2, [pc, #348]	@ (800ae40 <HAL_GPIO_Init+0x330>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d031      	beq.n	800ad4a <HAL_GPIO_Init+0x23a>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a56      	ldr	r2, [pc, #344]	@ (800ae44 <HAL_GPIO_Init+0x334>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d02b      	beq.n	800ad46 <HAL_GPIO_Init+0x236>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a55      	ldr	r2, [pc, #340]	@ (800ae48 <HAL_GPIO_Init+0x338>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d025      	beq.n	800ad42 <HAL_GPIO_Init+0x232>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a54      	ldr	r2, [pc, #336]	@ (800ae4c <HAL_GPIO_Init+0x33c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d01f      	beq.n	800ad3e <HAL_GPIO_Init+0x22e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a53      	ldr	r2, [pc, #332]	@ (800ae50 <HAL_GPIO_Init+0x340>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d019      	beq.n	800ad3a <HAL_GPIO_Init+0x22a>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a52      	ldr	r2, [pc, #328]	@ (800ae54 <HAL_GPIO_Init+0x344>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d013      	beq.n	800ad36 <HAL_GPIO_Init+0x226>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a51      	ldr	r2, [pc, #324]	@ (800ae58 <HAL_GPIO_Init+0x348>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00d      	beq.n	800ad32 <HAL_GPIO_Init+0x222>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a50      	ldr	r2, [pc, #320]	@ (800ae5c <HAL_GPIO_Init+0x34c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d007      	beq.n	800ad2e <HAL_GPIO_Init+0x21e>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a4f      	ldr	r2, [pc, #316]	@ (800ae60 <HAL_GPIO_Init+0x350>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d101      	bne.n	800ad2a <HAL_GPIO_Init+0x21a>
 800ad26:	2309      	movs	r3, #9
 800ad28:	e012      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad2a:	230a      	movs	r3, #10
 800ad2c:	e010      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad2e:	2308      	movs	r3, #8
 800ad30:	e00e      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad32:	2307      	movs	r3, #7
 800ad34:	e00c      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad36:	2306      	movs	r3, #6
 800ad38:	e00a      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad3a:	2305      	movs	r3, #5
 800ad3c:	e008      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad3e:	2304      	movs	r3, #4
 800ad40:	e006      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad42:	2303      	movs	r3, #3
 800ad44:	e004      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad46:	2302      	movs	r3, #2
 800ad48:	e002      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <HAL_GPIO_Init+0x240>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	f002 0203 	and.w	r2, r2, #3
 800ad56:	0092      	lsls	r2, r2, #2
 800ad58:	4093      	lsls	r3, r2
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ad60:	4935      	ldr	r1, [pc, #212]	@ (800ae38 <HAL_GPIO_Init+0x328>)
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	089b      	lsrs	r3, r3, #2
 800ad66:	3302      	adds	r3, #2
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad6e:	4b3d      	ldr	r3, [pc, #244]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	43db      	mvns	r3, r3
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad92:	4a34      	ldr	r2, [pc, #208]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad98:	4b32      	ldr	r3, [pc, #200]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	43db      	mvns	r3, r3
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	4013      	ands	r3, r2
 800ada6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	4313      	orrs	r3, r2
 800adba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800adbc:	4a29      	ldr	r2, [pc, #164]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800adc2:	4b28      	ldr	r3, [pc, #160]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	43db      	mvns	r3, r3
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	4013      	ands	r3, r2
 800add0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ade6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800adec:	4b1d      	ldr	r3, [pc, #116]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	43db      	mvns	r3, r3
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	4013      	ands	r3, r2
 800adfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ae10:	4a14      	ldr	r2, [pc, #80]	@ (800ae64 <HAL_GPIO_Init+0x354>)
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	61fb      	str	r3, [r7, #28]
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	f67f ae86 	bls.w	800ab30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	3724      	adds	r7, #36	@ 0x24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40023800 	.word	0x40023800
 800ae38:	40013800 	.word	0x40013800
 800ae3c:	40020000 	.word	0x40020000
 800ae40:	40020400 	.word	0x40020400
 800ae44:	40020800 	.word	0x40020800
 800ae48:	40020c00 	.word	0x40020c00
 800ae4c:	40021000 	.word	0x40021000
 800ae50:	40021400 	.word	0x40021400
 800ae54:	40021800 	.word	0x40021800
 800ae58:	40021c00 	.word	0x40021c00
 800ae5c:	40022000 	.word	0x40022000
 800ae60:	40022400 	.word	0x40022400
 800ae64:	40013c00 	.word	0x40013c00

0800ae68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691a      	ldr	r2, [r3, #16]
 800ae78:	887b      	ldrh	r3, [r7, #2]
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	e001      	b.n	800ae8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	807b      	strh	r3, [r7, #2]
 800aea4:	4613      	mov	r3, r2
 800aea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aea8:	787b      	ldrb	r3, [r7, #1]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aeae:	887a      	ldrh	r2, [r7, #2]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800aeb4:	e003      	b.n	800aebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800aeb6:	887b      	ldrh	r3, [r7, #2]
 800aeb8:	041a      	lsls	r2, r3, #16
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	619a      	str	r2, [r3, #24]
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
	...

0800aecc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a04      	ldr	r2, [pc, #16]	@ (800aee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeda:	6013      	str	r3, [r2, #0]
}
 800aedc:	bf00      	nop
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	40007000 	.word	0x40007000

0800aeec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aef6:	4b23      	ldr	r3, [pc, #140]	@ (800af84 <HAL_PWREx_EnableOverDrive+0x98>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefa:	4a22      	ldr	r2, [pc, #136]	@ (800af84 <HAL_PWREx_EnableOverDrive+0x98>)
 800aefc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af00:	6413      	str	r3, [r2, #64]	@ 0x40
 800af02:	4b20      	ldr	r3, [pc, #128]	@ (800af84 <HAL_PWREx_EnableOverDrive+0x98>)
 800af04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800af0e:	4b1e      	ldr	r3, [pc, #120]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a1d      	ldr	r2, [pc, #116]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af1a:	f7fe fa61 	bl	80093e0 <HAL_GetTick>
 800af1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af20:	e009      	b.n	800af36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af22:	f7fe fa5d 	bl	80093e0 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af30:	d901      	bls.n	800af36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e022      	b.n	800af7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af36:	4b14      	ldr	r3, [pc, #80]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af42:	d1ee      	bne.n	800af22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800af44:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a0f      	ldr	r2, [pc, #60]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af50:	f7fe fa46 	bl	80093e0 <HAL_GetTick>
 800af54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af56:	e009      	b.n	800af6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af58:	f7fe fa42 	bl	80093e0 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af66:	d901      	bls.n	800af6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e007      	b.n	800af7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af6c:	4b06      	ldr	r3, [pc, #24]	@ (800af88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af78:	d1ee      	bne.n	800af58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	40023800 	.word	0x40023800
 800af88:	40007000 	.word	0x40007000

0800af8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800af94:	2300      	movs	r3, #0
 800af96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e291      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8087 	beq.w	800b0be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800afb0:	4b96      	ldr	r3, [pc, #600]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f003 030c 	and.w	r3, r3, #12
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d00c      	beq.n	800afd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800afbc:	4b93      	ldr	r3, [pc, #588]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	f003 030c 	and.w	r3, r3, #12
 800afc4:	2b08      	cmp	r3, #8
 800afc6:	d112      	bne.n	800afee <HAL_RCC_OscConfig+0x62>
 800afc8:	4b90      	ldr	r3, [pc, #576]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afd4:	d10b      	bne.n	800afee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd6:	4b8d      	ldr	r3, [pc, #564]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d06c      	beq.n	800b0bc <HAL_RCC_OscConfig+0x130>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d168      	bne.n	800b0bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e26b      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aff6:	d106      	bne.n	800b006 <HAL_RCC_OscConfig+0x7a>
 800aff8:	4b84      	ldr	r3, [pc, #528]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a83      	ldr	r2, [pc, #524]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800affe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	e02e      	b.n	800b064 <HAL_RCC_OscConfig+0xd8>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10c      	bne.n	800b028 <HAL_RCC_OscConfig+0x9c>
 800b00e:	4b7f      	ldr	r3, [pc, #508]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a7e      	ldr	r2, [pc, #504]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	4b7c      	ldr	r3, [pc, #496]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a7b      	ldr	r2, [pc, #492]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	e01d      	b.n	800b064 <HAL_RCC_OscConfig+0xd8>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b030:	d10c      	bne.n	800b04c <HAL_RCC_OscConfig+0xc0>
 800b032:	4b76      	ldr	r3, [pc, #472]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a75      	ldr	r2, [pc, #468]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b03c:	6013      	str	r3, [r2, #0]
 800b03e:	4b73      	ldr	r3, [pc, #460]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a72      	ldr	r2, [pc, #456]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	e00b      	b.n	800b064 <HAL_RCC_OscConfig+0xd8>
 800b04c:	4b6f      	ldr	r3, [pc, #444]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a6e      	ldr	r2, [pc, #440]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	4b6c      	ldr	r3, [pc, #432]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a6b      	ldr	r2, [pc, #428]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b05e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d013      	beq.n	800b094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b06c:	f7fe f9b8 	bl	80093e0 <HAL_GetTick>
 800b070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b072:	e008      	b.n	800b086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b074:	f7fe f9b4 	bl	80093e0 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b64      	cmp	r3, #100	@ 0x64
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e21f      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b086:	4b61      	ldr	r3, [pc, #388]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0f0      	beq.n	800b074 <HAL_RCC_OscConfig+0xe8>
 800b092:	e014      	b.n	800b0be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b094:	f7fe f9a4 	bl	80093e0 <HAL_GetTick>
 800b098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b09a:	e008      	b.n	800b0ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b09c:	f7fe f9a0 	bl	80093e0 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b64      	cmp	r3, #100	@ 0x64
 800b0a8:	d901      	bls.n	800b0ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e20b      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0ae:	4b57      	ldr	r3, [pc, #348]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1f0      	bne.n	800b09c <HAL_RCC_OscConfig+0x110>
 800b0ba:	e000      	b.n	800b0be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d069      	beq.n	800b19e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b0ca:	4b50      	ldr	r3, [pc, #320]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 030c 	and.w	r3, r3, #12
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00b      	beq.n	800b0ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0d6:	4b4d      	ldr	r3, [pc, #308]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f003 030c 	and.w	r3, r3, #12
 800b0de:	2b08      	cmp	r3, #8
 800b0e0:	d11c      	bne.n	800b11c <HAL_RCC_OscConfig+0x190>
 800b0e2:	4b4a      	ldr	r3, [pc, #296]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d116      	bne.n	800b11c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0ee:	4b47      	ldr	r3, [pc, #284]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0302 	and.w	r3, r3, #2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d005      	beq.n	800b106 <HAL_RCC_OscConfig+0x17a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d001      	beq.n	800b106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e1df      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b106:	4b41      	ldr	r3, [pc, #260]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	493d      	ldr	r1, [pc, #244]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b116:	4313      	orrs	r3, r2
 800b118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b11a:	e040      	b.n	800b19e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d023      	beq.n	800b16c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b124:	4b39      	ldr	r3, [pc, #228]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a38      	ldr	r2, [pc, #224]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b130:	f7fe f956 	bl	80093e0 <HAL_GetTick>
 800b134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b136:	e008      	b.n	800b14a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b138:	f7fe f952 	bl	80093e0 <HAL_GetTick>
 800b13c:	4602      	mov	r2, r0
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	2b02      	cmp	r3, #2
 800b144:	d901      	bls.n	800b14a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e1bd      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b14a:	4b30      	ldr	r3, [pc, #192]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0f0      	beq.n	800b138 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b156:	4b2d      	ldr	r3, [pc, #180]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	4929      	ldr	r1, [pc, #164]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b166:	4313      	orrs	r3, r2
 800b168:	600b      	str	r3, [r1, #0]
 800b16a:	e018      	b.n	800b19e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b16c:	4b27      	ldr	r3, [pc, #156]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a26      	ldr	r2, [pc, #152]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b172:	f023 0301 	bic.w	r3, r3, #1
 800b176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b178:	f7fe f932 	bl	80093e0 <HAL_GetTick>
 800b17c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b17e:	e008      	b.n	800b192 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b180:	f7fe f92e 	bl	80093e0 <HAL_GetTick>
 800b184:	4602      	mov	r2, r0
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d901      	bls.n	800b192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e199      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b192:	4b1e      	ldr	r3, [pc, #120]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0302 	and.w	r3, r3, #2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1f0      	bne.n	800b180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0308 	and.w	r3, r3, #8
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d038      	beq.n	800b21c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d019      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1b2:	4b16      	ldr	r3, [pc, #88]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1b6:	4a15      	ldr	r2, [pc, #84]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b1b8:	f043 0301 	orr.w	r3, r3, #1
 800b1bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1be:	f7fe f90f 	bl	80093e0 <HAL_GetTick>
 800b1c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1c4:	e008      	b.n	800b1d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1c6:	f7fe f90b 	bl	80093e0 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d901      	bls.n	800b1d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e176      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b1da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d0f0      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x23a>
 800b1e4:	e01a      	b.n	800b21c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1e6:	4b09      	ldr	r3, [pc, #36]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1ea:	4a08      	ldr	r2, [pc, #32]	@ (800b20c <HAL_RCC_OscConfig+0x280>)
 800b1ec:	f023 0301 	bic.w	r3, r3, #1
 800b1f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1f2:	f7fe f8f5 	bl	80093e0 <HAL_GetTick>
 800b1f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1f8:	e00a      	b.n	800b210 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1fa:	f7fe f8f1 	bl	80093e0 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d903      	bls.n	800b210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e15c      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
 800b20c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b210:	4b91      	ldr	r3, [pc, #580]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b214:	f003 0302 	and.w	r3, r3, #2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1ee      	bne.n	800b1fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80a4 	beq.w	800b372 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b22a:	4b8b      	ldr	r3, [pc, #556]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b22e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10d      	bne.n	800b252 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b236:	4b88      	ldr	r3, [pc, #544]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23a:	4a87      	ldr	r2, [pc, #540]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b23c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b240:	6413      	str	r3, [r2, #64]	@ 0x40
 800b242:	4b85      	ldr	r3, [pc, #532]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b24a:	60bb      	str	r3, [r7, #8]
 800b24c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b24e:	2301      	movs	r3, #1
 800b250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b252:	4b82      	ldr	r3, [pc, #520]	@ (800b45c <HAL_RCC_OscConfig+0x4d0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d118      	bne.n	800b290 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b25e:	4b7f      	ldr	r3, [pc, #508]	@ (800b45c <HAL_RCC_OscConfig+0x4d0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a7e      	ldr	r2, [pc, #504]	@ (800b45c <HAL_RCC_OscConfig+0x4d0>)
 800b264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b26a:	f7fe f8b9 	bl	80093e0 <HAL_GetTick>
 800b26e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b270:	e008      	b.n	800b284 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b272:	f7fe f8b5 	bl	80093e0 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	2b64      	cmp	r3, #100	@ 0x64
 800b27e:	d901      	bls.n	800b284 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e120      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b284:	4b75      	ldr	r3, [pc, #468]	@ (800b45c <HAL_RCC_OscConfig+0x4d0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0f0      	beq.n	800b272 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d106      	bne.n	800b2a6 <HAL_RCC_OscConfig+0x31a>
 800b298:	4b6f      	ldr	r3, [pc, #444]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b29a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b29c:	4a6e      	ldr	r2, [pc, #440]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b29e:	f043 0301 	orr.w	r3, r3, #1
 800b2a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2a4:	e02d      	b.n	800b302 <HAL_RCC_OscConfig+0x376>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10c      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x33c>
 800b2ae:	4b6a      	ldr	r3, [pc, #424]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2b2:	4a69      	ldr	r2, [pc, #420]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2b4:	f023 0301 	bic.w	r3, r3, #1
 800b2b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2ba:	4b67      	ldr	r3, [pc, #412]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2be:	4a66      	ldr	r2, [pc, #408]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2c0:	f023 0304 	bic.w	r3, r3, #4
 800b2c4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2c6:	e01c      	b.n	800b302 <HAL_RCC_OscConfig+0x376>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b05      	cmp	r3, #5
 800b2ce:	d10c      	bne.n	800b2ea <HAL_RCC_OscConfig+0x35e>
 800b2d0:	4b61      	ldr	r3, [pc, #388]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2d4:	4a60      	ldr	r2, [pc, #384]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2d6:	f043 0304 	orr.w	r3, r3, #4
 800b2da:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2dc:	4b5e      	ldr	r3, [pc, #376]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2e0:	4a5d      	ldr	r2, [pc, #372]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2e8:	e00b      	b.n	800b302 <HAL_RCC_OscConfig+0x376>
 800b2ea:	4b5b      	ldr	r3, [pc, #364]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ee:	4a5a      	ldr	r2, [pc, #360]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2f6:	4b58      	ldr	r3, [pc, #352]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2fa:	4a57      	ldr	r2, [pc, #348]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b2fc:	f023 0304 	bic.w	r3, r3, #4
 800b300:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d015      	beq.n	800b336 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b30a:	f7fe f869 	bl	80093e0 <HAL_GetTick>
 800b30e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b310:	e00a      	b.n	800b328 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b312:	f7fe f865 	bl	80093e0 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b320:	4293      	cmp	r3, r2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e0ce      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b328:	4b4b      	ldr	r3, [pc, #300]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b32a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0ee      	beq.n	800b312 <HAL_RCC_OscConfig+0x386>
 800b334:	e014      	b.n	800b360 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b336:	f7fe f853 	bl	80093e0 <HAL_GetTick>
 800b33a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b33c:	e00a      	b.n	800b354 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b33e:	f7fe f84f 	bl	80093e0 <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d901      	bls.n	800b354 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e0b8      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b354:	4b40      	ldr	r3, [pc, #256]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1ee      	bne.n	800b33e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d105      	bne.n	800b372 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b366:	4b3c      	ldr	r3, [pc, #240]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36a:	4a3b      	ldr	r2, [pc, #236]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b36c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b370:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 80a4 	beq.w	800b4c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b37c:	4b36      	ldr	r3, [pc, #216]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f003 030c 	and.w	r3, r3, #12
 800b384:	2b08      	cmp	r3, #8
 800b386:	d06b      	beq.n	800b460 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d149      	bne.n	800b424 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b390:	4b31      	ldr	r3, [pc, #196]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a30      	ldr	r2, [pc, #192]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b39a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b39c:	f7fe f820 	bl	80093e0 <HAL_GetTick>
 800b3a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3a2:	e008      	b.n	800b3b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3a4:	f7fe f81c 	bl	80093e0 <HAL_GetTick>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d901      	bls.n	800b3b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e087      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3b6:	4b28      	ldr	r3, [pc, #160]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1f0      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	69da      	ldr	r2, [r3, #28]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	019b      	lsls	r3, r3, #6
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d8:	085b      	lsrs	r3, r3, #1
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	041b      	lsls	r3, r3, #16
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e4:	061b      	lsls	r3, r3, #24
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b3ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b3ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3f0:	4b19      	ldr	r3, [pc, #100]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a18      	ldr	r2, [pc, #96]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b3f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3fc:	f7fd fff0 	bl	80093e0 <HAL_GetTick>
 800b400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b402:	e008      	b.n	800b416 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b404:	f7fd ffec 	bl	80093e0 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d901      	bls.n	800b416 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e057      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b416:	4b10      	ldr	r3, [pc, #64]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0f0      	beq.n	800b404 <HAL_RCC_OscConfig+0x478>
 800b422:	e04f      	b.n	800b4c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b424:	4b0c      	ldr	r3, [pc, #48]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a0b      	ldr	r2, [pc, #44]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b42a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b42e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b430:	f7fd ffd6 	bl	80093e0 <HAL_GetTick>
 800b434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b436:	e008      	b.n	800b44a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b438:	f7fd ffd2 	bl	80093e0 <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b02      	cmp	r3, #2
 800b444:	d901      	bls.n	800b44a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e03d      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b44a:	4b03      	ldr	r3, [pc, #12]	@ (800b458 <HAL_RCC_OscConfig+0x4cc>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f0      	bne.n	800b438 <HAL_RCC_OscConfig+0x4ac>
 800b456:	e035      	b.n	800b4c4 <HAL_RCC_OscConfig+0x538>
 800b458:	40023800 	.word	0x40023800
 800b45c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b460:	4b1b      	ldr	r3, [pc, #108]	@ (800b4d0 <HAL_RCC_OscConfig+0x544>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d028      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b478:	429a      	cmp	r2, r3
 800b47a:	d121      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b486:	429a      	cmp	r2, r3
 800b488:	d11a      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b490:	4013      	ands	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b498:	4293      	cmp	r3, r2
 800b49a:	d111      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a6:	085b      	lsrs	r3, r3, #1
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d107      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d001      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e000      	b.n	800b4c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40023800 	.word	0x40023800

0800b4d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e0d0      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 030f 	and.w	r3, r3, #15
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d910      	bls.n	800b51c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4fa:	4b67      	ldr	r3, [pc, #412]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f023 020f 	bic.w	r2, r3, #15
 800b502:	4965      	ldr	r1, [pc, #404]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	4313      	orrs	r3, r2
 800b508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b50a:	4b63      	ldr	r3, [pc, #396]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 030f 	and.w	r3, r3, #15
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d001      	beq.n	800b51c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e0b8      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d020      	beq.n	800b56a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b534:	4b59      	ldr	r3, [pc, #356]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	4a58      	ldr	r2, [pc, #352]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b53a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b53e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0308 	and.w	r3, r3, #8
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b54c:	4b53      	ldr	r3, [pc, #332]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	4a52      	ldr	r2, [pc, #328]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b558:	4b50      	ldr	r3, [pc, #320]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	494d      	ldr	r1, [pc, #308]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b566:	4313      	orrs	r3, r2
 800b568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d040      	beq.n	800b5f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d107      	bne.n	800b58e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b57e:	4b47      	ldr	r3, [pc, #284]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d115      	bne.n	800b5b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e07f      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d107      	bne.n	800b5a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b596:	4b41      	ldr	r3, [pc, #260]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d109      	bne.n	800b5b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e073      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5a6:	4b3d      	ldr	r3, [pc, #244]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e06b      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b5b6:	4b39      	ldr	r3, [pc, #228]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f023 0203 	bic.w	r2, r3, #3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	4936      	ldr	r1, [pc, #216]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5c8:	f7fd ff0a 	bl	80093e0 <HAL_GetTick>
 800b5cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ce:	e00a      	b.n	800b5e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5d0:	f7fd ff06 	bl	80093e0 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e053      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f003 020c 	and.w	r2, r3, #12
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d1eb      	bne.n	800b5d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5f8:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 030f 	and.w	r3, r3, #15
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	429a      	cmp	r2, r3
 800b604:	d210      	bcs.n	800b628 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b606:	4b24      	ldr	r3, [pc, #144]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f023 020f 	bic.w	r2, r3, #15
 800b60e:	4922      	ldr	r1, [pc, #136]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	4313      	orrs	r3, r2
 800b614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b616:	4b20      	ldr	r3, [pc, #128]	@ (800b698 <HAL_RCC_ClockConfig+0x1c4>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d001      	beq.n	800b628 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e032      	b.n	800b68e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d008      	beq.n	800b646 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b634:	4b19      	ldr	r3, [pc, #100]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	4916      	ldr	r1, [pc, #88]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b642:	4313      	orrs	r3, r2
 800b644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0308 	and.w	r3, r3, #8
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d009      	beq.n	800b666 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b652:	4b12      	ldr	r3, [pc, #72]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	490e      	ldr	r1, [pc, #56]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b662:	4313      	orrs	r3, r2
 800b664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b666:	f000 f821 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b0b      	ldr	r3, [pc, #44]	@ (800b69c <HAL_RCC_ClockConfig+0x1c8>)
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	091b      	lsrs	r3, r3, #4
 800b672:	f003 030f 	and.w	r3, r3, #15
 800b676:	490a      	ldr	r1, [pc, #40]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1cc>)
 800b678:	5ccb      	ldrb	r3, [r1, r3]
 800b67a:	fa22 f303 	lsr.w	r3, r2, r3
 800b67e:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <HAL_RCC_ClockConfig+0x1d0>)
 800b680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b682:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <HAL_RCC_ClockConfig+0x1d4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4618      	mov	r0, r3
 800b688:	f7fd fca4 	bl	8008fd4 <HAL_InitTick>

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	40023c00 	.word	0x40023c00
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	08013860 	.word	0x08013860
 800b6a4:	2000004c 	.word	0x2000004c
 800b6a8:	20000050 	.word	0x20000050

0800b6ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6b0:	b094      	sub	sp, #80	@ 0x50
 800b6b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6bc:	2300      	movs	r3, #0
 800b6be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6c4:	4b79      	ldr	r3, [pc, #484]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 030c 	and.w	r3, r3, #12
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d00d      	beq.n	800b6ec <HAL_RCC_GetSysClockFreq+0x40>
 800b6d0:	2b08      	cmp	r3, #8
 800b6d2:	f200 80e1 	bhi.w	800b898 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <HAL_RCC_GetSysClockFreq+0x34>
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d003      	beq.n	800b6e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b6de:	e0db      	b.n	800b898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6e0:	4b73      	ldr	r3, [pc, #460]	@ (800b8b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b6e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b6e4:	e0db      	b.n	800b89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6e6:	4b73      	ldr	r3, [pc, #460]	@ (800b8b4 <HAL_RCC_GetSysClockFreq+0x208>)
 800b6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b6ea:	e0d8      	b.n	800b89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6ec:	4b6f      	ldr	r3, [pc, #444]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b6f6:	4b6d      	ldr	r3, [pc, #436]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d063      	beq.n	800b7ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b702:	4b6a      	ldr	r3, [pc, #424]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	099b      	lsrs	r3, r3, #6
 800b708:	2200      	movs	r2, #0
 800b70a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b70c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b714:	633b      	str	r3, [r7, #48]	@ 0x30
 800b716:	2300      	movs	r3, #0
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b71e:	4622      	mov	r2, r4
 800b720:	462b      	mov	r3, r5
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f04f 0100 	mov.w	r1, #0
 800b72a:	0159      	lsls	r1, r3, #5
 800b72c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b730:	0150      	lsls	r0, r2, #5
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4621      	mov	r1, r4
 800b738:	1a51      	subs	r1, r2, r1
 800b73a:	6139      	str	r1, [r7, #16]
 800b73c:	4629      	mov	r1, r5
 800b73e:	eb63 0301 	sbc.w	r3, r3, r1
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	f04f 0200 	mov.w	r2, #0
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b750:	4659      	mov	r1, fp
 800b752:	018b      	lsls	r3, r1, #6
 800b754:	4651      	mov	r1, sl
 800b756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b75a:	4651      	mov	r1, sl
 800b75c:	018a      	lsls	r2, r1, #6
 800b75e:	4651      	mov	r1, sl
 800b760:	ebb2 0801 	subs.w	r8, r2, r1
 800b764:	4659      	mov	r1, fp
 800b766:	eb63 0901 	sbc.w	r9, r3, r1
 800b76a:	f04f 0200 	mov.w	r2, #0
 800b76e:	f04f 0300 	mov.w	r3, #0
 800b772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b77a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b77e:	4690      	mov	r8, r2
 800b780:	4699      	mov	r9, r3
 800b782:	4623      	mov	r3, r4
 800b784:	eb18 0303 	adds.w	r3, r8, r3
 800b788:	60bb      	str	r3, [r7, #8]
 800b78a:	462b      	mov	r3, r5
 800b78c:	eb49 0303 	adc.w	r3, r9, r3
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b79e:	4629      	mov	r1, r5
 800b7a0:	024b      	lsls	r3, r1, #9
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	024a      	lsls	r2, r1, #9
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b7bc:	f7f5 f976 	bl	8000aac <__aeabi_uldivmod>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7c8:	e058      	b.n	800b87c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7ca:	4b38      	ldr	r3, [pc, #224]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	099b      	lsrs	r3, r3, #6
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b7da:	623b      	str	r3, [r7, #32]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	f04f 0000 	mov.w	r0, #0
 800b7ec:	f04f 0100 	mov.w	r1, #0
 800b7f0:	0159      	lsls	r1, r3, #5
 800b7f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b7f6:	0150      	lsls	r0, r2, #5
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	ebb2 0a01 	subs.w	sl, r2, r1
 800b802:	4649      	mov	r1, r9
 800b804:	eb63 0b01 	sbc.w	fp, r3, r1
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b81c:	ebb2 040a 	subs.w	r4, r2, sl
 800b820:	eb63 050b 	sbc.w	r5, r3, fp
 800b824:	f04f 0200 	mov.w	r2, #0
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	00eb      	lsls	r3, r5, #3
 800b82e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b832:	00e2      	lsls	r2, r4, #3
 800b834:	4614      	mov	r4, r2
 800b836:	461d      	mov	r5, r3
 800b838:	4643      	mov	r3, r8
 800b83a:	18e3      	adds	r3, r4, r3
 800b83c:	603b      	str	r3, [r7, #0]
 800b83e:	464b      	mov	r3, r9
 800b840:	eb45 0303 	adc.w	r3, r5, r3
 800b844:	607b      	str	r3, [r7, #4]
 800b846:	f04f 0200 	mov.w	r2, #0
 800b84a:	f04f 0300 	mov.w	r3, #0
 800b84e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b852:	4629      	mov	r1, r5
 800b854:	028b      	lsls	r3, r1, #10
 800b856:	4621      	mov	r1, r4
 800b858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b85c:	4621      	mov	r1, r4
 800b85e:	028a      	lsls	r2, r1, #10
 800b860:	4610      	mov	r0, r2
 800b862:	4619      	mov	r1, r3
 800b864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b866:	2200      	movs	r2, #0
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	61fa      	str	r2, [r7, #28]
 800b86c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b870:	f7f5 f91c 	bl	8000aac <__aeabi_uldivmod>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4613      	mov	r3, r2
 800b87a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b87c:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	0c1b      	lsrs	r3, r3, #16
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	3301      	adds	r3, #1
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b88c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b890:	fbb2 f3f3 	udiv	r3, r2, r3
 800b894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b896:	e002      	b.n	800b89e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b898:	4b05      	ldr	r3, [pc, #20]	@ (800b8b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b89a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b89c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b89e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3750      	adds	r7, #80	@ 0x50
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8aa:	bf00      	nop
 800b8ac:	40023800 	.word	0x40023800
 800b8b0:	00f42400 	.word	0x00f42400
 800b8b4:	007a1200 	.word	0x007a1200

0800b8b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8bc:	4b03      	ldr	r3, [pc, #12]	@ (800b8cc <HAL_RCC_GetHCLKFreq+0x14>)
 800b8be:	681b      	ldr	r3, [r3, #0]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	2000004c 	.word	0x2000004c

0800b8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8d4:	f7ff fff0 	bl	800b8b8 <HAL_RCC_GetHCLKFreq>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	4b05      	ldr	r3, [pc, #20]	@ (800b8f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	0a9b      	lsrs	r3, r3, #10
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	4903      	ldr	r1, [pc, #12]	@ (800b8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8e6:	5ccb      	ldrb	r3, [r1, r3]
 800b8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	40023800 	.word	0x40023800
 800b8f4:	08013870 	.word	0x08013870

0800b8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8fc:	f7ff ffdc 	bl	800b8b8 <HAL_RCC_GetHCLKFreq>
 800b900:	4602      	mov	r2, r0
 800b902:	4b05      	ldr	r3, [pc, #20]	@ (800b918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	0b5b      	lsrs	r3, r3, #13
 800b908:	f003 0307 	and.w	r3, r3, #7
 800b90c:	4903      	ldr	r1, [pc, #12]	@ (800b91c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b90e:	5ccb      	ldrb	r3, [r1, r3]
 800b910:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b914:	4618      	mov	r0, r3
 800b916:	bd80      	pop	{r7, pc}
 800b918:	40023800 	.word	0x40023800
 800b91c:	08013870 	.word	0x08013870

0800b920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	220f      	movs	r2, #15
 800b92e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b930:	4b12      	ldr	r3, [pc, #72]	@ (800b97c <HAL_RCC_GetClockConfig+0x5c>)
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f003 0203 	and.w	r2, r3, #3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b93c:	4b0f      	ldr	r3, [pc, #60]	@ (800b97c <HAL_RCC_GetClockConfig+0x5c>)
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b948:	4b0c      	ldr	r3, [pc, #48]	@ (800b97c <HAL_RCC_GetClockConfig+0x5c>)
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b954:	4b09      	ldr	r3, [pc, #36]	@ (800b97c <HAL_RCC_GetClockConfig+0x5c>)
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	08db      	lsrs	r3, r3, #3
 800b95a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b962:	4b07      	ldr	r3, [pc, #28]	@ (800b980 <HAL_RCC_GetClockConfig+0x60>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 020f 	and.w	r2, r3, #15
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	601a      	str	r2, [r3, #0]
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	40023800 	.word	0x40023800
 800b980:	40023c00 	.word	0x40023c00

0800b984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d012      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b9ac:	4b69      	ldr	r3, [pc, #420]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4a68      	ldr	r2, [pc, #416]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b9b6:	6093      	str	r3, [r2, #8]
 800b9b8:	4b66      	ldr	r3, [pc, #408]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c0:	4964      	ldr	r1, [pc, #400]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d017      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9de:	4b5d      	ldr	r3, [pc, #372]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9ec:	4959      	ldr	r1, [pc, #356]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9fc:	d101      	bne.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d017      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba1a:	4b4e      	ldr	r3, [pc, #312]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba28:	494a      	ldr	r1, [pc, #296]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba38:	d101      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ba56:	2301      	movs	r3, #1
 800ba58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 808b 	beq.w	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba68:	4b3a      	ldr	r3, [pc, #232]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6c:	4a39      	ldr	r2, [pc, #228]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba72:	6413      	str	r3, [r2, #64]	@ 0x40
 800ba74:	4b37      	ldr	r3, [pc, #220]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba7c:	60bb      	str	r3, [r7, #8]
 800ba7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba80:	4b35      	ldr	r3, [pc, #212]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a34      	ldr	r2, [pc, #208]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ba86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba8c:	f7fd fca8 	bl	80093e0 <HAL_GetTick>
 800ba90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ba92:	e008      	b.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba94:	f7fd fca4 	bl	80093e0 <HAL_GetTick>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	2b64      	cmp	r3, #100	@ 0x64
 800baa0:	d901      	bls.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e357      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800baa6:	4b2c      	ldr	r3, [pc, #176]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f0      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bab2:	4b28      	ldr	r3, [pc, #160]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d035      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d02e      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bad0:	4b20      	ldr	r3, [pc, #128]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bad8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bada:	4b1e      	ldr	r3, [pc, #120]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800badc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bade:	4a1d      	ldr	r2, [pc, #116]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bae4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bae6:	4b1b      	ldr	r3, [pc, #108]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baea:	4a1a      	ldr	r2, [pc, #104]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800baf0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800baf2:	4a18      	ldr	r2, [pc, #96]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800baf8:	4b16      	ldr	r3, [pc, #88]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bafa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d114      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb04:	f7fd fc6c 	bl	80093e0 <HAL_GetTick>
 800bb08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb0a:	e00a      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb0c:	f7fd fc68 	bl	80093e0 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d901      	bls.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e319      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb22:	4b0c      	ldr	r3, [pc, #48]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d0ee      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb3a:	d111      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bb3c:	4b05      	ldr	r3, [pc, #20]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bb48:	4b04      	ldr	r3, [pc, #16]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bb4a:	400b      	ands	r3, r1
 800bb4c:	4901      	ldr	r1, [pc, #4]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	608b      	str	r3, [r1, #8]
 800bb52:	e00b      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bb54:	40023800 	.word	0x40023800
 800bb58:	40007000 	.word	0x40007000
 800bb5c:	0ffffcff 	.word	0x0ffffcff
 800bb60:	4baa      	ldr	r3, [pc, #680]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	4aa9      	ldr	r2, [pc, #676]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb66:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bb6a:	6093      	str	r3, [r2, #8]
 800bb6c:	4ba7      	ldr	r3, [pc, #668]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb78:	49a4      	ldr	r1, [pc, #656]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d010      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb8a:	4ba0      	ldr	r3, [pc, #640]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb90:	4a9e      	ldr	r2, [pc, #632]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800bb9a:	4b9c      	ldr	r3, [pc, #624]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bb9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba4:	4999      	ldr	r1, [pc, #612]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bbb8:	4b94      	ldr	r3, [pc, #592]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbc6:	4991      	ldr	r1, [pc, #580]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbda:	4b8c      	ldr	r3, [pc, #560]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbe8:	4988      	ldr	r1, [pc, #544]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bbfc:	4b83      	ldr	r3, [pc, #524]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc0a:	4980      	ldr	r1, [pc, #512]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc1e:	4b7b      	ldr	r3, [pc, #492]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc2c:	4977      	ldr	r1, [pc, #476]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc40:	4b72      	ldr	r3, [pc, #456]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc46:	f023 0203 	bic.w	r2, r3, #3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc4e:	496f      	ldr	r1, [pc, #444]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc62:	4b6a      	ldr	r3, [pc, #424]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc68:	f023 020c 	bic.w	r2, r3, #12
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc70:	4966      	ldr	r1, [pc, #408]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc84:	4b61      	ldr	r3, [pc, #388]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc8a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc92:	495e      	ldr	r1, [pc, #376]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bca6:	4b59      	ldr	r3, [pc, #356]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcb4:	4955      	ldr	r1, [pc, #340]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00a      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bcc8:	4b50      	ldr	r3, [pc, #320]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcd6:	494d      	ldr	r1, [pc, #308]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00a      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bcea:	4b48      	ldr	r3, [pc, #288]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcf8:	4944      	ldr	r1, [pc, #272]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00a      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bd0c:	4b3f      	ldr	r3, [pc, #252]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd1a:	493c      	ldr	r1, [pc, #240]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bd2e:	4b37      	ldr	r3, [pc, #220]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd3c:	4933      	ldr	r1, [pc, #204]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00a      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bd50:	4b2e      	ldr	r3, [pc, #184]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd56:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd5e:	492b      	ldr	r1, [pc, #172]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d011      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bd72:	4b26      	ldr	r3, [pc, #152]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd78:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd80:	4922      	ldr	r1, [pc, #136]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd90:	d101      	bne.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0308 	and.w	r3, r3, #8
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bda2:	2301      	movs	r3, #1
 800bda4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bdb2:	4b16      	ldr	r3, [pc, #88]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdb8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdc0:	4912      	ldr	r1, [pc, #72]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde4:	4909      	ldr	r1, [pc, #36]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bde6:	4313      	orrs	r3, r2
 800bde8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d006      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 80d9 	beq.w	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800be00:	4b02      	ldr	r3, [pc, #8]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a01      	ldr	r2, [pc, #4]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be0a:	e001      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800be0c:	40023800 	.word	0x40023800
 800be10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be12:	f7fd fae5 	bl	80093e0 <HAL_GetTick>
 800be16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be18:	e008      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be1a:	f7fd fae1 	bl	80093e0 <HAL_GetTick>
 800be1e:	4602      	mov	r2, r0
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	2b64      	cmp	r3, #100	@ 0x64
 800be26:	d901      	bls.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	e194      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be2c:	4b6c      	ldr	r3, [pc, #432]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f0      	bne.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d021      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d11d      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800be4c:	4b64      	ldr	r3, [pc, #400]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be52:	0c1b      	lsrs	r3, r3, #16
 800be54:	f003 0303 	and.w	r3, r3, #3
 800be58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800be5a:	4b61      	ldr	r3, [pc, #388]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be60:	0e1b      	lsrs	r3, r3, #24
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	019a      	lsls	r2, r3, #6
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	041b      	lsls	r3, r3, #16
 800be72:	431a      	orrs	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	061b      	lsls	r3, r3, #24
 800be78:	431a      	orrs	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	071b      	lsls	r3, r3, #28
 800be80:	4957      	ldr	r1, [pc, #348]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be82:	4313      	orrs	r3, r2
 800be84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d004      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be9c:	d00a      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d02e      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800beb2:	d129      	bne.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800beb4:	4b4a      	ldr	r3, [pc, #296]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800beb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beba:	0c1b      	lsrs	r3, r3, #16
 800bebc:	f003 0303 	and.w	r3, r3, #3
 800bec0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bec2:	4b47      	ldr	r3, [pc, #284]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bec8:	0f1b      	lsrs	r3, r3, #28
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	019a      	lsls	r2, r3, #6
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	041b      	lsls	r3, r3, #16
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	061b      	lsls	r3, r3, #24
 800bee2:	431a      	orrs	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	071b      	lsls	r3, r3, #28
 800bee8:	493d      	ldr	r1, [pc, #244]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800beea:	4313      	orrs	r3, r2
 800beec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bef0:	4b3b      	ldr	r3, [pc, #236]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bef6:	f023 021f 	bic.w	r2, r3, #31
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	3b01      	subs	r3, #1
 800bf00:	4937      	ldr	r1, [pc, #220]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01d      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bf14:	4b32      	ldr	r3, [pc, #200]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf1a:	0e1b      	lsrs	r3, r3, #24
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf22:	4b2f      	ldr	r3, [pc, #188]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf28:	0f1b      	lsrs	r3, r3, #28
 800bf2a:	f003 0307 	and.w	r3, r3, #7
 800bf2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	019a      	lsls	r2, r3, #6
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	041b      	lsls	r3, r3, #16
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	061b      	lsls	r3, r3, #24
 800bf42:	431a      	orrs	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	071b      	lsls	r3, r3, #28
 800bf48:	4925      	ldr	r1, [pc, #148]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d011      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	019a      	lsls	r2, r3, #6
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	041b      	lsls	r3, r3, #16
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	061b      	lsls	r3, r3, #24
 800bf70:	431a      	orrs	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	071b      	lsls	r3, r3, #28
 800bf78:	4919      	ldr	r1, [pc, #100]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bf80:	4b17      	ldr	r3, [pc, #92]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a16      	ldr	r2, [pc, #88]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf8c:	f7fd fa28 	bl	80093e0 <HAL_GetTick>
 800bf90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf92:	e008      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf94:	f7fd fa24 	bl	80093e0 <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b64      	cmp	r3, #100	@ 0x64
 800bfa0:	d901      	bls.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e0d7      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bfa6:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0f0      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	f040 80cd 	bne.w	800c154 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bfba:	4b09      	ldr	r3, [pc, #36]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a08      	ldr	r2, [pc, #32]	@ (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bfc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc6:	f7fd fa0b 	bl	80093e0 <HAL_GetTick>
 800bfca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bfcc:	e00a      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bfce:	f7fd fa07 	bl	80093e0 <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2b64      	cmp	r3, #100	@ 0x64
 800bfda:	d903      	bls.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e0ba      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bfe0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bfe4:	4b5e      	ldr	r3, [pc, #376]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bfec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bff0:	d0ed      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c002:	2b00      	cmp	r3, #0
 800c004:	d009      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d02e      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c016:	2b00      	cmp	r3, #0
 800c018:	d12a      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c01a:	4b51      	ldr	r3, [pc, #324]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c020:	0c1b      	lsrs	r3, r3, #16
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c028:	4b4d      	ldr	r3, [pc, #308]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c02e:	0f1b      	lsrs	r3, r3, #28
 800c030:	f003 0307 	and.w	r3, r3, #7
 800c034:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	019a      	lsls	r2, r3, #6
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	041b      	lsls	r3, r3, #16
 800c040:	431a      	orrs	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	061b      	lsls	r3, r3, #24
 800c048:	431a      	orrs	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	071b      	lsls	r3, r3, #28
 800c04e:	4944      	ldr	r1, [pc, #272]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c050:	4313      	orrs	r3, r2
 800c052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c056:	4b42      	ldr	r3, [pc, #264]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c05c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c064:	3b01      	subs	r3, #1
 800c066:	021b      	lsls	r3, r3, #8
 800c068:	493d      	ldr	r1, [pc, #244]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d022      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c084:	d11d      	bne.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c086:	4b36      	ldr	r3, [pc, #216]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c08c:	0e1b      	lsrs	r3, r3, #24
 800c08e:	f003 030f 	and.w	r3, r3, #15
 800c092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c094:	4b32      	ldr	r3, [pc, #200]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c09a:	0f1b      	lsrs	r3, r3, #28
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	019a      	lsls	r2, r3, #6
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	041b      	lsls	r3, r3, #16
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	061b      	lsls	r3, r3, #24
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	071b      	lsls	r3, r3, #28
 800c0ba:	4929      	ldr	r1, [pc, #164]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d028      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0ce:	4b24      	ldr	r3, [pc, #144]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0d4:	0e1b      	lsrs	r3, r3, #24
 800c0d6:	f003 030f 	and.w	r3, r3, #15
 800c0da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0dc:	4b20      	ldr	r3, [pc, #128]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0e2:	0c1b      	lsrs	r3, r3, #16
 800c0e4:	f003 0303 	and.w	r3, r3, #3
 800c0e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	019a      	lsls	r2, r3, #6
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	041b      	lsls	r3, r3, #16
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	061b      	lsls	r3, r3, #24
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	071b      	lsls	r3, r3, #28
 800c102:	4917      	ldr	r1, [pc, #92]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c104:	4313      	orrs	r3, r2
 800c106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c10a:	4b15      	ldr	r3, [pc, #84]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c118:	4911      	ldr	r1, [pc, #68]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c120:	4b0f      	ldr	r3, [pc, #60]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a0e      	ldr	r2, [pc, #56]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c12a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c12c:	f7fd f958 	bl	80093e0 <HAL_GetTick>
 800c130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c132:	e008      	b.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c134:	f7fd f954 	bl	80093e0 <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	2b64      	cmp	r3, #100	@ 0x64
 800c140:	d901      	bls.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e007      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c146:	4b06      	ldr	r3, [pc, #24]	@ (800c160 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c14e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c152:	d1ef      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3720      	adds	r7, #32
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	40023800 	.word	0x40023800

0800c164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e09d      	b.n	800c2b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d108      	bne.n	800c190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c186:	d009      	beq.n	800c19c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	61da      	str	r2, [r3, #28]
 800c18e:	e005      	b.n	800c19c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7fc fa8a 	bl	80086d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c1d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c1dc:	d902      	bls.n	800c1e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	e002      	b.n	800c1ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c1e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c1f2:	d007      	beq.n	800c204 <HAL_SPI_Init+0xa0>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c1fc:	d002      	beq.n	800c204 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c214:	431a      	orrs	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	695b      	ldr	r3, [r3, #20]
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	431a      	orrs	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c23c:	431a      	orrs	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c246:	ea42 0103 	orr.w	r1, r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	0c1b      	lsrs	r3, r3, #16
 800c260:	f003 0204 	and.w	r2, r3, #4
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c268:	f003 0310 	and.w	r3, r3, #16
 800c26c:	431a      	orrs	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c272:	f003 0308 	and.w	r3, r3, #8
 800c276:	431a      	orrs	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c280:	ea42 0103 	orr.w	r1, r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69da      	ldr	r2, [r3, #28]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c2a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b088      	sub	sp, #32
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	603b      	str	r3, [r7, #0]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d101      	bne.n	800c2dc <HAL_SPI_Transmit+0x22>
 800c2d8:	2302      	movs	r3, #2
 800c2da:	e158      	b.n	800c58e <HAL_SPI_Transmit+0x2d4>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2e4:	f7fd f87c 	bl	80093e0 <HAL_GetTick>
 800c2e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d002      	beq.n	800c300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2fe:	e13d      	b.n	800c57c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <HAL_SPI_Transmit+0x52>
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c310:	e134      	b.n	800c57c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2203      	movs	r2, #3
 800c316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	88fa      	ldrh	r2, [r7, #6]
 800c32a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	88fa      	ldrh	r2, [r7, #6]
 800c330:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c35c:	d10f      	bne.n	800c37e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c36c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c37c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	d007      	beq.n	800c39c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c39a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c3a4:	d94b      	bls.n	800c43e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <HAL_SPI_Transmit+0xfa>
 800c3ae:	8afb      	ldrh	r3, [r7, #22]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d13e      	bne.n	800c432 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c4:	1c9a      	adds	r2, r3, #2
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c3d8:	e02b      	b.n	800c432 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f003 0302 	and.w	r3, r3, #2
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d112      	bne.n	800c40e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ec:	881a      	ldrh	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f8:	1c9a      	adds	r2, r3, #2
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c402:	b29b      	uxth	r3, r3
 800c404:	3b01      	subs	r3, #1
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c40c:	e011      	b.n	800c432 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c40e:	f7fc ffe7 	bl	80093e0 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d803      	bhi.n	800c426 <HAL_SPI_Transmit+0x16c>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c424:	d102      	bne.n	800c42c <HAL_SPI_Transmit+0x172>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c430:	e0a4      	b.n	800c57c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c436:	b29b      	uxth	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1ce      	bne.n	800c3da <HAL_SPI_Transmit+0x120>
 800c43c:	e07c      	b.n	800c538 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_SPI_Transmit+0x192>
 800c446:	8afb      	ldrh	r3, [r7, #22]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d170      	bne.n	800c52e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c450:	b29b      	uxth	r3, r3
 800c452:	2b01      	cmp	r3, #1
 800c454:	d912      	bls.n	800c47c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c45a:	881a      	ldrh	r2, [r3, #0]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c466:	1c9a      	adds	r2, r3, #2
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c470:	b29b      	uxth	r3, r3
 800c472:	3b02      	subs	r3, #2
 800c474:	b29a      	uxth	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c47a:	e058      	b.n	800c52e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	330c      	adds	r3, #12
 800c486:	7812      	ldrb	r2, [r2, #0]
 800c488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c4a2:	e044      	b.n	800c52e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d12b      	bne.n	800c50a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d912      	bls.n	800c4e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c0:	881a      	ldrh	r2, [r3, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4cc:	1c9a      	adds	r2, r3, #2
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	3b02      	subs	r3, #2
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c4e0:	e025      	b.n	800c52e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	330c      	adds	r3, #12
 800c4ec:	7812      	ldrb	r2, [r2, #0]
 800c4ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	3b01      	subs	r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c508:	e011      	b.n	800c52e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c50a:	f7fc ff69 	bl	80093e0 <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d803      	bhi.n	800c522 <HAL_SPI_Transmit+0x268>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c520:	d102      	bne.n	800c528 <HAL_SPI_Transmit+0x26e>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c528:	2303      	movs	r3, #3
 800c52a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c52c:	e026      	b.n	800c57c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c532:	b29b      	uxth	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1b5      	bne.n	800c4a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c538:	69ba      	ldr	r2, [r7, #24]
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f949 	bl	800c7d4 <SPI_EndRxTxTransaction>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c556:	2300      	movs	r3, #0
 800c558:	613b      	str	r3, [r7, #16]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	613b      	str	r3, [r7, #16]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	613b      	str	r3, [r7, #16]
 800c56a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	77fb      	strb	r3, [r7, #31]
 800c578:	e000      	b.n	800c57c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c57a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c58c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c5a8:	f7fc ff1a 	bl	80093e0 <HAL_GetTick>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b0:	1a9b      	subs	r3, r3, r2
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c5b8:	f7fc ff12 	bl	80093e0 <HAL_GetTick>
 800c5bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c5be:	4b39      	ldr	r3, [pc, #228]	@ (800c6a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	015b      	lsls	r3, r3, #5
 800c5c4:	0d1b      	lsrs	r3, r3, #20
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	fb02 f303 	mul.w	r3, r2, r3
 800c5cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5ce:	e054      	b.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5d6:	d050      	beq.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c5d8:	f7fc ff02 	bl	80093e0 <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d902      	bls.n	800c5ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d13d      	bne.n	800c66a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c5fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c606:	d111      	bne.n	800c62c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c610:	d004      	beq.n	800c61c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c61a:	d107      	bne.n	800c62c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c62a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c634:	d10f      	bne.n	800c656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	e017      	b.n	800c69a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	3b01      	subs	r3, #1
 800c678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4013      	ands	r3, r2
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	bf0c      	ite	eq
 800c68a:	2301      	moveq	r3, #1
 800c68c:	2300      	movne	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	461a      	mov	r2, r3
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	429a      	cmp	r2, r3
 800c696:	d19b      	bne.n	800c5d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	2000004c 	.word	0x2000004c

0800c6a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08a      	sub	sp, #40	@ 0x28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c6ba:	f7fc fe91 	bl	80093e0 <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800c6ca:	f7fc fe89 	bl	80093e0 <HAL_GetTick>
 800c6ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c6d8:	4b3d      	ldr	r3, [pc, #244]	@ (800c7d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00da      	lsls	r2, r3, #3
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	0d1b      	lsrs	r3, r3, #20
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ea:	fb02 f303 	mul.w	r3, r2, r3
 800c6ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c6f0:	e060      	b.n	800c7b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c6f8:	d107      	bne.n	800c70a <SPI_WaitFifoStateUntilTimeout+0x62>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c708:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c710:	d050      	beq.n	800c7b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c712:	f7fc fe65 	bl	80093e0 <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c71e:	429a      	cmp	r2, r3
 800c720:	d902      	bls.n	800c728 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d13d      	bne.n	800c7a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c740:	d111      	bne.n	800c766 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c74a:	d004      	beq.n	800c756 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c754:	d107      	bne.n	800c766 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c76a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c76e:	d10f      	bne.n	800c790 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c77e:	601a      	str	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c78e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e010      	b.n	800c7c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	4013      	ands	r3, r2
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d196      	bne.n	800c6f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3728      	adds	r7, #40	@ 0x28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	2000004c 	.word	0x2000004c

0800c7d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff ff5b 	bl	800c6a8 <SPI_WaitFifoStateUntilTimeout>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d007      	beq.n	800c808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7fc:	f043 0220 	orr.w	r2, r3, #32
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e046      	b.n	800c896 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c808:	4b25      	ldr	r3, [pc, #148]	@ (800c8a0 <SPI_EndRxTxTransaction+0xcc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a25      	ldr	r2, [pc, #148]	@ (800c8a4 <SPI_EndRxTxTransaction+0xd0>)
 800c80e:	fba2 2303 	umull	r2, r3, r2, r3
 800c812:	0d5b      	lsrs	r3, r3, #21
 800c814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c818:	fb02 f303 	mul.w	r3, r2, r3
 800c81c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c826:	d112      	bne.n	800c84e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2200      	movs	r2, #0
 800c830:	2180      	movs	r1, #128	@ 0x80
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff feb0 	bl	800c598 <SPI_WaitFlagStateUntilTimeout>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d016      	beq.n	800c86c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c842:	f043 0220 	orr.w	r2, r3, #32
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e023      	b.n	800c896 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00a      	beq.n	800c86a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	3b01      	subs	r3, #1
 800c858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c864:	2b80      	cmp	r3, #128	@ 0x80
 800c866:	d0f2      	beq.n	800c84e <SPI_EndRxTxTransaction+0x7a>
 800c868:	e000      	b.n	800c86c <SPI_EndRxTxTransaction+0x98>
        break;
 800c86a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f7ff ff15 	bl	800c6a8 <SPI_WaitFifoStateUntilTimeout>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d007      	beq.n	800c894 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c888:	f043 0220 	orr.w	r2, r3, #32
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e000      	b.n	800c896 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3718      	adds	r7, #24
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	2000004c 	.word	0x2000004c
 800c8a4:	165e9f81 	.word	0x165e9f81

0800c8a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d101      	bne.n	800c8ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e049      	b.n	800c94e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7fc f93e 	bl	8008b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f000 fd90 	bl	800d40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
	...

0800c958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d001      	beq.n	800c970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e054      	b.n	800ca1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2202      	movs	r2, #2
 800c974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68da      	ldr	r2, [r3, #12]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f042 0201 	orr.w	r2, r2, #1
 800c986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a26      	ldr	r2, [pc, #152]	@ (800ca28 <HAL_TIM_Base_Start_IT+0xd0>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d022      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c99a:	d01d      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a22      	ldr	r2, [pc, #136]	@ (800ca2c <HAL_TIM_Base_Start_IT+0xd4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d018      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a21      	ldr	r2, [pc, #132]	@ (800ca30 <HAL_TIM_Base_Start_IT+0xd8>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d013      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca34 <HAL_TIM_Base_Start_IT+0xdc>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d00e      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a1e      	ldr	r2, [pc, #120]	@ (800ca38 <HAL_TIM_Base_Start_IT+0xe0>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d009      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca3c <HAL_TIM_Base_Start_IT+0xe4>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d004      	beq.n	800c9d8 <HAL_TIM_Base_Start_IT+0x80>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca40 <HAL_TIM_Base_Start_IT+0xe8>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d115      	bne.n	800ca04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	4b19      	ldr	r3, [pc, #100]	@ (800ca44 <HAL_TIM_Base_Start_IT+0xec>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b06      	cmp	r3, #6
 800c9e8:	d015      	beq.n	800ca16 <HAL_TIM_Base_Start_IT+0xbe>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9f0:	d011      	beq.n	800ca16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f042 0201 	orr.w	r2, r2, #1
 800ca00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca02:	e008      	b.n	800ca16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f042 0201 	orr.w	r2, r2, #1
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	e000      	b.n	800ca18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	40010000 	.word	0x40010000
 800ca2c:	40000400 	.word	0x40000400
 800ca30:	40000800 	.word	0x40000800
 800ca34:	40000c00 	.word	0x40000c00
 800ca38:	40010400 	.word	0x40010400
 800ca3c:	40014000 	.word	0x40014000
 800ca40:	40001800 	.word	0x40001800
 800ca44:	00010007 	.word	0x00010007

0800ca48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e049      	b.n	800caee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fc f826 	bl	8008ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2202      	movs	r2, #2
 800ca78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3304      	adds	r3, #4
 800ca84:	4619      	mov	r1, r3
 800ca86:	4610      	mov	r0, r2
 800ca88:	f000 fcc0 	bl	800d40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d109      	bne.n	800cb1c <HAL_TIM_PWM_Start+0x24>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	bf14      	ite	ne
 800cb14:	2301      	movne	r3, #1
 800cb16:	2300      	moveq	r3, #0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	e03c      	b.n	800cb96 <HAL_TIM_PWM_Start+0x9e>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d109      	bne.n	800cb36 <HAL_TIM_PWM_Start+0x3e>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	bf14      	ite	ne
 800cb2e:	2301      	movne	r3, #1
 800cb30:	2300      	moveq	r3, #0
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	e02f      	b.n	800cb96 <HAL_TIM_PWM_Start+0x9e>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b08      	cmp	r3, #8
 800cb3a:	d109      	bne.n	800cb50 <HAL_TIM_PWM_Start+0x58>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	bf14      	ite	ne
 800cb48:	2301      	movne	r3, #1
 800cb4a:	2300      	moveq	r3, #0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	e022      	b.n	800cb96 <HAL_TIM_PWM_Start+0x9e>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b0c      	cmp	r3, #12
 800cb54:	d109      	bne.n	800cb6a <HAL_TIM_PWM_Start+0x72>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	bf14      	ite	ne
 800cb62:	2301      	movne	r3, #1
 800cb64:	2300      	moveq	r3, #0
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	e015      	b.n	800cb96 <HAL_TIM_PWM_Start+0x9e>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b10      	cmp	r3, #16
 800cb6e:	d109      	bne.n	800cb84 <HAL_TIM_PWM_Start+0x8c>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	e008      	b.n	800cb96 <HAL_TIM_PWM_Start+0x9e>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	bf14      	ite	ne
 800cb90:	2301      	movne	r3, #1
 800cb92:	2300      	moveq	r3, #0
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e092      	b.n	800ccc4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d104      	bne.n	800cbae <HAL_TIM_PWM_Start+0xb6>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2202      	movs	r2, #2
 800cba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cbac:	e023      	b.n	800cbf6 <HAL_TIM_PWM_Start+0xfe>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d104      	bne.n	800cbbe <HAL_TIM_PWM_Start+0xc6>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbbc:	e01b      	b.n	800cbf6 <HAL_TIM_PWM_Start+0xfe>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d104      	bne.n	800cbce <HAL_TIM_PWM_Start+0xd6>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbcc:	e013      	b.n	800cbf6 <HAL_TIM_PWM_Start+0xfe>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b0c      	cmp	r3, #12
 800cbd2:	d104      	bne.n	800cbde <HAL_TIM_PWM_Start+0xe6>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbdc:	e00b      	b.n	800cbf6 <HAL_TIM_PWM_Start+0xfe>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b10      	cmp	r3, #16
 800cbe2:	d104      	bne.n	800cbee <HAL_TIM_PWM_Start+0xf6>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbec:	e003      	b.n	800cbf6 <HAL_TIM_PWM_Start+0xfe>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 ff02 	bl	800da08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a30      	ldr	r2, [pc, #192]	@ (800cccc <HAL_TIM_PWM_Start+0x1d4>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d004      	beq.n	800cc18 <HAL_TIM_PWM_Start+0x120>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a2f      	ldr	r2, [pc, #188]	@ (800ccd0 <HAL_TIM_PWM_Start+0x1d8>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d101      	bne.n	800cc1c <HAL_TIM_PWM_Start+0x124>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e000      	b.n	800cc1e <HAL_TIM_PWM_Start+0x126>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d007      	beq.n	800cc32 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a25      	ldr	r2, [pc, #148]	@ (800cccc <HAL_TIM_PWM_Start+0x1d4>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d022      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc44:	d01d      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a22      	ldr	r2, [pc, #136]	@ (800ccd4 <HAL_TIM_PWM_Start+0x1dc>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d018      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a20      	ldr	r2, [pc, #128]	@ (800ccd8 <HAL_TIM_PWM_Start+0x1e0>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d013      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a1f      	ldr	r2, [pc, #124]	@ (800ccdc <HAL_TIM_PWM_Start+0x1e4>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d00e      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a19      	ldr	r2, [pc, #100]	@ (800ccd0 <HAL_TIM_PWM_Start+0x1d8>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d009      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a1b      	ldr	r2, [pc, #108]	@ (800cce0 <HAL_TIM_PWM_Start+0x1e8>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d004      	beq.n	800cc82 <HAL_TIM_PWM_Start+0x18a>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a19      	ldr	r2, [pc, #100]	@ (800cce4 <HAL_TIM_PWM_Start+0x1ec>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d115      	bne.n	800ccae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689a      	ldr	r2, [r3, #8]
 800cc88:	4b17      	ldr	r3, [pc, #92]	@ (800cce8 <HAL_TIM_PWM_Start+0x1f0>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b06      	cmp	r3, #6
 800cc92:	d015      	beq.n	800ccc0 <HAL_TIM_PWM_Start+0x1c8>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc9a:	d011      	beq.n	800ccc0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccac:	e008      	b.n	800ccc0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f042 0201 	orr.w	r2, r2, #1
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	e000      	b.n	800ccc2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	40010000 	.word	0x40010000
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	40000400 	.word	0x40000400
 800ccd8:	40000800 	.word	0x40000800
 800ccdc:	40000c00 	.word	0x40000c00
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40001800 	.word	0x40001800
 800cce8:	00010007 	.word	0x00010007

0800ccec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e08f      	b.n	800ce20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fb fdf3 	bl	8008900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6899      	ldr	r1, [r3, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	4b3e      	ldr	r3, [pc, #248]	@ (800ce28 <HAL_TIM_Encoder_Init+0x13c>)
 800cd2e:	400b      	ands	r3, r1
 800cd30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3304      	adds	r3, #4
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f000 fb65 	bl	800d40c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	4b31      	ldr	r3, [pc, #196]	@ (800ce2c <HAL_TIM_Encoder_Init+0x140>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	021b      	lsls	r3, r3, #8
 800cd76:	4313      	orrs	r3, r2
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	4b2b      	ldr	r3, [pc, #172]	@ (800ce30 <HAL_TIM_Encoder_Init+0x144>)
 800cd82:	4013      	ands	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	4b2a      	ldr	r3, [pc, #168]	@ (800ce34 <HAL_TIM_Encoder_Init+0x148>)
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	68da      	ldr	r2, [r3, #12]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	021b      	lsls	r3, r3, #8
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	011a      	lsls	r2, r3, #4
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	031b      	lsls	r3, r3, #12
 800cdac:	4313      	orrs	r3, r2
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800cdba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800cdc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	011b      	lsls	r3, r3, #4
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3718      	adds	r7, #24
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	fffebff8 	.word	0xfffebff8
 800ce2c:	fffffcfc 	.word	0xfffffcfc
 800ce30:	fffff3f3 	.word	0xfffff3f3
 800ce34:	ffff0f0f 	.word	0xffff0f0f

0800ce38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ce48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ce50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d110      	bne.n	800ce8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d102      	bne.n	800ce74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ce6e:	7b7b      	ldrb	r3, [r7, #13]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d001      	beq.n	800ce78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e069      	b.n	800cf4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2202      	movs	r2, #2
 800ce84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce88:	e031      	b.n	800ceee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d110      	bne.n	800ceb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d102      	bne.n	800ce9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ce96:	7b3b      	ldrb	r3, [r7, #12]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d001      	beq.n	800cea0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e055      	b.n	800cf4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ceb0:	e01d      	b.n	800ceee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d108      	bne.n	800ceca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d105      	bne.n	800ceca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cebe:	7b7b      	ldrb	r3, [r7, #13]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d102      	bne.n	800ceca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cec4:	7b3b      	ldrb	r3, [r7, #12]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d001      	beq.n	800cece <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e03e      	b.n	800cf4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2202      	movs	r2, #2
 800ced2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2202      	movs	r2, #2
 800ceda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2202      	movs	r2, #2
 800cee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2202      	movs	r2, #2
 800ceea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d003      	beq.n	800cefc <HAL_TIM_Encoder_Start+0xc4>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	2b04      	cmp	r3, #4
 800cef8:	d008      	beq.n	800cf0c <HAL_TIM_Encoder_Start+0xd4>
 800cefa:	e00f      	b.n	800cf1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2201      	movs	r2, #1
 800cf02:	2100      	movs	r1, #0
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 fd7f 	bl	800da08 <TIM_CCxChannelCmd>
      break;
 800cf0a:	e016      	b.n	800cf3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2201      	movs	r2, #1
 800cf12:	2104      	movs	r1, #4
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 fd77 	bl	800da08 <TIM_CCxChannelCmd>
      break;
 800cf1a:	e00e      	b.n	800cf3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2201      	movs	r2, #1
 800cf22:	2100      	movs	r1, #0
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fd6f 	bl	800da08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	2104      	movs	r1, #4
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 fd68 	bl	800da08 <TIM_CCxChannelCmd>
      break;
 800cf38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f042 0201 	orr.w	r2, r2, #1
 800cf48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	f003 0302 	and.w	r3, r3, #2
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d122      	bne.n	800cfb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f003 0302 	and.w	r3, r3, #2
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d11b      	bne.n	800cfb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 0202 	mvn.w	r2, #2
 800cf80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	f003 0303 	and.w	r3, r3, #3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa1a 	bl	800d3d0 <HAL_TIM_IC_CaptureCallback>
 800cf9c:	e005      	b.n	800cfaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fa0c 	bl	800d3bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fa1d 	bl	800d3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	f003 0304 	and.w	r3, r3, #4
 800cfba:	2b04      	cmp	r3, #4
 800cfbc:	d122      	bne.n	800d004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d11b      	bne.n	800d004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f06f 0204 	mvn.w	r2, #4
 800cfd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2202      	movs	r2, #2
 800cfda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d003      	beq.n	800cff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f9f0 	bl	800d3d0 <HAL_TIM_IC_CaptureCallback>
 800cff0:	e005      	b.n	800cffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f9e2 	bl	800d3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f9f3 	bl	800d3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	f003 0308 	and.w	r3, r3, #8
 800d00e:	2b08      	cmp	r3, #8
 800d010:	d122      	bne.n	800d058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f003 0308 	and.w	r3, r3, #8
 800d01c:	2b08      	cmp	r3, #8
 800d01e:	d11b      	bne.n	800d058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f06f 0208 	mvn.w	r2, #8
 800d028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2204      	movs	r2, #4
 800d02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	69db      	ldr	r3, [r3, #28]
 800d036:	f003 0303 	and.w	r3, r3, #3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f9c6 	bl	800d3d0 <HAL_TIM_IC_CaptureCallback>
 800d044:	e005      	b.n	800d052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f9b8 	bl	800d3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f9c9 	bl	800d3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	f003 0310 	and.w	r3, r3, #16
 800d062:	2b10      	cmp	r3, #16
 800d064:	d122      	bne.n	800d0ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	f003 0310 	and.w	r3, r3, #16
 800d070:	2b10      	cmp	r3, #16
 800d072:	d11b      	bne.n	800d0ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f06f 0210 	mvn.w	r2, #16
 800d07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2208      	movs	r2, #8
 800d082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f99c 	bl	800d3d0 <HAL_TIM_IC_CaptureCallback>
 800d098:	e005      	b.n	800d0a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f98e 	bl	800d3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f99f 	bl	800d3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d10e      	bne.n	800d0d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d107      	bne.n	800d0d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f06f 0201 	mvn.w	r2, #1
 800d0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f8 f9f6 	bl	80054c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0e2:	2b80      	cmp	r3, #128	@ 0x80
 800d0e4:	d10e      	bne.n	800d104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f0:	2b80      	cmp	r3, #128	@ 0x80
 800d0f2:	d107      	bne.n	800d104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fd40 	bl	800db84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d10e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d112:	d10e      	bne.n	800d132 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d11e:	2b80      	cmp	r3, #128	@ 0x80
 800d120:	d107      	bne.n	800d132 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fd33 	bl	800db98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13c:	2b40      	cmp	r3, #64	@ 0x40
 800d13e:	d10e      	bne.n	800d15e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d14a:	2b40      	cmp	r3, #64	@ 0x40
 800d14c:	d107      	bne.n	800d15e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f94d 	bl	800d3f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b20      	cmp	r3, #32
 800d16a:	d10e      	bne.n	800d18a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b20      	cmp	r3, #32
 800d178:	d107      	bne.n	800d18a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f06f 0220 	mvn.w	r2, #32
 800d182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fcf3 	bl	800db70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d18a:	bf00      	nop
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d101      	bne.n	800d1b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	e0ff      	b.n	800d3b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b14      	cmp	r3, #20
 800d1be:	f200 80f0 	bhi.w	800d3a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c8:	0800d21d 	.word	0x0800d21d
 800d1cc:	0800d3a3 	.word	0x0800d3a3
 800d1d0:	0800d3a3 	.word	0x0800d3a3
 800d1d4:	0800d3a3 	.word	0x0800d3a3
 800d1d8:	0800d25d 	.word	0x0800d25d
 800d1dc:	0800d3a3 	.word	0x0800d3a3
 800d1e0:	0800d3a3 	.word	0x0800d3a3
 800d1e4:	0800d3a3 	.word	0x0800d3a3
 800d1e8:	0800d29f 	.word	0x0800d29f
 800d1ec:	0800d3a3 	.word	0x0800d3a3
 800d1f0:	0800d3a3 	.word	0x0800d3a3
 800d1f4:	0800d3a3 	.word	0x0800d3a3
 800d1f8:	0800d2df 	.word	0x0800d2df
 800d1fc:	0800d3a3 	.word	0x0800d3a3
 800d200:	0800d3a3 	.word	0x0800d3a3
 800d204:	0800d3a3 	.word	0x0800d3a3
 800d208:	0800d321 	.word	0x0800d321
 800d20c:	0800d3a3 	.word	0x0800d3a3
 800d210:	0800d3a3 	.word	0x0800d3a3
 800d214:	0800d3a3 	.word	0x0800d3a3
 800d218:	0800d361 	.word	0x0800d361
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68b9      	ldr	r1, [r7, #8]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 f992 	bl	800d54c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f042 0208 	orr.w	r2, r2, #8
 800d236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	699a      	ldr	r2, [r3, #24]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f022 0204 	bic.w	r2, r2, #4
 800d246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6999      	ldr	r1, [r3, #24]
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	691a      	ldr	r2, [r3, #16]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	430a      	orrs	r2, r1
 800d258:	619a      	str	r2, [r3, #24]
      break;
 800d25a:	e0a5      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68b9      	ldr	r1, [r7, #8]
 800d262:	4618      	mov	r0, r3
 800d264:	f000 f9e4 	bl	800d630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	699a      	ldr	r2, [r3, #24]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	699a      	ldr	r2, [r3, #24]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6999      	ldr	r1, [r3, #24]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	021a      	lsls	r2, r3, #8
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	430a      	orrs	r2, r1
 800d29a:	619a      	str	r2, [r3, #24]
      break;
 800d29c:	e084      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fa3b 	bl	800d720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69da      	ldr	r2, [r3, #28]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f042 0208 	orr.w	r2, r2, #8
 800d2b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	69da      	ldr	r2, [r3, #28]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f022 0204 	bic.w	r2, r2, #4
 800d2c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	69d9      	ldr	r1, [r3, #28]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	691a      	ldr	r2, [r3, #16]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	61da      	str	r2, [r3, #28]
      break;
 800d2dc:	e064      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fa91 	bl	800d80c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	69da      	ldr	r2, [r3, #28]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	69da      	ldr	r2, [r3, #28]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	69d9      	ldr	r1, [r3, #28]
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	021a      	lsls	r2, r3, #8
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	430a      	orrs	r2, r1
 800d31c:	61da      	str	r2, [r3, #28]
      break;
 800d31e:	e043      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fac8 	bl	800d8bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f042 0208 	orr.w	r2, r2, #8
 800d33a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0204 	bic.w	r2, r2, #4
 800d34a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	691a      	ldr	r2, [r3, #16]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d35e:	e023      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 fafa 	bl	800d960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d37a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d38a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	021a      	lsls	r2, r3, #8
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d3a0:	e002      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800d3a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop

0800d3bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d400:	bf00      	nop
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a40      	ldr	r2, [pc, #256]	@ (800d520 <TIM_Base_SetConfig+0x114>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d013      	beq.n	800d44c <TIM_Base_SetConfig+0x40>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d42a:	d00f      	beq.n	800d44c <TIM_Base_SetConfig+0x40>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a3d      	ldr	r2, [pc, #244]	@ (800d524 <TIM_Base_SetConfig+0x118>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d00b      	beq.n	800d44c <TIM_Base_SetConfig+0x40>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a3c      	ldr	r2, [pc, #240]	@ (800d528 <TIM_Base_SetConfig+0x11c>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d007      	beq.n	800d44c <TIM_Base_SetConfig+0x40>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a3b      	ldr	r2, [pc, #236]	@ (800d52c <TIM_Base_SetConfig+0x120>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d003      	beq.n	800d44c <TIM_Base_SetConfig+0x40>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a3a      	ldr	r2, [pc, #232]	@ (800d530 <TIM_Base_SetConfig+0x124>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d108      	bne.n	800d45e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a2f      	ldr	r2, [pc, #188]	@ (800d520 <TIM_Base_SetConfig+0x114>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d02b      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d46c:	d027      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a2c      	ldr	r2, [pc, #176]	@ (800d524 <TIM_Base_SetConfig+0x118>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d023      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a2b      	ldr	r2, [pc, #172]	@ (800d528 <TIM_Base_SetConfig+0x11c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d01f      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a2a      	ldr	r2, [pc, #168]	@ (800d52c <TIM_Base_SetConfig+0x120>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d01b      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a29      	ldr	r2, [pc, #164]	@ (800d530 <TIM_Base_SetConfig+0x124>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d017      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a28      	ldr	r2, [pc, #160]	@ (800d534 <TIM_Base_SetConfig+0x128>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d013      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a27      	ldr	r2, [pc, #156]	@ (800d538 <TIM_Base_SetConfig+0x12c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00f      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a26      	ldr	r2, [pc, #152]	@ (800d53c <TIM_Base_SetConfig+0x130>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d00b      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a25      	ldr	r2, [pc, #148]	@ (800d540 <TIM_Base_SetConfig+0x134>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d007      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a24      	ldr	r2, [pc, #144]	@ (800d544 <TIM_Base_SetConfig+0x138>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d003      	beq.n	800d4be <TIM_Base_SetConfig+0xb2>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a23      	ldr	r2, [pc, #140]	@ (800d548 <TIM_Base_SetConfig+0x13c>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d108      	bne.n	800d4d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	689a      	ldr	r2, [r3, #8]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a0a      	ldr	r2, [pc, #40]	@ (800d520 <TIM_Base_SetConfig+0x114>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d003      	beq.n	800d504 <TIM_Base_SetConfig+0xf8>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d530 <TIM_Base_SetConfig+0x124>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d103      	bne.n	800d50c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	691a      	ldr	r2, [r3, #16]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	615a      	str	r2, [r3, #20]
}
 800d512:	bf00      	nop
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	40010000 	.word	0x40010000
 800d524:	40000400 	.word	0x40000400
 800d528:	40000800 	.word	0x40000800
 800d52c:	40000c00 	.word	0x40000c00
 800d530:	40010400 	.word	0x40010400
 800d534:	40014000 	.word	0x40014000
 800d538:	40014400 	.word	0x40014400
 800d53c:	40014800 	.word	0x40014800
 800d540:	40001800 	.word	0x40001800
 800d544:	40001c00 	.word	0x40001c00
 800d548:	40002000 	.word	0x40002000

0800d54c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	f023 0201 	bic.w	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d574:	68fa      	ldr	r2, [r7, #12]
 800d576:	4b2b      	ldr	r3, [pc, #172]	@ (800d624 <TIM_OC1_SetConfig+0xd8>)
 800d578:	4013      	ands	r3, r2
 800d57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f023 0303 	bic.w	r3, r3, #3
 800d582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f023 0302 	bic.w	r3, r3, #2
 800d594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a21      	ldr	r2, [pc, #132]	@ (800d628 <TIM_OC1_SetConfig+0xdc>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d003      	beq.n	800d5b0 <TIM_OC1_SetConfig+0x64>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a20      	ldr	r2, [pc, #128]	@ (800d62c <TIM_OC1_SetConfig+0xe0>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d10c      	bne.n	800d5ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f023 0308 	bic.w	r3, r3, #8
 800d5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f023 0304 	bic.w	r3, r3, #4
 800d5c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a16      	ldr	r2, [pc, #88]	@ (800d628 <TIM_OC1_SetConfig+0xdc>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d003      	beq.n	800d5da <TIM_OC1_SetConfig+0x8e>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a15      	ldr	r2, [pc, #84]	@ (800d62c <TIM_OC1_SetConfig+0xe0>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d111      	bne.n	800d5fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	695b      	ldr	r3, [r3, #20]
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	697a      	ldr	r2, [r7, #20]
 800d616:	621a      	str	r2, [r3, #32]
}
 800d618:	bf00      	nop
 800d61a:	371c      	adds	r7, #28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	fffeff8f 	.word	0xfffeff8f
 800d628:	40010000 	.word	0x40010000
 800d62c:	40010400 	.word	0x40010400

0800d630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d630:	b480      	push	{r7}
 800d632:	b087      	sub	sp, #28
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	f023 0210 	bic.w	r2, r3, #16
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6a1b      	ldr	r3, [r3, #32]
 800d64a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	4b2e      	ldr	r3, [pc, #184]	@ (800d714 <TIM_OC2_SetConfig+0xe4>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	4313      	orrs	r3, r2
 800d672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	f023 0320 	bic.w	r3, r3, #32
 800d67a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	4313      	orrs	r3, r2
 800d686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a23      	ldr	r2, [pc, #140]	@ (800d718 <TIM_OC2_SetConfig+0xe8>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d003      	beq.n	800d698 <TIM_OC2_SetConfig+0x68>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a22      	ldr	r2, [pc, #136]	@ (800d71c <TIM_OC2_SetConfig+0xec>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d10d      	bne.n	800d6b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d69e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a18      	ldr	r2, [pc, #96]	@ (800d718 <TIM_OC2_SetConfig+0xe8>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d003      	beq.n	800d6c4 <TIM_OC2_SetConfig+0x94>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a17      	ldr	r2, [pc, #92]	@ (800d71c <TIM_OC2_SetConfig+0xec>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d113      	bne.n	800d6ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d6ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	68fa      	ldr	r2, [r7, #12]
 800d6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	621a      	str	r2, [r3, #32]
}
 800d706:	bf00      	nop
 800d708:	371c      	adds	r7, #28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	feff8fff 	.word	0xfeff8fff
 800d718:	40010000 	.word	0x40010000
 800d71c:	40010400 	.word	0x40010400

0800d720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d720:	b480      	push	{r7}
 800d722:	b087      	sub	sp, #28
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	4b2d      	ldr	r3, [pc, #180]	@ (800d800 <TIM_OC3_SetConfig+0xe0>)
 800d74c:	4013      	ands	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f023 0303 	bic.w	r3, r3, #3
 800d756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	021b      	lsls	r3, r3, #8
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4313      	orrs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a22      	ldr	r2, [pc, #136]	@ (800d804 <TIM_OC3_SetConfig+0xe4>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d003      	beq.n	800d786 <TIM_OC3_SetConfig+0x66>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a21      	ldr	r2, [pc, #132]	@ (800d808 <TIM_OC3_SetConfig+0xe8>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d10d      	bne.n	800d7a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d78c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	021b      	lsls	r3, r3, #8
 800d794:	697a      	ldr	r2, [r7, #20]
 800d796:	4313      	orrs	r3, r2
 800d798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a17      	ldr	r2, [pc, #92]	@ (800d804 <TIM_OC3_SetConfig+0xe4>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d003      	beq.n	800d7b2 <TIM_OC3_SetConfig+0x92>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a16      	ldr	r2, [pc, #88]	@ (800d808 <TIM_OC3_SetConfig+0xe8>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d113      	bne.n	800d7da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d7c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	685a      	ldr	r2, [r3, #4]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	621a      	str	r2, [r3, #32]
}
 800d7f4:	bf00      	nop
 800d7f6:	371c      	adds	r7, #28
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	fffeff8f 	.word	0xfffeff8f
 800d804:	40010000 	.word	0x40010000
 800d808:	40010400 	.word	0x40010400

0800d80c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b087      	sub	sp, #28
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4b1e      	ldr	r3, [pc, #120]	@ (800d8b0 <TIM_OC4_SetConfig+0xa4>)
 800d838:	4013      	ands	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	021b      	lsls	r3, r3, #8
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	031b      	lsls	r3, r3, #12
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	4313      	orrs	r3, r2
 800d862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a13      	ldr	r2, [pc, #76]	@ (800d8b4 <TIM_OC4_SetConfig+0xa8>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d003      	beq.n	800d874 <TIM_OC4_SetConfig+0x68>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a12      	ldr	r2, [pc, #72]	@ (800d8b8 <TIM_OC4_SetConfig+0xac>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d109      	bne.n	800d888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d87a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	695b      	ldr	r3, [r3, #20]
 800d880:	019b      	lsls	r3, r3, #6
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4313      	orrs	r3, r2
 800d886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	685a      	ldr	r2, [r3, #4]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	693a      	ldr	r2, [r7, #16]
 800d8a0:	621a      	str	r2, [r3, #32]
}
 800d8a2:	bf00      	nop
 800d8a4:	371c      	adds	r7, #28
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	feff8fff 	.word	0xfeff8fff
 800d8b4:	40010000 	.word	0x40010000
 800d8b8:	40010400 	.word	0x40010400

0800d8bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	4b1b      	ldr	r3, [pc, #108]	@ (800d954 <TIM_OC5_SetConfig+0x98>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d8fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	041b      	lsls	r3, r3, #16
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	4313      	orrs	r3, r2
 800d908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a12      	ldr	r2, [pc, #72]	@ (800d958 <TIM_OC5_SetConfig+0x9c>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d003      	beq.n	800d91a <TIM_OC5_SetConfig+0x5e>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a11      	ldr	r2, [pc, #68]	@ (800d95c <TIM_OC5_SetConfig+0xa0>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d109      	bne.n	800d92e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	695b      	ldr	r3, [r3, #20]
 800d926:	021b      	lsls	r3, r3, #8
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	697a      	ldr	r2, [r7, #20]
 800d932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	693a      	ldr	r2, [r7, #16]
 800d946:	621a      	str	r2, [r3, #32]
}
 800d948:	bf00      	nop
 800d94a:	371c      	adds	r7, #28
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	fffeff8f 	.word	0xfffeff8f
 800d958:	40010000 	.word	0x40010000
 800d95c:	40010400 	.word	0x40010400

0800d960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d960:	b480      	push	{r7}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6a1b      	ldr	r3, [r3, #32]
 800d96e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	4b1c      	ldr	r3, [pc, #112]	@ (800d9fc <TIM_OC6_SetConfig+0x9c>)
 800d98c:	4013      	ands	r3, r2
 800d98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4313      	orrs	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d9a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	051b      	lsls	r3, r3, #20
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a13      	ldr	r2, [pc, #76]	@ (800da00 <TIM_OC6_SetConfig+0xa0>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d003      	beq.n	800d9c0 <TIM_OC6_SetConfig+0x60>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a12      	ldr	r2, [pc, #72]	@ (800da04 <TIM_OC6_SetConfig+0xa4>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d109      	bne.n	800d9d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	029b      	lsls	r3, r3, #10
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	621a      	str	r2, [r3, #32]
}
 800d9ee:	bf00      	nop
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	feff8fff 	.word	0xfeff8fff
 800da00:	40010000 	.word	0x40010000
 800da04:	40010400 	.word	0x40010400

0800da08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da08:	b480      	push	{r7}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	f003 031f 	and.w	r3, r3, #31
 800da1a:	2201      	movs	r2, #1
 800da1c:	fa02 f303 	lsl.w	r3, r2, r3
 800da20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6a1a      	ldr	r2, [r3, #32]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	43db      	mvns	r3, r3
 800da2a:	401a      	ands	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6a1a      	ldr	r2, [r3, #32]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f003 031f 	and.w	r3, r3, #31
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	fa01 f303 	lsl.w	r3, r1, r3
 800da40:	431a      	orrs	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	621a      	str	r2, [r3, #32]
}
 800da46:	bf00      	nop
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
	...

0800da54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da64:	2b01      	cmp	r3, #1
 800da66:	d101      	bne.n	800da6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da68:	2302      	movs	r3, #2
 800da6a:	e06d      	b.n	800db48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a30      	ldr	r2, [pc, #192]	@ (800db54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d004      	beq.n	800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a2f      	ldr	r2, [pc, #188]	@ (800db58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d108      	bne.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800daa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4313      	orrs	r3, r2
 800dab0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dab8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a20      	ldr	r2, [pc, #128]	@ (800db54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d022      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dade:	d01d      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a1d      	ldr	r2, [pc, #116]	@ (800db5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d018      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a1c      	ldr	r2, [pc, #112]	@ (800db60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d013      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a1a      	ldr	r2, [pc, #104]	@ (800db64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d00e      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a15      	ldr	r2, [pc, #84]	@ (800db58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d009      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a16      	ldr	r2, [pc, #88]	@ (800db68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d004      	beq.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a15      	ldr	r2, [pc, #84]	@ (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d10c      	bne.n	800db36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr
 800db54:	40010000 	.word	0x40010000
 800db58:	40010400 	.word	0x40010400
 800db5c:	40000400 	.word	0x40000400
 800db60:	40000800 	.word	0x40000800
 800db64:	40000c00 	.word	0x40000c00
 800db68:	40014000 	.word	0x40014000
 800db6c:	40001800 	.word	0x40001800

0800db70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e040      	b.n	800dc40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d106      	bne.n	800dbd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7fb f880 	bl	8008cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2224      	movs	r2, #36	@ 0x24
 800dbd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f022 0201 	bic.w	r2, r2, #1
 800dbe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fbe8 	bl	800e3c0 <UART_SetConfig>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d101      	bne.n	800dbfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e022      	b.n	800dc40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fe40 	bl	800e888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	685a      	ldr	r2, [r3, #4]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dc16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	689a      	ldr	r2, [r3, #8]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dc26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f042 0201 	orr.w	r2, r2, #1
 800dc36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fec7 	bl	800e9cc <UART_CheckIdleState>
 800dc3e:	4603      	mov	r3, r0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08a      	sub	sp, #40	@ 0x28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	4613      	mov	r3, r2
 800dc54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d165      	bne.n	800dd2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <HAL_UART_Transmit_DMA+0x22>
 800dc64:	88fb      	ldrh	r3, [r7, #6]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e05e      	b.n	800dd2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	88fa      	ldrh	r2, [r7, #6]
 800dc78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	88fa      	ldrh	r2, [r7, #6]
 800dc80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2221      	movs	r2, #33	@ 0x21
 800dc90:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d027      	beq.n	800dcea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc9e:	4a25      	ldr	r2, [pc, #148]	@ (800dd34 <HAL_UART_Transmit_DMA+0xec>)
 800dca0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dca6:	4a24      	ldr	r2, [pc, #144]	@ (800dd38 <HAL_UART_Transmit_DMA+0xf0>)
 800dca8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcae:	4a23      	ldr	r2, [pc, #140]	@ (800dd3c <HAL_UART_Transmit_DMA+0xf4>)
 800dcb0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3328      	adds	r3, #40	@ 0x28
 800dcca:	461a      	mov	r2, r3
 800dccc:	88fb      	ldrh	r3, [r7, #6]
 800dcce:	f7fc fbc3 	bl	800a458 <HAL_DMA_Start_IT>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d008      	beq.n	800dcea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2210      	movs	r2, #16
 800dcdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2220      	movs	r2, #32
 800dce4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e020      	b.n	800dd2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2240      	movs	r2, #64	@ 0x40
 800dcf0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	613b      	str	r3, [r7, #16]
   return(result);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd08:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd12:	623a      	str	r2, [r7, #32]
 800dd14:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	69f9      	ldr	r1, [r7, #28]
 800dd18:	6a3a      	ldr	r2, [r7, #32]
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e5      	bne.n	800dcf2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e000      	b.n	800dd2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800dd2a:	2302      	movs	r3, #2
  }
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3728      	adds	r7, #40	@ 0x28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	0800ee1d 	.word	0x0800ee1d
 800dd38:	0800eeb3 	.word	0x0800eeb3
 800dd3c:	0800f035 	.word	0x0800f035

0800dd40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08a      	sub	sp, #40	@ 0x28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	d132      	bne.n	800ddbe <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <HAL_UART_Receive_DMA+0x24>
 800dd5e:	88fb      	ldrh	r3, [r7, #6]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e02b      	b.n	800ddc0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d018      	beq.n	800ddae <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	e853 3f00 	ldrex	r3, [r3]
 800dd88:	613b      	str	r3, [r7, #16]
   return(result);
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd90:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9a:	623b      	str	r3, [r7, #32]
 800dd9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9e:	69f9      	ldr	r1, [r7, #28]
 800dda0:	6a3a      	ldr	r2, [r7, #32]
 800dda2:	e841 2300 	strex	r3, r2, [r1]
 800dda6:	61bb      	str	r3, [r7, #24]
   return(result);
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1e6      	bne.n	800dd7c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 ff07 	bl	800ebc8 <UART_Start_Receive_DMA>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	e000      	b.n	800ddc0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ddbe:	2302      	movs	r3, #2
  }
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3728      	adds	r7, #40	@ 0x28
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b0ba      	sub	sp, #232	@ 0xe8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ddf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ddfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de00:	2b00      	cmp	r3, #0
 800de02:	d115      	bne.n	800de30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800de04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de08:	f003 0320 	and.w	r3, r3, #32
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00f      	beq.n	800de30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800de10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de14:	f003 0320 	and.w	r3, r3, #32
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d009      	beq.n	800de30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 8297 	beq.w	800e354 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	4798      	blx	r3
      }
      return;
 800de2e:	e291      	b.n	800e354 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 8117 	beq.w	800e068 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800de3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800de46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800de4a:	4b85      	ldr	r3, [pc, #532]	@ (800e060 <HAL_UART_IRQHandler+0x298>)
 800de4c:	4013      	ands	r3, r2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 810a 	beq.w	800e068 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d011      	beq.n	800de84 <HAL_UART_IRQHandler+0xbc>
 800de60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00b      	beq.n	800de84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2201      	movs	r2, #1
 800de72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de7a:	f043 0201 	orr.w	r2, r3, #1
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de88:	f003 0302 	and.w	r3, r3, #2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d011      	beq.n	800deb4 <HAL_UART_IRQHandler+0xec>
 800de90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00b      	beq.n	800deb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2202      	movs	r2, #2
 800dea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800deaa:	f043 0204 	orr.w	r2, r3, #4
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deb8:	f003 0304 	and.w	r3, r3, #4
 800debc:	2b00      	cmp	r3, #0
 800debe:	d011      	beq.n	800dee4 <HAL_UART_IRQHandler+0x11c>
 800dec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dec4:	f003 0301 	and.w	r3, r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00b      	beq.n	800dee4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2204      	movs	r2, #4
 800ded2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800deda:	f043 0202 	orr.w	r2, r3, #2
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dee8:	f003 0308 	and.w	r3, r3, #8
 800deec:	2b00      	cmp	r3, #0
 800deee:	d017      	beq.n	800df20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800def0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800def4:	f003 0320 	and.w	r3, r3, #32
 800def8:	2b00      	cmp	r3, #0
 800defa:	d105      	bne.n	800df08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800defc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00b      	beq.n	800df20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2208      	movs	r2, #8
 800df0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df16:	f043 0208 	orr.w	r2, r3, #8
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d012      	beq.n	800df52 <HAL_UART_IRQHandler+0x18a>
 800df2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00c      	beq.n	800df52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df48:	f043 0220 	orr.w	r2, r3, #32
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 81fd 	beq.w	800e358 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800df5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df62:	f003 0320 	and.w	r3, r3, #32
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00d      	beq.n	800df86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800df6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df6e:	f003 0320 	and.w	r3, r3, #32
 800df72:	2b00      	cmp	r3, #0
 800df74:	d007      	beq.n	800df86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df9a:	2b40      	cmp	r3, #64	@ 0x40
 800df9c:	d005      	beq.n	800dfaa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d04f      	beq.n	800e04a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fed2 	bl	800ed54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfba:	2b40      	cmp	r3, #64	@ 0x40
 800dfbc:	d141      	bne.n	800e042 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3308      	adds	r3, #8
 800dfc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dfd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dfd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dfea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dfee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dffa:	e841 2300 	strex	r3, r2, [r1]
 800dffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1d9      	bne.n	800dfbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d013      	beq.n	800e03a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e016:	4a13      	ldr	r2, [pc, #76]	@ (800e064 <HAL_UART_IRQHandler+0x29c>)
 800e018:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fc faea 	bl	800a5f8 <HAL_DMA_Abort_IT>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d017      	beq.n	800e05a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e034:	4610      	mov	r0, r2
 800e036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e038:	e00f      	b.n	800e05a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f9aa 	bl	800e394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e040:	e00b      	b.n	800e05a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f9a6 	bl	800e394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e048:	e007      	b.n	800e05a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f9a2 	bl	800e394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e058:	e17e      	b.n	800e358 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e05a:	bf00      	nop
    return;
 800e05c:	e17c      	b.n	800e358 <HAL_UART_IRQHandler+0x590>
 800e05e:	bf00      	nop
 800e060:	04000120 	.word	0x04000120
 800e064:	0800f0b3 	.word	0x0800f0b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	f040 814c 	bne.w	800e30a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e076:	f003 0310 	and.w	r3, r3, #16
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 8145 	beq.w	800e30a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e084:	f003 0310 	and.w	r3, r3, #16
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f000 813e 	beq.w	800e30a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2210      	movs	r2, #16
 800e094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0a0:	2b40      	cmp	r3, #64	@ 0x40
 800e0a2:	f040 80b6 	bne.w	800e212 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e0b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 8150 	beq.w	800e35c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e0c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	f080 8148 	bcs.w	800e35c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e0d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0e0:	f000 8086 	beq.w	800e1f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e0f0:	e853 3f00 	ldrex	r3, [r3]
 800e0f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e0f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e0fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e10e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e112:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e11a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e11e:	e841 2300 	strex	r3, r2, [r1]
 800e122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d1da      	bne.n	800e0e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3308      	adds	r3, #8
 800e134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e138:	e853 3f00 	ldrex	r3, [r3]
 800e13c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e140:	f023 0301 	bic.w	r3, r3, #1
 800e144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3308      	adds	r3, #8
 800e14e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e152:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e156:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e15e:	e841 2300 	strex	r3, r2, [r1]
 800e162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1e1      	bne.n	800e12e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	3308      	adds	r3, #8
 800e170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e174:	e853 3f00 	ldrex	r3, [r3]
 800e178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e17a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e17c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3308      	adds	r3, #8
 800e18a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e18e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e196:	e841 2300 	strex	r3, r2, [r1]
 800e19a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e19c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e3      	bne.n	800e16a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1b8:	e853 3f00 	ldrex	r3, [r3]
 800e1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e1be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1c0:	f023 0310 	bic.w	r3, r3, #16
 800e1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e1d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e1d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1da:	e841 2300 	strex	r3, r2, [r1]
 800e1de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1e4      	bne.n	800e1b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fc f994 	bl	800a518 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e202:	b29b      	uxth	r3, r3
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	b29b      	uxth	r3, r3
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f8cc 	bl	800e3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e210:	e0a4      	b.n	800e35c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e21e:	b29b      	uxth	r3, r3
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 8096 	beq.w	800e360 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800e234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f000 8091 	beq.w	800e360 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e24e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e260:	647b      	str	r3, [r7, #68]	@ 0x44
 800e262:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e268:	e841 2300 	strex	r3, r2, [r1]
 800e26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1e4      	bne.n	800e23e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3308      	adds	r3, #8
 800e27a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	e853 3f00 	ldrex	r3, [r3]
 800e282:	623b      	str	r3, [r7, #32]
   return(result);
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	f023 0301 	bic.w	r3, r3, #1
 800e28a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3308      	adds	r3, #8
 800e294:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e298:	633a      	str	r2, [r7, #48]	@ 0x30
 800e29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a0:	e841 2300 	strex	r3, r2, [r1]
 800e2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1e3      	bne.n	800e274 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2220      	movs	r2, #32
 800e2b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	e853 3f00 	ldrex	r3, [r3]
 800e2cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f023 0310 	bic.w	r3, r3, #16
 800e2d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e2e2:	61fb      	str	r3, [r7, #28]
 800e2e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e6:	69b9      	ldr	r1, [r7, #24]
 800e2e8:	69fa      	ldr	r2, [r7, #28]
 800e2ea:	e841 2300 	strex	r3, r2, [r1]
 800e2ee:	617b      	str	r3, [r7, #20]
   return(result);
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1e4      	bne.n	800e2c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e2fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f850 	bl	800e3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e308:	e02a      	b.n	800e360 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00e      	beq.n	800e334 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d008      	beq.n	800e334 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d01c      	beq.n	800e364 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	4798      	blx	r3
    }
    return;
 800e332:	e017      	b.n	800e364 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d012      	beq.n	800e366 <HAL_UART_IRQHandler+0x59e>
 800e340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00c      	beq.n	800e366 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fec6 	bl	800f0de <UART_EndTransmit_IT>
    return;
 800e352:	e008      	b.n	800e366 <HAL_UART_IRQHandler+0x59e>
      return;
 800e354:	bf00      	nop
 800e356:	e006      	b.n	800e366 <HAL_UART_IRQHandler+0x59e>
    return;
 800e358:	bf00      	nop
 800e35a:	e004      	b.n	800e366 <HAL_UART_IRQHandler+0x59e>
      return;
 800e35c:	bf00      	nop
 800e35e:	e002      	b.n	800e366 <HAL_UART_IRQHandler+0x59e>
      return;
 800e360:	bf00      	nop
 800e362:	e000      	b.n	800e366 <HAL_UART_IRQHandler+0x59e>
    return;
 800e364:	bf00      	nop
  }

}
 800e366:	37e8      	adds	r7, #232	@ 0xe8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	689a      	ldr	r2, [r3, #8]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	431a      	orrs	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	69db      	ldr	r3, [r3, #28]
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	4ba6      	ldr	r3, [pc, #664]	@ (800e684 <UART_SetConfig+0x2c4>)
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	6812      	ldr	r2, [r2, #0]
 800e3f2:	6979      	ldr	r1, [r7, #20]
 800e3f4:	430b      	orrs	r3, r1
 800e3f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68da      	ldr	r2, [r3, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	430a      	orrs	r2, r1
 800e40c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a1b      	ldr	r3, [r3, #32]
 800e418:	697a      	ldr	r2, [r7, #20]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	430a      	orrs	r2, r1
 800e430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a94      	ldr	r2, [pc, #592]	@ (800e688 <UART_SetConfig+0x2c8>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d120      	bne.n	800e47e <UART_SetConfig+0xbe>
 800e43c:	4b93      	ldr	r3, [pc, #588]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e442:	f003 0303 	and.w	r3, r3, #3
 800e446:	2b03      	cmp	r3, #3
 800e448:	d816      	bhi.n	800e478 <UART_SetConfig+0xb8>
 800e44a:	a201      	add	r2, pc, #4	@ (adr r2, 800e450 <UART_SetConfig+0x90>)
 800e44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e450:	0800e461 	.word	0x0800e461
 800e454:	0800e46d 	.word	0x0800e46d
 800e458:	0800e467 	.word	0x0800e467
 800e45c:	0800e473 	.word	0x0800e473
 800e460:	2301      	movs	r3, #1
 800e462:	77fb      	strb	r3, [r7, #31]
 800e464:	e150      	b.n	800e708 <UART_SetConfig+0x348>
 800e466:	2302      	movs	r3, #2
 800e468:	77fb      	strb	r3, [r7, #31]
 800e46a:	e14d      	b.n	800e708 <UART_SetConfig+0x348>
 800e46c:	2304      	movs	r3, #4
 800e46e:	77fb      	strb	r3, [r7, #31]
 800e470:	e14a      	b.n	800e708 <UART_SetConfig+0x348>
 800e472:	2308      	movs	r3, #8
 800e474:	77fb      	strb	r3, [r7, #31]
 800e476:	e147      	b.n	800e708 <UART_SetConfig+0x348>
 800e478:	2310      	movs	r3, #16
 800e47a:	77fb      	strb	r3, [r7, #31]
 800e47c:	e144      	b.n	800e708 <UART_SetConfig+0x348>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a83      	ldr	r2, [pc, #524]	@ (800e690 <UART_SetConfig+0x2d0>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d132      	bne.n	800e4ee <UART_SetConfig+0x12e>
 800e488:	4b80      	ldr	r3, [pc, #512]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e48e:	f003 030c 	and.w	r3, r3, #12
 800e492:	2b0c      	cmp	r3, #12
 800e494:	d828      	bhi.n	800e4e8 <UART_SetConfig+0x128>
 800e496:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <UART_SetConfig+0xdc>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4d1 	.word	0x0800e4d1
 800e4a0:	0800e4e9 	.word	0x0800e4e9
 800e4a4:	0800e4e9 	.word	0x0800e4e9
 800e4a8:	0800e4e9 	.word	0x0800e4e9
 800e4ac:	0800e4dd 	.word	0x0800e4dd
 800e4b0:	0800e4e9 	.word	0x0800e4e9
 800e4b4:	0800e4e9 	.word	0x0800e4e9
 800e4b8:	0800e4e9 	.word	0x0800e4e9
 800e4bc:	0800e4d7 	.word	0x0800e4d7
 800e4c0:	0800e4e9 	.word	0x0800e4e9
 800e4c4:	0800e4e9 	.word	0x0800e4e9
 800e4c8:	0800e4e9 	.word	0x0800e4e9
 800e4cc:	0800e4e3 	.word	0x0800e4e3
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	77fb      	strb	r3, [r7, #31]
 800e4d4:	e118      	b.n	800e708 <UART_SetConfig+0x348>
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	77fb      	strb	r3, [r7, #31]
 800e4da:	e115      	b.n	800e708 <UART_SetConfig+0x348>
 800e4dc:	2304      	movs	r3, #4
 800e4de:	77fb      	strb	r3, [r7, #31]
 800e4e0:	e112      	b.n	800e708 <UART_SetConfig+0x348>
 800e4e2:	2308      	movs	r3, #8
 800e4e4:	77fb      	strb	r3, [r7, #31]
 800e4e6:	e10f      	b.n	800e708 <UART_SetConfig+0x348>
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	77fb      	strb	r3, [r7, #31]
 800e4ec:	e10c      	b.n	800e708 <UART_SetConfig+0x348>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a68      	ldr	r2, [pc, #416]	@ (800e694 <UART_SetConfig+0x2d4>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d120      	bne.n	800e53a <UART_SetConfig+0x17a>
 800e4f8:	4b64      	ldr	r3, [pc, #400]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e502:	2b30      	cmp	r3, #48	@ 0x30
 800e504:	d013      	beq.n	800e52e <UART_SetConfig+0x16e>
 800e506:	2b30      	cmp	r3, #48	@ 0x30
 800e508:	d814      	bhi.n	800e534 <UART_SetConfig+0x174>
 800e50a:	2b20      	cmp	r3, #32
 800e50c:	d009      	beq.n	800e522 <UART_SetConfig+0x162>
 800e50e:	2b20      	cmp	r3, #32
 800e510:	d810      	bhi.n	800e534 <UART_SetConfig+0x174>
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <UART_SetConfig+0x15c>
 800e516:	2b10      	cmp	r3, #16
 800e518:	d006      	beq.n	800e528 <UART_SetConfig+0x168>
 800e51a:	e00b      	b.n	800e534 <UART_SetConfig+0x174>
 800e51c:	2300      	movs	r3, #0
 800e51e:	77fb      	strb	r3, [r7, #31]
 800e520:	e0f2      	b.n	800e708 <UART_SetConfig+0x348>
 800e522:	2302      	movs	r3, #2
 800e524:	77fb      	strb	r3, [r7, #31]
 800e526:	e0ef      	b.n	800e708 <UART_SetConfig+0x348>
 800e528:	2304      	movs	r3, #4
 800e52a:	77fb      	strb	r3, [r7, #31]
 800e52c:	e0ec      	b.n	800e708 <UART_SetConfig+0x348>
 800e52e:	2308      	movs	r3, #8
 800e530:	77fb      	strb	r3, [r7, #31]
 800e532:	e0e9      	b.n	800e708 <UART_SetConfig+0x348>
 800e534:	2310      	movs	r3, #16
 800e536:	77fb      	strb	r3, [r7, #31]
 800e538:	e0e6      	b.n	800e708 <UART_SetConfig+0x348>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a56      	ldr	r2, [pc, #344]	@ (800e698 <UART_SetConfig+0x2d8>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d120      	bne.n	800e586 <UART_SetConfig+0x1c6>
 800e544:	4b51      	ldr	r3, [pc, #324]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e54a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e54e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e550:	d013      	beq.n	800e57a <UART_SetConfig+0x1ba>
 800e552:	2bc0      	cmp	r3, #192	@ 0xc0
 800e554:	d814      	bhi.n	800e580 <UART_SetConfig+0x1c0>
 800e556:	2b80      	cmp	r3, #128	@ 0x80
 800e558:	d009      	beq.n	800e56e <UART_SetConfig+0x1ae>
 800e55a:	2b80      	cmp	r3, #128	@ 0x80
 800e55c:	d810      	bhi.n	800e580 <UART_SetConfig+0x1c0>
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <UART_SetConfig+0x1a8>
 800e562:	2b40      	cmp	r3, #64	@ 0x40
 800e564:	d006      	beq.n	800e574 <UART_SetConfig+0x1b4>
 800e566:	e00b      	b.n	800e580 <UART_SetConfig+0x1c0>
 800e568:	2300      	movs	r3, #0
 800e56a:	77fb      	strb	r3, [r7, #31]
 800e56c:	e0cc      	b.n	800e708 <UART_SetConfig+0x348>
 800e56e:	2302      	movs	r3, #2
 800e570:	77fb      	strb	r3, [r7, #31]
 800e572:	e0c9      	b.n	800e708 <UART_SetConfig+0x348>
 800e574:	2304      	movs	r3, #4
 800e576:	77fb      	strb	r3, [r7, #31]
 800e578:	e0c6      	b.n	800e708 <UART_SetConfig+0x348>
 800e57a:	2308      	movs	r3, #8
 800e57c:	77fb      	strb	r3, [r7, #31]
 800e57e:	e0c3      	b.n	800e708 <UART_SetConfig+0x348>
 800e580:	2310      	movs	r3, #16
 800e582:	77fb      	strb	r3, [r7, #31]
 800e584:	e0c0      	b.n	800e708 <UART_SetConfig+0x348>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a44      	ldr	r2, [pc, #272]	@ (800e69c <UART_SetConfig+0x2dc>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d125      	bne.n	800e5dc <UART_SetConfig+0x21c>
 800e590:	4b3e      	ldr	r3, [pc, #248]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e59e:	d017      	beq.n	800e5d0 <UART_SetConfig+0x210>
 800e5a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e5a4:	d817      	bhi.n	800e5d6 <UART_SetConfig+0x216>
 800e5a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5aa:	d00b      	beq.n	800e5c4 <UART_SetConfig+0x204>
 800e5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5b0:	d811      	bhi.n	800e5d6 <UART_SetConfig+0x216>
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <UART_SetConfig+0x1fe>
 800e5b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5ba:	d006      	beq.n	800e5ca <UART_SetConfig+0x20a>
 800e5bc:	e00b      	b.n	800e5d6 <UART_SetConfig+0x216>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	77fb      	strb	r3, [r7, #31]
 800e5c2:	e0a1      	b.n	800e708 <UART_SetConfig+0x348>
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	77fb      	strb	r3, [r7, #31]
 800e5c8:	e09e      	b.n	800e708 <UART_SetConfig+0x348>
 800e5ca:	2304      	movs	r3, #4
 800e5cc:	77fb      	strb	r3, [r7, #31]
 800e5ce:	e09b      	b.n	800e708 <UART_SetConfig+0x348>
 800e5d0:	2308      	movs	r3, #8
 800e5d2:	77fb      	strb	r3, [r7, #31]
 800e5d4:	e098      	b.n	800e708 <UART_SetConfig+0x348>
 800e5d6:	2310      	movs	r3, #16
 800e5d8:	77fb      	strb	r3, [r7, #31]
 800e5da:	e095      	b.n	800e708 <UART_SetConfig+0x348>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a2f      	ldr	r2, [pc, #188]	@ (800e6a0 <UART_SetConfig+0x2e0>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d125      	bne.n	800e632 <UART_SetConfig+0x272>
 800e5e6:	4b29      	ldr	r3, [pc, #164]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e5f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5f4:	d017      	beq.n	800e626 <UART_SetConfig+0x266>
 800e5f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5fa:	d817      	bhi.n	800e62c <UART_SetConfig+0x26c>
 800e5fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e600:	d00b      	beq.n	800e61a <UART_SetConfig+0x25a>
 800e602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e606:	d811      	bhi.n	800e62c <UART_SetConfig+0x26c>
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d003      	beq.n	800e614 <UART_SetConfig+0x254>
 800e60c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e610:	d006      	beq.n	800e620 <UART_SetConfig+0x260>
 800e612:	e00b      	b.n	800e62c <UART_SetConfig+0x26c>
 800e614:	2301      	movs	r3, #1
 800e616:	77fb      	strb	r3, [r7, #31]
 800e618:	e076      	b.n	800e708 <UART_SetConfig+0x348>
 800e61a:	2302      	movs	r3, #2
 800e61c:	77fb      	strb	r3, [r7, #31]
 800e61e:	e073      	b.n	800e708 <UART_SetConfig+0x348>
 800e620:	2304      	movs	r3, #4
 800e622:	77fb      	strb	r3, [r7, #31]
 800e624:	e070      	b.n	800e708 <UART_SetConfig+0x348>
 800e626:	2308      	movs	r3, #8
 800e628:	77fb      	strb	r3, [r7, #31]
 800e62a:	e06d      	b.n	800e708 <UART_SetConfig+0x348>
 800e62c:	2310      	movs	r3, #16
 800e62e:	77fb      	strb	r3, [r7, #31]
 800e630:	e06a      	b.n	800e708 <UART_SetConfig+0x348>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a1b      	ldr	r2, [pc, #108]	@ (800e6a4 <UART_SetConfig+0x2e4>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d138      	bne.n	800e6ae <UART_SetConfig+0x2ee>
 800e63c:	4b13      	ldr	r3, [pc, #76]	@ (800e68c <UART_SetConfig+0x2cc>)
 800e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e642:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e646:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e64a:	d017      	beq.n	800e67c <UART_SetConfig+0x2bc>
 800e64c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e650:	d82a      	bhi.n	800e6a8 <UART_SetConfig+0x2e8>
 800e652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e656:	d00b      	beq.n	800e670 <UART_SetConfig+0x2b0>
 800e658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e65c:	d824      	bhi.n	800e6a8 <UART_SetConfig+0x2e8>
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <UART_SetConfig+0x2aa>
 800e662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e666:	d006      	beq.n	800e676 <UART_SetConfig+0x2b6>
 800e668:	e01e      	b.n	800e6a8 <UART_SetConfig+0x2e8>
 800e66a:	2300      	movs	r3, #0
 800e66c:	77fb      	strb	r3, [r7, #31]
 800e66e:	e04b      	b.n	800e708 <UART_SetConfig+0x348>
 800e670:	2302      	movs	r3, #2
 800e672:	77fb      	strb	r3, [r7, #31]
 800e674:	e048      	b.n	800e708 <UART_SetConfig+0x348>
 800e676:	2304      	movs	r3, #4
 800e678:	77fb      	strb	r3, [r7, #31]
 800e67a:	e045      	b.n	800e708 <UART_SetConfig+0x348>
 800e67c:	2308      	movs	r3, #8
 800e67e:	77fb      	strb	r3, [r7, #31]
 800e680:	e042      	b.n	800e708 <UART_SetConfig+0x348>
 800e682:	bf00      	nop
 800e684:	efff69f3 	.word	0xefff69f3
 800e688:	40011000 	.word	0x40011000
 800e68c:	40023800 	.word	0x40023800
 800e690:	40004400 	.word	0x40004400
 800e694:	40004800 	.word	0x40004800
 800e698:	40004c00 	.word	0x40004c00
 800e69c:	40005000 	.word	0x40005000
 800e6a0:	40011400 	.word	0x40011400
 800e6a4:	40007800 	.word	0x40007800
 800e6a8:	2310      	movs	r3, #16
 800e6aa:	77fb      	strb	r3, [r7, #31]
 800e6ac:	e02c      	b.n	800e708 <UART_SetConfig+0x348>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a72      	ldr	r2, [pc, #456]	@ (800e87c <UART_SetConfig+0x4bc>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d125      	bne.n	800e704 <UART_SetConfig+0x344>
 800e6b8:	4b71      	ldr	r3, [pc, #452]	@ (800e880 <UART_SetConfig+0x4c0>)
 800e6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e6c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e6c6:	d017      	beq.n	800e6f8 <UART_SetConfig+0x338>
 800e6c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e6cc:	d817      	bhi.n	800e6fe <UART_SetConfig+0x33e>
 800e6ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6d2:	d00b      	beq.n	800e6ec <UART_SetConfig+0x32c>
 800e6d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6d8:	d811      	bhi.n	800e6fe <UART_SetConfig+0x33e>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <UART_SetConfig+0x326>
 800e6de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6e2:	d006      	beq.n	800e6f2 <UART_SetConfig+0x332>
 800e6e4:	e00b      	b.n	800e6fe <UART_SetConfig+0x33e>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	77fb      	strb	r3, [r7, #31]
 800e6ea:	e00d      	b.n	800e708 <UART_SetConfig+0x348>
 800e6ec:	2302      	movs	r3, #2
 800e6ee:	77fb      	strb	r3, [r7, #31]
 800e6f0:	e00a      	b.n	800e708 <UART_SetConfig+0x348>
 800e6f2:	2304      	movs	r3, #4
 800e6f4:	77fb      	strb	r3, [r7, #31]
 800e6f6:	e007      	b.n	800e708 <UART_SetConfig+0x348>
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	77fb      	strb	r3, [r7, #31]
 800e6fc:	e004      	b.n	800e708 <UART_SetConfig+0x348>
 800e6fe:	2310      	movs	r3, #16
 800e700:	77fb      	strb	r3, [r7, #31]
 800e702:	e001      	b.n	800e708 <UART_SetConfig+0x348>
 800e704:	2310      	movs	r3, #16
 800e706:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	69db      	ldr	r3, [r3, #28]
 800e70c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e710:	d15b      	bne.n	800e7ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e712:	7ffb      	ldrb	r3, [r7, #31]
 800e714:	2b08      	cmp	r3, #8
 800e716:	d828      	bhi.n	800e76a <UART_SetConfig+0x3aa>
 800e718:	a201      	add	r2, pc, #4	@ (adr r2, 800e720 <UART_SetConfig+0x360>)
 800e71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71e:	bf00      	nop
 800e720:	0800e745 	.word	0x0800e745
 800e724:	0800e74d 	.word	0x0800e74d
 800e728:	0800e755 	.word	0x0800e755
 800e72c:	0800e76b 	.word	0x0800e76b
 800e730:	0800e75b 	.word	0x0800e75b
 800e734:	0800e76b 	.word	0x0800e76b
 800e738:	0800e76b 	.word	0x0800e76b
 800e73c:	0800e76b 	.word	0x0800e76b
 800e740:	0800e763 	.word	0x0800e763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e744:	f7fd f8c4 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 800e748:	61b8      	str	r0, [r7, #24]
        break;
 800e74a:	e013      	b.n	800e774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e74c:	f7fd f8d4 	bl	800b8f8 <HAL_RCC_GetPCLK2Freq>
 800e750:	61b8      	str	r0, [r7, #24]
        break;
 800e752:	e00f      	b.n	800e774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e754:	4b4b      	ldr	r3, [pc, #300]	@ (800e884 <UART_SetConfig+0x4c4>)
 800e756:	61bb      	str	r3, [r7, #24]
        break;
 800e758:	e00c      	b.n	800e774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e75a:	f7fc ffa7 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800e75e:	61b8      	str	r0, [r7, #24]
        break;
 800e760:	e008      	b.n	800e774 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e766:	61bb      	str	r3, [r7, #24]
        break;
 800e768:	e004      	b.n	800e774 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	77bb      	strb	r3, [r7, #30]
        break;
 800e772:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d074      	beq.n	800e864 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	005a      	lsls	r2, r3, #1
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	085b      	lsrs	r3, r3, #1
 800e784:	441a      	add	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	2b0f      	cmp	r3, #15
 800e794:	d916      	bls.n	800e7c4 <UART_SetConfig+0x404>
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e79c:	d212      	bcs.n	800e7c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f023 030f 	bic.w	r3, r3, #15
 800e7a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	085b      	lsrs	r3, r3, #1
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f003 0307 	and.w	r3, r3, #7
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	89fb      	ldrh	r3, [r7, #14]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	89fa      	ldrh	r2, [r7, #14]
 800e7c0:	60da      	str	r2, [r3, #12]
 800e7c2:	e04f      	b.n	800e864 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	77bb      	strb	r3, [r7, #30]
 800e7c8:	e04c      	b.n	800e864 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7ca:	7ffb      	ldrb	r3, [r7, #31]
 800e7cc:	2b08      	cmp	r3, #8
 800e7ce:	d828      	bhi.n	800e822 <UART_SetConfig+0x462>
 800e7d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d8 <UART_SetConfig+0x418>)
 800e7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d6:	bf00      	nop
 800e7d8:	0800e7fd 	.word	0x0800e7fd
 800e7dc:	0800e805 	.word	0x0800e805
 800e7e0:	0800e80d 	.word	0x0800e80d
 800e7e4:	0800e823 	.word	0x0800e823
 800e7e8:	0800e813 	.word	0x0800e813
 800e7ec:	0800e823 	.word	0x0800e823
 800e7f0:	0800e823 	.word	0x0800e823
 800e7f4:	0800e823 	.word	0x0800e823
 800e7f8:	0800e81b 	.word	0x0800e81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7fc:	f7fd f868 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 800e800:	61b8      	str	r0, [r7, #24]
        break;
 800e802:	e013      	b.n	800e82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e804:	f7fd f878 	bl	800b8f8 <HAL_RCC_GetPCLK2Freq>
 800e808:	61b8      	str	r0, [r7, #24]
        break;
 800e80a:	e00f      	b.n	800e82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e80c:	4b1d      	ldr	r3, [pc, #116]	@ (800e884 <UART_SetConfig+0x4c4>)
 800e80e:	61bb      	str	r3, [r7, #24]
        break;
 800e810:	e00c      	b.n	800e82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e812:	f7fc ff4b 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800e816:	61b8      	str	r0, [r7, #24]
        break;
 800e818:	e008      	b.n	800e82c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e81e:	61bb      	str	r3, [r7, #24]
        break;
 800e820:	e004      	b.n	800e82c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e822:	2300      	movs	r3, #0
 800e824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	77bb      	strb	r3, [r7, #30]
        break;
 800e82a:	bf00      	nop
    }

    if (pclk != 0U)
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d018      	beq.n	800e864 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	085a      	lsrs	r2, r3, #1
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	441a      	add	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	fbb2 f3f3 	udiv	r3, r2, r3
 800e844:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	2b0f      	cmp	r3, #15
 800e84a:	d909      	bls.n	800e860 <UART_SetConfig+0x4a0>
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e852:	d205      	bcs.n	800e860 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	b29a      	uxth	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	60da      	str	r2, [r3, #12]
 800e85e:	e001      	b.n	800e864 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e870:	7fbb      	ldrb	r3, [r7, #30]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40007c00 	.word	0x40007c00
 800e880:	40023800 	.word	0x40023800
 800e884:	00f42400 	.word	0x00f42400

0800e888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00a      	beq.n	800e8b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b6:	f003 0302 	and.w	r3, r3, #2
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00a      	beq.n	800e8d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d8:	f003 0304 	and.w	r3, r3, #4
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00a      	beq.n	800e8f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8fa:	f003 0308 	and.w	r3, r3, #8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00a      	beq.n	800e918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	430a      	orrs	r2, r1
 800e916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91c:	f003 0310 	and.w	r3, r3, #16
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00a      	beq.n	800e93a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	430a      	orrs	r2, r1
 800e938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93e:	f003 0320 	and.w	r3, r3, #32
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00a      	beq.n	800e95c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	430a      	orrs	r2, r1
 800e95a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01a      	beq.n	800e99e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	430a      	orrs	r2, r1
 800e97c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e986:	d10a      	bne.n	800e99e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	430a      	orrs	r2, r1
 800e99c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00a      	beq.n	800e9c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	605a      	str	r2, [r3, #4]
  }
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af02      	add	r7, sp, #8
 800e9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e9dc:	f7fa fd00 	bl	80093e0 <HAL_GetTick>
 800e9e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f003 0308 	and.w	r3, r3, #8
 800e9ec:	2b08      	cmp	r3, #8
 800e9ee:	d10e      	bne.n	800ea0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f81b 	bl	800ea3a <UART_WaitOnFlagUntilTimeout>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	e011      	b.n	800ea32 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2220      	movs	r2, #32
 800ea12:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2220      	movs	r2, #32
 800ea18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b09c      	sub	sp, #112	@ 0x70
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	60f8      	str	r0, [r7, #12]
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	603b      	str	r3, [r7, #0]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea4a:	e0a7      	b.n	800eb9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea52:	f000 80a3 	beq.w	800eb9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea56:	f7fa fcc3 	bl	80093e0 <HAL_GetTick>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d302      	bcc.n	800ea6c <UART_WaitOnFlagUntilTimeout+0x32>
 800ea66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d13f      	bne.n	800eaec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea74:	e853 3f00 	ldrex	r3, [r3]
 800ea78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ea7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea7c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ea80:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	461a      	mov	r2, r3
 800ea88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea8c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea92:	e841 2300 	strex	r3, r2, [r1]
 800ea96:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ea98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1e6      	bne.n	800ea6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaa8:	e853 3f00 	ldrex	r3, [r3]
 800eaac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab0:	f023 0301 	bic.w	r3, r3, #1
 800eab4:	663b      	str	r3, [r7, #96]	@ 0x60
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eabe:	64ba      	str	r2, [r7, #72]	@ 0x48
 800eac0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eac6:	e841 2300 	strex	r3, r2, [r1]
 800eaca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1e5      	bne.n	800ea9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2220      	movs	r2, #32
 800ead6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800eae8:	2303      	movs	r3, #3
 800eaea:	e068      	b.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0304 	and.w	r3, r3, #4
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d050      	beq.n	800eb9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	69db      	ldr	r3, [r3, #28]
 800eb00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb08:	d148      	bne.n	800eb9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1c:	e853 3f00 	ldrex	r3, [r3]
 800eb20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb24:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800eb28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb32:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb3a:	e841 2300 	strex	r3, r2, [r1]
 800eb3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1e6      	bne.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	e853 3f00 	ldrex	r3, [r3]
 800eb54:	613b      	str	r3, [r7, #16]
   return(result);
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	f023 0301 	bic.w	r3, r3, #1
 800eb5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3308      	adds	r3, #8
 800eb64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800eb66:	623a      	str	r2, [r7, #32]
 800eb68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6a:	69f9      	ldr	r1, [r7, #28]
 800eb6c:	6a3a      	ldr	r2, [r7, #32]
 800eb6e:	e841 2300 	strex	r3, r2, [r1]
 800eb72:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e5      	bne.n	800eb46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2220      	movs	r2, #32
 800eb7e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2220      	movs	r2, #32
 800eb84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	e010      	b.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	69da      	ldr	r2, [r3, #28]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	4013      	ands	r3, r2
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	bf0c      	ite	eq
 800ebac:	2301      	moveq	r3, #1
 800ebae:	2300      	movne	r3, #0
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	79fb      	ldrb	r3, [r7, #7]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	f43f af48 	beq.w	800ea4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3770      	adds	r7, #112	@ 0x70
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
	...

0800ebc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b096      	sub	sp, #88	@ 0x58
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	88fa      	ldrh	r2, [r7, #6]
 800ebe0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2222      	movs	r2, #34	@ 0x22
 800ebf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d028      	beq.n	800ec4e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec00:	4a3e      	ldr	r2, [pc, #248]	@ (800ecfc <UART_Start_Receive_DMA+0x134>)
 800ec02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec08:	4a3d      	ldr	r2, [pc, #244]	@ (800ed00 <UART_Start_Receive_DMA+0x138>)
 800ec0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec10:	4a3c      	ldr	r2, [pc, #240]	@ (800ed04 <UART_Start_Receive_DMA+0x13c>)
 800ec12:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec18:	2200      	movs	r2, #0
 800ec1a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3324      	adds	r3, #36	@ 0x24
 800ec26:	4619      	mov	r1, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	88fb      	ldrh	r3, [r7, #6]
 800ec30:	f7fb fc12 	bl	800a458 <HAL_DMA_Start_IT>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2210      	movs	r2, #16
 800ec3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2220      	movs	r2, #32
 800ec46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e051      	b.n	800ecf2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d018      	beq.n	800ec88 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec5e:	e853 3f00 	ldrex	r3, [r3]
 800ec62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	461a      	mov	r2, r3
 800ec72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec7c:	e841 2300 	strex	r3, r2, [r1]
 800ec80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ec82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1e6      	bne.n	800ec56 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec92:	e853 3f00 	ldrex	r3, [r3]
 800ec96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9a:	f043 0301 	orr.w	r3, r3, #1
 800ec9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3308      	adds	r3, #8
 800eca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eca8:	637a      	str	r2, [r7, #52]	@ 0x34
 800ecaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ecae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ecb0:	e841 2300 	strex	r3, r2, [r1]
 800ecb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ecb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d1e5      	bne.n	800ec88 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3308      	adds	r3, #8
 800ecc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	e853 3f00 	ldrex	r3, [r3]
 800ecca:	613b      	str	r3, [r7, #16]
   return(result);
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecdc:	623a      	str	r2, [r7, #32]
 800ecde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece0:	69f9      	ldr	r1, [r7, #28]
 800ece2:	6a3a      	ldr	r2, [r7, #32]
 800ece4:	e841 2300 	strex	r3, r2, [r1]
 800ece8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1e5      	bne.n	800ecbc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3758      	adds	r7, #88	@ 0x58
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	0800eecf 	.word	0x0800eecf
 800ed00:	0800eff7 	.word	0x0800eff7
 800ed04:	0800f035 	.word	0x0800f035

0800ed08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b089      	sub	sp, #36	@ 0x24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	e853 3f00 	ldrex	r3, [r3]
 800ed1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	61bb      	str	r3, [r7, #24]
 800ed30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	6979      	ldr	r1, [r7, #20]
 800ed34:	69ba      	ldr	r2, [r7, #24]
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e6      	bne.n	800ed10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2220      	movs	r2, #32
 800ed46:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ed48:	bf00      	nop
 800ed4a:	3724      	adds	r7, #36	@ 0x24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b095      	sub	sp, #84	@ 0x54
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed64:	e853 3f00 	ldrex	r3, [r3]
 800ed68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed82:	e841 2300 	strex	r3, r2, [r1]
 800ed86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e6      	bne.n	800ed5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3308      	adds	r3, #8
 800ed94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	f023 0301 	bic.w	r3, r3, #1
 800eda4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3308      	adds	r3, #8
 800edac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800edb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800edbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e5      	bne.n	800ed8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d118      	bne.n	800edfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	e853 3f00 	ldrex	r3, [r3]
 800edd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f023 0310 	bic.w	r3, r3, #16
 800edde:	647b      	str	r3, [r7, #68]	@ 0x44
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	461a      	mov	r2, r3
 800ede6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edec:	6979      	ldr	r1, [r7, #20]
 800edee:	69ba      	ldr	r2, [r7, #24]
 800edf0:	e841 2300 	strex	r3, r2, [r1]
 800edf4:	613b      	str	r3, [r7, #16]
   return(result);
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1e6      	bne.n	800edca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2220      	movs	r2, #32
 800ee00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ee10:	bf00      	nop
 800ee12:	3754      	adds	r7, #84	@ 0x54
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b090      	sub	sp, #64	@ 0x40
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee28:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	69db      	ldr	r3, [r3, #28]
 800ee2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee32:	d037      	beq.n	800eea4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ee34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee36:	2200      	movs	r2, #0
 800ee38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3308      	adds	r3, #8
 800ee42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee46:	e853 3f00 	ldrex	r3, [r3]
 800ee4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ee4c:	6a3b      	ldr	r3, [r7, #32]
 800ee4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee64:	e841 2300 	strex	r3, r2, [r1]
 800ee68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1e5      	bne.n	800ee3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	e853 3f00 	ldrex	r3, [r3]
 800ee7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8e:	61fb      	str	r3, [r7, #28]
 800ee90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	69b9      	ldr	r1, [r7, #24]
 800ee94:	69fa      	ldr	r2, [r7, #28]
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1e6      	bne.n	800ee70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eea2:	e002      	b.n	800eeaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800eea4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800eea6:	f7f7 faa9 	bl	80063fc <HAL_UART_TxCpltCallback>
}
 800eeaa:	bf00      	nop
 800eeac:	3740      	adds	r7, #64	@ 0x40
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eebe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff fa53 	bl	800e36c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eec6:	bf00      	nop
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b09c      	sub	sp, #112	@ 0x70
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeda:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eee4:	d071      	beq.n	800efca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800eee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eee8:	2200      	movs	r2, #0
 800eeea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eeee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eef6:	e853 3f00 	ldrex	r3, [r3]
 800eefa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eefc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eefe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef0e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef14:	e841 2300 	strex	r3, r2, [r1]
 800ef18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ef1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1e6      	bne.n	800eeee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3308      	adds	r3, #8
 800ef26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2a:	e853 3f00 	ldrex	r3, [r3]
 800ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef32:	f023 0301 	bic.w	r3, r3, #1
 800ef36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ef40:	647a      	str	r2, [r7, #68]	@ 0x44
 800ef42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef48:	e841 2300 	strex	r3, r2, [r1]
 800ef4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1e5      	bne.n	800ef20 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3308      	adds	r3, #8
 800ef5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5e:	e853 3f00 	ldrex	r3, [r3]
 800ef62:	623b      	str	r3, [r7, #32]
   return(result);
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef6a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3308      	adds	r3, #8
 800ef72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef74:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef7c:	e841 2300 	strex	r3, r2, [r1]
 800ef80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d1e5      	bne.n	800ef54 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ef88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef8a:	2220      	movs	r2, #32
 800ef8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d118      	bne.n	800efca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	e853 3f00 	ldrex	r3, [r3]
 800efa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f023 0310 	bic.w	r3, r3, #16
 800efac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	461a      	mov	r2, r3
 800efb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efb6:	61fb      	str	r3, [r7, #28]
 800efb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efba:	69b9      	ldr	r1, [r7, #24]
 800efbc:	69fa      	ldr	r2, [r7, #28]
 800efbe:	e841 2300 	strex	r3, r2, [r1]
 800efc2:	617b      	str	r3, [r7, #20]
   return(result);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e6      	bne.n	800ef98 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efcc:	2200      	movs	r2, #0
 800efce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d107      	bne.n	800efe8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800efde:	4619      	mov	r1, r3
 800efe0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800efe2:	f7ff f9e1 	bl	800e3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800efe6:	e002      	b.n	800efee <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800efe8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800efea:	f7f7 fa23 	bl	8006434 <HAL_UART_RxCpltCallback>
}
 800efee:	bf00      	nop
 800eff0:	3770      	adds	r7, #112	@ 0x70
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f002:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d109      	bne.n	800f026 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f018:	085b      	lsrs	r3, r3, #1
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4619      	mov	r1, r3
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff f9c2 	bl	800e3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f024:	e002      	b.n	800f02c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f7ff f9aa 	bl	800e380 <HAL_UART_RxHalfCpltCallback>
}
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f040:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f046:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f04e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f05a:	2b80      	cmp	r3, #128	@ 0x80
 800f05c:	d109      	bne.n	800f072 <UART_DMAError+0x3e>
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	2b21      	cmp	r3, #33	@ 0x21
 800f062:	d106      	bne.n	800f072 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	2200      	movs	r2, #0
 800f068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f06c:	6978      	ldr	r0, [r7, #20]
 800f06e:	f7ff fe4b 	bl	800ed08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f07c:	2b40      	cmp	r3, #64	@ 0x40
 800f07e:	d109      	bne.n	800f094 <UART_DMAError+0x60>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2b22      	cmp	r3, #34	@ 0x22
 800f084:	d106      	bne.n	800f094 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f08e:	6978      	ldr	r0, [r7, #20]
 800f090:	f7ff fe60 	bl	800ed54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f09a:	f043 0210 	orr.w	r2, r3, #16
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0a4:	6978      	ldr	r0, [r7, #20]
 800f0a6:	f7ff f975 	bl	800e394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0aa:	bf00      	nop
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b084      	sub	sp, #16
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f7ff f95f 	bl	800e394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b088      	sub	sp, #32
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	e853 3f00 	ldrex	r3, [r3]
 800f0f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0fa:	61fb      	str	r3, [r7, #28]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	461a      	mov	r2, r3
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	61bb      	str	r3, [r7, #24]
 800f106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6979      	ldr	r1, [r7, #20]
 800f10a:	69ba      	ldr	r2, [r7, #24]
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	613b      	str	r3, [r7, #16]
   return(result);
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e6      	bne.n	800f0e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2220      	movs	r2, #32
 800f11c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7f7 f969 	bl	80063fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f12a:	bf00      	nop
 800f12c:	3720      	adds	r7, #32
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f132:	b480      	push	{r7}
 800f134:	b085      	sub	sp, #20
 800f136:	af00      	add	r7, sp, #0
 800f138:	4603      	mov	r3, r0
 800f13a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f13c:	2300      	movs	r3, #0
 800f13e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f144:	2b84      	cmp	r3, #132	@ 0x84
 800f146:	d005      	beq.n	800f154 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f148:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4413      	add	r3, r2
 800f150:	3303      	adds	r3, #3
 800f152:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f154:	68fb      	ldr	r3, [r7, #12]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f166:	f000 faef 	bl	800f748 <vTaskStartScheduler>
  
  return osOK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f172:	b089      	sub	sp, #36	@ 0x24
 800f174:	af04      	add	r7, sp, #16
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d020      	beq.n	800f1c4 <osThreadCreate+0x54>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d01c      	beq.n	800f1c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685c      	ldr	r4, [r3, #4]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	691e      	ldr	r6, [r3, #16]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7ff ffc8 	bl	800f132 <makeFreeRtosPriority>
 800f1a2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1ac:	9202      	str	r2, [sp, #8]
 800f1ae:	9301      	str	r3, [sp, #4]
 800f1b0:	9100      	str	r1, [sp, #0]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 f8ed 	bl	800f398 <xTaskCreateStatic>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	60fb      	str	r3, [r7, #12]
 800f1c2:	e01c      	b.n	800f1fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685c      	ldr	r4, [r3, #4]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1d0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff ffaa 	bl	800f132 <makeFreeRtosPriority>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	f107 030c 	add.w	r3, r7, #12
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	9200      	str	r2, [sp, #0]
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	4632      	mov	r2, r6
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 f938 	bl	800f464 <xTaskCreate>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d001      	beq.n	800f1fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e000      	b.n	800f200 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f208 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <osDelay+0x16>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	e000      	b.n	800f220 <osDelay+0x18>
 800f21e:	2301      	movs	r3, #1
 800f220:	4618      	mov	r0, r3
 800f222:	f000 fa59 	bl	800f6d8 <vTaskDelay>
  
  return osOK;
 800f226:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f103 0208 	add.w	r2, r3, #8
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f103 0208 	add.w	r2, r3, #8
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f103 0208 	add.w	r2, r3, #8
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f27e:	bf00      	nop
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f28a:	b480      	push	{r7}
 800f28c:	b085      	sub	sp, #20
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	601a      	str	r2, [r3, #0]
}
 800f2c6:	bf00      	nop
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b085      	sub	sp, #20
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
 800f2da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2e8:	d103      	bne.n	800f2f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	e00c      	b.n	800f30c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	e002      	b.n	800f300 <vListInsert+0x2e>
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d2f6      	bcs.n	800f2fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	685a      	ldr	r2, [r3, #4]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	1c5a      	adds	r2, r3, #1
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	601a      	str	r2, [r3, #0]
}
 800f338:	bf00      	nop
 800f33a:	3714      	adds	r7, #20
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	691b      	ldr	r3, [r3, #16]
 800f350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	6892      	ldr	r2, [r2, #8]
 800f35a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	6852      	ldr	r2, [r2, #4]
 800f364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d103      	bne.n	800f378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	689a      	ldr	r2, [r3, #8]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	1e5a      	subs	r2, r3, #1
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08e      	sub	sp, #56	@ 0x38
 800f39c:	af04      	add	r7, sp, #16
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10d      	bne.n	800f3c8 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b0:	b672      	cpsid	i
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	b662      	cpsie	i
 800f3c0:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3c2:	bf00      	nop
 800f3c4:	bf00      	nop
 800f3c6:	e7fd      	b.n	800f3c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10d      	bne.n	800f3ea <xTaskCreateStatic+0x52>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	b672      	cpsid	i
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	b662      	cpsie	i
 800f3e2:	61fb      	str	r3, [r7, #28]
}
 800f3e4:	bf00      	nop
 800f3e6:	bf00      	nop
 800f3e8:	e7fd      	b.n	800f3e6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f3ea:	2354      	movs	r3, #84	@ 0x54
 800f3ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	2b54      	cmp	r3, #84	@ 0x54
 800f3f2:	d00d      	beq.n	800f410 <xTaskCreateStatic+0x78>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f8:	b672      	cpsid	i
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	b662      	cpsie	i
 800f408:	61bb      	str	r3, [r7, #24]
}
 800f40a:	bf00      	nop
 800f40c:	bf00      	nop
 800f40e:	e7fd      	b.n	800f40c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f410:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f414:	2b00      	cmp	r3, #0
 800f416:	d01e      	beq.n	800f456 <xTaskCreateStatic+0xbe>
 800f418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d01b      	beq.n	800f456 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f420:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f426:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42a:	2202      	movs	r2, #2
 800f42c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f430:	2300      	movs	r3, #0
 800f432:	9303      	str	r3, [sp, #12]
 800f434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f436:	9302      	str	r3, [sp, #8]
 800f438:	f107 0314 	add.w	r3, r7, #20
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f000 f850 	bl	800f4ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f44e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f450:	f000 f8d8 	bl	800f604 <prvAddNewTaskToReadyList>
 800f454:	e001      	b.n	800f45a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f45a:	697b      	ldr	r3, [r7, #20]
	}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3728      	adds	r7, #40	@ 0x28
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08c      	sub	sp, #48	@ 0x30
 800f468:	af04      	add	r7, sp, #16
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	4613      	mov	r3, r2
 800f472:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f474:	88fb      	ldrh	r3, [r7, #6]
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4618      	mov	r0, r3
 800f47a:	f000 fec7 	bl	801020c <pvPortMalloc>
 800f47e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d00e      	beq.n	800f4a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f486:	2054      	movs	r0, #84	@ 0x54
 800f488:	f000 fec0 	bl	801020c <pvPortMalloc>
 800f48c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d003      	beq.n	800f49c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	697a      	ldr	r2, [r7, #20]
 800f498:	631a      	str	r2, [r3, #48]	@ 0x30
 800f49a:	e005      	b.n	800f4a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f49c:	6978      	ldr	r0, [r7, #20]
 800f49e:	f000 ff83 	bl	80103a8 <vPortFree>
 800f4a2:	e001      	b.n	800f4a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d017      	beq.n	800f4de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f4b6:	88fa      	ldrh	r2, [r7, #6]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	9303      	str	r3, [sp, #12]
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	9302      	str	r3, [sp, #8]
 800f4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 f80e 	bl	800f4ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4d2:	69f8      	ldr	r0, [r7, #28]
 800f4d4:	f000 f896 	bl	800f604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	e002      	b.n	800f4e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f4de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f4e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f4e4:	69bb      	ldr	r3, [r7, #24]
	}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3720      	adds	r7, #32
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b088      	sub	sp, #32
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	60f8      	str	r0, [r7, #12]
 800f4f6:	60b9      	str	r1, [r7, #8]
 800f4f8:	607a      	str	r2, [r7, #4]
 800f4fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f506:	440b      	add	r3, r1
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	f023 0307 	bic.w	r3, r3, #7
 800f514:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	f003 0307 	and.w	r3, r3, #7
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00d      	beq.n	800f53c <prvInitialiseNewTask+0x4e>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f524:	b672      	cpsid	i
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	b662      	cpsie	i
 800f534:	617b      	str	r3, [r7, #20]
}
 800f536:	bf00      	nop
 800f538:	bf00      	nop
 800f53a:	e7fd      	b.n	800f538 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d01f      	beq.n	800f582 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f542:	2300      	movs	r3, #0
 800f544:	61fb      	str	r3, [r7, #28]
 800f546:	e012      	b.n	800f56e <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f548:	68ba      	ldr	r2, [r7, #8]
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	4413      	add	r3, r2
 800f54e:	7819      	ldrb	r1, [r3, #0]
 800f550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	4413      	add	r3, r2
 800f556:	3334      	adds	r3, #52	@ 0x34
 800f558:	460a      	mov	r2, r1
 800f55a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	4413      	add	r3, r2
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d006      	beq.n	800f576 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	3301      	adds	r3, #1
 800f56c:	61fb      	str	r3, [r7, #28]
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	2b0f      	cmp	r3, #15
 800f572:	d9e9      	bls.n	800f548 <prvInitialiseNewTask+0x5a>
 800f574:	e000      	b.n	800f578 <prvInitialiseNewTask+0x8a>
			{
				break;
 800f576:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f580:	e003      	b.n	800f58a <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58c:	2b06      	cmp	r3, #6
 800f58e:	d901      	bls.n	800f594 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f590:	2306      	movs	r3, #6
 800f592:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f598:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f59e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fe60 	bl	800f270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b2:	3318      	adds	r3, #24
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7ff fe5b 	bl	800f270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c2:	f1c3 0207 	rsb	r2, r3, #7
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	68f9      	ldr	r1, [r7, #12]
 800f5e2:	69b8      	ldr	r0, [r7, #24]
 800f5e4:	f000 fc1c 	bl	800fe20 <pxPortInitialiseStack>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5fa:	bf00      	nop
 800f5fc:	3720      	adds	r7, #32
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
	...

0800f604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f60c:	f000 fd16 	bl	801003c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f610:	4b2a      	ldr	r3, [pc, #168]	@ (800f6bc <prvAddNewTaskToReadyList+0xb8>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3301      	adds	r3, #1
 800f616:	4a29      	ldr	r2, [pc, #164]	@ (800f6bc <prvAddNewTaskToReadyList+0xb8>)
 800f618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f61a:	4b29      	ldr	r3, [pc, #164]	@ (800f6c0 <prvAddNewTaskToReadyList+0xbc>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d109      	bne.n	800f636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f622:	4a27      	ldr	r2, [pc, #156]	@ (800f6c0 <prvAddNewTaskToReadyList+0xbc>)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f628:	4b24      	ldr	r3, [pc, #144]	@ (800f6bc <prvAddNewTaskToReadyList+0xb8>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d110      	bne.n	800f652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f630:	f000 fad0 	bl	800fbd4 <prvInitialiseTaskLists>
 800f634:	e00d      	b.n	800f652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f636:	4b23      	ldr	r3, [pc, #140]	@ (800f6c4 <prvAddNewTaskToReadyList+0xc0>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d109      	bne.n	800f652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f63e:	4b20      	ldr	r3, [pc, #128]	@ (800f6c0 <prvAddNewTaskToReadyList+0xbc>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f648:	429a      	cmp	r2, r3
 800f64a:	d802      	bhi.n	800f652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f64c:	4a1c      	ldr	r2, [pc, #112]	@ (800f6c0 <prvAddNewTaskToReadyList+0xbc>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f652:	4b1d      	ldr	r3, [pc, #116]	@ (800f6c8 <prvAddNewTaskToReadyList+0xc4>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	3301      	adds	r3, #1
 800f658:	4a1b      	ldr	r2, [pc, #108]	@ (800f6c8 <prvAddNewTaskToReadyList+0xc4>)
 800f65a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f660:	2201      	movs	r2, #1
 800f662:	409a      	lsls	r2, r3
 800f664:	4b19      	ldr	r3, [pc, #100]	@ (800f6cc <prvAddNewTaskToReadyList+0xc8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4313      	orrs	r3, r2
 800f66a:	4a18      	ldr	r2, [pc, #96]	@ (800f6cc <prvAddNewTaskToReadyList+0xc8>)
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f672:	4613      	mov	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4a15      	ldr	r2, [pc, #84]	@ (800f6d0 <prvAddNewTaskToReadyList+0xcc>)
 800f67c:	441a      	add	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	3304      	adds	r3, #4
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7ff fe00 	bl	800f28a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f68a:	f000 fd0d 	bl	80100a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f68e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c4 <prvAddNewTaskToReadyList+0xc0>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00e      	beq.n	800f6b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f696:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c0 <prvAddNewTaskToReadyList+0xbc>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d207      	bcs.n	800f6b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800f6d4 <prvAddNewTaskToReadyList+0xd0>)
 800f6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20003588 	.word	0x20003588
 800f6c0:	20003488 	.word	0x20003488
 800f6c4:	20003594 	.word	0x20003594
 800f6c8:	200035a4 	.word	0x200035a4
 800f6cc:	20003590 	.word	0x20003590
 800f6d0:	2000348c 	.word	0x2000348c
 800f6d4:	e000ed04 	.word	0xe000ed04

0800f6d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d01a      	beq.n	800f720 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f6ea:	4b15      	ldr	r3, [pc, #84]	@ (800f740 <vTaskDelay+0x68>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00d      	beq.n	800f70e <vTaskDelay+0x36>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f6:	b672      	cpsid	i
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	b662      	cpsie	i
 800f706:	60bb      	str	r3, [r7, #8]
}
 800f708:	bf00      	nop
 800f70a:	bf00      	nop
 800f70c:	e7fd      	b.n	800f70a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f70e:	f000 f881 	bl	800f814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f712:	2100      	movs	r1, #0
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 fb1d 	bl	800fd54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f71a:	f000 f889 	bl	800f830 <xTaskResumeAll>
 800f71e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d107      	bne.n	800f736 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f726:	4b07      	ldr	r3, [pc, #28]	@ (800f744 <vTaskDelay+0x6c>)
 800f728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f736:	bf00      	nop
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	200035b0 	.word	0x200035b0
 800f744:	e000ed04 	.word	0xe000ed04

0800f748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08a      	sub	sp, #40	@ 0x28
 800f74c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f756:	463a      	mov	r2, r7
 800f758:	1d39      	adds	r1, r7, #4
 800f75a:	f107 0308 	add.w	r3, r7, #8
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f2 fc94 	bl	800208c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	9202      	str	r2, [sp, #8]
 800f76c:	9301      	str	r3, [sp, #4]
 800f76e:	2300      	movs	r3, #0
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	2300      	movs	r3, #0
 800f774:	460a      	mov	r2, r1
 800f776:	4921      	ldr	r1, [pc, #132]	@ (800f7fc <vTaskStartScheduler+0xb4>)
 800f778:	4821      	ldr	r0, [pc, #132]	@ (800f800 <vTaskStartScheduler+0xb8>)
 800f77a:	f7ff fe0d 	bl	800f398 <xTaskCreateStatic>
 800f77e:	4603      	mov	r3, r0
 800f780:	4a20      	ldr	r2, [pc, #128]	@ (800f804 <vTaskStartScheduler+0xbc>)
 800f782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f784:	4b1f      	ldr	r3, [pc, #124]	@ (800f804 <vTaskStartScheduler+0xbc>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f78c:	2301      	movs	r3, #1
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e001      	b.n	800f796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f792:	2300      	movs	r3, #0
 800f794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d118      	bne.n	800f7ce <vTaskStartScheduler+0x86>
	__asm volatile
 800f79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a0:	b672      	cpsid	i
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	b662      	cpsie	i
 800f7b0:	613b      	str	r3, [r7, #16]
}
 800f7b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f7b4:	4b14      	ldr	r3, [pc, #80]	@ (800f808 <vTaskStartScheduler+0xc0>)
 800f7b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7bc:	4b13      	ldr	r3, [pc, #76]	@ (800f80c <vTaskStartScheduler+0xc4>)
 800f7be:	2201      	movs	r2, #1
 800f7c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7c2:	4b13      	ldr	r3, [pc, #76]	@ (800f810 <vTaskStartScheduler+0xc8>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7c8:	f000 fbba 	bl	800ff40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7cc:	e011      	b.n	800f7f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7d4:	d10d      	bne.n	800f7f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7da:	b672      	cpsid	i
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	b662      	cpsie	i
 800f7ea:	60fb      	str	r3, [r7, #12]
}
 800f7ec:	bf00      	nop
 800f7ee:	bf00      	nop
 800f7f0:	e7fd      	b.n	800f7ee <vTaskStartScheduler+0xa6>
}
 800f7f2:	bf00      	nop
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08011798 	.word	0x08011798
 800f800:	0800fba5 	.word	0x0800fba5
 800f804:	200035ac 	.word	0x200035ac
 800f808:	200035a8 	.word	0x200035a8
 800f80c:	20003594 	.word	0x20003594
 800f810:	2000358c 	.word	0x2000358c

0800f814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f814:	b480      	push	{r7}
 800f816:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f818:	4b04      	ldr	r3, [pc, #16]	@ (800f82c <vTaskSuspendAll+0x18>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	3301      	adds	r3, #1
 800f81e:	4a03      	ldr	r2, [pc, #12]	@ (800f82c <vTaskSuspendAll+0x18>)
 800f820:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f822:	bf00      	nop
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	200035b0 	.word	0x200035b0

0800f830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f836:	2300      	movs	r3, #0
 800f838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f83a:	2300      	movs	r3, #0
 800f83c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f83e:	4b43      	ldr	r3, [pc, #268]	@ (800f94c <xTaskResumeAll+0x11c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10d      	bne.n	800f862 <xTaskResumeAll+0x32>
	__asm volatile
 800f846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84a:	b672      	cpsid	i
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	b662      	cpsie	i
 800f85a:	603b      	str	r3, [r7, #0]
}
 800f85c:	bf00      	nop
 800f85e:	bf00      	nop
 800f860:	e7fd      	b.n	800f85e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f862:	f000 fbeb 	bl	801003c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f866:	4b39      	ldr	r3, [pc, #228]	@ (800f94c <xTaskResumeAll+0x11c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	4a37      	ldr	r2, [pc, #220]	@ (800f94c <xTaskResumeAll+0x11c>)
 800f86e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f870:	4b36      	ldr	r3, [pc, #216]	@ (800f94c <xTaskResumeAll+0x11c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d161      	bne.n	800f93c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f878:	4b35      	ldr	r3, [pc, #212]	@ (800f950 <xTaskResumeAll+0x120>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d05d      	beq.n	800f93c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f880:	e02e      	b.n	800f8e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f882:	4b34      	ldr	r3, [pc, #208]	@ (800f954 <xTaskResumeAll+0x124>)
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	3318      	adds	r3, #24
 800f88e:	4618      	mov	r0, r3
 800f890:	f7ff fd58 	bl	800f344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	3304      	adds	r3, #4
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff fd53 	bl	800f344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	409a      	lsls	r2, r3
 800f8a6:	4b2c      	ldr	r3, [pc, #176]	@ (800f958 <xTaskResumeAll+0x128>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	4a2a      	ldr	r2, [pc, #168]	@ (800f958 <xTaskResumeAll+0x128>)
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4a27      	ldr	r2, [pc, #156]	@ (800f95c <xTaskResumeAll+0x12c>)
 800f8be:	441a      	add	r2, r3
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	f7ff fcdf 	bl	800f28a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8d0:	4b23      	ldr	r3, [pc, #140]	@ (800f960 <xTaskResumeAll+0x130>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d302      	bcc.n	800f8e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f8da:	4b22      	ldr	r3, [pc, #136]	@ (800f964 <xTaskResumeAll+0x134>)
 800f8dc:	2201      	movs	r2, #1
 800f8de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8e0:	4b1c      	ldr	r3, [pc, #112]	@ (800f954 <xTaskResumeAll+0x124>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1cc      	bne.n	800f882 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f8ee:	f000 fa11 	bl	800fd14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800f968 <xTaskResumeAll+0x138>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d010      	beq.n	800f920 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f8fe:	f000 f837 	bl	800f970 <xTaskIncrementTick>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d002      	beq.n	800f90e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f908:	4b16      	ldr	r3, [pc, #88]	@ (800f964 <xTaskResumeAll+0x134>)
 800f90a:	2201      	movs	r2, #1
 800f90c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	3b01      	subs	r3, #1
 800f912:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1f1      	bne.n	800f8fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f91a:	4b13      	ldr	r3, [pc, #76]	@ (800f968 <xTaskResumeAll+0x138>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f920:	4b10      	ldr	r3, [pc, #64]	@ (800f964 <xTaskResumeAll+0x134>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d009      	beq.n	800f93c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f928:	2301      	movs	r3, #1
 800f92a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f92c:	4b0f      	ldr	r3, [pc, #60]	@ (800f96c <xTaskResumeAll+0x13c>)
 800f92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f93c:	f000 fbb4 	bl	80100a8 <vPortExitCritical>

	return xAlreadyYielded;
 800f940:	68bb      	ldr	r3, [r7, #8]
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	200035b0 	.word	0x200035b0
 800f950:	20003588 	.word	0x20003588
 800f954:	20003548 	.word	0x20003548
 800f958:	20003590 	.word	0x20003590
 800f95c:	2000348c 	.word	0x2000348c
 800f960:	20003488 	.word	0x20003488
 800f964:	2000359c 	.word	0x2000359c
 800f968:	20003598 	.word	0x20003598
 800f96c:	e000ed04 	.word	0xe000ed04

0800f970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f976:	2300      	movs	r3, #0
 800f978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f97a:	4b50      	ldr	r3, [pc, #320]	@ (800fabc <xTaskIncrementTick+0x14c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f040 808b 	bne.w	800fa9a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f984:	4b4e      	ldr	r3, [pc, #312]	@ (800fac0 <xTaskIncrementTick+0x150>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3301      	adds	r3, #1
 800f98a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f98c:	4a4c      	ldr	r2, [pc, #304]	@ (800fac0 <xTaskIncrementTick+0x150>)
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d123      	bne.n	800f9e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f998:	4b4a      	ldr	r3, [pc, #296]	@ (800fac4 <xTaskIncrementTick+0x154>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00d      	beq.n	800f9be <xTaskIncrementTick+0x4e>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a6:	b672      	cpsid	i
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	b662      	cpsie	i
 800f9b6:	603b      	str	r3, [r7, #0]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <xTaskIncrementTick+0x4a>
 800f9be:	4b41      	ldr	r3, [pc, #260]	@ (800fac4 <xTaskIncrementTick+0x154>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	60fb      	str	r3, [r7, #12]
 800f9c4:	4b40      	ldr	r3, [pc, #256]	@ (800fac8 <xTaskIncrementTick+0x158>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a3e      	ldr	r2, [pc, #248]	@ (800fac4 <xTaskIncrementTick+0x154>)
 800f9ca:	6013      	str	r3, [r2, #0]
 800f9cc:	4a3e      	ldr	r2, [pc, #248]	@ (800fac8 <xTaskIncrementTick+0x158>)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6013      	str	r3, [r2, #0]
 800f9d2:	4b3e      	ldr	r3, [pc, #248]	@ (800facc <xTaskIncrementTick+0x15c>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	4a3c      	ldr	r2, [pc, #240]	@ (800facc <xTaskIncrementTick+0x15c>)
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	f000 f99a 	bl	800fd14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9e0:	4b3b      	ldr	r3, [pc, #236]	@ (800fad0 <xTaskIncrementTick+0x160>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d348      	bcc.n	800fa7c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9ea:	4b36      	ldr	r3, [pc, #216]	@ (800fac4 <xTaskIncrementTick+0x154>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d104      	bne.n	800f9fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9f4:	4b36      	ldr	r3, [pc, #216]	@ (800fad0 <xTaskIncrementTick+0x160>)
 800f9f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9fa:	601a      	str	r2, [r3, #0]
					break;
 800f9fc:	e03e      	b.n	800fa7c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9fe:	4b31      	ldr	r3, [pc, #196]	@ (800fac4 <xTaskIncrementTick+0x154>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d203      	bcs.n	800fa1e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fa16:	4a2e      	ldr	r2, [pc, #184]	@ (800fad0 <xTaskIncrementTick+0x160>)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa1c:	e02e      	b.n	800fa7c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	3304      	adds	r3, #4
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff fc8e 	bl	800f344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	3318      	adds	r3, #24
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fc85 	bl	800f344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3e:	2201      	movs	r2, #1
 800fa40:	409a      	lsls	r2, r3
 800fa42:	4b24      	ldr	r3, [pc, #144]	@ (800fad4 <xTaskIncrementTick+0x164>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	4a22      	ldr	r2, [pc, #136]	@ (800fad4 <xTaskIncrementTick+0x164>)
 800fa4a:	6013      	str	r3, [r2, #0]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa50:	4613      	mov	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4a1f      	ldr	r2, [pc, #124]	@ (800fad8 <xTaskIncrementTick+0x168>)
 800fa5a:	441a      	add	r2, r3
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	3304      	adds	r3, #4
 800fa60:	4619      	mov	r1, r3
 800fa62:	4610      	mov	r0, r2
 800fa64:	f7ff fc11 	bl	800f28a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa6c:	4b1b      	ldr	r3, [pc, #108]	@ (800fadc <xTaskIncrementTick+0x16c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d3b9      	bcc.n	800f9ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800fa76:	2301      	movs	r3, #1
 800fa78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa7a:	e7b6      	b.n	800f9ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa7c:	4b17      	ldr	r3, [pc, #92]	@ (800fadc <xTaskIncrementTick+0x16c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa82:	4915      	ldr	r1, [pc, #84]	@ (800fad8 <xTaskIncrementTick+0x168>)
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	440b      	add	r3, r1
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d907      	bls.n	800faa4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fa94:	2301      	movs	r3, #1
 800fa96:	617b      	str	r3, [r7, #20]
 800fa98:	e004      	b.n	800faa4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fa9a:	4b11      	ldr	r3, [pc, #68]	@ (800fae0 <xTaskIncrementTick+0x170>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	4a0f      	ldr	r2, [pc, #60]	@ (800fae0 <xTaskIncrementTick+0x170>)
 800faa2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800faa4:	4b0f      	ldr	r3, [pc, #60]	@ (800fae4 <xTaskIncrementTick+0x174>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800faac:	2301      	movs	r3, #1
 800faae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fab0:	697b      	ldr	r3, [r7, #20]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	200035b0 	.word	0x200035b0
 800fac0:	2000358c 	.word	0x2000358c
 800fac4:	20003540 	.word	0x20003540
 800fac8:	20003544 	.word	0x20003544
 800facc:	200035a0 	.word	0x200035a0
 800fad0:	200035a8 	.word	0x200035a8
 800fad4:	20003590 	.word	0x20003590
 800fad8:	2000348c 	.word	0x2000348c
 800fadc:	20003488 	.word	0x20003488
 800fae0:	20003598 	.word	0x20003598
 800fae4:	2000359c 	.word	0x2000359c

0800fae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fae8:	b480      	push	{r7}
 800faea:	b087      	sub	sp, #28
 800faec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800faee:	4b28      	ldr	r3, [pc, #160]	@ (800fb90 <vTaskSwitchContext+0xa8>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800faf6:	4b27      	ldr	r3, [pc, #156]	@ (800fb94 <vTaskSwitchContext+0xac>)
 800faf8:	2201      	movs	r2, #1
 800fafa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fafc:	e042      	b.n	800fb84 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800fafe:	4b25      	ldr	r3, [pc, #148]	@ (800fb94 <vTaskSwitchContext+0xac>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb04:	4b24      	ldr	r3, [pc, #144]	@ (800fb98 <vTaskSwitchContext+0xb0>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	fab3 f383 	clz	r3, r3
 800fb10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fb12:	7afb      	ldrb	r3, [r7, #11]
 800fb14:	f1c3 031f 	rsb	r3, r3, #31
 800fb18:	617b      	str	r3, [r7, #20]
 800fb1a:	4920      	ldr	r1, [pc, #128]	@ (800fb9c <vTaskSwitchContext+0xb4>)
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	440b      	add	r3, r1
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10d      	bne.n	800fb4a <vTaskSwitchContext+0x62>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb32:	b672      	cpsid	i
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	b662      	cpsie	i
 800fb42:	607b      	str	r3, [r7, #4]
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop
 800fb48:	e7fd      	b.n	800fb46 <vTaskSwitchContext+0x5e>
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4413      	add	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4a11      	ldr	r2, [pc, #68]	@ (800fb9c <vTaskSwitchContext+0xb4>)
 800fb56:	4413      	add	r3, r2
 800fb58:	613b      	str	r3, [r7, #16]
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	685a      	ldr	r2, [r3, #4]
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	605a      	str	r2, [r3, #4]
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	3308      	adds	r3, #8
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d104      	bne.n	800fb7a <vTaskSwitchContext+0x92>
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	605a      	str	r2, [r3, #4]
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	4a07      	ldr	r2, [pc, #28]	@ (800fba0 <vTaskSwitchContext+0xb8>)
 800fb82:	6013      	str	r3, [r2, #0]
}
 800fb84:	bf00      	nop
 800fb86:	371c      	adds	r7, #28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	200035b0 	.word	0x200035b0
 800fb94:	2000359c 	.word	0x2000359c
 800fb98:	20003590 	.word	0x20003590
 800fb9c:	2000348c 	.word	0x2000348c
 800fba0:	20003488 	.word	0x20003488

0800fba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fbac:	f000 f852 	bl	800fc54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fbb0:	4b06      	ldr	r3, [pc, #24]	@ (800fbcc <prvIdleTask+0x28>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d9f9      	bls.n	800fbac <prvIdleTask+0x8>
			{
				taskYIELD();
 800fbb8:	4b05      	ldr	r3, [pc, #20]	@ (800fbd0 <prvIdleTask+0x2c>)
 800fbba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fbc8:	e7f0      	b.n	800fbac <prvIdleTask+0x8>
 800fbca:	bf00      	nop
 800fbcc:	2000348c 	.word	0x2000348c
 800fbd0:	e000ed04 	.word	0xe000ed04

0800fbd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbda:	2300      	movs	r3, #0
 800fbdc:	607b      	str	r3, [r7, #4]
 800fbde:	e00c      	b.n	800fbfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4a12      	ldr	r2, [pc, #72]	@ (800fc34 <prvInitialiseTaskLists+0x60>)
 800fbec:	4413      	add	r3, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff fb1e 	bl	800f230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	607b      	str	r3, [r7, #4]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b06      	cmp	r3, #6
 800fbfe:	d9ef      	bls.n	800fbe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc00:	480d      	ldr	r0, [pc, #52]	@ (800fc38 <prvInitialiseTaskLists+0x64>)
 800fc02:	f7ff fb15 	bl	800f230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc06:	480d      	ldr	r0, [pc, #52]	@ (800fc3c <prvInitialiseTaskLists+0x68>)
 800fc08:	f7ff fb12 	bl	800f230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc0c:	480c      	ldr	r0, [pc, #48]	@ (800fc40 <prvInitialiseTaskLists+0x6c>)
 800fc0e:	f7ff fb0f 	bl	800f230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc12:	480c      	ldr	r0, [pc, #48]	@ (800fc44 <prvInitialiseTaskLists+0x70>)
 800fc14:	f7ff fb0c 	bl	800f230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc18:	480b      	ldr	r0, [pc, #44]	@ (800fc48 <prvInitialiseTaskLists+0x74>)
 800fc1a:	f7ff fb09 	bl	800f230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc4c <prvInitialiseTaskLists+0x78>)
 800fc20:	4a05      	ldr	r2, [pc, #20]	@ (800fc38 <prvInitialiseTaskLists+0x64>)
 800fc22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc24:	4b0a      	ldr	r3, [pc, #40]	@ (800fc50 <prvInitialiseTaskLists+0x7c>)
 800fc26:	4a05      	ldr	r2, [pc, #20]	@ (800fc3c <prvInitialiseTaskLists+0x68>)
 800fc28:	601a      	str	r2, [r3, #0]
}
 800fc2a:	bf00      	nop
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	2000348c 	.word	0x2000348c
 800fc38:	20003518 	.word	0x20003518
 800fc3c:	2000352c 	.word	0x2000352c
 800fc40:	20003548 	.word	0x20003548
 800fc44:	2000355c 	.word	0x2000355c
 800fc48:	20003574 	.word	0x20003574
 800fc4c:	20003540 	.word	0x20003540
 800fc50:	20003544 	.word	0x20003544

0800fc54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc5a:	e019      	b.n	800fc90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc5c:	f000 f9ee 	bl	801003c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc60:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <prvCheckTasksWaitingTermination+0x50>)
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fb69 	bl	800f344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fc72:	4b0d      	ldr	r3, [pc, #52]	@ (800fca8 <prvCheckTasksWaitingTermination+0x54>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	4a0b      	ldr	r2, [pc, #44]	@ (800fca8 <prvCheckTasksWaitingTermination+0x54>)
 800fc7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	4a0a      	ldr	r2, [pc, #40]	@ (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc86:	f000 fa0f 	bl	80100a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f810 	bl	800fcb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc90:	4b06      	ldr	r3, [pc, #24]	@ (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e1      	bne.n	800fc5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	2000355c 	.word	0x2000355c
 800fca8:	20003588 	.word	0x20003588
 800fcac:	20003570 	.word	0x20003570

0800fcb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d108      	bne.n	800fcd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 fb6e 	bl	80103a8 <vPortFree>
				vPortFree( pxTCB );
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fb6b 	bl	80103a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fcd2:	e01b      	b.n	800fd0c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d103      	bne.n	800fce6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fb62 	bl	80103a8 <vPortFree>
	}
 800fce4:	e012      	b.n	800fd0c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d00d      	beq.n	800fd0c <prvDeleteTCB+0x5c>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf4:	b672      	cpsid	i
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	b662      	cpsie	i
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	bf00      	nop
 800fd0a:	e7fd      	b.n	800fd08 <prvDeleteTCB+0x58>
	}
 800fd0c:	bf00      	nop
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd4c <prvResetNextTaskUnblockTime+0x38>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d104      	bne.n	800fd2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd24:	4b0a      	ldr	r3, [pc, #40]	@ (800fd50 <prvResetNextTaskUnblockTime+0x3c>)
 800fd26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fd2c:	e008      	b.n	800fd40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd2e:	4b07      	ldr	r3, [pc, #28]	@ (800fd4c <prvResetNextTaskUnblockTime+0x38>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	4a04      	ldr	r2, [pc, #16]	@ (800fd50 <prvResetNextTaskUnblockTime+0x3c>)
 800fd3e:	6013      	str	r3, [r2, #0]
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	20003540 	.word	0x20003540
 800fd50:	200035a8 	.word	0x200035a8

0800fd54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd5e:	4b29      	ldr	r3, [pc, #164]	@ (800fe04 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd64:	4b28      	ldr	r3, [pc, #160]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7ff faea 	bl	800f344 <uxListRemove>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d10b      	bne.n	800fd8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fd76:	4b24      	ldr	r3, [pc, #144]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd82:	43da      	mvns	r2, r3
 800fd84:	4b21      	ldr	r3, [pc, #132]	@ (800fe0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4013      	ands	r3, r2
 800fd8a:	4a20      	ldr	r2, [pc, #128]	@ (800fe0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd94:	d10a      	bne.n	800fdac <prvAddCurrentTaskToDelayedList+0x58>
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d007      	beq.n	800fdac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3304      	adds	r3, #4
 800fda2:	4619      	mov	r1, r3
 800fda4:	481a      	ldr	r0, [pc, #104]	@ (800fe10 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fda6:	f7ff fa70 	bl	800f28a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fdaa:	e026      	b.n	800fdfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fdb4:	4b14      	ldr	r3, [pc, #80]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d209      	bcs.n	800fdd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdc4:	4b13      	ldr	r3, [pc, #76]	@ (800fe14 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3304      	adds	r3, #4
 800fdce:	4619      	mov	r1, r3
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	f7ff fa7e 	bl	800f2d2 <vListInsert>
}
 800fdd6:	e010      	b.n	800fdfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdd8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe18 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	4b0a      	ldr	r3, [pc, #40]	@ (800fe08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	3304      	adds	r3, #4
 800fde2:	4619      	mov	r1, r3
 800fde4:	4610      	mov	r0, r2
 800fde6:	f7ff fa74 	bl	800f2d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fdea:	4b0c      	ldr	r3, [pc, #48]	@ (800fe1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d202      	bcs.n	800fdfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fdf4:	4a09      	ldr	r2, [pc, #36]	@ (800fe1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	6013      	str	r3, [r2, #0]
}
 800fdfa:	bf00      	nop
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	2000358c 	.word	0x2000358c
 800fe08:	20003488 	.word	0x20003488
 800fe0c:	20003590 	.word	0x20003590
 800fe10:	20003574 	.word	0x20003574
 800fe14:	20003544 	.word	0x20003544
 800fe18:	20003540 	.word	0x20003540
 800fe1c:	200035a8 	.word	0x200035a8

0800fe20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	3b04      	subs	r3, #4
 800fe30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fe38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	3b04      	subs	r3, #4
 800fe3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	f023 0201 	bic.w	r2, r3, #1
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3b04      	subs	r3, #4
 800fe4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe50:	4a0c      	ldr	r2, [pc, #48]	@ (800fe84 <pxPortInitialiseStack+0x64>)
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	3b14      	subs	r3, #20
 800fe5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3b04      	subs	r3, #4
 800fe66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f06f 0202 	mvn.w	r2, #2
 800fe6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3b20      	subs	r3, #32
 800fe74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe76:	68fb      	ldr	r3, [r7, #12]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3714      	adds	r7, #20
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	0800fe89 	.word	0x0800fe89

0800fe88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe92:	4b15      	ldr	r3, [pc, #84]	@ (800fee8 <prvTaskExitError+0x60>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe9a:	d00d      	beq.n	800feb8 <prvTaskExitError+0x30>
	__asm volatile
 800fe9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea0:	b672      	cpsid	i
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	b662      	cpsie	i
 800feb0:	60fb      	str	r3, [r7, #12]
}
 800feb2:	bf00      	nop
 800feb4:	bf00      	nop
 800feb6:	e7fd      	b.n	800feb4 <prvTaskExitError+0x2c>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febc:	b672      	cpsid	i
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	b662      	cpsie	i
 800fecc:	60bb      	str	r3, [r7, #8]
}
 800fece:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fed0:	bf00      	nop
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d0fc      	beq.n	800fed2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fed8:	bf00      	nop
 800feda:	bf00      	nop
 800fedc:	3714      	adds	r7, #20
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	20000058 	.word	0x20000058
 800feec:	00000000 	.word	0x00000000

0800fef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fef0:	4b07      	ldr	r3, [pc, #28]	@ (800ff10 <pxCurrentTCBConst2>)
 800fef2:	6819      	ldr	r1, [r3, #0]
 800fef4:	6808      	ldr	r0, [r1, #0]
 800fef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefa:	f380 8809 	msr	PSP, r0
 800fefe:	f3bf 8f6f 	isb	sy
 800ff02:	f04f 0000 	mov.w	r0, #0
 800ff06:	f380 8811 	msr	BASEPRI, r0
 800ff0a:	4770      	bx	lr
 800ff0c:	f3af 8000 	nop.w

0800ff10 <pxCurrentTCBConst2>:
 800ff10:	20003488 	.word	0x20003488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop

0800ff18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff18:	4808      	ldr	r0, [pc, #32]	@ (800ff3c <prvPortStartFirstTask+0x24>)
 800ff1a:	6800      	ldr	r0, [r0, #0]
 800ff1c:	6800      	ldr	r0, [r0, #0]
 800ff1e:	f380 8808 	msr	MSP, r0
 800ff22:	f04f 0000 	mov.w	r0, #0
 800ff26:	f380 8814 	msr	CONTROL, r0
 800ff2a:	b662      	cpsie	i
 800ff2c:	b661      	cpsie	f
 800ff2e:	f3bf 8f4f 	dsb	sy
 800ff32:	f3bf 8f6f 	isb	sy
 800ff36:	df00      	svc	0
 800ff38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff3a:	bf00      	nop
 800ff3c:	e000ed08 	.word	0xe000ed08

0800ff40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff46:	4b37      	ldr	r3, [pc, #220]	@ (8010024 <xPortStartScheduler+0xe4>)
 800ff48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	22ff      	movs	r2, #255	@ 0xff
 800ff56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff60:	78fb      	ldrb	r3, [r7, #3]
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ff68:	b2da      	uxtb	r2, r3
 800ff6a:	4b2f      	ldr	r3, [pc, #188]	@ (8010028 <xPortStartScheduler+0xe8>)
 800ff6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff6e:	4b2f      	ldr	r3, [pc, #188]	@ (801002c <xPortStartScheduler+0xec>)
 800ff70:	2207      	movs	r2, #7
 800ff72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff74:	e009      	b.n	800ff8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ff76:	4b2d      	ldr	r3, [pc, #180]	@ (801002c <xPortStartScheduler+0xec>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	4a2b      	ldr	r2, [pc, #172]	@ (801002c <xPortStartScheduler+0xec>)
 800ff7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff80:	78fb      	ldrb	r3, [r7, #3]
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	005b      	lsls	r3, r3, #1
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff8a:	78fb      	ldrb	r3, [r7, #3]
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff92:	2b80      	cmp	r3, #128	@ 0x80
 800ff94:	d0ef      	beq.n	800ff76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff96:	4b25      	ldr	r3, [pc, #148]	@ (801002c <xPortStartScheduler+0xec>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f1c3 0307 	rsb	r3, r3, #7
 800ff9e:	2b04      	cmp	r3, #4
 800ffa0:	d00d      	beq.n	800ffbe <xPortStartScheduler+0x7e>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa6:	b672      	cpsid	i
 800ffa8:	f383 8811 	msr	BASEPRI, r3
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	b662      	cpsie	i
 800ffb6:	60bb      	str	r3, [r7, #8]
}
 800ffb8:	bf00      	nop
 800ffba:	bf00      	nop
 800ffbc:	e7fd      	b.n	800ffba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ffbe:	4b1b      	ldr	r3, [pc, #108]	@ (801002c <xPortStartScheduler+0xec>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	021b      	lsls	r3, r3, #8
 800ffc4:	4a19      	ldr	r2, [pc, #100]	@ (801002c <xPortStartScheduler+0xec>)
 800ffc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ffc8:	4b18      	ldr	r3, [pc, #96]	@ (801002c <xPortStartScheduler+0xec>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ffd0:	4a16      	ldr	r2, [pc, #88]	@ (801002c <xPortStartScheduler+0xec>)
 800ffd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ffdc:	4b14      	ldr	r3, [pc, #80]	@ (8010030 <xPortStartScheduler+0xf0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a13      	ldr	r2, [pc, #76]	@ (8010030 <xPortStartScheduler+0xf0>)
 800ffe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ffe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ffe8:	4b11      	ldr	r3, [pc, #68]	@ (8010030 <xPortStartScheduler+0xf0>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a10      	ldr	r2, [pc, #64]	@ (8010030 <xPortStartScheduler+0xf0>)
 800ffee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fff4:	f000 f8dc 	bl	80101b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fff8:	4b0e      	ldr	r3, [pc, #56]	@ (8010034 <xPortStartScheduler+0xf4>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fffe:	f000 f8fb 	bl	80101f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010002:	4b0d      	ldr	r3, [pc, #52]	@ (8010038 <xPortStartScheduler+0xf8>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a0c      	ldr	r2, [pc, #48]	@ (8010038 <xPortStartScheduler+0xf8>)
 8010008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801000c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801000e:	f7ff ff83 	bl	800ff18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010012:	f7ff fd69 	bl	800fae8 <vTaskSwitchContext>
	prvTaskExitError();
 8010016:	f7ff ff37 	bl	800fe88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801001a:	2300      	movs	r3, #0
}
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	e000e400 	.word	0xe000e400
 8010028:	200035b4 	.word	0x200035b4
 801002c:	200035b8 	.word	0x200035b8
 8010030:	e000ed20 	.word	0xe000ed20
 8010034:	20000058 	.word	0x20000058
 8010038:	e000ef34 	.word	0xe000ef34

0801003c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
	__asm volatile
 8010042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010046:	b672      	cpsid	i
 8010048:	f383 8811 	msr	BASEPRI, r3
 801004c:	f3bf 8f6f 	isb	sy
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	b662      	cpsie	i
 8010056:	607b      	str	r3, [r7, #4]
}
 8010058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801005a:	4b11      	ldr	r3, [pc, #68]	@ (80100a0 <vPortEnterCritical+0x64>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3301      	adds	r3, #1
 8010060:	4a0f      	ldr	r2, [pc, #60]	@ (80100a0 <vPortEnterCritical+0x64>)
 8010062:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010064:	4b0e      	ldr	r3, [pc, #56]	@ (80100a0 <vPortEnterCritical+0x64>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d112      	bne.n	8010092 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801006c:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <vPortEnterCritical+0x68>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00d      	beq.n	8010092 <vPortEnterCritical+0x56>
	__asm volatile
 8010076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007a:	b672      	cpsid	i
 801007c:	f383 8811 	msr	BASEPRI, r3
 8010080:	f3bf 8f6f 	isb	sy
 8010084:	f3bf 8f4f 	dsb	sy
 8010088:	b662      	cpsie	i
 801008a:	603b      	str	r3, [r7, #0]
}
 801008c:	bf00      	nop
 801008e:	bf00      	nop
 8010090:	e7fd      	b.n	801008e <vPortEnterCritical+0x52>
	}
}
 8010092:	bf00      	nop
 8010094:	370c      	adds	r7, #12
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	20000058 	.word	0x20000058
 80100a4:	e000ed04 	.word	0xe000ed04

080100a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80100ae:	4b13      	ldr	r3, [pc, #76]	@ (80100fc <vPortExitCritical+0x54>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10d      	bne.n	80100d2 <vPortExitCritical+0x2a>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ba:	b672      	cpsid	i
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	b662      	cpsie	i
 80100ca:	607b      	str	r3, [r7, #4]
}
 80100cc:	bf00      	nop
 80100ce:	bf00      	nop
 80100d0:	e7fd      	b.n	80100ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80100d2:	4b0a      	ldr	r3, [pc, #40]	@ (80100fc <vPortExitCritical+0x54>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3b01      	subs	r3, #1
 80100d8:	4a08      	ldr	r2, [pc, #32]	@ (80100fc <vPortExitCritical+0x54>)
 80100da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80100dc:	4b07      	ldr	r3, [pc, #28]	@ (80100fc <vPortExitCritical+0x54>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <vPortExitCritical+0x48>
 80100e4:	2300      	movs	r3, #0
 80100e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80100ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	20000058 	.word	0x20000058

08010100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010100:	f3ef 8009 	mrs	r0, PSP
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	4b15      	ldr	r3, [pc, #84]	@ (8010160 <pxCurrentTCBConst>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	f01e 0f10 	tst.w	lr, #16
 8010110:	bf08      	it	eq
 8010112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	6010      	str	r0, [r2, #0]
 801011c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010124:	b672      	cpsid	i
 8010126:	f380 8811 	msr	BASEPRI, r0
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	b662      	cpsie	i
 8010134:	f7ff fcd8 	bl	800fae8 <vTaskSwitchContext>
 8010138:	f04f 0000 	mov.w	r0, #0
 801013c:	f380 8811 	msr	BASEPRI, r0
 8010140:	bc09      	pop	{r0, r3}
 8010142:	6819      	ldr	r1, [r3, #0]
 8010144:	6808      	ldr	r0, [r1, #0]
 8010146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014a:	f01e 0f10 	tst.w	lr, #16
 801014e:	bf08      	it	eq
 8010150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010154:	f380 8809 	msr	PSP, r0
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop

08010160 <pxCurrentTCBConst>:
 8010160:	20003488 	.word	0x20003488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop

08010168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010172:	b672      	cpsid	i
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	b662      	cpsie	i
 8010182:	607b      	str	r3, [r7, #4]
}
 8010184:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010186:	f7ff fbf3 	bl	800f970 <xTaskIncrementTick>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d003      	beq.n	8010198 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010190:	4b06      	ldr	r3, [pc, #24]	@ (80101ac <SysTick_Handler+0x44>)
 8010192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	2300      	movs	r3, #0
 801019a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	f383 8811 	msr	BASEPRI, r3
}
 80101a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80101a4:	bf00      	nop
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	e000ed04 	.word	0xe000ed04

080101b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80101b0:	b480      	push	{r7}
 80101b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80101b4:	4b0b      	ldr	r3, [pc, #44]	@ (80101e4 <vPortSetupTimerInterrupt+0x34>)
 80101b6:	2200      	movs	r2, #0
 80101b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80101ba:	4b0b      	ldr	r3, [pc, #44]	@ (80101e8 <vPortSetupTimerInterrupt+0x38>)
 80101bc:	2200      	movs	r2, #0
 80101be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80101c0:	4b0a      	ldr	r3, [pc, #40]	@ (80101ec <vPortSetupTimerInterrupt+0x3c>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a0a      	ldr	r2, [pc, #40]	@ (80101f0 <vPortSetupTimerInterrupt+0x40>)
 80101c6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ca:	099b      	lsrs	r3, r3, #6
 80101cc:	4a09      	ldr	r2, [pc, #36]	@ (80101f4 <vPortSetupTimerInterrupt+0x44>)
 80101ce:	3b01      	subs	r3, #1
 80101d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80101d2:	4b04      	ldr	r3, [pc, #16]	@ (80101e4 <vPortSetupTimerInterrupt+0x34>)
 80101d4:	2207      	movs	r2, #7
 80101d6:	601a      	str	r2, [r3, #0]
}
 80101d8:	bf00      	nop
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	e000e010 	.word	0xe000e010
 80101e8:	e000e018 	.word	0xe000e018
 80101ec:	2000004c 	.word	0x2000004c
 80101f0:	10624dd3 	.word	0x10624dd3
 80101f4:	e000e014 	.word	0xe000e014

080101f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010208 <vPortEnableVFP+0x10>
 80101fc:	6801      	ldr	r1, [r0, #0]
 80101fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010202:	6001      	str	r1, [r0, #0]
 8010204:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010206:	bf00      	nop
 8010208:	e000ed88 	.word	0xe000ed88

0801020c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08a      	sub	sp, #40	@ 0x28
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010214:	2300      	movs	r3, #0
 8010216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010218:	f7ff fafc 	bl	800f814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801021c:	4b5d      	ldr	r3, [pc, #372]	@ (8010394 <pvPortMalloc+0x188>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010224:	f000 f920 	bl	8010468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010228:	4b5b      	ldr	r3, [pc, #364]	@ (8010398 <pvPortMalloc+0x18c>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4013      	ands	r3, r2
 8010230:	2b00      	cmp	r3, #0
 8010232:	f040 8094 	bne.w	801035e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d020      	beq.n	801027e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 801023c:	2208      	movs	r2, #8
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4413      	add	r3, r2
 8010242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f003 0307 	and.w	r3, r3, #7
 801024a:	2b00      	cmp	r3, #0
 801024c:	d017      	beq.n	801027e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f023 0307 	bic.w	r3, r3, #7
 8010254:	3308      	adds	r3, #8
 8010256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f003 0307 	and.w	r3, r3, #7
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00d      	beq.n	801027e <pvPortMalloc+0x72>
	__asm volatile
 8010262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010266:	b672      	cpsid	i
 8010268:	f383 8811 	msr	BASEPRI, r3
 801026c:	f3bf 8f6f 	isb	sy
 8010270:	f3bf 8f4f 	dsb	sy
 8010274:	b662      	cpsie	i
 8010276:	617b      	str	r3, [r7, #20]
}
 8010278:	bf00      	nop
 801027a:	bf00      	nop
 801027c:	e7fd      	b.n	801027a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d06c      	beq.n	801035e <pvPortMalloc+0x152>
 8010284:	4b45      	ldr	r3, [pc, #276]	@ (801039c <pvPortMalloc+0x190>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	429a      	cmp	r2, r3
 801028c:	d867      	bhi.n	801035e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801028e:	4b44      	ldr	r3, [pc, #272]	@ (80103a0 <pvPortMalloc+0x194>)
 8010290:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010292:	4b43      	ldr	r3, [pc, #268]	@ (80103a0 <pvPortMalloc+0x194>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010298:	e004      	b.n	80102a4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 801029a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d903      	bls.n	80102b6 <pvPortMalloc+0xaa>
 80102ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1f1      	bne.n	801029a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80102b6:	4b37      	ldr	r3, [pc, #220]	@ (8010394 <pvPortMalloc+0x188>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102bc:	429a      	cmp	r2, r3
 80102be:	d04e      	beq.n	801035e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2208      	movs	r2, #8
 80102c6:	4413      	add	r3, r2
 80102c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80102d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d4:	685a      	ldr	r2, [r3, #4]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	1ad2      	subs	r2, r2, r3
 80102da:	2308      	movs	r3, #8
 80102dc:	005b      	lsls	r3, r3, #1
 80102de:	429a      	cmp	r2, r3
 80102e0:	d922      	bls.n	8010328 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80102e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	4413      	add	r3, r2
 80102e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	f003 0307 	and.w	r3, r3, #7
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00d      	beq.n	8010310 <pvPortMalloc+0x104>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f8:	b672      	cpsid	i
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	b662      	cpsie	i
 8010308:	613b      	str	r3, [r7, #16]
}
 801030a:	bf00      	nop
 801030c:	bf00      	nop
 801030e:	e7fd      	b.n	801030c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010312:	685a      	ldr	r2, [r3, #4]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	1ad2      	subs	r2, r2, r3
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010322:	69b8      	ldr	r0, [r7, #24]
 8010324:	f000 f902 	bl	801052c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010328:	4b1c      	ldr	r3, [pc, #112]	@ (801039c <pvPortMalloc+0x190>)
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	4a1a      	ldr	r2, [pc, #104]	@ (801039c <pvPortMalloc+0x190>)
 8010334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010336:	4b19      	ldr	r3, [pc, #100]	@ (801039c <pvPortMalloc+0x190>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	4b1a      	ldr	r3, [pc, #104]	@ (80103a4 <pvPortMalloc+0x198>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	429a      	cmp	r2, r3
 8010340:	d203      	bcs.n	801034a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010342:	4b16      	ldr	r3, [pc, #88]	@ (801039c <pvPortMalloc+0x190>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a17      	ldr	r2, [pc, #92]	@ (80103a4 <pvPortMalloc+0x198>)
 8010348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801034a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	4b12      	ldr	r3, [pc, #72]	@ (8010398 <pvPortMalloc+0x18c>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	431a      	orrs	r2, r3
 8010354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035a:	2200      	movs	r2, #0
 801035c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801035e:	f7ff fa67 	bl	800f830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	f003 0307 	and.w	r3, r3, #7
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00d      	beq.n	8010388 <pvPortMalloc+0x17c>
	__asm volatile
 801036c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010370:	b672      	cpsid	i
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	b662      	cpsie	i
 8010380:	60fb      	str	r3, [r7, #12]
}
 8010382:	bf00      	nop
 8010384:	bf00      	nop
 8010386:	e7fd      	b.n	8010384 <pvPortMalloc+0x178>
	return pvReturn;
 8010388:	69fb      	ldr	r3, [r7, #28]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3728      	adds	r7, #40	@ 0x28
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	200083e4 	.word	0x200083e4
 8010398:	200083f0 	.word	0x200083f0
 801039c:	200083e8 	.word	0x200083e8
 80103a0:	200083dc 	.word	0x200083dc
 80103a4:	200083ec 	.word	0x200083ec

080103a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d04e      	beq.n	8010458 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80103ba:	2308      	movs	r3, #8
 80103bc:	425b      	negs	r3, r3
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	4413      	add	r3, r2
 80103c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	685a      	ldr	r2, [r3, #4]
 80103cc:	4b24      	ldr	r3, [pc, #144]	@ (8010460 <vPortFree+0xb8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4013      	ands	r3, r2
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d10d      	bne.n	80103f2 <vPortFree+0x4a>
	__asm volatile
 80103d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103da:	b672      	cpsid	i
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	b662      	cpsie	i
 80103ea:	60fb      	str	r3, [r7, #12]
}
 80103ec:	bf00      	nop
 80103ee:	bf00      	nop
 80103f0:	e7fd      	b.n	80103ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00d      	beq.n	8010416 <vPortFree+0x6e>
	__asm volatile
 80103fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103fe:	b672      	cpsid	i
 8010400:	f383 8811 	msr	BASEPRI, r3
 8010404:	f3bf 8f6f 	isb	sy
 8010408:	f3bf 8f4f 	dsb	sy
 801040c:	b662      	cpsie	i
 801040e:	60bb      	str	r3, [r7, #8]
}
 8010410:	bf00      	nop
 8010412:	bf00      	nop
 8010414:	e7fd      	b.n	8010412 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	685a      	ldr	r2, [r3, #4]
 801041a:	4b11      	ldr	r3, [pc, #68]	@ (8010460 <vPortFree+0xb8>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4013      	ands	r3, r2
 8010420:	2b00      	cmp	r3, #0
 8010422:	d019      	beq.n	8010458 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d115      	bne.n	8010458 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	4b0b      	ldr	r3, [pc, #44]	@ (8010460 <vPortFree+0xb8>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	43db      	mvns	r3, r3
 8010436:	401a      	ands	r2, r3
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801043c:	f7ff f9ea 	bl	800f814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	4b07      	ldr	r3, [pc, #28]	@ (8010464 <vPortFree+0xbc>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4413      	add	r3, r2
 801044a:	4a06      	ldr	r2, [pc, #24]	@ (8010464 <vPortFree+0xbc>)
 801044c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801044e:	6938      	ldr	r0, [r7, #16]
 8010450:	f000 f86c 	bl	801052c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010454:	f7ff f9ec 	bl	800f830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010458:	bf00      	nop
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	200083f0 	.word	0x200083f0
 8010464:	200083e8 	.word	0x200083e8

08010468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010468:	b480      	push	{r7}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801046e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010474:	4b27      	ldr	r3, [pc, #156]	@ (8010514 <prvHeapInit+0xac>)
 8010476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f003 0307 	and.w	r3, r3, #7
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00c      	beq.n	801049c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3307      	adds	r3, #7
 8010486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f023 0307 	bic.w	r3, r3, #7
 801048e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	4a1f      	ldr	r2, [pc, #124]	@ (8010514 <prvHeapInit+0xac>)
 8010498:	4413      	add	r3, r2
 801049a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80104a0:	4a1d      	ldr	r2, [pc, #116]	@ (8010518 <prvHeapInit+0xb0>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80104a6:	4b1c      	ldr	r3, [pc, #112]	@ (8010518 <prvHeapInit+0xb0>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	4413      	add	r3, r2
 80104b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80104b4:	2208      	movs	r2, #8
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	1a9b      	subs	r3, r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f023 0307 	bic.w	r3, r3, #7
 80104c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	4a15      	ldr	r2, [pc, #84]	@ (801051c <prvHeapInit+0xb4>)
 80104c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80104ca:	4b14      	ldr	r3, [pc, #80]	@ (801051c <prvHeapInit+0xb4>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2200      	movs	r2, #0
 80104d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80104d2:	4b12      	ldr	r3, [pc, #72]	@ (801051c <prvHeapInit+0xb4>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	1ad2      	subs	r2, r2, r3
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80104e8:	4b0c      	ldr	r3, [pc, #48]	@ (801051c <prvHeapInit+0xb4>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	4a0a      	ldr	r2, [pc, #40]	@ (8010520 <prvHeapInit+0xb8>)
 80104f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	4a09      	ldr	r2, [pc, #36]	@ (8010524 <prvHeapInit+0xbc>)
 80104fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010500:	4b09      	ldr	r3, [pc, #36]	@ (8010528 <prvHeapInit+0xc0>)
 8010502:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010506:	601a      	str	r2, [r3, #0]
}
 8010508:	bf00      	nop
 801050a:	3714      	adds	r7, #20
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	200035bc 	.word	0x200035bc
 8010518:	200083dc 	.word	0x200083dc
 801051c:	200083e4 	.word	0x200083e4
 8010520:	200083ec 	.word	0x200083ec
 8010524:	200083e8 	.word	0x200083e8
 8010528:	200083f0 	.word	0x200083f0

0801052c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801052c:	b480      	push	{r7}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010534:	4b28      	ldr	r3, [pc, #160]	@ (80105d8 <prvInsertBlockIntoFreeList+0xac>)
 8010536:	60fb      	str	r3, [r7, #12]
 8010538:	e002      	b.n	8010540 <prvInsertBlockIntoFreeList+0x14>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	429a      	cmp	r2, r3
 8010548:	d8f7      	bhi.n	801053a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	4413      	add	r3, r2
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	429a      	cmp	r2, r3
 801055a:	d108      	bne.n	801056e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	441a      	add	r2, r3
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	441a      	add	r2, r3
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	429a      	cmp	r2, r3
 8010580:	d118      	bne.n	80105b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	4b15      	ldr	r3, [pc, #84]	@ (80105dc <prvInsertBlockIntoFreeList+0xb0>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	429a      	cmp	r2, r3
 801058c:	d00d      	beq.n	80105aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	685a      	ldr	r2, [r3, #4]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	441a      	add	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	601a      	str	r2, [r3, #0]
 80105a8:	e008      	b.n	80105bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80105aa:	4b0c      	ldr	r3, [pc, #48]	@ (80105dc <prvInsertBlockIntoFreeList+0xb0>)
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	e003      	b.n	80105bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d002      	beq.n	80105ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105ca:	bf00      	nop
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	200083dc 	.word	0x200083dc
 80105dc:	200083e4 	.word	0x200083e4

080105e0 <realloc>:
 80105e0:	4b02      	ldr	r3, [pc, #8]	@ (80105ec <realloc+0xc>)
 80105e2:	460a      	mov	r2, r1
 80105e4:	4601      	mov	r1, r0
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	f000 b802 	b.w	80105f0 <_realloc_r>
 80105ec:	20000068 	.word	0x20000068

080105f0 <_realloc_r>:
 80105f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f4:	4680      	mov	r8, r0
 80105f6:	4615      	mov	r5, r2
 80105f8:	460c      	mov	r4, r1
 80105fa:	b921      	cbnz	r1, 8010606 <_realloc_r+0x16>
 80105fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010600:	4611      	mov	r1, r2
 8010602:	f000 baff 	b.w	8010c04 <_malloc_r>
 8010606:	b92a      	cbnz	r2, 8010614 <_realloc_r+0x24>
 8010608:	f000 fa90 	bl	8010b2c <_free_r>
 801060c:	2400      	movs	r4, #0
 801060e:	4620      	mov	r0, r4
 8010610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010614:	f000 fb82 	bl	8010d1c <_malloc_usable_size_r>
 8010618:	4285      	cmp	r5, r0
 801061a:	4606      	mov	r6, r0
 801061c:	d802      	bhi.n	8010624 <_realloc_r+0x34>
 801061e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010622:	d8f4      	bhi.n	801060e <_realloc_r+0x1e>
 8010624:	4629      	mov	r1, r5
 8010626:	4640      	mov	r0, r8
 8010628:	f000 faec 	bl	8010c04 <_malloc_r>
 801062c:	4607      	mov	r7, r0
 801062e:	2800      	cmp	r0, #0
 8010630:	d0ec      	beq.n	801060c <_realloc_r+0x1c>
 8010632:	42b5      	cmp	r5, r6
 8010634:	462a      	mov	r2, r5
 8010636:	4621      	mov	r1, r4
 8010638:	bf28      	it	cs
 801063a:	4632      	movcs	r2, r6
 801063c:	f000 fa67 	bl	8010b0e <memcpy>
 8010640:	4621      	mov	r1, r4
 8010642:	4640      	mov	r0, r8
 8010644:	f000 fa72 	bl	8010b2c <_free_r>
 8010648:	463c      	mov	r4, r7
 801064a:	e7e0      	b.n	801060e <_realloc_r+0x1e>

0801064c <__sflush_r>:
 801064c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010654:	0716      	lsls	r6, r2, #28
 8010656:	4605      	mov	r5, r0
 8010658:	460c      	mov	r4, r1
 801065a:	d454      	bmi.n	8010706 <__sflush_r+0xba>
 801065c:	684b      	ldr	r3, [r1, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	dc02      	bgt.n	8010668 <__sflush_r+0x1c>
 8010662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	dd48      	ble.n	80106fa <__sflush_r+0xae>
 8010668:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801066a:	2e00      	cmp	r6, #0
 801066c:	d045      	beq.n	80106fa <__sflush_r+0xae>
 801066e:	2300      	movs	r3, #0
 8010670:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010674:	682f      	ldr	r7, [r5, #0]
 8010676:	6a21      	ldr	r1, [r4, #32]
 8010678:	602b      	str	r3, [r5, #0]
 801067a:	d030      	beq.n	80106de <__sflush_r+0x92>
 801067c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801067e:	89a3      	ldrh	r3, [r4, #12]
 8010680:	0759      	lsls	r1, r3, #29
 8010682:	d505      	bpl.n	8010690 <__sflush_r+0x44>
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	1ad2      	subs	r2, r2, r3
 8010688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801068a:	b10b      	cbz	r3, 8010690 <__sflush_r+0x44>
 801068c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801068e:	1ad2      	subs	r2, r2, r3
 8010690:	2300      	movs	r3, #0
 8010692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010694:	6a21      	ldr	r1, [r4, #32]
 8010696:	4628      	mov	r0, r5
 8010698:	47b0      	blx	r6
 801069a:	1c43      	adds	r3, r0, #1
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	d106      	bne.n	80106ae <__sflush_r+0x62>
 80106a0:	6829      	ldr	r1, [r5, #0]
 80106a2:	291d      	cmp	r1, #29
 80106a4:	d82b      	bhi.n	80106fe <__sflush_r+0xb2>
 80106a6:	4a2a      	ldr	r2, [pc, #168]	@ (8010750 <__sflush_r+0x104>)
 80106a8:	410a      	asrs	r2, r1
 80106aa:	07d6      	lsls	r6, r2, #31
 80106ac:	d427      	bmi.n	80106fe <__sflush_r+0xb2>
 80106ae:	2200      	movs	r2, #0
 80106b0:	6062      	str	r2, [r4, #4]
 80106b2:	04d9      	lsls	r1, r3, #19
 80106b4:	6922      	ldr	r2, [r4, #16]
 80106b6:	6022      	str	r2, [r4, #0]
 80106b8:	d504      	bpl.n	80106c4 <__sflush_r+0x78>
 80106ba:	1c42      	adds	r2, r0, #1
 80106bc:	d101      	bne.n	80106c2 <__sflush_r+0x76>
 80106be:	682b      	ldr	r3, [r5, #0]
 80106c0:	b903      	cbnz	r3, 80106c4 <__sflush_r+0x78>
 80106c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80106c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80106c6:	602f      	str	r7, [r5, #0]
 80106c8:	b1b9      	cbz	r1, 80106fa <__sflush_r+0xae>
 80106ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106ce:	4299      	cmp	r1, r3
 80106d0:	d002      	beq.n	80106d8 <__sflush_r+0x8c>
 80106d2:	4628      	mov	r0, r5
 80106d4:	f000 fa2a 	bl	8010b2c <_free_r>
 80106d8:	2300      	movs	r3, #0
 80106da:	6363      	str	r3, [r4, #52]	@ 0x34
 80106dc:	e00d      	b.n	80106fa <__sflush_r+0xae>
 80106de:	2301      	movs	r3, #1
 80106e0:	4628      	mov	r0, r5
 80106e2:	47b0      	blx	r6
 80106e4:	4602      	mov	r2, r0
 80106e6:	1c50      	adds	r0, r2, #1
 80106e8:	d1c9      	bne.n	801067e <__sflush_r+0x32>
 80106ea:	682b      	ldr	r3, [r5, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d0c6      	beq.n	801067e <__sflush_r+0x32>
 80106f0:	2b1d      	cmp	r3, #29
 80106f2:	d001      	beq.n	80106f8 <__sflush_r+0xac>
 80106f4:	2b16      	cmp	r3, #22
 80106f6:	d11e      	bne.n	8010736 <__sflush_r+0xea>
 80106f8:	602f      	str	r7, [r5, #0]
 80106fa:	2000      	movs	r0, #0
 80106fc:	e022      	b.n	8010744 <__sflush_r+0xf8>
 80106fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010702:	b21b      	sxth	r3, r3
 8010704:	e01b      	b.n	801073e <__sflush_r+0xf2>
 8010706:	690f      	ldr	r7, [r1, #16]
 8010708:	2f00      	cmp	r7, #0
 801070a:	d0f6      	beq.n	80106fa <__sflush_r+0xae>
 801070c:	0793      	lsls	r3, r2, #30
 801070e:	680e      	ldr	r6, [r1, #0]
 8010710:	bf08      	it	eq
 8010712:	694b      	ldreq	r3, [r1, #20]
 8010714:	600f      	str	r7, [r1, #0]
 8010716:	bf18      	it	ne
 8010718:	2300      	movne	r3, #0
 801071a:	eba6 0807 	sub.w	r8, r6, r7
 801071e:	608b      	str	r3, [r1, #8]
 8010720:	f1b8 0f00 	cmp.w	r8, #0
 8010724:	dde9      	ble.n	80106fa <__sflush_r+0xae>
 8010726:	6a21      	ldr	r1, [r4, #32]
 8010728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801072a:	4643      	mov	r3, r8
 801072c:	463a      	mov	r2, r7
 801072e:	4628      	mov	r0, r5
 8010730:	47b0      	blx	r6
 8010732:	2800      	cmp	r0, #0
 8010734:	dc08      	bgt.n	8010748 <__sflush_r+0xfc>
 8010736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801073a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801073e:	81a3      	strh	r3, [r4, #12]
 8010740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010748:	4407      	add	r7, r0
 801074a:	eba8 0800 	sub.w	r8, r8, r0
 801074e:	e7e7      	b.n	8010720 <__sflush_r+0xd4>
 8010750:	dfbffffe 	.word	0xdfbffffe

08010754 <_fflush_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	690b      	ldr	r3, [r1, #16]
 8010758:	4605      	mov	r5, r0
 801075a:	460c      	mov	r4, r1
 801075c:	b913      	cbnz	r3, 8010764 <_fflush_r+0x10>
 801075e:	2500      	movs	r5, #0
 8010760:	4628      	mov	r0, r5
 8010762:	bd38      	pop	{r3, r4, r5, pc}
 8010764:	b118      	cbz	r0, 801076e <_fflush_r+0x1a>
 8010766:	6a03      	ldr	r3, [r0, #32]
 8010768:	b90b      	cbnz	r3, 801076e <_fflush_r+0x1a>
 801076a:	f000 f8bb 	bl	80108e4 <__sinit>
 801076e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0f3      	beq.n	801075e <_fflush_r+0xa>
 8010776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010778:	07d0      	lsls	r0, r2, #31
 801077a:	d404      	bmi.n	8010786 <_fflush_r+0x32>
 801077c:	0599      	lsls	r1, r3, #22
 801077e:	d402      	bmi.n	8010786 <_fflush_r+0x32>
 8010780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010782:	f000 f9c2 	bl	8010b0a <__retarget_lock_acquire_recursive>
 8010786:	4628      	mov	r0, r5
 8010788:	4621      	mov	r1, r4
 801078a:	f7ff ff5f 	bl	801064c <__sflush_r>
 801078e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010790:	07da      	lsls	r2, r3, #31
 8010792:	4605      	mov	r5, r0
 8010794:	d4e4      	bmi.n	8010760 <_fflush_r+0xc>
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	059b      	lsls	r3, r3, #22
 801079a:	d4e1      	bmi.n	8010760 <_fflush_r+0xc>
 801079c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801079e:	f000 f9b5 	bl	8010b0c <__retarget_lock_release_recursive>
 80107a2:	e7dd      	b.n	8010760 <_fflush_r+0xc>

080107a4 <fflush>:
 80107a4:	4601      	mov	r1, r0
 80107a6:	b920      	cbnz	r0, 80107b2 <fflush+0xe>
 80107a8:	4a04      	ldr	r2, [pc, #16]	@ (80107bc <fflush+0x18>)
 80107aa:	4905      	ldr	r1, [pc, #20]	@ (80107c0 <fflush+0x1c>)
 80107ac:	4805      	ldr	r0, [pc, #20]	@ (80107c4 <fflush+0x20>)
 80107ae:	f000 b8b1 	b.w	8010914 <_fwalk_sglue>
 80107b2:	4b05      	ldr	r3, [pc, #20]	@ (80107c8 <fflush+0x24>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	f7ff bfcd 	b.w	8010754 <_fflush_r>
 80107ba:	bf00      	nop
 80107bc:	2000005c 	.word	0x2000005c
 80107c0:	08010755 	.word	0x08010755
 80107c4:	2000006c 	.word	0x2000006c
 80107c8:	20000068 	.word	0x20000068

080107cc <std>:
 80107cc:	2300      	movs	r3, #0
 80107ce:	b510      	push	{r4, lr}
 80107d0:	4604      	mov	r4, r0
 80107d2:	e9c0 3300 	strd	r3, r3, [r0]
 80107d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107da:	6083      	str	r3, [r0, #8]
 80107dc:	8181      	strh	r1, [r0, #12]
 80107de:	6643      	str	r3, [r0, #100]	@ 0x64
 80107e0:	81c2      	strh	r2, [r0, #14]
 80107e2:	6183      	str	r3, [r0, #24]
 80107e4:	4619      	mov	r1, r3
 80107e6:	2208      	movs	r2, #8
 80107e8:	305c      	adds	r0, #92	@ 0x5c
 80107ea:	f000 f914 	bl	8010a16 <memset>
 80107ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010824 <std+0x58>)
 80107f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80107f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010828 <std+0x5c>)
 80107f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80107f6:	4b0d      	ldr	r3, [pc, #52]	@ (801082c <std+0x60>)
 80107f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80107fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010830 <std+0x64>)
 80107fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80107fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010834 <std+0x68>)
 8010800:	6224      	str	r4, [r4, #32]
 8010802:	429c      	cmp	r4, r3
 8010804:	d006      	beq.n	8010814 <std+0x48>
 8010806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801080a:	4294      	cmp	r4, r2
 801080c:	d002      	beq.n	8010814 <std+0x48>
 801080e:	33d0      	adds	r3, #208	@ 0xd0
 8010810:	429c      	cmp	r4, r3
 8010812:	d105      	bne.n	8010820 <std+0x54>
 8010814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801081c:	f000 b974 	b.w	8010b08 <__retarget_lock_init_recursive>
 8010820:	bd10      	pop	{r4, pc}
 8010822:	bf00      	nop
 8010824:	08010991 	.word	0x08010991
 8010828:	080109b3 	.word	0x080109b3
 801082c:	080109eb 	.word	0x080109eb
 8010830:	08010a0f 	.word	0x08010a0f
 8010834:	200083f4 	.word	0x200083f4

08010838 <stdio_exit_handler>:
 8010838:	4a02      	ldr	r2, [pc, #8]	@ (8010844 <stdio_exit_handler+0xc>)
 801083a:	4903      	ldr	r1, [pc, #12]	@ (8010848 <stdio_exit_handler+0x10>)
 801083c:	4803      	ldr	r0, [pc, #12]	@ (801084c <stdio_exit_handler+0x14>)
 801083e:	f000 b869 	b.w	8010914 <_fwalk_sglue>
 8010842:	bf00      	nop
 8010844:	2000005c 	.word	0x2000005c
 8010848:	08010755 	.word	0x08010755
 801084c:	2000006c 	.word	0x2000006c

08010850 <cleanup_stdio>:
 8010850:	6841      	ldr	r1, [r0, #4]
 8010852:	4b0c      	ldr	r3, [pc, #48]	@ (8010884 <cleanup_stdio+0x34>)
 8010854:	4299      	cmp	r1, r3
 8010856:	b510      	push	{r4, lr}
 8010858:	4604      	mov	r4, r0
 801085a:	d001      	beq.n	8010860 <cleanup_stdio+0x10>
 801085c:	f7ff ff7a 	bl	8010754 <_fflush_r>
 8010860:	68a1      	ldr	r1, [r4, #8]
 8010862:	4b09      	ldr	r3, [pc, #36]	@ (8010888 <cleanup_stdio+0x38>)
 8010864:	4299      	cmp	r1, r3
 8010866:	d002      	beq.n	801086e <cleanup_stdio+0x1e>
 8010868:	4620      	mov	r0, r4
 801086a:	f7ff ff73 	bl	8010754 <_fflush_r>
 801086e:	68e1      	ldr	r1, [r4, #12]
 8010870:	4b06      	ldr	r3, [pc, #24]	@ (801088c <cleanup_stdio+0x3c>)
 8010872:	4299      	cmp	r1, r3
 8010874:	d004      	beq.n	8010880 <cleanup_stdio+0x30>
 8010876:	4620      	mov	r0, r4
 8010878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801087c:	f7ff bf6a 	b.w	8010754 <_fflush_r>
 8010880:	bd10      	pop	{r4, pc}
 8010882:	bf00      	nop
 8010884:	200083f4 	.word	0x200083f4
 8010888:	2000845c 	.word	0x2000845c
 801088c:	200084c4 	.word	0x200084c4

08010890 <global_stdio_init.part.0>:
 8010890:	b510      	push	{r4, lr}
 8010892:	4b0b      	ldr	r3, [pc, #44]	@ (80108c0 <global_stdio_init.part.0+0x30>)
 8010894:	4c0b      	ldr	r4, [pc, #44]	@ (80108c4 <global_stdio_init.part.0+0x34>)
 8010896:	4a0c      	ldr	r2, [pc, #48]	@ (80108c8 <global_stdio_init.part.0+0x38>)
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	4620      	mov	r0, r4
 801089c:	2200      	movs	r2, #0
 801089e:	2104      	movs	r1, #4
 80108a0:	f7ff ff94 	bl	80107cc <std>
 80108a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80108a8:	2201      	movs	r2, #1
 80108aa:	2109      	movs	r1, #9
 80108ac:	f7ff ff8e 	bl	80107cc <std>
 80108b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80108b4:	2202      	movs	r2, #2
 80108b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108ba:	2112      	movs	r1, #18
 80108bc:	f7ff bf86 	b.w	80107cc <std>
 80108c0:	2000852c 	.word	0x2000852c
 80108c4:	200083f4 	.word	0x200083f4
 80108c8:	08010839 	.word	0x08010839

080108cc <__sfp_lock_acquire>:
 80108cc:	4801      	ldr	r0, [pc, #4]	@ (80108d4 <__sfp_lock_acquire+0x8>)
 80108ce:	f000 b91c 	b.w	8010b0a <__retarget_lock_acquire_recursive>
 80108d2:	bf00      	nop
 80108d4:	20008535 	.word	0x20008535

080108d8 <__sfp_lock_release>:
 80108d8:	4801      	ldr	r0, [pc, #4]	@ (80108e0 <__sfp_lock_release+0x8>)
 80108da:	f000 b917 	b.w	8010b0c <__retarget_lock_release_recursive>
 80108de:	bf00      	nop
 80108e0:	20008535 	.word	0x20008535

080108e4 <__sinit>:
 80108e4:	b510      	push	{r4, lr}
 80108e6:	4604      	mov	r4, r0
 80108e8:	f7ff fff0 	bl	80108cc <__sfp_lock_acquire>
 80108ec:	6a23      	ldr	r3, [r4, #32]
 80108ee:	b11b      	cbz	r3, 80108f8 <__sinit+0x14>
 80108f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f4:	f7ff bff0 	b.w	80108d8 <__sfp_lock_release>
 80108f8:	4b04      	ldr	r3, [pc, #16]	@ (801090c <__sinit+0x28>)
 80108fa:	6223      	str	r3, [r4, #32]
 80108fc:	4b04      	ldr	r3, [pc, #16]	@ (8010910 <__sinit+0x2c>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1f5      	bne.n	80108f0 <__sinit+0xc>
 8010904:	f7ff ffc4 	bl	8010890 <global_stdio_init.part.0>
 8010908:	e7f2      	b.n	80108f0 <__sinit+0xc>
 801090a:	bf00      	nop
 801090c:	08010851 	.word	0x08010851
 8010910:	2000852c 	.word	0x2000852c

08010914 <_fwalk_sglue>:
 8010914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010918:	4607      	mov	r7, r0
 801091a:	4688      	mov	r8, r1
 801091c:	4614      	mov	r4, r2
 801091e:	2600      	movs	r6, #0
 8010920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010924:	f1b9 0901 	subs.w	r9, r9, #1
 8010928:	d505      	bpl.n	8010936 <_fwalk_sglue+0x22>
 801092a:	6824      	ldr	r4, [r4, #0]
 801092c:	2c00      	cmp	r4, #0
 801092e:	d1f7      	bne.n	8010920 <_fwalk_sglue+0xc>
 8010930:	4630      	mov	r0, r6
 8010932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010936:	89ab      	ldrh	r3, [r5, #12]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d907      	bls.n	801094c <_fwalk_sglue+0x38>
 801093c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010940:	3301      	adds	r3, #1
 8010942:	d003      	beq.n	801094c <_fwalk_sglue+0x38>
 8010944:	4629      	mov	r1, r5
 8010946:	4638      	mov	r0, r7
 8010948:	47c0      	blx	r8
 801094a:	4306      	orrs	r6, r0
 801094c:	3568      	adds	r5, #104	@ 0x68
 801094e:	e7e9      	b.n	8010924 <_fwalk_sglue+0x10>

08010950 <siprintf>:
 8010950:	b40e      	push	{r1, r2, r3}
 8010952:	b500      	push	{lr}
 8010954:	b09c      	sub	sp, #112	@ 0x70
 8010956:	ab1d      	add	r3, sp, #116	@ 0x74
 8010958:	9002      	str	r0, [sp, #8]
 801095a:	9006      	str	r0, [sp, #24]
 801095c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010960:	4809      	ldr	r0, [pc, #36]	@ (8010988 <siprintf+0x38>)
 8010962:	9107      	str	r1, [sp, #28]
 8010964:	9104      	str	r1, [sp, #16]
 8010966:	4909      	ldr	r1, [pc, #36]	@ (801098c <siprintf+0x3c>)
 8010968:	f853 2b04 	ldr.w	r2, [r3], #4
 801096c:	9105      	str	r1, [sp, #20]
 801096e:	6800      	ldr	r0, [r0, #0]
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	a902      	add	r1, sp, #8
 8010974:	f000 fa36 	bl	8010de4 <_svfiprintf_r>
 8010978:	9b02      	ldr	r3, [sp, #8]
 801097a:	2200      	movs	r2, #0
 801097c:	701a      	strb	r2, [r3, #0]
 801097e:	b01c      	add	sp, #112	@ 0x70
 8010980:	f85d eb04 	ldr.w	lr, [sp], #4
 8010984:	b003      	add	sp, #12
 8010986:	4770      	bx	lr
 8010988:	20000068 	.word	0x20000068
 801098c:	ffff0208 	.word	0xffff0208

08010990 <__sread>:
 8010990:	b510      	push	{r4, lr}
 8010992:	460c      	mov	r4, r1
 8010994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010998:	f000 f868 	bl	8010a6c <_read_r>
 801099c:	2800      	cmp	r0, #0
 801099e:	bfab      	itete	ge
 80109a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80109a2:	89a3      	ldrhlt	r3, [r4, #12]
 80109a4:	181b      	addge	r3, r3, r0
 80109a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80109aa:	bfac      	ite	ge
 80109ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80109ae:	81a3      	strhlt	r3, [r4, #12]
 80109b0:	bd10      	pop	{r4, pc}

080109b2 <__swrite>:
 80109b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b6:	461f      	mov	r7, r3
 80109b8:	898b      	ldrh	r3, [r1, #12]
 80109ba:	05db      	lsls	r3, r3, #23
 80109bc:	4605      	mov	r5, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	4616      	mov	r6, r2
 80109c2:	d505      	bpl.n	80109d0 <__swrite+0x1e>
 80109c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109c8:	2302      	movs	r3, #2
 80109ca:	2200      	movs	r2, #0
 80109cc:	f000 f83c 	bl	8010a48 <_lseek_r>
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80109da:	81a3      	strh	r3, [r4, #12]
 80109dc:	4632      	mov	r2, r6
 80109de:	463b      	mov	r3, r7
 80109e0:	4628      	mov	r0, r5
 80109e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109e6:	f000 b853 	b.w	8010a90 <_write_r>

080109ea <__sseek>:
 80109ea:	b510      	push	{r4, lr}
 80109ec:	460c      	mov	r4, r1
 80109ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f2:	f000 f829 	bl	8010a48 <_lseek_r>
 80109f6:	1c43      	adds	r3, r0, #1
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	bf15      	itete	ne
 80109fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80109fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010a02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010a06:	81a3      	strheq	r3, [r4, #12]
 8010a08:	bf18      	it	ne
 8010a0a:	81a3      	strhne	r3, [r4, #12]
 8010a0c:	bd10      	pop	{r4, pc}

08010a0e <__sclose>:
 8010a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a12:	f000 b809 	b.w	8010a28 <_close_r>

08010a16 <memset>:
 8010a16:	4402      	add	r2, r0
 8010a18:	4603      	mov	r3, r0
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d100      	bne.n	8010a20 <memset+0xa>
 8010a1e:	4770      	bx	lr
 8010a20:	f803 1b01 	strb.w	r1, [r3], #1
 8010a24:	e7f9      	b.n	8010a1a <memset+0x4>
	...

08010a28 <_close_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d06      	ldr	r5, [pc, #24]	@ (8010a44 <_close_r+0x1c>)
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	4608      	mov	r0, r1
 8010a32:	602b      	str	r3, [r5, #0]
 8010a34:	f7f8 fbfd 	bl	8009232 <_close>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d102      	bne.n	8010a42 <_close_r+0x1a>
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	b103      	cbz	r3, 8010a42 <_close_r+0x1a>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	20008530 	.word	0x20008530

08010a48 <_lseek_r>:
 8010a48:	b538      	push	{r3, r4, r5, lr}
 8010a4a:	4d07      	ldr	r5, [pc, #28]	@ (8010a68 <_lseek_r+0x20>)
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	4608      	mov	r0, r1
 8010a50:	4611      	mov	r1, r2
 8010a52:	2200      	movs	r2, #0
 8010a54:	602a      	str	r2, [r5, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	f7f8 fbf7 	bl	800924a <_lseek>
 8010a5c:	1c43      	adds	r3, r0, #1
 8010a5e:	d102      	bne.n	8010a66 <_lseek_r+0x1e>
 8010a60:	682b      	ldr	r3, [r5, #0]
 8010a62:	b103      	cbz	r3, 8010a66 <_lseek_r+0x1e>
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	bd38      	pop	{r3, r4, r5, pc}
 8010a68:	20008530 	.word	0x20008530

08010a6c <_read_r>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	4d07      	ldr	r5, [pc, #28]	@ (8010a8c <_read_r+0x20>)
 8010a70:	4604      	mov	r4, r0
 8010a72:	4608      	mov	r0, r1
 8010a74:	4611      	mov	r1, r2
 8010a76:	2200      	movs	r2, #0
 8010a78:	602a      	str	r2, [r5, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f7f8 fba0 	bl	80091c0 <_read>
 8010a80:	1c43      	adds	r3, r0, #1
 8010a82:	d102      	bne.n	8010a8a <_read_r+0x1e>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	b103      	cbz	r3, 8010a8a <_read_r+0x1e>
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	bd38      	pop	{r3, r4, r5, pc}
 8010a8c:	20008530 	.word	0x20008530

08010a90 <_write_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4d07      	ldr	r5, [pc, #28]	@ (8010ab0 <_write_r+0x20>)
 8010a94:	4604      	mov	r4, r0
 8010a96:	4608      	mov	r0, r1
 8010a98:	4611      	mov	r1, r2
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	602a      	str	r2, [r5, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	f7f8 fbab 	bl	80091fa <_write>
 8010aa4:	1c43      	adds	r3, r0, #1
 8010aa6:	d102      	bne.n	8010aae <_write_r+0x1e>
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	b103      	cbz	r3, 8010aae <_write_r+0x1e>
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	bd38      	pop	{r3, r4, r5, pc}
 8010ab0:	20008530 	.word	0x20008530

08010ab4 <__errno>:
 8010ab4:	4b01      	ldr	r3, [pc, #4]	@ (8010abc <__errno+0x8>)
 8010ab6:	6818      	ldr	r0, [r3, #0]
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	20000068 	.word	0x20000068

08010ac0 <__libc_init_array>:
 8010ac0:	b570      	push	{r4, r5, r6, lr}
 8010ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8010af8 <__libc_init_array+0x38>)
 8010ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8010afc <__libc_init_array+0x3c>)
 8010ac6:	1b64      	subs	r4, r4, r5
 8010ac8:	10a4      	asrs	r4, r4, #2
 8010aca:	2600      	movs	r6, #0
 8010acc:	42a6      	cmp	r6, r4
 8010ace:	d109      	bne.n	8010ae4 <__libc_init_array+0x24>
 8010ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8010b00 <__libc_init_array+0x40>)
 8010ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8010b04 <__libc_init_array+0x44>)
 8010ad4:	f000 fc3a 	bl	801134c <_init>
 8010ad8:	1b64      	subs	r4, r4, r5
 8010ada:	10a4      	asrs	r4, r4, #2
 8010adc:	2600      	movs	r6, #0
 8010ade:	42a6      	cmp	r6, r4
 8010ae0:	d105      	bne.n	8010aee <__libc_init_array+0x2e>
 8010ae2:	bd70      	pop	{r4, r5, r6, pc}
 8010ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ae8:	4798      	blx	r3
 8010aea:	3601      	adds	r6, #1
 8010aec:	e7ee      	b.n	8010acc <__libc_init_array+0xc>
 8010aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8010af2:	4798      	blx	r3
 8010af4:	3601      	adds	r6, #1
 8010af6:	e7f2      	b.n	8010ade <__libc_init_array+0x1e>
 8010af8:	080138bc 	.word	0x080138bc
 8010afc:	080138bc 	.word	0x080138bc
 8010b00:	080138bc 	.word	0x080138bc
 8010b04:	080138c4 	.word	0x080138c4

08010b08 <__retarget_lock_init_recursive>:
 8010b08:	4770      	bx	lr

08010b0a <__retarget_lock_acquire_recursive>:
 8010b0a:	4770      	bx	lr

08010b0c <__retarget_lock_release_recursive>:
 8010b0c:	4770      	bx	lr

08010b0e <memcpy>:
 8010b0e:	440a      	add	r2, r1
 8010b10:	4291      	cmp	r1, r2
 8010b12:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010b16:	d100      	bne.n	8010b1a <memcpy+0xc>
 8010b18:	4770      	bx	lr
 8010b1a:	b510      	push	{r4, lr}
 8010b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b24:	4291      	cmp	r1, r2
 8010b26:	d1f9      	bne.n	8010b1c <memcpy+0xe>
 8010b28:	bd10      	pop	{r4, pc}
	...

08010b2c <_free_r>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	4605      	mov	r5, r0
 8010b30:	2900      	cmp	r1, #0
 8010b32:	d041      	beq.n	8010bb8 <_free_r+0x8c>
 8010b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b38:	1f0c      	subs	r4, r1, #4
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	bfb8      	it	lt
 8010b3e:	18e4      	addlt	r4, r4, r3
 8010b40:	f000 f8e0 	bl	8010d04 <__malloc_lock>
 8010b44:	4a1d      	ldr	r2, [pc, #116]	@ (8010bbc <_free_r+0x90>)
 8010b46:	6813      	ldr	r3, [r2, #0]
 8010b48:	b933      	cbnz	r3, 8010b58 <_free_r+0x2c>
 8010b4a:	6063      	str	r3, [r4, #4]
 8010b4c:	6014      	str	r4, [r2, #0]
 8010b4e:	4628      	mov	r0, r5
 8010b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b54:	f000 b8dc 	b.w	8010d10 <__malloc_unlock>
 8010b58:	42a3      	cmp	r3, r4
 8010b5a:	d908      	bls.n	8010b6e <_free_r+0x42>
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	1821      	adds	r1, r4, r0
 8010b60:	428b      	cmp	r3, r1
 8010b62:	bf01      	itttt	eq
 8010b64:	6819      	ldreq	r1, [r3, #0]
 8010b66:	685b      	ldreq	r3, [r3, #4]
 8010b68:	1809      	addeq	r1, r1, r0
 8010b6a:	6021      	streq	r1, [r4, #0]
 8010b6c:	e7ed      	b.n	8010b4a <_free_r+0x1e>
 8010b6e:	461a      	mov	r2, r3
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	b10b      	cbz	r3, 8010b78 <_free_r+0x4c>
 8010b74:	42a3      	cmp	r3, r4
 8010b76:	d9fa      	bls.n	8010b6e <_free_r+0x42>
 8010b78:	6811      	ldr	r1, [r2, #0]
 8010b7a:	1850      	adds	r0, r2, r1
 8010b7c:	42a0      	cmp	r0, r4
 8010b7e:	d10b      	bne.n	8010b98 <_free_r+0x6c>
 8010b80:	6820      	ldr	r0, [r4, #0]
 8010b82:	4401      	add	r1, r0
 8010b84:	1850      	adds	r0, r2, r1
 8010b86:	4283      	cmp	r3, r0
 8010b88:	6011      	str	r1, [r2, #0]
 8010b8a:	d1e0      	bne.n	8010b4e <_free_r+0x22>
 8010b8c:	6818      	ldr	r0, [r3, #0]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	6053      	str	r3, [r2, #4]
 8010b92:	4408      	add	r0, r1
 8010b94:	6010      	str	r0, [r2, #0]
 8010b96:	e7da      	b.n	8010b4e <_free_r+0x22>
 8010b98:	d902      	bls.n	8010ba0 <_free_r+0x74>
 8010b9a:	230c      	movs	r3, #12
 8010b9c:	602b      	str	r3, [r5, #0]
 8010b9e:	e7d6      	b.n	8010b4e <_free_r+0x22>
 8010ba0:	6820      	ldr	r0, [r4, #0]
 8010ba2:	1821      	adds	r1, r4, r0
 8010ba4:	428b      	cmp	r3, r1
 8010ba6:	bf04      	itt	eq
 8010ba8:	6819      	ldreq	r1, [r3, #0]
 8010baa:	685b      	ldreq	r3, [r3, #4]
 8010bac:	6063      	str	r3, [r4, #4]
 8010bae:	bf04      	itt	eq
 8010bb0:	1809      	addeq	r1, r1, r0
 8010bb2:	6021      	streq	r1, [r4, #0]
 8010bb4:	6054      	str	r4, [r2, #4]
 8010bb6:	e7ca      	b.n	8010b4e <_free_r+0x22>
 8010bb8:	bd38      	pop	{r3, r4, r5, pc}
 8010bba:	bf00      	nop
 8010bbc:	2000853c 	.word	0x2000853c

08010bc0 <sbrk_aligned>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8010c00 <sbrk_aligned+0x40>)
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	6831      	ldr	r1, [r6, #0]
 8010bc8:	4605      	mov	r5, r0
 8010bca:	b911      	cbnz	r1, 8010bd2 <sbrk_aligned+0x12>
 8010bcc:	f000 fbae 	bl	801132c <_sbrk_r>
 8010bd0:	6030      	str	r0, [r6, #0]
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f000 fba9 	bl	801132c <_sbrk_r>
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	d103      	bne.n	8010be6 <sbrk_aligned+0x26>
 8010bde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010be2:	4620      	mov	r0, r4
 8010be4:	bd70      	pop	{r4, r5, r6, pc}
 8010be6:	1cc4      	adds	r4, r0, #3
 8010be8:	f024 0403 	bic.w	r4, r4, #3
 8010bec:	42a0      	cmp	r0, r4
 8010bee:	d0f8      	beq.n	8010be2 <sbrk_aligned+0x22>
 8010bf0:	1a21      	subs	r1, r4, r0
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 fb9a 	bl	801132c <_sbrk_r>
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d1f2      	bne.n	8010be2 <sbrk_aligned+0x22>
 8010bfc:	e7ef      	b.n	8010bde <sbrk_aligned+0x1e>
 8010bfe:	bf00      	nop
 8010c00:	20008538 	.word	0x20008538

08010c04 <_malloc_r>:
 8010c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c08:	1ccd      	adds	r5, r1, #3
 8010c0a:	f025 0503 	bic.w	r5, r5, #3
 8010c0e:	3508      	adds	r5, #8
 8010c10:	2d0c      	cmp	r5, #12
 8010c12:	bf38      	it	cc
 8010c14:	250c      	movcc	r5, #12
 8010c16:	2d00      	cmp	r5, #0
 8010c18:	4606      	mov	r6, r0
 8010c1a:	db01      	blt.n	8010c20 <_malloc_r+0x1c>
 8010c1c:	42a9      	cmp	r1, r5
 8010c1e:	d904      	bls.n	8010c2a <_malloc_r+0x26>
 8010c20:	230c      	movs	r3, #12
 8010c22:	6033      	str	r3, [r6, #0]
 8010c24:	2000      	movs	r0, #0
 8010c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d00 <_malloc_r+0xfc>
 8010c2e:	f000 f869 	bl	8010d04 <__malloc_lock>
 8010c32:	f8d8 3000 	ldr.w	r3, [r8]
 8010c36:	461c      	mov	r4, r3
 8010c38:	bb44      	cbnz	r4, 8010c8c <_malloc_r+0x88>
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7ff ffbf 	bl	8010bc0 <sbrk_aligned>
 8010c42:	1c43      	adds	r3, r0, #1
 8010c44:	4604      	mov	r4, r0
 8010c46:	d158      	bne.n	8010cfa <_malloc_r+0xf6>
 8010c48:	f8d8 4000 	ldr.w	r4, [r8]
 8010c4c:	4627      	mov	r7, r4
 8010c4e:	2f00      	cmp	r7, #0
 8010c50:	d143      	bne.n	8010cda <_malloc_r+0xd6>
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d04b      	beq.n	8010cee <_malloc_r+0xea>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	4639      	mov	r1, r7
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	eb04 0903 	add.w	r9, r4, r3
 8010c60:	f000 fb64 	bl	801132c <_sbrk_r>
 8010c64:	4581      	cmp	r9, r0
 8010c66:	d142      	bne.n	8010cee <_malloc_r+0xea>
 8010c68:	6821      	ldr	r1, [r4, #0]
 8010c6a:	1a6d      	subs	r5, r5, r1
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f7ff ffa6 	bl	8010bc0 <sbrk_aligned>
 8010c74:	3001      	adds	r0, #1
 8010c76:	d03a      	beq.n	8010cee <_malloc_r+0xea>
 8010c78:	6823      	ldr	r3, [r4, #0]
 8010c7a:	442b      	add	r3, r5
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	bb62      	cbnz	r2, 8010ce0 <_malloc_r+0xdc>
 8010c86:	f8c8 7000 	str.w	r7, [r8]
 8010c8a:	e00f      	b.n	8010cac <_malloc_r+0xa8>
 8010c8c:	6822      	ldr	r2, [r4, #0]
 8010c8e:	1b52      	subs	r2, r2, r5
 8010c90:	d420      	bmi.n	8010cd4 <_malloc_r+0xd0>
 8010c92:	2a0b      	cmp	r2, #11
 8010c94:	d917      	bls.n	8010cc6 <_malloc_r+0xc2>
 8010c96:	1961      	adds	r1, r4, r5
 8010c98:	42a3      	cmp	r3, r4
 8010c9a:	6025      	str	r5, [r4, #0]
 8010c9c:	bf18      	it	ne
 8010c9e:	6059      	strne	r1, [r3, #4]
 8010ca0:	6863      	ldr	r3, [r4, #4]
 8010ca2:	bf08      	it	eq
 8010ca4:	f8c8 1000 	streq.w	r1, [r8]
 8010ca8:	5162      	str	r2, [r4, r5]
 8010caa:	604b      	str	r3, [r1, #4]
 8010cac:	4630      	mov	r0, r6
 8010cae:	f000 f82f 	bl	8010d10 <__malloc_unlock>
 8010cb2:	f104 000b 	add.w	r0, r4, #11
 8010cb6:	1d23      	adds	r3, r4, #4
 8010cb8:	f020 0007 	bic.w	r0, r0, #7
 8010cbc:	1ac2      	subs	r2, r0, r3
 8010cbe:	bf1c      	itt	ne
 8010cc0:	1a1b      	subne	r3, r3, r0
 8010cc2:	50a3      	strne	r3, [r4, r2]
 8010cc4:	e7af      	b.n	8010c26 <_malloc_r+0x22>
 8010cc6:	6862      	ldr	r2, [r4, #4]
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	bf0c      	ite	eq
 8010ccc:	f8c8 2000 	streq.w	r2, [r8]
 8010cd0:	605a      	strne	r2, [r3, #4]
 8010cd2:	e7eb      	b.n	8010cac <_malloc_r+0xa8>
 8010cd4:	4623      	mov	r3, r4
 8010cd6:	6864      	ldr	r4, [r4, #4]
 8010cd8:	e7ae      	b.n	8010c38 <_malloc_r+0x34>
 8010cda:	463c      	mov	r4, r7
 8010cdc:	687f      	ldr	r7, [r7, #4]
 8010cde:	e7b6      	b.n	8010c4e <_malloc_r+0x4a>
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	42a3      	cmp	r3, r4
 8010ce6:	d1fb      	bne.n	8010ce0 <_malloc_r+0xdc>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6053      	str	r3, [r2, #4]
 8010cec:	e7de      	b.n	8010cac <_malloc_r+0xa8>
 8010cee:	230c      	movs	r3, #12
 8010cf0:	6033      	str	r3, [r6, #0]
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f000 f80c 	bl	8010d10 <__malloc_unlock>
 8010cf8:	e794      	b.n	8010c24 <_malloc_r+0x20>
 8010cfa:	6005      	str	r5, [r0, #0]
 8010cfc:	e7d6      	b.n	8010cac <_malloc_r+0xa8>
 8010cfe:	bf00      	nop
 8010d00:	2000853c 	.word	0x2000853c

08010d04 <__malloc_lock>:
 8010d04:	4801      	ldr	r0, [pc, #4]	@ (8010d0c <__malloc_lock+0x8>)
 8010d06:	f7ff bf00 	b.w	8010b0a <__retarget_lock_acquire_recursive>
 8010d0a:	bf00      	nop
 8010d0c:	20008534 	.word	0x20008534

08010d10 <__malloc_unlock>:
 8010d10:	4801      	ldr	r0, [pc, #4]	@ (8010d18 <__malloc_unlock+0x8>)
 8010d12:	f7ff befb 	b.w	8010b0c <__retarget_lock_release_recursive>
 8010d16:	bf00      	nop
 8010d18:	20008534 	.word	0x20008534

08010d1c <_malloc_usable_size_r>:
 8010d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d20:	1f18      	subs	r0, r3, #4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	bfbc      	itt	lt
 8010d26:	580b      	ldrlt	r3, [r1, r0]
 8010d28:	18c0      	addlt	r0, r0, r3
 8010d2a:	4770      	bx	lr

08010d2c <__ssputs_r>:
 8010d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d30:	688e      	ldr	r6, [r1, #8]
 8010d32:	461f      	mov	r7, r3
 8010d34:	42be      	cmp	r6, r7
 8010d36:	680b      	ldr	r3, [r1, #0]
 8010d38:	4682      	mov	sl, r0
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	4690      	mov	r8, r2
 8010d3e:	d82d      	bhi.n	8010d9c <__ssputs_r+0x70>
 8010d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d48:	d026      	beq.n	8010d98 <__ssputs_r+0x6c>
 8010d4a:	6965      	ldr	r5, [r4, #20]
 8010d4c:	6909      	ldr	r1, [r1, #16]
 8010d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d52:	eba3 0901 	sub.w	r9, r3, r1
 8010d56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d5a:	1c7b      	adds	r3, r7, #1
 8010d5c:	444b      	add	r3, r9
 8010d5e:	106d      	asrs	r5, r5, #1
 8010d60:	429d      	cmp	r5, r3
 8010d62:	bf38      	it	cc
 8010d64:	461d      	movcc	r5, r3
 8010d66:	0553      	lsls	r3, r2, #21
 8010d68:	d527      	bpl.n	8010dba <__ssputs_r+0x8e>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	f7ff ff4a 	bl	8010c04 <_malloc_r>
 8010d70:	4606      	mov	r6, r0
 8010d72:	b360      	cbz	r0, 8010dce <__ssputs_r+0xa2>
 8010d74:	6921      	ldr	r1, [r4, #16]
 8010d76:	464a      	mov	r2, r9
 8010d78:	f7ff fec9 	bl	8010b0e <memcpy>
 8010d7c:	89a3      	ldrh	r3, [r4, #12]
 8010d7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d86:	81a3      	strh	r3, [r4, #12]
 8010d88:	6126      	str	r6, [r4, #16]
 8010d8a:	6165      	str	r5, [r4, #20]
 8010d8c:	444e      	add	r6, r9
 8010d8e:	eba5 0509 	sub.w	r5, r5, r9
 8010d92:	6026      	str	r6, [r4, #0]
 8010d94:	60a5      	str	r5, [r4, #8]
 8010d96:	463e      	mov	r6, r7
 8010d98:	42be      	cmp	r6, r7
 8010d9a:	d900      	bls.n	8010d9e <__ssputs_r+0x72>
 8010d9c:	463e      	mov	r6, r7
 8010d9e:	6820      	ldr	r0, [r4, #0]
 8010da0:	4632      	mov	r2, r6
 8010da2:	4641      	mov	r1, r8
 8010da4:	f000 faa8 	bl	80112f8 <memmove>
 8010da8:	68a3      	ldr	r3, [r4, #8]
 8010daa:	1b9b      	subs	r3, r3, r6
 8010dac:	60a3      	str	r3, [r4, #8]
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	4433      	add	r3, r6
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	2000      	movs	r0, #0
 8010db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dba:	462a      	mov	r2, r5
 8010dbc:	f7ff fc18 	bl	80105f0 <_realloc_r>
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d1e0      	bne.n	8010d88 <__ssputs_r+0x5c>
 8010dc6:	6921      	ldr	r1, [r4, #16]
 8010dc8:	4650      	mov	r0, sl
 8010dca:	f7ff feaf 	bl	8010b2c <_free_r>
 8010dce:	230c      	movs	r3, #12
 8010dd0:	f8ca 3000 	str.w	r3, [sl]
 8010dd4:	89a3      	ldrh	r3, [r4, #12]
 8010dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dda:	81a3      	strh	r3, [r4, #12]
 8010ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010de0:	e7e9      	b.n	8010db6 <__ssputs_r+0x8a>
	...

08010de4 <_svfiprintf_r>:
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	4698      	mov	r8, r3
 8010dea:	898b      	ldrh	r3, [r1, #12]
 8010dec:	061b      	lsls	r3, r3, #24
 8010dee:	b09d      	sub	sp, #116	@ 0x74
 8010df0:	4607      	mov	r7, r0
 8010df2:	460d      	mov	r5, r1
 8010df4:	4614      	mov	r4, r2
 8010df6:	d510      	bpl.n	8010e1a <_svfiprintf_r+0x36>
 8010df8:	690b      	ldr	r3, [r1, #16]
 8010dfa:	b973      	cbnz	r3, 8010e1a <_svfiprintf_r+0x36>
 8010dfc:	2140      	movs	r1, #64	@ 0x40
 8010dfe:	f7ff ff01 	bl	8010c04 <_malloc_r>
 8010e02:	6028      	str	r0, [r5, #0]
 8010e04:	6128      	str	r0, [r5, #16]
 8010e06:	b930      	cbnz	r0, 8010e16 <_svfiprintf_r+0x32>
 8010e08:	230c      	movs	r3, #12
 8010e0a:	603b      	str	r3, [r7, #0]
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e10:	b01d      	add	sp, #116	@ 0x74
 8010e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e16:	2340      	movs	r3, #64	@ 0x40
 8010e18:	616b      	str	r3, [r5, #20]
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e1e:	2320      	movs	r3, #32
 8010e20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e28:	2330      	movs	r3, #48	@ 0x30
 8010e2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010fc8 <_svfiprintf_r+0x1e4>
 8010e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e32:	f04f 0901 	mov.w	r9, #1
 8010e36:	4623      	mov	r3, r4
 8010e38:	469a      	mov	sl, r3
 8010e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e3e:	b10a      	cbz	r2, 8010e44 <_svfiprintf_r+0x60>
 8010e40:	2a25      	cmp	r2, #37	@ 0x25
 8010e42:	d1f9      	bne.n	8010e38 <_svfiprintf_r+0x54>
 8010e44:	ebba 0b04 	subs.w	fp, sl, r4
 8010e48:	d00b      	beq.n	8010e62 <_svfiprintf_r+0x7e>
 8010e4a:	465b      	mov	r3, fp
 8010e4c:	4622      	mov	r2, r4
 8010e4e:	4629      	mov	r1, r5
 8010e50:	4638      	mov	r0, r7
 8010e52:	f7ff ff6b 	bl	8010d2c <__ssputs_r>
 8010e56:	3001      	adds	r0, #1
 8010e58:	f000 80a7 	beq.w	8010faa <_svfiprintf_r+0x1c6>
 8010e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e5e:	445a      	add	r2, fp
 8010e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e62:	f89a 3000 	ldrb.w	r3, [sl]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f000 809f 	beq.w	8010faa <_svfiprintf_r+0x1c6>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e76:	f10a 0a01 	add.w	sl, sl, #1
 8010e7a:	9304      	str	r3, [sp, #16]
 8010e7c:	9307      	str	r3, [sp, #28]
 8010e7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e82:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e84:	4654      	mov	r4, sl
 8010e86:	2205      	movs	r2, #5
 8010e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8c:	484e      	ldr	r0, [pc, #312]	@ (8010fc8 <_svfiprintf_r+0x1e4>)
 8010e8e:	f7ef f9c7 	bl	8000220 <memchr>
 8010e92:	9a04      	ldr	r2, [sp, #16]
 8010e94:	b9d8      	cbnz	r0, 8010ece <_svfiprintf_r+0xea>
 8010e96:	06d0      	lsls	r0, r2, #27
 8010e98:	bf44      	itt	mi
 8010e9a:	2320      	movmi	r3, #32
 8010e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ea0:	0711      	lsls	r1, r2, #28
 8010ea2:	bf44      	itt	mi
 8010ea4:	232b      	movmi	r3, #43	@ 0x2b
 8010ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8010eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eb0:	d015      	beq.n	8010ede <_svfiprintf_r+0xfa>
 8010eb2:	9a07      	ldr	r2, [sp, #28]
 8010eb4:	4654      	mov	r4, sl
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	f04f 0c0a 	mov.w	ip, #10
 8010ebc:	4621      	mov	r1, r4
 8010ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ec2:	3b30      	subs	r3, #48	@ 0x30
 8010ec4:	2b09      	cmp	r3, #9
 8010ec6:	d94b      	bls.n	8010f60 <_svfiprintf_r+0x17c>
 8010ec8:	b1b0      	cbz	r0, 8010ef8 <_svfiprintf_r+0x114>
 8010eca:	9207      	str	r2, [sp, #28]
 8010ecc:	e014      	b.n	8010ef8 <_svfiprintf_r+0x114>
 8010ece:	eba0 0308 	sub.w	r3, r0, r8
 8010ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	9304      	str	r3, [sp, #16]
 8010eda:	46a2      	mov	sl, r4
 8010edc:	e7d2      	b.n	8010e84 <_svfiprintf_r+0xa0>
 8010ede:	9b03      	ldr	r3, [sp, #12]
 8010ee0:	1d19      	adds	r1, r3, #4
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	9103      	str	r1, [sp, #12]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	bfbb      	ittet	lt
 8010eea:	425b      	neglt	r3, r3
 8010eec:	f042 0202 	orrlt.w	r2, r2, #2
 8010ef0:	9307      	strge	r3, [sp, #28]
 8010ef2:	9307      	strlt	r3, [sp, #28]
 8010ef4:	bfb8      	it	lt
 8010ef6:	9204      	strlt	r2, [sp, #16]
 8010ef8:	7823      	ldrb	r3, [r4, #0]
 8010efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010efc:	d10a      	bne.n	8010f14 <_svfiprintf_r+0x130>
 8010efe:	7863      	ldrb	r3, [r4, #1]
 8010f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f02:	d132      	bne.n	8010f6a <_svfiprintf_r+0x186>
 8010f04:	9b03      	ldr	r3, [sp, #12]
 8010f06:	1d1a      	adds	r2, r3, #4
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	9203      	str	r2, [sp, #12]
 8010f0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f10:	3402      	adds	r4, #2
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010fd8 <_svfiprintf_r+0x1f4>
 8010f18:	7821      	ldrb	r1, [r4, #0]
 8010f1a:	2203      	movs	r2, #3
 8010f1c:	4650      	mov	r0, sl
 8010f1e:	f7ef f97f 	bl	8000220 <memchr>
 8010f22:	b138      	cbz	r0, 8010f34 <_svfiprintf_r+0x150>
 8010f24:	9b04      	ldr	r3, [sp, #16]
 8010f26:	eba0 000a 	sub.w	r0, r0, sl
 8010f2a:	2240      	movs	r2, #64	@ 0x40
 8010f2c:	4082      	lsls	r2, r0
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	3401      	adds	r4, #1
 8010f32:	9304      	str	r3, [sp, #16]
 8010f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f38:	4824      	ldr	r0, [pc, #144]	@ (8010fcc <_svfiprintf_r+0x1e8>)
 8010f3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f3e:	2206      	movs	r2, #6
 8010f40:	f7ef f96e 	bl	8000220 <memchr>
 8010f44:	2800      	cmp	r0, #0
 8010f46:	d036      	beq.n	8010fb6 <_svfiprintf_r+0x1d2>
 8010f48:	4b21      	ldr	r3, [pc, #132]	@ (8010fd0 <_svfiprintf_r+0x1ec>)
 8010f4a:	bb1b      	cbnz	r3, 8010f94 <_svfiprintf_r+0x1b0>
 8010f4c:	9b03      	ldr	r3, [sp, #12]
 8010f4e:	3307      	adds	r3, #7
 8010f50:	f023 0307 	bic.w	r3, r3, #7
 8010f54:	3308      	adds	r3, #8
 8010f56:	9303      	str	r3, [sp, #12]
 8010f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f5a:	4433      	add	r3, r6
 8010f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f5e:	e76a      	b.n	8010e36 <_svfiprintf_r+0x52>
 8010f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f64:	460c      	mov	r4, r1
 8010f66:	2001      	movs	r0, #1
 8010f68:	e7a8      	b.n	8010ebc <_svfiprintf_r+0xd8>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	3401      	adds	r4, #1
 8010f6e:	9305      	str	r3, [sp, #20]
 8010f70:	4619      	mov	r1, r3
 8010f72:	f04f 0c0a 	mov.w	ip, #10
 8010f76:	4620      	mov	r0, r4
 8010f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f7c:	3a30      	subs	r2, #48	@ 0x30
 8010f7e:	2a09      	cmp	r2, #9
 8010f80:	d903      	bls.n	8010f8a <_svfiprintf_r+0x1a6>
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d0c6      	beq.n	8010f14 <_svfiprintf_r+0x130>
 8010f86:	9105      	str	r1, [sp, #20]
 8010f88:	e7c4      	b.n	8010f14 <_svfiprintf_r+0x130>
 8010f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f8e:	4604      	mov	r4, r0
 8010f90:	2301      	movs	r3, #1
 8010f92:	e7f0      	b.n	8010f76 <_svfiprintf_r+0x192>
 8010f94:	ab03      	add	r3, sp, #12
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	462a      	mov	r2, r5
 8010f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010fd4 <_svfiprintf_r+0x1f0>)
 8010f9c:	a904      	add	r1, sp, #16
 8010f9e:	4638      	mov	r0, r7
 8010fa0:	f3af 8000 	nop.w
 8010fa4:	1c42      	adds	r2, r0, #1
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	d1d6      	bne.n	8010f58 <_svfiprintf_r+0x174>
 8010faa:	89ab      	ldrh	r3, [r5, #12]
 8010fac:	065b      	lsls	r3, r3, #25
 8010fae:	f53f af2d 	bmi.w	8010e0c <_svfiprintf_r+0x28>
 8010fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fb4:	e72c      	b.n	8010e10 <_svfiprintf_r+0x2c>
 8010fb6:	ab03      	add	r3, sp, #12
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	462a      	mov	r2, r5
 8010fbc:	4b05      	ldr	r3, [pc, #20]	@ (8010fd4 <_svfiprintf_r+0x1f0>)
 8010fbe:	a904      	add	r1, sp, #16
 8010fc0:	4638      	mov	r0, r7
 8010fc2:	f000 f879 	bl	80110b8 <_printf_i>
 8010fc6:	e7ed      	b.n	8010fa4 <_svfiprintf_r+0x1c0>
 8010fc8:	08013880 	.word	0x08013880
 8010fcc:	0801388a 	.word	0x0801388a
 8010fd0:	00000000 	.word	0x00000000
 8010fd4:	08010d2d 	.word	0x08010d2d
 8010fd8:	08013886 	.word	0x08013886

08010fdc <_printf_common>:
 8010fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe0:	4616      	mov	r6, r2
 8010fe2:	4698      	mov	r8, r3
 8010fe4:	688a      	ldr	r2, [r1, #8]
 8010fe6:	690b      	ldr	r3, [r1, #16]
 8010fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010fec:	4293      	cmp	r3, r2
 8010fee:	bfb8      	it	lt
 8010ff0:	4613      	movlt	r3, r2
 8010ff2:	6033      	str	r3, [r6, #0]
 8010ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ff8:	4607      	mov	r7, r0
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	b10a      	cbz	r2, 8011002 <_printf_common+0x26>
 8010ffe:	3301      	adds	r3, #1
 8011000:	6033      	str	r3, [r6, #0]
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	0699      	lsls	r1, r3, #26
 8011006:	bf42      	ittt	mi
 8011008:	6833      	ldrmi	r3, [r6, #0]
 801100a:	3302      	addmi	r3, #2
 801100c:	6033      	strmi	r3, [r6, #0]
 801100e:	6825      	ldr	r5, [r4, #0]
 8011010:	f015 0506 	ands.w	r5, r5, #6
 8011014:	d106      	bne.n	8011024 <_printf_common+0x48>
 8011016:	f104 0a19 	add.w	sl, r4, #25
 801101a:	68e3      	ldr	r3, [r4, #12]
 801101c:	6832      	ldr	r2, [r6, #0]
 801101e:	1a9b      	subs	r3, r3, r2
 8011020:	42ab      	cmp	r3, r5
 8011022:	dc26      	bgt.n	8011072 <_printf_common+0x96>
 8011024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011028:	6822      	ldr	r2, [r4, #0]
 801102a:	3b00      	subs	r3, #0
 801102c:	bf18      	it	ne
 801102e:	2301      	movne	r3, #1
 8011030:	0692      	lsls	r2, r2, #26
 8011032:	d42b      	bmi.n	801108c <_printf_common+0xb0>
 8011034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011038:	4641      	mov	r1, r8
 801103a:	4638      	mov	r0, r7
 801103c:	47c8      	blx	r9
 801103e:	3001      	adds	r0, #1
 8011040:	d01e      	beq.n	8011080 <_printf_common+0xa4>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	6922      	ldr	r2, [r4, #16]
 8011046:	f003 0306 	and.w	r3, r3, #6
 801104a:	2b04      	cmp	r3, #4
 801104c:	bf02      	ittt	eq
 801104e:	68e5      	ldreq	r5, [r4, #12]
 8011050:	6833      	ldreq	r3, [r6, #0]
 8011052:	1aed      	subeq	r5, r5, r3
 8011054:	68a3      	ldr	r3, [r4, #8]
 8011056:	bf0c      	ite	eq
 8011058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801105c:	2500      	movne	r5, #0
 801105e:	4293      	cmp	r3, r2
 8011060:	bfc4      	itt	gt
 8011062:	1a9b      	subgt	r3, r3, r2
 8011064:	18ed      	addgt	r5, r5, r3
 8011066:	2600      	movs	r6, #0
 8011068:	341a      	adds	r4, #26
 801106a:	42b5      	cmp	r5, r6
 801106c:	d11a      	bne.n	80110a4 <_printf_common+0xc8>
 801106e:	2000      	movs	r0, #0
 8011070:	e008      	b.n	8011084 <_printf_common+0xa8>
 8011072:	2301      	movs	r3, #1
 8011074:	4652      	mov	r2, sl
 8011076:	4641      	mov	r1, r8
 8011078:	4638      	mov	r0, r7
 801107a:	47c8      	blx	r9
 801107c:	3001      	adds	r0, #1
 801107e:	d103      	bne.n	8011088 <_printf_common+0xac>
 8011080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011088:	3501      	adds	r5, #1
 801108a:	e7c6      	b.n	801101a <_printf_common+0x3e>
 801108c:	18e1      	adds	r1, r4, r3
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	2030      	movs	r0, #48	@ 0x30
 8011092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011096:	4422      	add	r2, r4
 8011098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801109c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80110a0:	3302      	adds	r3, #2
 80110a2:	e7c7      	b.n	8011034 <_printf_common+0x58>
 80110a4:	2301      	movs	r3, #1
 80110a6:	4622      	mov	r2, r4
 80110a8:	4641      	mov	r1, r8
 80110aa:	4638      	mov	r0, r7
 80110ac:	47c8      	blx	r9
 80110ae:	3001      	adds	r0, #1
 80110b0:	d0e6      	beq.n	8011080 <_printf_common+0xa4>
 80110b2:	3601      	adds	r6, #1
 80110b4:	e7d9      	b.n	801106a <_printf_common+0x8e>
	...

080110b8 <_printf_i>:
 80110b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110bc:	7e0f      	ldrb	r7, [r1, #24]
 80110be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80110c0:	2f78      	cmp	r7, #120	@ 0x78
 80110c2:	4691      	mov	r9, r2
 80110c4:	4680      	mov	r8, r0
 80110c6:	460c      	mov	r4, r1
 80110c8:	469a      	mov	sl, r3
 80110ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80110ce:	d807      	bhi.n	80110e0 <_printf_i+0x28>
 80110d0:	2f62      	cmp	r7, #98	@ 0x62
 80110d2:	d80a      	bhi.n	80110ea <_printf_i+0x32>
 80110d4:	2f00      	cmp	r7, #0
 80110d6:	f000 80d2 	beq.w	801127e <_printf_i+0x1c6>
 80110da:	2f58      	cmp	r7, #88	@ 0x58
 80110dc:	f000 80b9 	beq.w	8011252 <_printf_i+0x19a>
 80110e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80110e8:	e03a      	b.n	8011160 <_printf_i+0xa8>
 80110ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80110ee:	2b15      	cmp	r3, #21
 80110f0:	d8f6      	bhi.n	80110e0 <_printf_i+0x28>
 80110f2:	a101      	add	r1, pc, #4	@ (adr r1, 80110f8 <_printf_i+0x40>)
 80110f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110f8:	08011151 	.word	0x08011151
 80110fc:	08011165 	.word	0x08011165
 8011100:	080110e1 	.word	0x080110e1
 8011104:	080110e1 	.word	0x080110e1
 8011108:	080110e1 	.word	0x080110e1
 801110c:	080110e1 	.word	0x080110e1
 8011110:	08011165 	.word	0x08011165
 8011114:	080110e1 	.word	0x080110e1
 8011118:	080110e1 	.word	0x080110e1
 801111c:	080110e1 	.word	0x080110e1
 8011120:	080110e1 	.word	0x080110e1
 8011124:	08011265 	.word	0x08011265
 8011128:	0801118f 	.word	0x0801118f
 801112c:	0801121f 	.word	0x0801121f
 8011130:	080110e1 	.word	0x080110e1
 8011134:	080110e1 	.word	0x080110e1
 8011138:	08011287 	.word	0x08011287
 801113c:	080110e1 	.word	0x080110e1
 8011140:	0801118f 	.word	0x0801118f
 8011144:	080110e1 	.word	0x080110e1
 8011148:	080110e1 	.word	0x080110e1
 801114c:	08011227 	.word	0x08011227
 8011150:	6833      	ldr	r3, [r6, #0]
 8011152:	1d1a      	adds	r2, r3, #4
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	6032      	str	r2, [r6, #0]
 8011158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801115c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011160:	2301      	movs	r3, #1
 8011162:	e09d      	b.n	80112a0 <_printf_i+0x1e8>
 8011164:	6833      	ldr	r3, [r6, #0]
 8011166:	6820      	ldr	r0, [r4, #0]
 8011168:	1d19      	adds	r1, r3, #4
 801116a:	6031      	str	r1, [r6, #0]
 801116c:	0606      	lsls	r6, r0, #24
 801116e:	d501      	bpl.n	8011174 <_printf_i+0xbc>
 8011170:	681d      	ldr	r5, [r3, #0]
 8011172:	e003      	b.n	801117c <_printf_i+0xc4>
 8011174:	0645      	lsls	r5, r0, #25
 8011176:	d5fb      	bpl.n	8011170 <_printf_i+0xb8>
 8011178:	f9b3 5000 	ldrsh.w	r5, [r3]
 801117c:	2d00      	cmp	r5, #0
 801117e:	da03      	bge.n	8011188 <_printf_i+0xd0>
 8011180:	232d      	movs	r3, #45	@ 0x2d
 8011182:	426d      	negs	r5, r5
 8011184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011188:	4859      	ldr	r0, [pc, #356]	@ (80112f0 <_printf_i+0x238>)
 801118a:	230a      	movs	r3, #10
 801118c:	e011      	b.n	80111b2 <_printf_i+0xfa>
 801118e:	6821      	ldr	r1, [r4, #0]
 8011190:	6833      	ldr	r3, [r6, #0]
 8011192:	0608      	lsls	r0, r1, #24
 8011194:	f853 5b04 	ldr.w	r5, [r3], #4
 8011198:	d402      	bmi.n	80111a0 <_printf_i+0xe8>
 801119a:	0649      	lsls	r1, r1, #25
 801119c:	bf48      	it	mi
 801119e:	b2ad      	uxthmi	r5, r5
 80111a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80111a2:	4853      	ldr	r0, [pc, #332]	@ (80112f0 <_printf_i+0x238>)
 80111a4:	6033      	str	r3, [r6, #0]
 80111a6:	bf14      	ite	ne
 80111a8:	230a      	movne	r3, #10
 80111aa:	2308      	moveq	r3, #8
 80111ac:	2100      	movs	r1, #0
 80111ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80111b2:	6866      	ldr	r6, [r4, #4]
 80111b4:	60a6      	str	r6, [r4, #8]
 80111b6:	2e00      	cmp	r6, #0
 80111b8:	bfa2      	ittt	ge
 80111ba:	6821      	ldrge	r1, [r4, #0]
 80111bc:	f021 0104 	bicge.w	r1, r1, #4
 80111c0:	6021      	strge	r1, [r4, #0]
 80111c2:	b90d      	cbnz	r5, 80111c8 <_printf_i+0x110>
 80111c4:	2e00      	cmp	r6, #0
 80111c6:	d04b      	beq.n	8011260 <_printf_i+0x1a8>
 80111c8:	4616      	mov	r6, r2
 80111ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80111ce:	fb03 5711 	mls	r7, r3, r1, r5
 80111d2:	5dc7      	ldrb	r7, [r0, r7]
 80111d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80111d8:	462f      	mov	r7, r5
 80111da:	42bb      	cmp	r3, r7
 80111dc:	460d      	mov	r5, r1
 80111de:	d9f4      	bls.n	80111ca <_printf_i+0x112>
 80111e0:	2b08      	cmp	r3, #8
 80111e2:	d10b      	bne.n	80111fc <_printf_i+0x144>
 80111e4:	6823      	ldr	r3, [r4, #0]
 80111e6:	07df      	lsls	r7, r3, #31
 80111e8:	d508      	bpl.n	80111fc <_printf_i+0x144>
 80111ea:	6923      	ldr	r3, [r4, #16]
 80111ec:	6861      	ldr	r1, [r4, #4]
 80111ee:	4299      	cmp	r1, r3
 80111f0:	bfde      	ittt	le
 80111f2:	2330      	movle	r3, #48	@ 0x30
 80111f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80111f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80111fc:	1b92      	subs	r2, r2, r6
 80111fe:	6122      	str	r2, [r4, #16]
 8011200:	f8cd a000 	str.w	sl, [sp]
 8011204:	464b      	mov	r3, r9
 8011206:	aa03      	add	r2, sp, #12
 8011208:	4621      	mov	r1, r4
 801120a:	4640      	mov	r0, r8
 801120c:	f7ff fee6 	bl	8010fdc <_printf_common>
 8011210:	3001      	adds	r0, #1
 8011212:	d14a      	bne.n	80112aa <_printf_i+0x1f2>
 8011214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011218:	b004      	add	sp, #16
 801121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801121e:	6823      	ldr	r3, [r4, #0]
 8011220:	f043 0320 	orr.w	r3, r3, #32
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	4833      	ldr	r0, [pc, #204]	@ (80112f4 <_printf_i+0x23c>)
 8011228:	2778      	movs	r7, #120	@ 0x78
 801122a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801122e:	6823      	ldr	r3, [r4, #0]
 8011230:	6831      	ldr	r1, [r6, #0]
 8011232:	061f      	lsls	r7, r3, #24
 8011234:	f851 5b04 	ldr.w	r5, [r1], #4
 8011238:	d402      	bmi.n	8011240 <_printf_i+0x188>
 801123a:	065f      	lsls	r7, r3, #25
 801123c:	bf48      	it	mi
 801123e:	b2ad      	uxthmi	r5, r5
 8011240:	6031      	str	r1, [r6, #0]
 8011242:	07d9      	lsls	r1, r3, #31
 8011244:	bf44      	itt	mi
 8011246:	f043 0320 	orrmi.w	r3, r3, #32
 801124a:	6023      	strmi	r3, [r4, #0]
 801124c:	b11d      	cbz	r5, 8011256 <_printf_i+0x19e>
 801124e:	2310      	movs	r3, #16
 8011250:	e7ac      	b.n	80111ac <_printf_i+0xf4>
 8011252:	4827      	ldr	r0, [pc, #156]	@ (80112f0 <_printf_i+0x238>)
 8011254:	e7e9      	b.n	801122a <_printf_i+0x172>
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	f023 0320 	bic.w	r3, r3, #32
 801125c:	6023      	str	r3, [r4, #0]
 801125e:	e7f6      	b.n	801124e <_printf_i+0x196>
 8011260:	4616      	mov	r6, r2
 8011262:	e7bd      	b.n	80111e0 <_printf_i+0x128>
 8011264:	6833      	ldr	r3, [r6, #0]
 8011266:	6825      	ldr	r5, [r4, #0]
 8011268:	6961      	ldr	r1, [r4, #20]
 801126a:	1d18      	adds	r0, r3, #4
 801126c:	6030      	str	r0, [r6, #0]
 801126e:	062e      	lsls	r6, r5, #24
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	d501      	bpl.n	8011278 <_printf_i+0x1c0>
 8011274:	6019      	str	r1, [r3, #0]
 8011276:	e002      	b.n	801127e <_printf_i+0x1c6>
 8011278:	0668      	lsls	r0, r5, #25
 801127a:	d5fb      	bpl.n	8011274 <_printf_i+0x1bc>
 801127c:	8019      	strh	r1, [r3, #0]
 801127e:	2300      	movs	r3, #0
 8011280:	6123      	str	r3, [r4, #16]
 8011282:	4616      	mov	r6, r2
 8011284:	e7bc      	b.n	8011200 <_printf_i+0x148>
 8011286:	6833      	ldr	r3, [r6, #0]
 8011288:	1d1a      	adds	r2, r3, #4
 801128a:	6032      	str	r2, [r6, #0]
 801128c:	681e      	ldr	r6, [r3, #0]
 801128e:	6862      	ldr	r2, [r4, #4]
 8011290:	2100      	movs	r1, #0
 8011292:	4630      	mov	r0, r6
 8011294:	f7ee ffc4 	bl	8000220 <memchr>
 8011298:	b108      	cbz	r0, 801129e <_printf_i+0x1e6>
 801129a:	1b80      	subs	r0, r0, r6
 801129c:	6060      	str	r0, [r4, #4]
 801129e:	6863      	ldr	r3, [r4, #4]
 80112a0:	6123      	str	r3, [r4, #16]
 80112a2:	2300      	movs	r3, #0
 80112a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112a8:	e7aa      	b.n	8011200 <_printf_i+0x148>
 80112aa:	6923      	ldr	r3, [r4, #16]
 80112ac:	4632      	mov	r2, r6
 80112ae:	4649      	mov	r1, r9
 80112b0:	4640      	mov	r0, r8
 80112b2:	47d0      	blx	sl
 80112b4:	3001      	adds	r0, #1
 80112b6:	d0ad      	beq.n	8011214 <_printf_i+0x15c>
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	079b      	lsls	r3, r3, #30
 80112bc:	d413      	bmi.n	80112e6 <_printf_i+0x22e>
 80112be:	68e0      	ldr	r0, [r4, #12]
 80112c0:	9b03      	ldr	r3, [sp, #12]
 80112c2:	4298      	cmp	r0, r3
 80112c4:	bfb8      	it	lt
 80112c6:	4618      	movlt	r0, r3
 80112c8:	e7a6      	b.n	8011218 <_printf_i+0x160>
 80112ca:	2301      	movs	r3, #1
 80112cc:	4632      	mov	r2, r6
 80112ce:	4649      	mov	r1, r9
 80112d0:	4640      	mov	r0, r8
 80112d2:	47d0      	blx	sl
 80112d4:	3001      	adds	r0, #1
 80112d6:	d09d      	beq.n	8011214 <_printf_i+0x15c>
 80112d8:	3501      	adds	r5, #1
 80112da:	68e3      	ldr	r3, [r4, #12]
 80112dc:	9903      	ldr	r1, [sp, #12]
 80112de:	1a5b      	subs	r3, r3, r1
 80112e0:	42ab      	cmp	r3, r5
 80112e2:	dcf2      	bgt.n	80112ca <_printf_i+0x212>
 80112e4:	e7eb      	b.n	80112be <_printf_i+0x206>
 80112e6:	2500      	movs	r5, #0
 80112e8:	f104 0619 	add.w	r6, r4, #25
 80112ec:	e7f5      	b.n	80112da <_printf_i+0x222>
 80112ee:	bf00      	nop
 80112f0:	08013891 	.word	0x08013891
 80112f4:	080138a2 	.word	0x080138a2

080112f8 <memmove>:
 80112f8:	4288      	cmp	r0, r1
 80112fa:	b510      	push	{r4, lr}
 80112fc:	eb01 0402 	add.w	r4, r1, r2
 8011300:	d902      	bls.n	8011308 <memmove+0x10>
 8011302:	4284      	cmp	r4, r0
 8011304:	4623      	mov	r3, r4
 8011306:	d807      	bhi.n	8011318 <memmove+0x20>
 8011308:	1e43      	subs	r3, r0, #1
 801130a:	42a1      	cmp	r1, r4
 801130c:	d008      	beq.n	8011320 <memmove+0x28>
 801130e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011316:	e7f8      	b.n	801130a <memmove+0x12>
 8011318:	4402      	add	r2, r0
 801131a:	4601      	mov	r1, r0
 801131c:	428a      	cmp	r2, r1
 801131e:	d100      	bne.n	8011322 <memmove+0x2a>
 8011320:	bd10      	pop	{r4, pc}
 8011322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801132a:	e7f7      	b.n	801131c <memmove+0x24>

0801132c <_sbrk_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d06      	ldr	r5, [pc, #24]	@ (8011348 <_sbrk_r+0x1c>)
 8011330:	2300      	movs	r3, #0
 8011332:	4604      	mov	r4, r0
 8011334:	4608      	mov	r0, r1
 8011336:	602b      	str	r3, [r5, #0]
 8011338:	f7f7 ff94 	bl	8009264 <_sbrk>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_sbrk_r+0x1a>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_sbrk_r+0x1a>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	20008530 	.word	0x20008530

0801134c <_init>:
 801134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801134e:	bf00      	nop
 8011350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011352:	bc08      	pop	{r3}
 8011354:	469e      	mov	lr, r3
 8011356:	4770      	bx	lr

08011358 <_fini>:
 8011358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135a:	bf00      	nop
 801135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801135e:	bc08      	pop	{r3}
 8011360:	469e      	mov	lr, r3
 8011362:	4770      	bx	lr
